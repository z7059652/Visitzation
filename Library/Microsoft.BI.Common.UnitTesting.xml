<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.BI.Common.UnitTesting</name>
    </assembly>
    <members>
        <member name="T:Microsoft.BI.Common.UnitTesting.CollectionValidate">
            <summary>
            Verifies conditions in unit tests on enumerables using true/false propositions.
            </summary>
            <remarks>
            This class is not static so that consumers can subclass it to add their own
            validation methods, if desired.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if there exists one element in the collection
            for which the specified type is not found in its inheritance hierarchy.
            </summary>
            <param name="collection">The collection to verify.</param>
            <param name="type">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String)">
            <summary>
            Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if there exists one element in the collection
            for which the specified type is not found in its inheritance hierarchy. Displays a message if the assertion fails.
            </summary>
            <param name="collection">The collection to verify.</param>
            <param name="type">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection"/>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if there exists one element in the collection
            for which the specified type is not found in its inheritance hierarchy. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="collection">The collection to verify.</param>
            <param name="type">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection"/>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreNotNull(System.Collections.IEnumerable)">
            <summary>
            Verifies that all elements in the specified collection are not <c>null</c>. The assertion fails if any element is <c>null</c>.
            </summary>
            <param name="collection">The collection in which to search for elements that are <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreNotNull(System.Collections.IEnumerable,System.String)">
            <summary>
            Verifies that all elements in the specified collection are not <c>null</c>. The assertion fails if any element is <c>null</c>.
            Displays a message if the assertion fails.
            </summary>
            <param name="collection">The collection in which to search for elements that are <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreNotNull(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Verifies that all elements in the specified collection are not <c>null</c>. The assertion fails if any element is <c>null</c>.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="collection">The collection in which to search for elements that are <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreUnique(System.Collections.IEnumerable)">
            <summary>
            Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal.
            </summary>
            <param name="collection">The collection in which to search for duplicate elements.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreUnique(System.Collections.IEnumerable,System.String)">
            <summary>
            Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal.
            Displays a message if the assertion fails.
            </summary>
            <param name="collection">The collection in which to search for duplicate elements.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AllItemsAreUnique(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="collection">The collection in which to search for duplicate elements.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Verifies that two specified collections are equal. The assertion fails if the collections are not equal.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the
            assertion fails.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Verifies that two specified collections are not equal. The assertion fails if the collections are equal.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test does not expect to match
            <paramref name="actual"/>.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the
            assertion fails.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test does not expect to match
            <paramref name="actual"/>.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test does not expect to match
            <paramref name="actual"/>.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test does not expect to match
            <paramref name="actual"/>.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the unit test does not expect to match
            <paramref name="actual"/>.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection.
            </summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.Contains(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection. Displays a message
            if the assertion fails.
            </summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.Contains(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection. Displays a message
            if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.DoesNotContain(System.Collections.IEnumerable,System.Object)">
            <summary>
            Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection.
            </summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection. Displays a message
            if the assertion fails.
            </summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection. Displays a message
            if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Verifies that the first collection is a subset of the second collection.
            </summary>
            <param name="subset">The collection expected to not be a subset of <paramref name="superset"/>.</param>
            <param name="superset">The collection expected to not be a superset of <paramref name="subset"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Verifies that the first collection is a subset of the second collection. Displays a message
            if the assertion fails.
            </summary>
            <param name="subset">The collection expected to not be a subset of <paramref name="superset"/>.</param>
            <param name="superset">The collection expected to not be a superset of <paramref name="subset"/>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Verifies that the first collection is a subset of the second collection. Displays a message
            if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="subset">The collection expected to not be a subset of <paramref name="superset"/>.</param>
            <param name="superset">The collection expected to not be a superset of <paramref name="subset"/>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Verifies that the first collection is a subset of the second collection.
            </summary>
            <param name="subset">The collection expected to be a subset of <paramref name="superset"/>.</param>
            <param name="superset">The collection expected to be a superset of <paramref name="subset"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Verifies that the first collection is a subset of the second collection. Displays a message
            if the assertion fails.
            </summary>
            <param name="subset">The collection expected to be a subset of <paramref name="superset"/>.</param>
            <param name="superset">The collection expected to be a superset of <paramref name="subset"/>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CollectionValidate.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Verifies that the first collection is a subset of the second collection. Displays a message
            if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="subset">The collection expected to be a subset of <paramref name="superset"/>.</param>
            <param name="superset">The collection expected to be a superset of <paramref name="subset"/>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.CompareToCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents comparisons.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.CompareToCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CompareToCondition.#ctor(System.Object,Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.CompareToCondition"/> class.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="op">The type of comparison.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.CompareToCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.CompareToCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> equals the expected value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents comparisons.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ComparisonCondition.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ComparisonCondition.Using(System.Collections.IComparer)">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition"/> should use the specified <see cref="T:System.Collections.IComparer"/>
            when evaluating.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> to use when comparing values using this <see cref="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ComparisonCondition.Using``1(System.Comparison{``0})">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition"/> should use the specified <see cref="T:System.Comparison`1"/>
            when evaluating.
            </summary>
            <param name="comparer">The <see cref="T:System.Comparison`1"/> to use when comparing values using this <see cref="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.ComparisonCondition"/> instance.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.ComparisonCondition.Expected">
            <summary>
            The expected value of the condition.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.ComparisonCondition.Comparer">
            <summary>
            The <see cref="T:Microsoft.BI.Common.UnitTesting.ValidateComparer"/> to use when making comparisons.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult">
            <summary>
            The class that is returned when an <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> is evaluated that contains information about
            the evaluation result.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.ActualValue">
            <summary>
            Gets the actual value associated with this condition.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.Condition">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> this <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult"/> applies to.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the condition evaluation was successful.
            </summary>
            <remarks>
            If <see cref="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.IsSuccess"/> is <c>false</c>, <see cref="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.Message"/> will contain additional information
            as to why the condition was not satisfied.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.Message">
            <summary>
            Gets or sets a message indicating the reason that a condition's evaluation was not successful.
            </summary>
            <remarks>
            This property's value is <c>null</c> when <see cref="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.IsSuccess"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.ExpectedMessage">
            <summary>
            Gets the string reported in the "Expected:" clause of the validate result.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.ActualMessage">
            <summary>
            Gets the string reported in the "Actual:" clause of the validate result.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.#ctor(Microsoft.BI.Common.UnitTesting.ICondition,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult"/> class.
            </summary>
            <param name="condition">The condition associated with this <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult"/>.</param>
            <param name="actualValue">The actual value to which the <see cref="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.Condition"/> was applied.</param>
            <param name="isSuccess">Whether the condition evaluation was successful.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.#ctor(Microsoft.BI.Common.UnitTesting.ICondition,System.Object,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult"/> class.
            </summary>
            <param name="condition">The condition associated with this <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult"/>.</param>
            <param name="actualValue">The actual value to which the <see cref="P:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult.Condition"/> was applied.</param>
            <param name="isSuccess">Whether the condition evaluation was successful.</param>
            <param name="message">The message to display as the actual value if the condition is unsuccessful.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.OrderedCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents a condition checking that a collection is ordered.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.OrderedCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.OrderedCondition.Descending">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.OrderedCondition"/> should expect elements in descending order.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OrderedCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.OrderedCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> equals the expected value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.SubsetCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents a collection being a subset of another collection.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.SubsetCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.SubsetCondition.ExpectedMessageNegated">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages for negated conditions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.SubsetCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualToCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> equals the expected value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.UniqueCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents collection uniqueness.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.UniqueCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.UniqueCondition.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.UniqueCondition"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.UniqueCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualToCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> equals the expected value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.EqualityCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents equality.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualityCondition.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.EqualityCondition.IgnoreCase">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> should ignore case when comparing strings.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualityCondition.Using(System.Collections.IEqualityComparer)">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> should use the specified <see cref="T:System.Collections.IEqualityComparer"/>
            when evaluating.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IEqualityComparer"/> to use when comparing values using this <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualityCondition.Using(System.Collections.IComparer)">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> should use the specified <see cref="T:System.Collections.IComparer"/>
            when evaluating.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> to use when comparing values using this <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualityCondition.Using``1(System.Comparison{``0})">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> should use the specified <see cref="T:System.Comparison`1"/>
            when evaluating.
            </summary>
            <param name="comparer">The <see cref="T:System.Comparison`1"/> to use when comparing values using this <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualityCondition.Within(System.Single)">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> should use the specified delta when comparing floating point numbers.
            </summary>
            <param name="delta">The delta to use when comparing floating-point numbers using the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualityCondition.Within(System.Double)">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> should use the specified delta when comparing floating point numbers.
            </summary>
            <param name="delta">The delta to use when comparing floating-point numbers using the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualityCondition.Within(System.TimeSpan)">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> should use the specified delta when comparing <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="resolution">The delta to use when comparing <see cref="T:System.DateTime"/> values using the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/> instance.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.EqualityCondition.Expected">
            <summary>
            The expected value of the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualityCondition"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.EqualityCondition.Comparer">
            <summary>
            The <see cref="T:Microsoft.BI.Common.UnitTesting.ValidateEqualityComparer"/> to use when comparing objects.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.EqualToCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents equality.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.EqualToCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualToCondition.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualToCondition"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EqualToCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.EqualToCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> equals the expected value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.ICondition">
            <summary>
            An interface that represents a testable condition that can be evaluated in a coded test.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ICondition.Builder">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionBuilder"/> associated with the <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ICondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the expected value of the condition in failed validate messages.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ICondition.ExpectedMessageNegated">
            <summary>
            Gets a string that is used to describe the expected value of the condition in failed validate messages for negated conditions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ICondition.Evaluate(System.Object)">
            <summary>
            Evaluates the condition, returning a value indicating whether the condition passed or not.
            </summary>
            <param name="actual">The actual value associated with the condition.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionEvaluateResult"/> containing information on whether <paramref name="actual"/>
            satisified the condition.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.Condition">
            <summary>
            The base class for many conditions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Condition.Builder">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionBuilder"/> associated with the <see cref="T:Microsoft.BI.Common.UnitTesting.Condition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Condition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Condition.ExpectedMessageNegated">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages for negated conditions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Condition.Evaluate(System.Object)">
            <summary>
            Evaluates the condition, returning a value indicating whether the condition passed or not.
            </summary>
            <param name="actual">The actual value associated with the condition.</param>
            <returns><c>true</c> if the condition passed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.IReduceable">
            <summary>
            Defines an interface that contains a reduce method.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.IReduceable.Reduce">
            <summary>
            Performs a reduction.
            </summary>
            <returns>The reduced <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.RangeCondition">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> that represents comparisons.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.RangeCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed assert messages.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.RangeCondition.#ctor(System.IComparable,System.IComparable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.RangeCondition"/> class.
            </summary>
            <param name="low">The low end of the range.</param>
            <param name="high">The high end of the range.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.RangeCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.RangeCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> is greater than or equal to <see cref="F:Microsoft.BI.Common.UnitTesting.RangeCondition.Low"/> and less than or equal to <see cref="F:Microsoft.BI.Common.UnitTesting.RangeCondition.High"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.EndsWithCondition">
            <summary>
            A condition that checks whether a string ends with another string.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.EndsWithCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed validate messages.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.EndsWithCondition.ExpectedMessageNegated">
            <summary>
            Gets a string that is used to describe the condition in failed validate messages for negated conditions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EndsWithCondition.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.EndsWithCondition"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.EndsWithCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.StartsWithCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> ends with the expected value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.StartsWithCondition">
            <summary>
            A condition that checks whether a string starts with another string.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.StartsWithCondition.ExpectedMessage">
            <summary>
            Gets a string that is used to describe the condition in failed validate messages.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.StartsWithCondition.ExpectedMessageNegated">
            <summary>
            Gets a string that is used to describe the condition in failed validate messages for negated conditions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StartsWithCondition.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.StartsWithCondition"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StartsWithCondition.Evaluate(System.Object)">
            <summary>
            Evaluates the <see cref="T:Microsoft.BI.Common.UnitTesting.StartsWithCondition"/> using the specified actual value.
            </summary>
            <param name="actual">The actual value to compare.</param>
            <returns><c>true</c> if <paramref name="actual"/> starts with the expected value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.StringEqualsCondition">
            <summary>
            A condition that checks whether a string equals some part of another string.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.StringEqualsCondition.IgnoreCase">
            <summary>
            Specifies that the <see cref="T:Microsoft.BI.Common.UnitTesting.StringEqualsCondition"/> should ignore case when comparing strings.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.StringEqualsCondition.CaseSensitive">
            <summary>
            Gets a value indicating whether the string comparisons are case-sensitive or not.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.StringEqualsCondition.Expected">
            <summary>
            Gets the expected value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.Is">
            <summary>
            Provides properties and methods that supply conditions for use in validations.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.Empty">
            <summary>
            Returns a condition that tests if an enumerable collection is empty.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.False">
            <summary>
            Returns a condition that tests whether a value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.NaN">
            <summary>
            Returns a condition that tests whether a floating-point value is NaN.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.Negative">
            <summary>
            Returns a condition that tests whether a numeric value is negative.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.Not">
            <summary>
            Returns a condition that negates any following condition.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.Null">
            <summary>
            Returns a condition that tests whether a value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.Ordered">
            <summary>
            Returns a condition that tests whether an enumerable collection is ordered.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.Positive">
            <summary>
            Returns a condition that tests whether a numeric value is positive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.True">
            <summary>
            Returns a condition that tests whether a value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Is.Unique">
            <summary>
            Returns a condition that tests whether an enumerable collection contains all unique items.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.AssignableFrom``1">
            <summary>
            Returns a condition that tests whether an object is assignable from the specified type.
            </summary>
            <typeparam name="T">The type to test whether the object is assignable to.</typeparam>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.AssignableFrom(System.Type)">
            <summary>
            Returns a condition that tests whether an object is assignable from the specified type.
            </summary>
            <param name="expected">The type to test whether the object is assignable to.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.EqualTo(System.Object)">
            <summary>
            Returns a condition that tests for equality with the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.GreaterThan(System.Object)">
            <summary>
            Returns a condition that tests whether a value is greater than the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a condition that tests whether a value is greater than or equal to the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a condition that tests whether a value is between two specified values.
            </summary>
            <param name="low">The low end of the range.</param>
            <param name="high">The high end of the range.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.InstanceOf``1">
            <summary>
            Returns a condition that tests whether an object is an instance of the specified type.
            </summary>
            <typeparam name="T">The type to test whether the object is an instance of.</typeparam>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.InstanceOf(System.Type)">
            <summary>
            Returns a condition that tests whether an object is an instance of the specified type.
            </summary>
            <param name="expected">The type to test whether the object is an instance of.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.LessThan(System.Object)">
            <summary>
            Returns a condition that tests whether a value is less than the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a condition that tests whether a value is less than or equal to the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a condition that tests whether an enumerable collection is a subset of the specified enumerable collection.
            </summary>
            <param name="expected">The enumerable collection that is expected to be the superset.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Is.SameAs(System.Object)">
            <summary>
            Returns a condition that tests whether an object is the same as the specified object.
            </summary>
            <param name="expected">The expected object.</param>
            <returns>The condition.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.Has">
            <summary>
            Provides properties and methods that supply conditions for use in validations.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Has.AllItems">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if all of them succeed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Has.AnyItem">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if any of them succeed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Has.No">
            <summary>
            Returns a condition that negates any following condition.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.Has.NoItem">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if none of them suceed.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Has.Attribute(System.Type)">
            <summary>
            Returns a condition that tests for the presence of an attribute with the specified type on an object.
            </summary>
            <param name="attributeType">The type of the attribute to look for.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Has.Item(System.Object)">
            <summary>
            Returns a condition that tests for the presence an item in an enumerable collection.
            </summary>
            <param name="expected">The item to find in the collection.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Has.Exactly(System.Int32)">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if the specified number of them succeed.
            </summary>
            <param name="expectedCount">The expected number of matches.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Has.Field(System.String)">
            <summary>
            Returns a condition that tests for the presence of a field, or that applies the following condition to
            the specified field.
            </summary>
            <param name="name">The name of the field.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Has.Property(System.String)">
            <summary>
            Returns a condition that tests for the presence of a property, or that applies the following condition to
            the specified property.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The condition.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.ConditionBuilder">
            <summary>
            A class used to build compound conditions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.AllItems">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if all of them succeed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.AnyItem">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if any of them succeed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Empty">
            <summary>
            Returns a condition that tests if an enumerable collection is empty.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.False">
            <summary>
            Returns a condition that tests whether a value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.NaN">
            <summary>
            Returns a condition that tests whether a floating-point value is NaN.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Negative">
            <summary>
            Returns a condition that tests whether a numeric value is negative.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.NoItem">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if none of them suceed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Not">
            <summary>
            Returns a condition that negates any following condition.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Null">
            <summary>
            Returns a condition that tests whether a value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Ordered">
            <summary>
            Returns a condition that tests whether an enumerable collection contains all unique items.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Positive">
            <summary>
            Returns a condition that tests whether a numeric value is positive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.True">
            <summary>
            Returns a condition that tests whether a value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Unique">
            <summary>
            Returns a condition that tests whether an enumerable collection contains all unique items.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.AssignableFrom``1">
            <summary>
            Returns a condition that tests whether an object is assignable from the specified type.
            </summary>
            <typeparam name="T">The type to test whether the object is assignable to.</typeparam>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.AssignableFrom(System.Type)">
            <summary>
            Returns a condition that tests whether an object is assignable from the specified type.
            </summary>
            <param name="expected">The type to test whether the object is assignable to.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Attribute(System.Type)">
            <summary>
            Returns a condition that tests for the presence of an attribute with the specified type on an object.
            </summary>
            <param name="attributeType">The type of the attribute to look for.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.EqualTo(System.Object)">
            <summary>
            Returns a condition that tests for equality with the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Exactly(System.Int32)">
            <summary>
            Returns a condition that applies the following condition to all elements in an enumerable collection and succeeds
            if the specified number of them succeed.
            </summary>
            <param name="expectedCount">The expected number of matches.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Field(System.String)">
            <summary>
            Returns a condition that tests for the presence of a field, or that applies the following condition to
            the specified field.
            </summary>
            <param name="name">The name of the field.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.GreaterThan(System.Object)">
            <summary>
            Returns a condition that tests whether a value is greater than the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a condition that tests whether a value is greater than or equal to the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a condition that tests whether a value is between two specified values.
            </summary>
            <param name="low">The low end of the range.</param>
            <param name="high">The high end of the range.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.InstanceOf``1">
            <summary>
            Returns a condition that tests whether an object is an instance of the specified type.
            </summary>
            <typeparam name="T">The type to test whether the object is an instance of.</typeparam>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.InstanceOf(System.Type)">
            <summary>
            Returns a condition that tests whether an object is an instance of the specified type.
            </summary>
            <param name="expected">The type to test whether the object is an instance of.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.LessThan(System.Object)">
            <summary>
            Returns a condition that tests whether a value is less than the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a condition that tests whether a value is less than or equal to the specified value.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Property(System.String)">
            <summary>
            Returns a condition that tests for the presence of a property, or that applies the following condition to
            the specified property.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a condition that tests whether an enumerable collection is a subset of the specified enumerable collection.
            </summary>
            <param name="expected">The enumerable collection that is expected to be the superset.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.SameAs(System.Object)">
            <summary>
            Returns a condition that tests whether an object is the same as the specified object.
            </summary>
            <param name="expected">The expected object.</param>
            <returns>The condition.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Conditions">
            <summary>
            Gets a stack containing the current conditions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Operators">
            <summary>
            Gets a stack containing the current operators.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Append(Microsoft.BI.Common.UnitTesting.IOperator)">
            <summary>
            Appends an operator to the operator stack.
            </summary>
            <param name="op">The operator to append.</param>
            <returns>The appended operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Append(Microsoft.BI.Common.UnitTesting.ICondition)">
            <summary>
            Appends a condition to the condition stack.
            </summary>
            <param name="condition">The condition to append.</param>
            <returns>The appended condition.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Microsoft#BI#Common#UnitTesting#IReduceable#Reduce">
            <summary>
            Reduces the <see cref="T:Microsoft.BI.Common.UnitTesting.ConditionBuilder"/> and produces an evaluatable condition based
            on the current contents of the <see cref="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Conditions"/> and <see cref="P:Microsoft.BI.Common.UnitTesting.ConditionBuilder.Operators"/> stacks.
            </summary>
            <returns>An evaluatable condition.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.IOperator">
            <summary>
            An interface representing a validation operator.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.IOperator.Reduce(System.Collections.Generic.Stack{Microsoft.BI.Common.UnitTesting.ICondition})">
            <summary>
            Applies the operator to a stack of conditions and pushes the result back onto the stack.
            </summary>
            <param name="conditions">The stack containing the current set of conditions.</param>
            <exception cref="T:System.InvalidOperationException">The current state of <paramref name="conditions"/> is invalid for the current operator.</exception>
            <remarks>
            <para>
            Implementers may consume zero or more <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> objects from <paramref name="conditions"/> and
            must push a single <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> back onto the stack before returning.
            </para>
            <para>
            This method should throw an <see cref="T:System.InvalidOperationException"/> if the state of <paramref name="conditions"/> is invalid based on the
            operator's expectations.  For example, if an operator expects two operands but <paramref name="conditions"/> only contains a single item,
            the stack is invalid and the method should throw an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.StringValidate">
            <summary>
            Verifies conditions in unit tests on string using true/false propositions.
            </summary>
            <remarks>
            This class is not static so that consumers can subclass it to add their own
            validation methods, if desired.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.Contains(System.String,System.String)">
            <summary>
            Verifies that the first string contains the second string. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to contain <paramref name="substring"/>.</param>
            <param name="substring">The string expected to occur within <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.Contains(System.String,System.String,System.String)">
            <summary>
            Verifies that the first string contains the second string. Displays a message if the assertion fails.
            This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to contain <paramref name="substring"/>.</param>
            <param name="substring">The string expected to occur within <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that the first string contains the second string. Displays a message if the assertion fails,
            and applies the specified formatting to it. This method is case sensitive. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to contain <paramref name="substring"/>.</param>
            <param name="substring">The string expected to occur within <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotContain(System.String,System.String)">
            <summary>
            Verifies that the first string does not contain the second string. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to contain <paramref name="substring"/>.</param>
            <param name="substring">The string expected to occur within <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotContain(System.String,System.String,System.String)">
            <summary>
            Verifies that the first string does not contain the second string. Displays a message if the assertion fails.
            This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to contain <paramref name="substring"/>.</param>
            <param name="substring">The string expected to occur within <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that the first string does not contain the second string. Displays a message if the assertion fails,
            and applies the specified formatting to it. This method is case sensitive. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to contain <paramref name="substring"/>.</param>
            <param name="substring">The string expected to occur within <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotEndWith(System.String,System.String)">
            <summary>
            Verifies that the first string does not end with the second string. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to not end with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to not be a suffix of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotEndWith(System.String,System.String,System.String)">
            <summary>
            Verifies that the first string does not end with the second string. Displays a message if the assertion fails. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to not end with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to not be a suffix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotEndWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that the first string does not end with the second string. Displays a message if the assertion fails, and applies the
            specified formatting to it. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to not end with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to not be a suffix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Verifies that the specified string does not match the regular expression.
            </summary>
            <param name="value">The string that is not expected to match <paramref name="pattern"/>.</param>
            <param name="pattern">The regular expression that <paramref name="value"/> is not expected to match.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that the specified string does not match the regular expression. Displays a message if the assertion fails.
            </summary>
            <param name="value">The string that is not expected to match <paramref name="pattern"/>.</param>
            <param name="pattern">The regular expression that <paramref name="value"/> is not expected to match.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Verifies that the specified string does not match the regular expression. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The string that is not expected to match <paramref name="pattern"/>.</param>
            <param name="pattern">The regular expression that <paramref name="value"/> is not expected to match.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotStartWith(System.String,System.String)">
            <summary>
            Verifies that the first string does not begin with the second string. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to not begin with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to not be a prefix of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotStartWith(System.String,System.String,System.String)">
            <summary>
            Verifies that the first string does not begin with the second string. Displays a message if the assertion fails. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to not begin with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to not be a prefix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.DoesNotStartWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that the first string does not begin with the second string. Displays a message if the assertion fails, and applies the
            specified formatting to it. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to not begin with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to not be a prefix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.EndsWith(System.String,System.String)">
            <summary>
            Verifies that the first string ends with the second string. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to end with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to be a suffix of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.EndsWith(System.String,System.String,System.String)">
            <summary>
            Verifies that the first string ends with the second string. Displays a message if the assertion fails. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to end with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to be a suffix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that the first string ends with the second string. Displays a message if the assertion fails, and applies the
            specified formatting to it. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to end with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to be a suffix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.Matches(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Verifies that the specified string matches the regular expression.
            </summary>
            <param name="value">The string that is expected to match <paramref name="pattern"/>.</param>
            <param name="pattern">The regular expression that <paramref name="value"/> is expected to match.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.Matches(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that the specified string matches the regular expression. Displays a message if the assertion fails.
            </summary>
            <param name="value">The string that is expected to match <paramref name="pattern"/>.</param>
            <param name="pattern">The regular expression that <paramref name="value"/> is expected to match.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Verifies that the specified string matches the regular expression. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The string that is expected to match <paramref name="pattern"/>.</param>
            <param name="pattern">The regular expression that <paramref name="value"/> is expected to match.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.StartsWith(System.String,System.String)">
            <summary>
            Verifies that the first string begins with the second string. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to begin with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to be a prefix of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.StartsWith(System.String,System.String,System.String)">
            <summary>
            Verifies that the first string begins with the second string. Displays a message if the assertion fails. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to begin with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to be a prefix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.StringValidate.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that the first string begins with the second string. Displays a message if the assertion fails, and applies the
            specified formatting to it. This method is case sensitive.
            </summary>
            <param name="value">The string that is expected to begin with <paramref name="substring"/>.</param>
            <param name="substring">The string expected to be a prefix of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be see in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.Validate">
            <summary>
            Verifies conditions in unit tests using true/false propositions.
            </summary>
            <remarks>
            This class is not static so that consumers can subclass it to add their own
            validation methods, if desired.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual``1(``0,``0)">
            <summary>
            Verifies that two specified generic type data are equal by using the equality operator.
            The assertion fails if they are not equal.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual``1(``0,``0,System.String)">
            <summary>
            Verifies that two specified generic type data are equal by using the equality operator.
            The assertion fails if they are not equal. Displays a message if the assertion fails.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Verifies that two specified generic type data are equal by using the equality operator. The assertion fails if they are not equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two specified objects are equal. The assertion fails if the objects are not equal.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two specified objects are equal. The assertion fails if the objects are not equal.
            Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two specified objects are equal. The assertion fails if the objects are not equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Verifies that two specified floats are equal, or within the specified accuracy of each other. The assertion fails
            if they are not within the specified accuracy of each other.
            </summary>
            <param name="expected">The first float to compare. This is the float the unit test expects.</param>
            <param name="actual">The second float to compare. This is the float the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that two specified floats are equal, or within the specified accuracy of each other. The assertion fails
            if they are not within the specified accuracy of each other.  Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first float to compare. This is the float the unit test expects.</param>
            <param name="actual">The second float to compare. This is the float the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that two specified floats are equal, or within the specified accuracy of each other. The assertion fails
            if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies
            the specified formatting to it.
            </summary>
            <param name="expected">The first float to compare. This is the float the unit test expects.</param>
            <param name="actual">The second float to compare. This is the float the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails
            if they are not within the specified accuracy of each other.
            </summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails
            if they are not within the specified accuracy of each other.  Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails
            if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies
            the specified formatting to it.
            </summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Verifies that two specified <see cref="T:System.DateTime"/> values are equal, or within the specified accuracy of each other.
            The assertion fails if they are not within the specified accuracy of each other.
            </summary>
            <param name="expected">The first <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test produced.</param>
            <param name="resolution">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="resolution"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.DateTime,System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Verifies that two specified <see cref="T:System.DateTime"/> values are equal, or within the specified accuracy of each other.
            The assertion fails if they are not within the specified accuracy of each other.  Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test produced.</param>
            <param name="resolution">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="resolution"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreEqual(System.DateTime,System.DateTime,System.TimeSpan,System.String,System.Object[])">
            <summary>
            Verifies that two specified <see cref="T:System.DateTime"/> values are equal, or within the specified accuracy of each other.
            The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <param name="expected">The first <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test produced.</param>
            <param name="resolution">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="resolution"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual``1(``0,``0)">
            <summary>
            Verifies that two specified generic type data are not equal by using the equality operator.
            The assertion fails if they are not equal.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual``1(``0,``0,System.String)">
            <summary>
            Verifies that two specified generic type data are not equal by using the equality operator.
            The assertion fails if they are not equal. Displays a message if the assertion fails.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Verifies that two specified generic type data are not equal by using the equality operator. The assertion fails if they are not equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Object,System.Object)">
            <summary>
            Verifies that two specified objects are not equal. The assertion fails if the objects are not equal.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two specified objects are not equal. The assertion fails if the objects are not equal.
            Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two specified objects are not equal. The assertion fails if the objects are not equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Single,System.Single,System.Single)">
            <summary>
            Verifies that two specified floats are not equal, and not within the specified accuracy of each other. The assertion fails
            if they are equal or within the specified accuracy of each other.
            </summary>
            <param name="expected">The first float to compare. This is the float the unit test expects.</param>
            <param name="actual">The second float to compare. This is the float the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that two specified floats are not equal, and not within the specified accuracy of each other. The assertion fails
            if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first float to compare. This is the float the unit test expects.</param>
            <param name="actual">The second float to compare. This is the float the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that two specified floats are not equal, and not within the specified accuracy of each other. The assertion fails
            if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies
            the specified formatting to it.
            </summary>
            <param name="expected">The first float to compare. This is the float the unit test expects.</param>
            <param name="actual">The second float to compare. This is the float the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails
            if they are equal or within the specified accuracy of each other.
            </summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails
            if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails
            if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies
            the specified formatting to it.
            </summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="delta"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Verifies that two specified <see cref="T:System.DateTime"/> values are not equal, and not within the specified accuracy of each other.
            The assertion fails if they are equal or within the specified accuracy of each other.
            </summary>
            <param name="expected">The first <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test produced.</param>
            <param name="resolution">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="resolution"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.DateTime,System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Verifies that two specified <see cref="T:System.DateTime"/> values are not equal, and not within the specified accuracy of each other.
            The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test produced.</param>
            <param name="resolution">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="resolution"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotEqual(System.DateTime,System.DateTime,System.TimeSpan,System.String,System.Object[])">
            <summary>
            Verifies that two specified <see cref="T:System.DateTime"/> values are not equal, and not within the specified accuracy of each other.
            The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <param name="expected">The first <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.DateTime"/> to compare. This is the <see cref="T:System.DateTime"/> the unit test produced.</param>
            <param name="resolution">The required accuracy. The assertion will fail only if <paramref name="expected"/> is different
            from <paramref name="actual"/> by more than <paramref name="resolution"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotSame(System.Object,System.Object)">
            <summary>
            Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object.
            Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreSame(System.Object,System.Object)">
            <summary>
            Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects.
            Displays a message if the assertion fails.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Catch``1(System.Action)">
            <summary>
            Verifies that a delegate throws an exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Catch``1(System.Action,System.String)">
            <summary>
            Verifies that a delegate throws an exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Catch``1(System.Action,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Catch(System.Action,System.Type)">
            <summary>
            Verifies that a delegate throws an exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Catch(System.Action,System.Type,System.String)">
            <summary>
            Verifies that a delegate throws an exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Catch(System.Action,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Fail">
            <summary>
            Fails the assertion without checking any conditions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Fail(System.String)">
            <summary>
            Fails the assertion without checking any conditions. Displays a message.
            </summary>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Fail(System.String,System.Object[])">
            <summary>
            Fails the assertion without checking any conditions. Displays a message, and applies the specified formatting to it.
            </summary>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.GreaterThan``1(``0,``0)">
            <summary>
            Verifies that the specified value is greater than another specified value. The assertion fails if it is less than or equal
            to the specified value.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.GreaterThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than another specified value. The assertion fails if it is less than or equal
            to the specified value. Displays a message if the assertion fails.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.GreaterThan``1(``0,``0,System.String,System.Object[])">
            <summary>
            Verifies that the specified value is greater than another specified value. The assertion fails if it is less than or equal
            to the specified value. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.GreaterThanEqualTo``1(``0,``0)">
            <summary>
            Verifies that the specified value is greater than or equal to another specified value. The assertion fails if it is less than
            the specified value.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.GreaterThanEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to another specified value. The assertion fails if it is less than
            the specified value. Displays a message if the assertion fails.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.GreaterThanEqualTo``1(``0,``0,System.String,System.Object[])">
            <summary>
            Verifies that the specified value is greater than or equal to another specified value. The assertion fails if it is less than
            the specified value. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Inconclusive">
            <summary>
            Indicates that the assertion cannot be verified.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Inconclusive(System.String)">
            <summary>
            Indicates that the assertion can not be verified. Displays a message.
            </summary>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Inconclusive(System.String,System.Object[])">
            <summary>
            Indicates that an assertion can not be verified. Displays a message, and applies the specified formatting to it.
            </summary>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsAssignableFrom``1(System.Object)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsAssignableFrom``1(System.Object,System.String)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <typeparam name="T">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsAssignableFrom(System.Object,System.Type)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object.
            </summary>
            <param name="value">The object to verify is of <paramref name="expectedType"/>.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <param name="value">The object to verify is of <paramref name="expectedType"/>.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsAssignableFrom(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is of <paramref name="expectedType"/>.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsFalse(System.Object)">
            <summary>
            Verifies that the specified object is <c>false</c>. The assertion fails if it is not <c>false</c>.
            </summary>
            <param name="value">The object to verify is <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsFalse(System.Object,System.String)">
            <summary>
            Verifies that the specified object is <c>false</c>. The assertion fails if it is not <c>false</c>. Displays a message if the
            assertion fails.
            </summary>
            <param name="value">The object to verify is <c>false</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsFalse(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is <c>false</c>. The assertion fails if it is not <c>false</c>. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is <c>false</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsInstanceOf``1(System.Object)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsInstanceOf``1(System.Object,System.String)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <typeparam name="T">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsInstanceOf(System.Object,System.Type)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object.
            </summary>
            <param name="value">The object to verify is of <paramref name="expectedType"/>.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsInstanceOf(System.Object,System.Type,System.String)">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <param name="value">The object to verify is of <paramref name="expectedType"/>.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsInstanceOf(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is of <paramref name="expectedType"/>.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNaN(System.Single)">
            <summary>
            Verifies that the specified float is <see cref="F:System.Double.NaN"/>. The assertion fails if it is not <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNaN(System.Single,System.String)">
            <summary>
            Verifies that the specified float is <see cref="F:System.Double.NaN"/>. The assertion fails if it is not <see cref="F:System.Double.NaN"/>.
            Displays a message if the assertion fails.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNaN(System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the specified float is <see cref="F:System.Double.NaN"/>. The assertion fails if it is not <see cref="F:System.Double.NaN"/>.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNaN(System.Double)">
            <summary>
            Verifies that the specified double is <see cref="F:System.Double.NaN"/>. The assertion fails if it is not <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNaN(System.Double,System.String)">
            <summary>
            Verifies that the specified double is <see cref="F:System.Double.NaN"/>. The assertion fails if it is not <see cref="F:System.Double.NaN"/>.
            Displays a message if the assertion fails.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the specified double is <see cref="F:System.Double.NaN"/>. The assertion fails if it is not <see cref="F:System.Double.NaN"/>.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotAssignableFrom``1(System.Object)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is not of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotAssignableFrom``1(System.Object,System.String)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <typeparam name="T">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is not of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is not of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotAssignableFrom(System.Object,System.Type)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object.
            </summary>
            <param name="value">The object to verify is not of <paramref name="wrongType"/>.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <param name="value">The object to verify is not of <paramref name="wrongType"/>.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotAssignableFrom(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is not of <paramref name="wrongType"/>.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotInstanceOf``1(System.Object)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is not of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotInstanceOf``1(System.Object,System.String)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <typeparam name="T">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is not of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</typeparam>
            <param name="value">The object to verify is not of <typeparamref name="T"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotInstanceOf(System.Object,System.Type)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object.
            </summary>
            <param name="value">The object to verify is not of <paramref name="wrongType"/>.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotInstanceOf(System.Object,System.Type,System.String)">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails.
            </summary>
            <param name="value">The object to verify is not of <paramref name="wrongType"/>.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotInstanceOf(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found
            in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is not of <paramref name="wrongType"/>.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value"/>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotNaN(System.Double)">
            <summary>
            Verifies that the specified double is not <see cref="F:System.Double.NaN"/>. The assertion fails if it is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotNaN(System.Double,System.String)">
            <summary>
            Verifies that the specified double is not <see cref="F:System.Double.NaN"/>. The assertion fails if it is <see cref="F:System.Double.NaN"/>.
            Displays a message if the assertion fails.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the specified double is not <see cref="F:System.Double.NaN"/>. The assertion fails if it is <see cref="F:System.Double.NaN"/>.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotNull(System.Object)">
            <summary>
            Verifies that the specified object is <c>null</c>. The assertion fails if it is <c>null</c>.
            </summary>
            <param name="value">The object to verify is not <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that the specified object is <c>null</c>. The assertion fails if it is <c>null</c>. Displays a message if the
            assertion fails.
            </summary>
            <param name="value">The object to verify is not <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is <c>null</c>. The assertion fails if it is <c>null</c>. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is not <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNull(System.Object)">
            <summary>
            Verifies that the specified object is <c>null</c>. The assertion fails if it is not <c>null</c>.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNull(System.Object,System.String)">
            <summary>
            Verifies that the specified object is <c>null</c>. The assertion fails if it is not <c>null</c>. Displays a message if the
            assertion fails.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is <c>null</c>. The assertion fails if it is not <c>null</c>. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is <c>null</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsTrue(System.Object)">
            <summary>
            Verifies that the specified object is <c>true</c>. The assertion fails if it is not <c>true</c>.
            </summary>
            <param name="value">The object to verify is <c>true</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsTrue(System.Object,System.String)">
            <summary>
            Verifies that the specified object is <c>true</c>. The assertion fails if it is not <c>true</c>. Displays a message if the
            assertion fails.
            </summary>
            <param name="value">The object to verify is <c>true</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.IsTrue(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the specified object is <c>true</c>. The assertion fails if it is not <c>true</c>. Displays a message if the
            assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="value">The object to verify is <c>true</c>.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.LessThan``1(``0,``0)">
            <summary>
            Verifies that the specified value is less than another specified value. The assertion fails if it is greater than or equal
            to the specified value.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.LessThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than another specified value. The assertion fails if it is greater than or equal
            to the specified value. Displays a message if the assertion fails.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.LessThan``1(``0,``0,System.String,System.Object[])">
            <summary>
            Verifies that the specified value is less than another specified value. The assertion fails if it is greater than or equal
            to the specified value. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.LessThanEqualTo``1(``0,``0)">
            <summary>
            Verifies that the specified value is less than or equal to another specified value. The assertion fails if it is greater than
            the specified value.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.LessThanEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to another specified value. The assertion fails if it is greater than
            the specified value. Displays a message if the assertion fails.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.LessThanEqualTo``1(``0,``0,System.String,System.Object[])">
            <summary>
            Verifies that the specified value is less than or equal to another specified value. The assertion fails if it is greater than
            the specified value. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <param name="actual">The first object to compare. This is the object the unit test produced.</param>
            <param name="expected">The second object to compare. This is the object the unit test expects.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.That(System.Boolean)">
            <summary>
            Verifies that the specified condition is true. The assertion fails if the condition is not satisfied.
            </summary>
            <param name="condition">An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> representing the condition to validate.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.That(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is true. The assertion fails if the condition is not satisfied.
            </summary>
            <param name="condition">An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> representing the condition to validate.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies that the specified condition is true. The assertion fails if the condition is not satisfied.
            </summary>
            <param name="condition">An <see cref="T:Microsoft.BI.Common.UnitTesting.ICondition"/> representing the condition to validate.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.That(System.Object,Microsoft.BI.Common.UnitTesting.IReduceable)">
            <summary>
            Verifies that the specified condition is satisified. The assertion fails if the condition is not satisfied.
            </summary>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="condition">An <see cref="T:Microsoft.BI.Common.UnitTesting.IReduceable"/> representing the condition to validate.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.That(System.Object,Microsoft.BI.Common.UnitTesting.IReduceable,System.String)">
            <summary>
            Verifies that the specified condition is satisified. The assertion fails if the condition is not satisfied.
            </summary>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="condition">An <see cref="T:Microsoft.BI.Common.UnitTesting.IReduceable"/> representing the condition to validate.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.That(System.Object,Microsoft.BI.Common.UnitTesting.IReduceable,System.String,System.Object[])">
            <summary>
            Verifies that the specified condition is satisified. The assertion fails if the condition is not satisfied.
            </summary>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="condition">An <see cref="T:Microsoft.BI.Common.UnitTesting.IReduceable"/> representing the condition to validate.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws``1(System.Action)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws``1(System.Action,System.Boolean)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
            <param name="allowSubclasses">Whether subclasses of <typeparamref name="T"/> are allowed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws``1(System.Action,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws``1(System.Action,System.Boolean,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
            <param name="allowSubclasses">Whether subclasses of <typeparamref name="T"/> are allowed.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws``1(System.Action,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws``1(System.Action,System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">The type of the exception expected.</typeparam>
            <param name="code">The delegate to execute.</param>
            <param name="allowSubclasses">Whether subclasses of <typeparamref name="T"/> are allowed.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws(System.Action,System.Type)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws(System.Action,System.Type,System.Boolean)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
            <param name="allowSubclasses">Whether subclasses of <paramref name="expectedException"/> are allowed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws(System.Action,System.Type,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws(System.Action,System.Type,System.Boolean,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
            <param name="allowSubclasses">Whether subclasses of <paramref name="expectedException"/> are allowed.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws(System.Action,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws(System.Action,System.Type,System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="expectedException">The type of the exception expected.</param>
            <param name="allowSubclasses">Whether subclasses of <paramref name="expectedException"/> are allowed.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.Validate.Throws(System.Action,Microsoft.BI.Common.UnitTesting.ICondition,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="code">The delegate to execute.</param>
            <param name="condition">The condition to be satisifed by the exception.</param>
            <param name="message">A message to display if the assertion fails.  This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message"/>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.DataReaderWriterFactory">
            <summary>
            The default implementation of the <see cref="T:Microsoft.BI.Common.UnitTesting.IDataReaderWriterFactory"/> interface that contains factory functions for creating
            <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> and <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> instances for reading and writing the inputs and outputs of a
            <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataReaderWriterFactory.GetDataReader(Microsoft.BI.Common.Schema.DsvDataTable,System.IO.Stream)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> for reading the output of a <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> from a stream.
            </summary>
            <param name="table">The table from which to read the data.</param>
            <param name="stream">The stream containing the data.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> that can be used to read <paramref name="stream"/> into <paramref name="table"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataReaderWriterFactory.GetDataWriter(Microsoft.BI.Common.Schema.DsvDataTable,System.IO.Stream)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> for writing the input of a <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> to a stream.
            </summary>
            <param name="table">The table into which to write the data.</param>
            <param name="stream">The stream that will contain the data.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> that can be used to write <paramref name="table"/> into <paramref name="stream"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.IDataReaderWriterFactory">
            <summary>
            An interface that describes factory functions for creating <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> and <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> instances
            for reading and writing the inputs and outputs of a <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.IDataReaderWriterFactory.GetDataReader(Microsoft.BI.Common.Schema.DsvDataTable,System.IO.Stream)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> for reading the output of a <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> from a stream.
            </summary>
            <param name="table">The table from which to read the data.</param>
            <param name="stream">The stream containing the data.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> that can be used to read <paramref name="stream"/> into <paramref name="table"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.IDataReaderWriterFactory.GetDataWriter(Microsoft.BI.Common.Schema.DsvDataTable,System.IO.Stream)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> for writing the input of a <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> to a stream.
            </summary>
            <param name="table">The table into which to write the data.</param>
            <param name="stream">The stream that will contain the data.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> that can be used to write <paramref name="table"/> into <paramref name="stream"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream">
            <summary>
            Represents an <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> based on a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <remarks>
            This class can be used to create an input to a SCOPE job using an <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> in order
            to perform formatting. Examples include outputting to a SSTREAM or outputting using a pre-existing outputter.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Table">
            <summary>
            Gets the <see cref="T:System.Data.DataTable"/> containing the schema and rows in the input.
            </summary>
            <remarks>
            This table can be modified by the user until calling <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/>, after which point any changes
            have no effect.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Projection">
            <summary>
            Gets or sets a function that is used to project <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Table"/> into the table that is written to disk.
            </summary>
            <remarks>
            <para>
            If not specified, <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Table"/> is written exactly as is.
            </para>
            <para>
            This function allows a table to be transformed in some way prior to being written for pipeline execution.  For example,
            you can add or remove columns, change the type or name of a column, add or remove rows, etc.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.DataTableInputStream._DataWriterFactory">
            <summary>
            The factory that will be used to create an <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> to read data from the output.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/> class using the specified <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> containing the rows to write to the input.</param>
            <remarks><paramref name="table"/> is copied into the new instance's <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Table"/> member - it does not use
            the same instance.  (TODO - should that be the case?  Doesn't really match expected behavior.)</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.#ctor(System.Data.DataTable,Microsoft.BI.Common.UnitTesting.IDataReaderWriterFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/> class with the specified schema and
            data writer factory.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Write(System.IO.Stream)">
            <summary>
            Writes the contents of the input using the data writer specified in <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Table"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Close">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/>.
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/>.</returns>
            <remarks>
            <para>
            The <see cref="T:System.Data.DataTable"/> contained in the <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Table"/> property of the returned instance is a new
            <see cref="T:System.Data.DataTable"/> with the same schema as the original.  (It does not use the same rows as the original.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.InputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/>.
            </summary>
            <param name="input">The <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/> from which to load data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is not a <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.OutputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/> from which to load data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="output"/> is not a <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableInputStream.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.InputStream">
            <summary>
            Represents any kind of input stream to a SCOPE job, including an input stream, resource, or reference.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStream.Write(System.IO.Stream)">
            <summary>
            When overridden in a derived class, writes the data in the input to <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> into which to copy the data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> is not the same reference as <see cref="T:System.IO.Stream"/> and
            does not support writing.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStream.Close">
            <summary>
            When overridded in a derived class, closes the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStream.Clone">
            <summary>
            When overridden in a derived class, returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>.
            </summary>
            <remarks>
            <para>
            This method can be used to return a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>.  It should return an <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>
            equivalent to the original <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> without any associated state.  For example, if a subclass allows data
            to be added to the instance, this data should not be included in the object returned by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStream.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.InputStream)">
            <summary>
            When overridden in a derived class, loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> from which to load data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.OutputStream)">
            <summary>
            When overridden in a derived class, loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/> from which to load data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStream.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection">
            <summary>
            A class containing a collection of <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> objects representing the inputs to a SCOPE job.
            </summary>
            <remarks>
            <para>
            The key on this collection is the file's location as referred to in the job. For example, if you have a SCOPE script that says
            </para>
            <para>
            <code>
            EXTRACT *
            FROM "/my/path.txt"
            USING MyExtractor;
            </code>
            </para>
            <para>
            the key for this input would be "/my/path.txt".
            </para>
            <para>
            "Inputs" does not refer only to "input streams", but also to any local or COSMOS resource or reference.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.#ctor(System.Func{Microsoft.BI.Common.IO.IFileSystem})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> class using the specified
            <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> for stream resolution and creation.
            </summary>
            <param name="filesystem">The <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> to use when resolving paths and creating streams.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String)">
            <summary>
            Adds an existing input to the collection using data from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="key">The path to where the input should be written.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream"/> object that was added.</returns>
            <remarks>
            This can be used to add a pre-existing input to a SCOPE job without copying it (contrast to
            <see cref="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String,System.String)"/> which will copy from the original source to the specified destination).
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String,System.IO.Stream)">
            <summary>
            Adds an input to the collection using data from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="key">The path to where the input should be written.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the data to write.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/> object that was added.</returns>
            <remarks>
            Examples include inputs based on an existing file, inputs based on a stream, or inputs that cannot be generated via a pre-existing
            outputter.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String,System.String)">
            <summary>
            Adds an input to the collection using data from the specified file.
            </summary>
            <param name="key">The path to where the input should be written.</param>
            <param name="file">The file containing the data to write.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/> object that was added.</returns>
            <remarks>
            <para>
            Contrast to <see cref="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String)"/>, which adds a pre-existing input without copying it.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> returned by this method is readable and writable.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String,System.Data.DataTable)">
            <summary>
            Adds an input to the collection containing data from the specified <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="key">The path to where the input should be written.</param>
            <param name="table">A <see cref="T:System.Data.DataTable"/> containing the schema and rows to be written.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/> object that was added.</returns>
            <remarks>
            Since inputs are written lazily, the user can manipulate the associated <see cref="T:System.Data.DataTable"/> even after adding
            the input and still see these changes reflected in the final file that is written out.  Note this overload copies
            the data from the specified table (as opposed to using the same reference).  TODO - fix that
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds an input to the collection with the schema described in the specified schema file and table name.
            </summary>
            <param name="key">The path to where the input should be written.</param>
            <param name="schemaPath">The path to the file containing the data table schema.</param>
            <param name="tableName">The name of the table in the schema file.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableInputStream"/> object that was added.</returns>
            <remarks>
            Since inputs are written lazily, the user can manipulate the associated <see cref="T:System.Data.DataTable"/> even after adding
            the input and still see these changes reflected in the final file that is written out.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.InputStreamCollection.Add(System.String,Microsoft.BI.Common.UnitTesting.OutputStream)">
            <summary>
            Adds an input to the collection using data from the specified output.
            </summary>
            <param name="key">The path to where the input should be written.</param>
            <param name="output">The output containing the data to write.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> object that was added.</returns>
            <remarks>
            This can be used to create an input to a SCOPE job that reads data from the output of another job.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream">
            <summary>
            Represents a read-only input.
            </summary>
            <remarks>
            Unlike in <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>, when <see cref="M:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream.Write(System.IO.Stream)"/> is called, no data is written. The
            primary use for this class is to use a pre-existing input file without modification.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream.Write(System.IO.Stream)">
            <summary>
            Does nothing.
            </summary>
            <param name="stream">Ignored.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream.Close">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream"/>.
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.InputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> to load from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.OutputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/> to load from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadOnlyInputStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream">
            <summary>
            An <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> that copies data from one stream to another when written.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Stream">
            <summary>
            The <see cref="P:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Stream"/> containing the data in the input.
            </summary>
            <remarks>
            If this stream is writable, data may be written to the stream at any point prior to calling <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/>.
            After <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> is called, this stream will be closed and will not accept additional write requests.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/> class based on the specified stream.
            </summary>
            <param name="stream">The <see cref="P:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Stream"/> containing the data to use in the input.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading -or- <paramref name="stream"/> does not
            support seeking.</exception>
            <remarks>
            <paramref name="stream"/> must support reading and seeking.  The contents of <paramref name="stream"/> are not written to the
            pipeline input location until <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> is called, so the contents of the stream may be modified
            (if writable) until this point.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Write(System.IO.Stream)">
            <summary>
            Writes the contents of the input to the specified stream and closes it.
            </summary>
            <param name="stream">The <see cref="P:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Stream"/> to which to write the data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not refer to the same instance as <see cref="P:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Stream"/>
            and <paramref name="stream"/> is not writable.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Close">
            <summary>
            Closes the input's underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/>.
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.InputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/> from which to load data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="output"/> is not a <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.OutputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream"/> from which to load data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="output"/> is not a <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteInputStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream.StreamName">
            <summary>
            Gets the name of the stream containing the input data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream.#ctor(System.String,System.Func{Microsoft.BI.Common.IO.IFileSystem})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/> class
            </summary>
            <param name="stream">The name of the stream.</param>
            <param name="filesystem">A function that returns a <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> to use when resolving the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/>,
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.InputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/>.
            </summary>
            <param name="input">The <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/> from which to load data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="input"/> is not a <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream.LoadFrom(Microsoft.BI.Common.UnitTesting.OutputStream)">
            <summary>
            Loads data into the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteInputStream"/> from the specified <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/>.
            </summary>
            <param name="output">The <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/> from which to load data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="output"/> is not a <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream">
            <summary>
            Represents an <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/> based on a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <remarks>
            This class can be used to create an output of a SCOPE job using an <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> in order to perform parsing.
            Examples include extracting from a SSTREAM or extracting using a pre-existing extractor.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Table">
            <summary>
            Gets the <see cref="T:System.Data.DataTable"/> containing the rows in the output.
            </summary>
            <remarks>
            The <see cref="P:System.Data.DataTable.Rows"/> instance of this property is populated lazily - until <see cref="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Read(System.IO.Stream)"/> is called,
            it is empty; after it is called, accessing this property will cause the contents of the output file to be loaded into memory.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Projection">
            <summary>
            Gets or sets a function that is used to project <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Table"/> into the table that is read from disk.
            </summary>
            <remarks>
            <para>
            If not specified, <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Table"/> is read exactly as is.
            </para>
            <para>
            This function allows a table to be transformed in some way after being read from pipeline execution.  For example,
            you can add or remove columns, change the type or name of a column, add or remove rows, etc.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.DataTableOutputStream._OutputDataStream">
            <summary>
            This contains the output stream.  It will not be read unless data is requested from the output.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UnitTesting.DataTableOutputStream._DataReaderFactory">
            <summary>
            The factory that will be used to create an <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> to read data from the output.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/> class with the specified schema.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.#ctor(System.Data.DataTable,Microsoft.BI.Common.UnitTesting.IDataReaderWriterFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/> class with the specified schema and
            data reader factory.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Read(System.IO.Stream)">
            <summary>
            Reads the data in the output into <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to copy the data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Close">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/>.
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/>.</returns>
            <remarks>
            <para>
            The <see cref="T:System.Data.DataTable"/> contained in the <see cref="P:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Table"/> property of the returned instance is a new
            <see cref="T:System.Data.DataTable"/> with the same schema as the original.  (It does not use the same rows as the original.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.GetInputStream">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> that contains the data in the current <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> containing the data currently in this <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.DataTableOutputStream.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.OutputStream">
            <summary>
            A class representing any kind of output stream from a SCOPE job, including output streams.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStream.Read(System.IO.Stream)">
            <summary>
            When overridden in a derived class, reads the data in the output into <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> into which to copy the data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStream.Close">
            <summary>
            When overridded in a derived class, closes the <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStream.Clone">
            <summary>
            When overridden in a derived class, returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <remarks>
            <para>
            This method can be used to return a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.  It should return an <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>
            equivalent to the original <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/> without any associated state.  For example, if a subclass allows data
            to be added to the instance, this data should not be included in the object returned by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStream.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStream.GetInputStream">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> that contains the data in the current <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> containing the data currently in this <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStream.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.OutputStreamCollection">
            <summary>
            A class containing a collection of <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/> objects representing the outputs of a SCOPE job.
            </summary>
            <remarks>
            The key on this collection is the file's location as referred to in the job.
            
            For example, if you have a SCOPE script that says
            
              <code>
              OUTPUT
              TO "/my/path.txt"
              USING MyOutputter;
              </code>
            
            the key for this output would be "/my/path.txt".
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStreamCollection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStreamCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStreamCollection.Add(System.String,System.IO.Stream)">
            <summary>
            Adds an output to the collection that will populate the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="key">The path to where the output will be written.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> into which to load the output data.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream"/> object that was added.</returns>
            <remarks>
            Examples include outputs that cannot be read via a pre-existing extractor.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStreamCollection.Add(System.String,System.Data.DataTable)">
            <summary>
            Adds an output to the collection with the specified schema.
            </summary>
            <param name="key">The path to where the output will be written by the SCOPE job.</param>
            <param name="schema">The schema of the output.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/> object that was added.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.OutputStreamCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds an output to the collection with the schema described in the specified schema file and table name.
            </summary>
            <param name="key">The path to where the output will be written by the SCOPE job.</param>
            <param name="schemaPath">The path to the file containing the data table schema.</param>
            <param name="tableName">The name of the table in the schema file.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.DataTableOutputStream"/> object that was added.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream">
            <summary>
            A class representing any kind of output stream from a SCOPE job, including output streams.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Stream">
            <summary>
            The <see cref="P:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Stream"/> containing the data in the output.
            </summary>
            <remarks>
            The contents of this stream are not populated until <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> is called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/> class based on the specified stream.
            </summary>
            <param name="stream">The <see cref="P:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Stream"/> in which to store the output data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing -or- <paramref name="stream"/> does not
            support seeking.</exception>
            <remarks>
            <paramref name="stream"/> must support writing and seeking.  The contents of <paramref name="stream"/> are not read from the
            pipeline output location until <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> is called, so stream will be empty until this point.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Read(System.IO.Stream)">
            <summary>
            Reads the data in the output into <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="P:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Stream"/> from which to copy the data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Close">
            <summary>
            Closes the output's underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream"/>.
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.GetInputStream">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> that contains the data in the current <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> containing the data currently in this <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.ReadWriteOutputStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream.StreamName">
            <summary>
            Gets the name of the stream containing the input data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream.#ctor(System.String,System.Func{Microsoft.BI.Common.IO.IFileSystem})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/> class
            </summary>
            <param name="stream">The name of the stream.</param>
            <param name="filesystem">A function that returns a <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> to use when resolving the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/>,
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.NamedReadWriteOutputStream.GetInputStream">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> that contains the data in the current <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> containing the data currently in this <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition">
            <summary>
            Base class for a pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.HasExecuted">
            <summary>
            Gets a value indicating whether the pipeline has been executed or not.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Inputs">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> objects representing the inputs to the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Outputs">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStream"/> objects representing the outputs of the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Resources">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.UnitTesting.InputStream"/> objects representing the resources of the pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.BaseFileSystem">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> used by the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> to read and write input
            and output files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.InputFileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> used by the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> to read and write input files.
            </summary>
            <remarks>
            <para>
            Subclasses of <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> can override this property in the event that input files need to be handled
            in a special way relative to other file types.  If not overridden, this property returns <see cref="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.BaseFileSystem"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.ResourceFileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> used by the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> to read and write resource files.
            </summary>
            <remarks>
            <para>
            Subclasses of <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> can override this property in the event that resource files need to be handled
            in a special way relative to other file types.  If not overridden, this property returns <see cref="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.BaseFileSystem"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.OutputFileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> used by the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> to read output files.
            </summary>
            <remarks>
            <para>
            Subclasses of <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> can override this property in the event that output files need to be handled
            in a special way relative to other file types.  If not overridden, this property returns <see cref="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.BaseFileSystem"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.#ctor(Microsoft.BI.Common.IO.IFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> class using the specified working directory and filesystem.
            </summary>
            <param name="filesystem">The <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> used to interact with the filesystem.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filesystem"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.GetInputStreamCollection(Microsoft.BI.Common.IO.IFileSystem)">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> used to contain input streams.
            </summary>
            <param name="filesystem">The <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> to use when reading and writing inputs.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> used to contain input streams.</returns>
            <remarks>Subclasses can override this method to provide a different <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> if desired.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.GetOutputStreamCollection(Microsoft.BI.Common.IO.IFileSystem)">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> used to contain output streams.
            </summary>
            <param name="filesystem">The <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> to use when reading and writing outputs.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> used to contain outputs streams.</returns>
            <remarks>Subclasses can override this method to provide a different <see cref="T:Microsoft.BI.Common.UnitTesting.OutputStreamCollection"/> if desired.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.GetResourceStreamCollection(Microsoft.BI.Common.IO.IFileSystem)">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> used to contain resource streams.
            </summary>
            <param name="filesystem">The <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> to use when reading and writing resources.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> used to contain resource streams.</returns>
            <remarks>Subclasses can override this method to provide a different <see cref="T:Microsoft.BI.Common.UnitTesting.InputStreamCollection"/> if desired.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run">
            <summary>
            Runs the pipeline.
            </summary>
            <returns><c>true</c> if the run was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If all pipeline outputs already exist, pipeline inputs will not be written to disk and the pipeline will not run.  This facilitates
            sharing a single execution of a <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/> class in multiple test methods for more efficient testing.
            </para>
            <para>
            If at least one pipeline output does not yet exist, all job inputs will be copied to their appropriate locations and the pipeline
            will be executed.
            </para>
            <para>
            If, after pipeline execution finishes, at least one pipeline output still does not exist, this method returns <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.SetupRun">
            <summary>
            When overridden in a derived class, allows one or more pre-run actions to be performed by the pipeline every time
            the <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> method is called.
            </summary>
            <remarks>
            <para>
            Some pipelines may require initial setup to be performed that should not or cannot be performed in the constructor.
            This method can be used to perform these operations.
            </para>
            <para>
            Note that if the same pipeline definition is used for multiple runs, this method will be called multiple times, so any
            operations it performs must be idempotent.
            </para>
            <para>
            This method is called prior to writing pipeline inputs.
            </para>
            <para>
            This method is always called whenever <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> is called, even if pipeline execution is skipped due to all
            outputs already existing.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.RunCore">
            <summary>
            Runs the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.FinalizeRun">
            <summary>
            When overridden in a derived class, allows one or more post-run actions to be performed by the pipeline every time
            the <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> method is called.
            </summary>
            <remarks>
            <para>
            Some pipelines may require additional steps to be performed after a run before validating the outputs.  This method
            can be used to perform these operations.
            </para>
            <para>
            Note that if the same pipeline definition is used for multiple runs, this method will be called multiple times, so any
            operations it performs must be idempotent.
            </para>
            <para>
            This method is called after all outputs have been read into the <see cref="P:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Outputs"/> collection.
            </para>
            <para>
            This method is always called whenever <see cref="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Run"/> is called, even if pipeline execution is skipped due to all
            outputs already existing.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.WriteInputs">
            <summary>
            Writes the contents of all pipeline inputs to disk or to the cluster, as appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.ReadOutputs">
            <summary>
            Reads the contents of all pipeline outputs from disk or from the cluster, as appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.CheckOutputs">
            <summary>
            Checks each output to see if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.CheckOutputs(System.String@)">
            <summary>
            Checks each output to see if it exists and return the first missing output, if any.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UnitTesting.PipelineDefinition.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.UnitTesting.PipelineDefinition"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only
            unamanged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualComparer">
            <summary>
            An <see cref="T:System.Collections.IComparer"/> implementation that always returns <c>0</c> (equal).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualComparer.Compare(System.Object,System.Object)">
            <summary>
            Returns <c>0</c> (equal).
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>0</c> (equal).</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that always returns <c>0</c> (equal).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualComparer`1.Compare(`0,`0)">
            <summary>
            Returns <c>0</c> (equal).
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>0</c> (equal).</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.IEqualityComparer"/> implementation that always returns <c>true</c>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Returns <c>true</c>.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns <c>0</c>.
            </summary>
            <param name="obj">The object for which to get the hash code.</param>
            <returns><c>0</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualEqualityComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation that always returns <c>true</c>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Returns <c>true</c>.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns <c>0</c>.
            </summary>
            <param name="obj">The object for which to get the hash code.</param>
            <returns><c>0</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.LessThanComparer">
            <summary>
            An <see cref="T:System.Collections.IComparer"/> implementation that always returns <c>-1</c> (less than).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LessThanComparer.Compare(System.Object,System.Object)">
            <summary>
            Returns <c>-1</c> (less than).
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>-1</c> (less than).</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.LessThanComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that always returns <c>-1</c> (less than).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LessThanComparer`1.Compare(`0,`0)">
            <summary>
            Returns <c>-1</c> (less than).
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>-1</c> (less than).</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.GreaterThanComparer">
            <summary>
            An <see cref="T:System.Collections.IComparer"/> implementation that always returns <c>1</c> (greater than).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.GreaterThanComparer.Compare(System.Object,System.Object)">
            <summary>
            Returns <c>1</c> (greater than).
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>1</c> (greater than).</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.GreaterThanComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that always returns <c>1</c> (greater than).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.GreaterThanComparer`1.Compare(`0,`0)">
            <summary>
            Returns <c>1</c> (greater than).
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>1</c> (greater than).</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.NotEqualEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.IEqualityComparer"/> implementation that always returns <c>false</c>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a unique hash code for an object.
            </summary>
            <param name="obj">The object for which to get the hash code.</param>
            <returns>A unique hash code for an object.</returns>
            <remarks>
            <para>
            This method returns a monotonically-increasing hash code, meaning that if you call <see cref="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer.GetHashCode(System.Object)"/>
            twice on the same object, you will get different values.  Technically, this violates the requirements for
            the behavior of <see cref="T:System.Collections.IEqualityComparer"/>; however, this class should generally only be used in testing
            situations anyway.
            </para>
            <para>
            Since there are a limited number of values in <see cref="T:System.Int32"/>, if you call <see cref="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer.GetHashCode(System.Object)"/> enough
            times, this class will return repeated hash values.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.NotEqualEqualityComparer._currentHash">
            <summary>
            The current hash value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.NotEqualEqualityComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation that always returns <c>false</c>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a unique hash code for an object.
            </summary>
            <param name="obj">The object for which to get the hash code.</param>
            <returns>A unique hash code for an object.</returns>
            <remarks>
            <para>
            This method returns a monotonically-increasing hash code, meaning that if you call <see cref="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer`1.GetHashCode(`0)"/>
            twice on the same object, you will get different values.  Technically, this violates the requirements for
            the behavior of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>; however, this class should generally only be used
            in testing situations anyway.
            </para>
            <para>
            Since there are a limited number of values in <see cref="T:System.Int32"/>, if you call <see cref="M:Microsoft.BI.Common.Collections.NotEqualEqualityComparer`1.GetHashCode(`0)"/> enough
            times, this class will return repeated hash values.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.NotEqualEqualityComparer`1._currentHash">
            <summary>
            The current hash value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.ByteEnum">
            <summary>
            An enum with underlying type of <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ByteEnum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ByteEnum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ByteEnum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ByteEnum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UInt16Enum">
            <summary>
            An enum with underlying type of <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt16Enum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt16Enum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt16Enum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt16Enum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UInt32Enum">
            <summary>
            An enum with underlying type of <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt32Enum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt32Enum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt32Enum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt32Enum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UInt64Enum">
            <summary>
            An enum with underlying type of <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt64Enum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt64Enum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt64Enum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt64Enum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.SByteEnum">
            <summary>
            An enum with underlying type of <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.SByteEnum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.SByteEnum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.SByteEnum.NegativeOne">
            <summary>
            Negative one.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.SByteEnum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.SByteEnum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Int16Enum">
            <summary>
            An enum with underlying type of <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int16Enum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int16Enum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int16Enum.NegativeOne">
            <summary>
            Negative one.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int16Enum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int16Enum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Int32Enum">
            <summary>
            An enum with underlying type of <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int32Enum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int32Enum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int32Enum.NegativeOne">
            <summary>
            Negative one.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int32Enum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int32Enum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Int64Enum">
            <summary>
            An enum with underlying type of <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int64Enum.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int64Enum.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int64Enum.NegativeOne">
            <summary>
            Negative one.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int64Enum.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Int64Enum.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MockDirectory">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IDirectory"/> implementation that performs operations on mock directories.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockDirectory.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.#ctor(Microsoft.BI.Common.IO.MockFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.MockDirectory"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.  This cannot be a file.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file directory names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> refers to an existing directory; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory on the path.
            </summary>
            <param name="path">The path to the directory.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified directory.
            </summary>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last accessed.
            </summary>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last written to.
            </summary>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <c>null</c> if <paramref name="path"/> is the root directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified directory to a new location, providing the option to specify a new directory name.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceDirectoryName"/> and
            <paramref name="destDirectoryName"/> are the same directory.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the directory on the specified path.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MockDirectoryJunction">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IDirectoryJunction"/> implementation that performs operations on mock directory junctions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockDirectoryJunction.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectoryJunction.#ctor(Microsoft.BI.Common.IO.MockFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.MockDirectoryJunction"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectoryJunction.Create(System.String,System.String)">
            <summary>
            Creates a directory junction at the specified path pointing to the specified target.
            </summary>
            <param name="path">The directory junction to create.</param>
            <param name="target">The name of the directory junction target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is null.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception creating the directory junction specified by
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectoryJunction.Dereference(System.String)">
            <summary>
            Dereference a directory junction, returning an absolute file path.
            </summary>
            <param name="path">The directory junction to dereference.</param>
            <returns>The directory junction's target.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectoryJunction.Delete(System.String)">
            <summary>
            Delete a directory junction.
            </summary>
            <param name="path">The directory junction to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method deletes the directory junction itself, not the junction's target.  To delete a junction's target, use
            <see cref="M:Microsoft.BI.Common.IO.MockDirectoryJunction.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                Directory.Delete(DirectoryJunction.Dereference(path));
                </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockDirectoryJunction.Exists(System.String)">
            <summary>
            Determines whether a directory junction exists.
            </summary>
            <param name="path">The directory junction to check.</param>
            <returns><c>true</c> if the specified path exists and is a directory junction; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method checks for the existence of the junction itself, not the junction's target.  To check the junction's target,
            use <see cref="M:Microsoft.BI.Common.IO.MockDirectoryJunction.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                if (Directory.Exists(DirectoryJunction.Dereference(path)))
                {
                    // some operation
                }
                </code>
            </example>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MockFile">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IFile"/> implementation that performs file operations on mock files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFile.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.#ctor(Microsoft.BI.Common.IO.MockFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.MockFile"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.  This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.Create(System.String)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> contains the name of an existing file; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file.
            </summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last written to.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceFileName"/> and
            <paramref name="destFileName"/> are the same file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/>  value specifying the type of access other threads
            have to the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the specified path, having the specified mode with read, write,
            or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MockFileSystem">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> interface that allows mocking of directory and file structure for testing purposes.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.File">
            <summary>
            Provides methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.Stream"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.Directory">
            <summary>
            Exposes methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.Path">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. 
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.SymbolicLink">
            <summary>
            Provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.DirectoryJunction">
            <summary>
            Provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.Volumes">
            <summary>
            Gets the collection of volumes in the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/>.
            </summary>
            <remarks>
            Internal for now until I finalize how to interact with volumes.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.InternalVolumes">
            <summary>
            Gets the collection of volumes in the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.CurrentDirectory">
            <summary>
            Gets the current working directory.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockFileSystem.DefaultVolume">
            <summary>
            Gets the default volume of the filesystem.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFileSystem.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFileSystem.AddDirectory(Microsoft.BI.Common.IO.Inode,System.String)">
            <summary>
            Adds an empty directory to the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> with the specified path.
            </summary>
            <param name="node">The node in which to add the directory.</param>
            <param name="path">The path to the directory to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFileSystem.AddFile(Microsoft.BI.Common.IO.Inode,System.String)">
            <summary>
            Adds an empty file to the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> with the specified path.
            </summary>
            <param name="node">The node in which to add the file.</param>
            <param name="path">The path to the directory to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFileSystem.AddDirectoryJunction(Microsoft.BI.Common.IO.Inode,System.String,System.String)">
            <summary>
            Adds a directory junction to the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> with the specified path.
            </summary>
            <param name="node">The node in which to add the file.</param>
            <param name="path">The path to the directory junction to add.</param>
            <param name="target">The target of the reparse point.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockFileSystem.AddSymbolicLink(Microsoft.BI.Common.IO.Inode,System.String,System.String)">
            <summary>
            Adds a symbolic link to the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> with the specified path.
            </summary>
            <param name="node">The node in which to add the file.</param>
            <param name="path">The path to the symbolic link to add.</param>
            <param name="target">The target of the reparse point.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MockPath">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockPath.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockPath.#ctor(Microsoft.BI.Common.IO.MockFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.MockPath"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of <paramref name="path"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MockSymbolicLink">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.ISymbolicLink"/> implementation that performs operations on mock symbolic links.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockSymbolicLink.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockSymbolicLink.#ctor(Microsoft.BI.Common.IO.MockFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.MockSymbolicLink"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> containing the mock data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockSymbolicLink.Create(System.String,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockSymbolicLink.Dereference(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockSymbolicLink.Delete(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The symbolic link to delete.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockSymbolicLink.Exists(System.String)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.Inode">
            <summary>
            A class representing a single inode, which contains metadata about a file in a filesystem.
            </summary>
            <remarks>
            This class is based loosely on the Unix concept of an inode, but does not work in exactly the same
            way in some respects.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.Attributes">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the inode.
            </summary>
            <remarks>
            This property controls the behavior of the <see cref="T:Microsoft.BI.Common.IO.Inode"/>, especially with regards to how the contents of
            <see cref="P:Microsoft.BI.Common.IO.Inode.Data"/> are interpreted.  The following attribute values are of specific importance:
            <list type="table">
            <listheader>
            <term>Attribute</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><see cref="F:System.IO.FileAttributes.Directory"/></term>
            <description>The contents of <see cref="P:Microsoft.BI.Common.IO.Inode.Data"/> are a directory listing of filename, inode pairs.</description>
            </item>
            <item>
            <term><see cref="F:System.IO.FileAttributes.ReparsePoint"/></term>
            <description>The contents of <see cref="P:Microsoft.BI.Common.IO.Inode.Data"/> are a UTF8-encoded string indicating the target of the reparse point.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.CreationTimeUtc">
            <summary>
            Gets or sets the creation time (ctime) of the inode.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.LastAccessTimeUtc">
            <summary>
            Gets or sets the last access time (atime) of the inode.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.LastWriteTimeUtc">
            <summary>
            Gets or sets the last write time (mtime) of the inode.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.Data">
            <summary>
            Gets or sets the contents of the data in the inode.
            </summary>
            <remarks>
            In a "real" inode, this is a series of 15 pointers that point to blocks or indirected pointers to blocks of data.
            In the interest of simplicity, the <see cref="T:Microsoft.BI.Common.IO.Inode"/> class points directly to the data itself.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.IsDirectory">
            <summary>
            Gets a value indicating whether the current <see cref="T:Microsoft.BI.Common.IO.Inode"/> is a directory.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.IsFile">
            <summary>
            Gets a value indicating whether the current <see cref="T:Microsoft.BI.Common.IO.Inode"/> is a file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.IsReparsePoint">
            <summary>
            Gets a value indicating whether the current <see cref="T:Microsoft.BI.Common.IO.Inode"/> is a reparse point.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.ParentNode">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.Inode"/> that is the parent of the current inode.
            </summary>
            <remarks>
            This is not in the original inode standard.  It is currently included for ease of navigating to the parent directory.
            However, for hard link support, this will not work (since multiple links can point to the same inode with a different
            parent directory.  Once hard link support is added, this property will be removed.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.Inode.Volume">
            <summary>
            Gets the volume on which the current inode exists.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.#ctor(Microsoft.BI.Common.IO.MockFileSystem,System.Collections.Generic.IList{Microsoft.BI.Common.IO.Inode})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.Inode"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:Microsoft.BI.Common.IO.MockFileSystem"/> in which the inode will be created.</param>
            <param name="inodes">The list of inodes that are currently in existence.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.AddChild(Microsoft.BI.Common.IO.Inode,System.String,System.Int32)">
            <summary>
            Adds an <see cref="T:Microsoft.BI.Common.IO.Inode"/> as a child to the current inode.
            </summary>
            <param name="child">The <see cref="T:Microsoft.BI.Common.IO.Inode"/> to add as a child.</param>
            <param name="path">The filename of the inode to add.</param>
            <param name="inode">The inode number of the inode to add.</param>
            <exception cref="T:System.InvalidOperationException">The current inode is not a directory.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.Clear">
            <summary>
            Removes all data from the inode.
            </summary>
            <remarks>
            For files, clears all file data.  For directories, empties the directory (but does not delete
            the files and directories inside).  For reparse points, clears the target, making the link
            invalid.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.GetChildren">
            <summary>
            Returns an enumerable collection of filenames and <see cref="T:Microsoft.BI.Common.IO.Inode"/> objects that are the
            children of the current <see cref="T:Microsoft.BI.Common.IO.Inode"/>.
            </summary>
            <returns>An enumerable collection of filenames and <see cref="T:Microsoft.BI.Common.IO.Inode"/> objects that are the
            children of the current <see cref="T:Microsoft.BI.Common.IO.Inode"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The current inode is not a directory.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.RemoveChild(System.String)">
            <summary>
            Removes the child with the specified name from the directory.
            </summary>
            <param name="path">The name of the child to remove.</param>
            <exception cref="T:System.InvalidOperationException">The current inode is not a directory.</exception>
            <remarks>
            If <paramref name="path"/> does not exist, no exception is thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.TryResolve(System.String,Microsoft.BI.Common.IO.Inode@,System.Boolean)">
            <summary>
            Attempts to resolve the specified filename into an <see cref="T:Microsoft.BI.Common.IO.Inode"/>, optionally following
            reparse points.
            </summary>
            <param name="filename">The filename to resolve</param>
            <param name="result">When this method returns, this will contain the resolved <see cref="T:Microsoft.BI.Common.IO.Inode"/> if found,
            or <c>null</c> if not found.</param>
            <param name="followLinks"><c>true</c> to follow reparse points to their targets; <c>false</c> to return the reparse
            point itself.</param>
            <returns><c>true</c> if inode resolution was successful based on <paramref name="filename"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">The current inode is not a directory.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.CopyTo(Microsoft.BI.Common.IO.Inode)">
            <summary>
            Copies the metadata from the current inode to another inode.
            </summary>
            <param name="other">The other inode into which to copy the metadata.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.ToString">
            <summary>
            Returns a human-readable representation of the inode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage">
            <summary>
            A helper class which handles reading and writing inode directory information and presenting
            the data as an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage.#ctor(Microsoft.BI.Common.IO.Inode)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage"/> class.
            </summary>
            <param name="inode">The inode from which to retrieve directory information.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="inode"/> is not a directory.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage.Dispose">
            <summary>
            Writes out the current contents of the <see cref="T:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage"/> to the underlying
            <see cref="T:Microsoft.BI.Common.IO.Inode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage.Dispose(System.Boolean)">
            <summary>
            Writes out the current contents of the <see cref="T:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage"/> to the underlying
            <see cref="T:Microsoft.BI.Common.IO.Inode"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of managed resources as well as unmanaged resources;
            <c>false</c> to dispose of only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage.ReadDirectoryContents">
            <summary>
            Reads the contents of an <see cref="T:Microsoft.BI.Common.IO.Inode"/> instance's <see cref="P:Microsoft.BI.Common.IO.Inode.Data"/> property into
            the current <see cref="T:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage.WriteDirectoryContents">
            <summary>
            Writes the contents of the current <see cref="T:Microsoft.BI.Common.IO.Inode.InodeDirectoryStorage"/> into the underlying
            <see cref="T:Microsoft.BI.Common.IO.Inode"/> instance's <see cref="P:Microsoft.BI.Common.IO.Inode.Data"/> property.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MockStream">
            <summary>
            A mock <see cref="T:System.IO.Stream"/> implementation suitable for testing the behavior of interactions
            with various <see cref="T:System.IO.Stream"/> properties.
            </summary>
            <remarks>
            This class is primarily intended for testing code that interacts with <see cref="T:System.IO.Stream"/> instances.
            It allows setting whether the stream is readable, writable, and seekable, as well as directly setting
            the stream length and position.  It is not suitable for testing code that actually reads or writes
            data, as these methods are stubs that merely change the current position in the stream.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.Readable">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Microsoft.BI.Common.IO.MockStream"/> supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.Seekable">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Microsoft.BI.Common.IO.MockStream"/> supports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.Writable">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Microsoft.BI.Common.IO.MockStream"/> supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.StreamLength">
            <summary>
            Gets or sets the length of the <see cref="T:Microsoft.BI.Common.IO.MockStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockStream.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.MockStream"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.MockStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Advances the position within the stream by the specified number of bytes.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read
            from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>Zero (0).</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset"> A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used
            to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MockStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Advances the current position within this stream by the specified number of bytes.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to
            the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:Microsoft.BI.Common.MockLookup">
            <summary>
            An <see cref="T:Microsoft.BI.Common.ILookup"/> implementation suitable for unit testing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MockLookup.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.MockLookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MockLookup.Data">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> containing the data in the <see cref="T:Microsoft.BI.Common.MockLookup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.MockLookup"/> class.
            </summary>
            <param name="dsvName">The DSV containing the table definition.</param>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.MockLookup"/> class.
            </summary>
            <param name="dsvNames">An enumerable containing one or more DSVs to search.</param>
            <param name="tableName">The name of the DSV table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.MockLookup"/> class.
            </summary>
            <param name="schema">The schema of the lookup.</param>
        </member>
        <member name="P:Microsoft.BI.Common.MockLookup.Keys">
            <summary>
            Gets or sets an array of strings that indicate the names of the primary key columns of the <see cref="T:Microsoft.BI.Common.MockLookup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.Load(System.String)">
            <summary>
            No-op.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.Load(System.IO.Stream)">
            <summary>
            No-op.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            No-op.
            </summary>
            <param name="reader">The reader to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            No-op.
            </summary>
            <param name="row">The row to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.Query(System.Object[])">
            <summary>
            Not implemented.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>An object array containing the result of the lookup, or null if the specified key was not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery(System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery``1(``0@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery``2(``0@,``1@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery``3(``0@,``1@,``2@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery``4(``0@,``1@,``2@,``3@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery``5(``0@,``1@,``2@,``3@,``4@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <typeparam name="T5">The type of the fifth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="value5">The value in which to store the fifth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery``6(``0@,``1@,``2@,``3@,``4@,``5@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <typeparam name="T5">The type of the fifth value to return.</typeparam>
            <typeparam name="T6">The type of the sixth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="value5">The value in which to store the fifth non-key returned by the lookup.</param>
            <param name="value6">The value in which to store the sixth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup.TryQuery(System.Object[]@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="result">The object array in which to store the result of the lookup.</param>
            <param name="values">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.MockLookupFactory">
            <summary>
            An <see cref="T:Microsoft.BI.Common.ILookupFactory"/> implementation for creating <see cref="T:Microsoft.BI.Common.MockLookup"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookupFactory.CreateLookup(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MockLookup"/> based on the specified DSV table.
            </summary>
            <param name="dsv">The path to the DSV to load.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookupFactory.CreateLookup(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MockLookup"/> based on the specified DSV table.
            </summary>
            <param name="dsvs">An enumerable collection of DSV files.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookupFactory.CreateLookup(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MockLookup"/> based on the specified schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in <paramref name="schema"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookupFactory.CreateLookup``2(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MockLookup`2"/> based on the specified DSV table.
            </summary>
            <param name="dsv">The path to the DSV to load.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.MockLookup`2"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookupFactory.CreateLookup``2(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MockLookup`2"/> based on the specified DSV table.
            </summary>
            <param name="dsvs">An enumerable collection of DSV files.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.MockLookup`2"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookupFactory.CreateLookup``2(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MockLookup`2"/> based on the specified schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.MockLookup`2"/> with the schema specified in <paramref name="schema"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.MockLookup`2">
            <summary>
            An <see cref="T:Microsoft.BI.Common.ILookup`2"/> implementation suitable for unit testing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MockLookup`2.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.MockLookup`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MockLookup`2.Schema">
            <summary>
            Gets the schema of the <see cref="T:Microsoft.BI.Common.MockLookup`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MockLookup`2.Data">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the data for the <see cref="T:Microsoft.BI.Common.MockLookup`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.MockLookup`2"/> class.
            </summary>
            <param name="dsvName">The DSV containing the table definition.</param>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.MockLookup`2"/> class.
            </summary>
            <param name="dsvNames">An enumerable containing one or more DSVs to search.</param>
            <param name="tableName">The name of the DSV table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.MockLookup`2"/> class.
            </summary>
            <param name="schema">The schema of the lookup.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the <see cref="T:Microsoft.BI.Common.MockLookup`2"/>.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.Load(System.String)">
            <summary>
            No-op.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.Load(System.IO.Stream)">
            <summary>
            No-op.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            No-op.
            </summary>
            <param name="reader">The reader to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            No-op.
            </summary>
            <param name="row">The row to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.TryQuery(`0)">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The key for which to search.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MockLookup`2.TryQuery(`0,`1@)">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The key for which to search for a value.</param>
            <param name="value">The value found for the given key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
    </members>
</doc>
