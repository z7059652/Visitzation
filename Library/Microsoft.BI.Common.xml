<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.BI.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.BI.Common.Beta.AggregatableAggregator`1">
            <summary>
            An aggregator for aggregating <see cref="T:Microsoft.BI.Common.IAggregatable`1"/> instances.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Beta.AggregatableAggregator`1.IsAdditive">
            <summary>
            Gets a value indicating whether aggregation can be performed in any order.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.AggregatableAggregator`1.Initialize">
            <summary>
            Performs initialization of the aggregation.
            </summary>
            <returns>The initial value for the aggregation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.AggregatableAggregator`1.Add(`0,`0)">
            <summary>
            Performs aggregation, merging the two supplied values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.AggregatableAggregator`1.AddPartial(`0,`0)">
            <summary>
            Performs aggregation, merging the two supplied values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.AggregatableAggregator`1.Finalize(`0)">
            <summary>
            Performs any finalization required for aggregating.
            </summary>
            <param name="value">The value to finalize.</param>
            <returns>The finalized aggregation value.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IAggregator">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <remarks>
            This is a special case of <see cref="T:Microsoft.BI.Common.Beta.IAggregator`1"/> where
            <c>T</c> is of type <see cref="T:System.Object"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IAggregator`1">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <typeparam name="T">The type of objects to aggregate.</typeparam>
            <remarks>
            This is a special case of <see cref="T:Microsoft.BI.Common.Beta.IAggregator`2"/> where
            <c>TIncremental</c> and <c>TFinal</c> are the same type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IAggregator`2">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <typeparam name="TIncremental">The type of each item.</typeparam>
            <typeparam name="TFinal">The finalized type.</typeparam>
            <remarks>
            This is a special case of <see cref="T:Microsoft.BI.Common.Beta.IAggregator`3"/> where
            <c>TCurrent</c> and <c>TIncremental</c> are the same type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IAggregator`3">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <typeparam name="TPartial">The type of the partial aggregate.</typeparam>
            <typeparam name="TIncrement">The type of each item.</typeparam>
            <typeparam name="TFinal">The finalized type.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Beta.IAggregator`3.IsAdditive">
            <summary>
            Gets a value indicating whether aggregation can be performed in any order.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.IAggregator`3.Initialize">
            <summary>
            Performs initialization of the aggregation.
            </summary>
            <returns>The initial value for the aggregation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.IAggregator`3.Add(`0,`1)">
            <summary>
            Performs aggregation, merging the two supplied values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.IAggregator`3.Finalize(`0)">
            <summary>
            Performs any finalization required for aggregating.
            </summary>
            <param name="value">The value to finalize.</param>
            <returns>The finalized aggregation value.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IRecursiveAggregator">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <remarks>
            This is a special case of <see cref="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`1"/> where
            <c>T</c> is of type <see cref="T:System.Object"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`1">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <typeparam name="T">The type of objects to aggregate.</typeparam>
            <remarks>
            This is a special case of <see cref="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`2"/> where
            <c>TIncremental</c> and <c>TFinal</c> are the same type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`2">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <typeparam name="TIncremental">The type of each item.</typeparam>
            <typeparam name="TFinal">The finalized type.</typeparam>
            <remarks>
            This is a special case of <see cref="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`3"/> where
            <c>TCurrent</c> and <c>TIncremental</c> are the same type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`3">
            <summary>
            Defines methods to support aggregation of objects.
            </summary>
            <typeparam name="TPartial">The type of the partial aggregate.</typeparam>
            <typeparam name="TIncremental">The type of each item.</typeparam>
            <typeparam name="TFinal">The finalized type.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.IRecursiveAggregator`3.AddPartial(`0,`0)">
            <summary>
            Performs aggregation, merging the two supplied values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Beta.FuncAggregator`1">
            <summary>
            An aggregator for aggregating values based on a function.
            </summary>
            <typeparam name="T">THe type of values to aggregate.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Beta.FuncAggregator`1.IsAdditive">
            <summary>
            Gets a value indicating whether aggregation can be performed in any order.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.FuncAggregator`1.#ctor(System.Func{`0,`0,`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Beta.FuncAggregator`1"/> class.
            </summary>
            <param name="aggregator">The function to use when aggregating values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="aggregator"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.FuncAggregator`1.Initialize">
            <summary>
            Performs initialization of the aggregation.
            </summary>
            <returns>The initial value for the aggregation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.FuncAggregator`1.Add(`0,`0)">
            <summary>
            Performs aggregation, merging the two supplied values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.FuncAggregator`1.AddPartial(`0,`0)">
            <summary>
            Performs aggregation, merging the two supplied values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Beta.FuncAggregator`1.Finalize(`0)">
            <summary>
            Performs any finalization required for aggregating.
            </summary>
            <param name="value">The value to finalize.</param>
            <returns>The finalized aggregation value.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.Beta.FuncAggregator`1._Aggregator">
            <summary>
            The aggregation function.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IAggregatable">
            <summary>
            An interface that describes methods for aggregating C# objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IAggregatable.InitializeAggregation">
            <summary>
            Performs initialization of the aggregation.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IAggregatable.Aggregate(System.Object)">
            <summary>
            Performs aggregation, merging the supplied object with the current instance.
            </summary>
            <param name="other">The object to merge with the current instance.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IAggregatable.FinalizeAggregation">
            <summary>
            Performs any finalization required for aggregating.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IAggregatable`1">
            <summary>
            An interface that describes methods for aggregating C# objects.
            </summary>
            <remarks>This interface also makes implicit use of <see cref="M:System.Object.GetHashCode"/>.</remarks>
            <typeparam name="T">The type of object to aggregate.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.IAggregatable`1.Aggregate(`0)">
            <summary>
            Performs aggregation, merging the supplied object with the current instance.
            </summary>
            <param name="other">The object to merge with the current instance.</param>
        </member>
        <member name="T:Microsoft.BI.Common.ArithmeticCapabilities">
            <summary>
            Contains values representing various arithmetic properties and capabilities of types being operated upon
            by <see cref="T:Microsoft.BI.Common.IArithmeticProvider`1"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.None">
            <summary>
            The type has no arithmetic capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.MaxValue">
            <summary>
            The type has a maximum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.MinValue">
            <summary>
            The type has a minimum value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.One">
            <summary>
            The type has a logical value for 1.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.Signed">
            <summary>
            The type is a signed type.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.PositiveInfinity">
            <summary>
            The type has a representation for positive infinity.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.NegativeInfinity">
            <summary>
            The type has a representation for negative infinity.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.Zero">
            <summary>
            The type has a representation for zero.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.Add">
            <summary>
            The type supports addition.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.Subtract">
            <summary>
            The type supports subtraction.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.Multiply">
            <summary>
            The type supports multiplication.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.Divide">
            <summary>
            The type supports division.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArithmeticCapabilities.Remainder">
            <summary>
            The type supports getting a remainder from division (modulo).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.ArithmeticDescriptor`1">
            <summary>
            Contains information about the arithmetic capabilities and properties of a type.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.Capabilities">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.ArithmeticCapabilities"/> value that describes the supported operations and properties
            for the type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.MaxValue">
            <summary>
            Gets a value indicating the maximum value of the type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.MinValue">
            <summary>
            Gets a value indicating the minimum value of the type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.PositiveInfinity">
            <summary>
            Gets a value representing positive infinity.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.NegativeInfinity">
            <summary>
            Gets a value representing negative infinity.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.One">
            <summary>
            Gets a value representing one.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.Signed">
            <summary>
            Gets a value indicating whether the type is a signed or unsigned type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticDescriptor`1.Zero">
            <summary>
            Gets a value representing zero.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticDescriptor`1.#ctor(Microsoft.BI.Common.ArithmeticCapabilities)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ArithmeticDescriptor`1"/> class with the specified capabilities.
            </summary>
            <param name="capabilities">The capabilities of the type.</param>
        </member>
        <member name="T:Microsoft.BI.Common.ArithmeticProvider`1">
            <summary>
            Provides a base class for implementations of the <see cref="T:Microsoft.BI.Common.IArithmeticProvider`1"/> generic interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticProvider`1.Default">
            <summary>
            Returns a default arithmetic provider for the type specified by the generic argument.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`1.Difference(`0,`0,System.Boolean@)">
            <summary>
            Computes the difference between two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The difference between <paramref name="value"/> and <paramref name="operand"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ArithmeticProvider`3">
            <summary>
            Provides a base class for implementations of the <see cref="T:Microsoft.BI.Common.IArithmeticProvider`3"/>
            generic interface.
            </summary>
            <typeparam name="T">The type on which to perform the operations.</typeparam>
            <typeparam name="TOffset">The type of the offsetting operand for offsetting operations.</typeparam>
            <typeparam name="TScale">The type of the scaling operand for scaling operations.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.ArithmeticProvider`3.Default">
            <summary>
            Returns a default arithmetic provider for the type specified by the generic arguments.
            </summary>
            <exception cref="T:System.NotSupportedException">An <see cref="T:Microsoft.BI.Common.IArithmeticProvider`3"/> is
            defined for <typeparamref name="T"/>, but one or both of <typeparamref name="TOffset"/> and
            <typeparamref name="TScale"/> are incorrect.</exception>
            <remarks>
            <para>
            If there is no <see cref="T:Microsoft.BI.Common.IArithmeticProvider`3"/> defined for <typeparamref name="T"/>,
            this method returns an <see cref="T:Microsoft.BI.Common.IArithmeticProvider`3"/> with
            <see cref="F:Microsoft.BI.Common.ArithmeticCapabilities.None"/> that will throw a <see cref="T:System.NotSupportedException"/> upon attempting
            to call any method.
            </para>
            <para>
            If there is an <see cref="T:Microsoft.BI.Common.IArithmeticProvider`3"/> defined for <typeparamref name="T"/>
            but one of <typeparamref name="TScale"/> or <typeparamref name="TOffset"/> is incorrect, this method will throw
            a <see cref="T:System.NotSupportedException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.GetDescriptor">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.ArithmeticDescriptor`1"/> that describes the capabilities and characteristics
            of <typeparamref name="T"/>.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.ArithmeticDescriptor`1"/> that describes the capabiliites and characteristics
            of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.AbsoluteValue(`0,System.Boolean@)">
            <summary>
            Computes the absolute value of a value.
            </summary>
            <param name="value">The value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Add(`0,`1,System.Boolean@)">
            <summary>
            Adds two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of adding <paramref name="operand"/> to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Difference(`0,`0,System.Boolean@)">
            <summary>
            Computes the difference between two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The difference between <paramref name="value"/> and <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Divide(`0,`2,System.Boolean@)">
            <summary>
            Divides two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Divide(`0,`2,`1@,System.Boolean@)">
            <summary>
            Divides two values and computes the remainder.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="remainder">When this method returns, contains the remainder of the division operation.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Multiply(`0,`2,System.Boolean@)">
            <summary>
            Multiplies two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of multiplying <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Negate(`0,System.Boolean@)">
            <summary>
            Negates a value.
            </summary>
            <param name="value">The value to negate.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The negation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Remainder(`0,`2,System.Boolean@)">
            <summary>
            Computes the remainder of dividing two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The remainder of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Sign(`0)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>A positive value if <paramref name="value"/> is positive, zero if <paramref name="value"/> is
            zero, or a negative value if <paramref name="value"/> is negative.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Subtract(`0,`1,System.Boolean@)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of subtracting <paramref name="operand"/> form <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.AbsoluteValue(`0)">
            <summary>
            Computes the absolute value of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Add(`0,`1)">
            <summary>
            Adds two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of adding <paramref name="operand"/> to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Difference(`0,`0)">
            <summary>
            Computes the difference between two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The difference between <paramref name="value"/> and <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Divide(`0,`2)">
            <summary>
            Divides two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Divide(`0,`2,`1@)">
            <summary>
            Divides two values and computes the remainder.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="remainder">When this method returns, contains the remainder of the division operation.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Multiply(`0,`2)">
            <summary>
            Multiplies two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of multiplying <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Negate(`0)">
            <summary>
            Negates a value.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>The negation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Remainder(`0,`2)">
            <summary>
            Computes the remainder of dividing two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The remainder of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArithmeticProvider`3.Subtract(`0,`1)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of subtracting <paramref name="operand"/> form <paramref name="value"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IArithmeticProvider`1">
            <summary>
            Defines methods for performing arithmetic operations on value types where the offset and scale types are
            the same as the original type.
            </summary>
            <typeparam name="T">The type on which to perform the operations.</typeparam>
            <remarks>
            Most value types that support arithmetic operations fall into this category; namely, types where the
            offset and scale type are the same as the original type.  For example, the result of multiplying two
            integers is another integer, and the result of subtracting two bytes is another byte.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IArithmeticProvider`3">
            <summary>
            Defines methods for performing arithmetic operations on value types.
            </summary>
            <typeparam name="T">The type on which to perform the operations.</typeparam>
            <typeparam name="TOffset">The type of the offsetting operand for offsetting operations.</typeparam>
            <typeparam name="TScale">The type of the scaling operand for scaling operations.</typeparam>
            <remarks>
            This interface is a combination of all arithmetic interfaces.  It includes support for adding, subtracting,
            multiplying, dividing, and perfomring signed arithmetic.  Certain types may not support all operations exposed
            by this interface.  Check the <see cref="P:Microsoft.BI.Common.ArithmeticDescriptor`1.Capabilities"/> value in the
            <see cref="T:Microsoft.BI.Common.ArithmeticDescriptor`1"/> returned by <see cref="M:Microsoft.BI.Common.IArithmeticProvider`3.GetDescriptor"/> for the list of supported
            capabilities for the current type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.GetDescriptor">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.ArithmeticDescriptor`1"/> that describes the capabilities and characteristics
            of <typeparamref name="T"/>.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.ArithmeticDescriptor`1"/> that describes the capabiliites and characteristics
            of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Add(`0,`1)">
            <summary>
            Adds two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of adding <paramref name="operand"/> to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Add(`0,`1,System.Boolean@)">
            <summary>
            Adds two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of adding <paramref name="operand"/> to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Difference(`0,`0)">
            <summary>
            Computes the difference between two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The difference between <paramref name="value"/> and <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Difference(`0,`0,System.Boolean@)">
            <summary>
            Computes the difference between two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The difference between <paramref name="value"/> and <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Subtract(`0,`1)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of subtracting <paramref name="operand"/> form <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Subtract(`0,`1,System.Boolean@)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of subtracting <paramref name="operand"/> form <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Divide(`0,`2)">
            <summary>
            Divides two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Divide(`0,`2,System.Boolean@)">
            <summary>
            Divides two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Divide(`0,`2,`1@)">
            <summary>
            Divides two values and computes the remainder.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="remainder">When this method returns, contains the remainder of the division operation.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Divide(`0,`2,`1@,System.Boolean@)">
            <summary>
            Divides two values and computes the remainder.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="remainder">When this method returns, contains the remainder of the division operation.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Remainder(`0,`2)">
            <summary>
            Computes the remainder of dividing two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The remainder of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Remainder(`0,`2,System.Boolean@)">
            <summary>
            Computes the remainder of dividing two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The remainder of dividing <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Multiply(`0,`2)">
            <summary>
            Multiplies two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <returns>The result of multiplying <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Multiply(`0,`2,System.Boolean@)">
            <summary>
            Multiplies two values.
            </summary>
            <param name="value">The first value.</param>
            <param name="operand">The second value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The result of multiplying <paramref name="value"/> by <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.AbsoluteValue(`0)">
            <summary>
            Computes the absolute value of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.AbsoluteValue(`0,System.Boolean@)">
            <summary>
            Computes the absolute value of a value.
            </summary>
            <param name="value">The value.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Negate(`0)">
            <summary>
            Negates a value.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>The negation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Negate(`0,System.Boolean@)">
            <summary>
            Negates a value.
            </summary>
            <param name="value">The value to negate.</param>
            <param name="overflowed">When this method returns, contains a value indicating whether the operation
            resulted in arithmetic overflow.</param>
            <returns>The negation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IArithmeticProvider`3.Sign(`0)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>A positive value if <paramref name="value"/> is positive, zero if <paramref name="value"/> is
            zero, or a negative value if <paramref name="value"/> is negative.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ObjectArithmeticProvider`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IArithmeticProvider`1"/> for <see cref="T:System.Object"/> with no capabilities.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="T:Microsoft.BI.Common.AssemblyManifest">
            <summary>
            Provides helper functions for accessing assembly resource files.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.AssemblyManifest.OpenEmbeddedResource(System.Reflection.Assembly,System.String)">
            <summary>
            Opens a resource in the specified assembly.
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="resourceName">The resource name.</param>
            <returns>A stream pointing to the contents of the resource.</returns>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="assembly"/> does not contain a manifest resource with
            name <paramref name="resourceName"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.AssemblyManifest.OpenEmbeddedResource(System.String)">
            <summary>
            Opens a resource in the calling assembly.
            </summary>
            <param name="resourceName">The resource name.</param>
            <returns>A stream pointing to the contents of the resource.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The calling assembly does not contain a manifest resource with
            name <paramref name="resourceName"/>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.BatchJobInfo">
            <summary>
            Abstract class describing job that runs in batches.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.BatchJobInfo.XMLNS">
            <summary>
            The XML namespace in which <see cref="T:Microsoft.BI.Common.BatchJobInfo"/> objects are serialized.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.BatchJobInfo.BatchDateTime">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> this particular job referrs to.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.BatchJobInfo.Variables">
            <summary>
            Gets the collection of variablies associated with the job instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.BatchJobInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.#ctor(System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.BatchJobInfo"/> class.
            </summary>
            <param name="batchDateTime">A <see cref="T:System.DateTime"/> instance indicating the batch date and time of this job.</param>
            <param name="arguments">A dictionary of key-value pairs representing arguments to pass to the job.</param>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.ReplaceBatchDateTime(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Substitutes <see cref="P:Microsoft.BI.Common.BatchJobInfo.BatchDateTime"/> into a string according to the pattern specified.
            </summary>
            <param name="s">The string containing the pattern(s) to substitute.</param>
            <param name="offset">An optional <see cref="T:System.TimeSpan"/> to apply to <see cref="P:Microsoft.BI.Common.BatchJobInfo.BatchDateTime"/> prior
            to formatting.</param>
            <returns>The modified string.</returns>
            <remarks>
            Only valid <see cref="T:System.DateTime"/> formatting sequences are considered.  Anything that does not match a
            standard sequence is ignored.  (Essentially, everything between braces is passed as the format string to
            <see cref="M:System.DateTime.ToString"/>.)  The '{' and '}' characters, when not used as the pattern start/end
            indicators, must be escaped by doubling them ("{{" and "}}", respectively).
            </remarks>
            <example>
            If <see cref="P:Microsoft.BI.Common.BatchJobInfo.BatchDateTime"/> is January 2, 2008, 1:00:00 PM, the following string
               "{yyyy} MMyyyy {yo dd-HH}"
            becomes:
               "2008 MMyyyy 1o 02-13"
            when calling <see cref="M:Microsoft.BI.Common.BatchJobInfo.ReplaceBatchDateTime(System.String,System.Nullable{System.TimeSpan})"/>.
            </example>
            <seealso cref="M:System.DateTime.ToString"/>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.ReplaceBatchDateTime(System.String,System.DateTime,System.Nullable{System.TimeSpan})">
            <summary>
            Substitutes <see cref="P:Microsoft.BI.Common.BatchJobInfo.BatchDateTime"/> into a string according to the pattern specified.
            </summary>
            <param name="s">The string containing the pattern(s) to substitute.</param>
            <param name="dateTime">The <see cref="T:System.DateTime"/> value to use in the substitution.</param>
            <param name="offset">An optional <see cref="T:System.TimeSpan"/> to apply to <paramref name="dateTime"/> prior
            to formatting.</param>
            <returns>The modified string.</returns>
            <remarks>
            Only valid <see cref="T:System.DateTime"/> formatting sequences are considered.  Anything that does not match a
            standard sequence is ignored.  (Essentially, everything between braces is passed as the format string to
            <see cref="M:System.DateTime.ToString"/>.)  The '{' and '}' characters, when not used as the pattern start/end
            indicators, must be escaped by doubling them ("{{" and "}}", respectively).
            </remarks>
            <example>
            If <see cref="P:Microsoft.BI.Common.BatchJobInfo.BatchDateTime"/> is January 2, 2008, 1:00:00 PM, the following string
               "{yyyy} MMyyyy {yo dd-HH}"
            becomes:
               "2008 MMyyyy 1o 02-13"
            when calling <see cref="M:Microsoft.BI.Common.BatchJobInfo.ReplaceBatchDateTime(System.String,System.DateTime,System.Nullable{System.TimeSpan})"/>.
            </example>
            <seealso cref="M:System.DateTime.ToString"/>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.ReadVariables(System.Xml.XmlReader)">
            <summary>
            Reads the variables section of a job info.
            </summary>
            <param name="reader">The reader containing the variables.</param>
        </member>
        <member name="F:Microsoft.BI.Common.BatchJobInfo._MacroRegex">
            <summary>
            Regular expression recognizing macros of the form '$(x)'.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.ResolveVariables(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Replaces '$(x)' with <see cref="P:Microsoft.BI.Common.BatchJobInfo.Variables"/>["x"].
            </summary>
            <param name="s">The string in which to replace macros.</param>
            <param name="offset">The offset from the job batch time to apply.</param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.ResolveVariables(System.String,System.DateTime,System.Nullable{System.TimeSpan})">
            <summary>
            Replaces '$(x)' with <see cref="P:Microsoft.BI.Common.BatchJobInfo.Variables"/>["x"].
            </summary>
            <param name="s">The string in which to replace macros.</param>
            <param name="dateTime">The time to apply.</param>
            <param name="offset">The offset from <paramref name="dateTime"/> to apply.</param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.BatchJobInfo.ValidationCallback(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Validation callback that subclasses can use to report config validation errors.
            </summary>
            <param name="sender">The object that raised this event.</param>
            <param name="args">A <see cref="T:System.Xml.Schema.ValidationEventArgs"/> instance containing event information.</param>
        </member>
        <member name="T:Microsoft.BI.Common.JobStreamInfo">
            <summary>
            A class representing information about a stream for a job.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.JobStreamInfo.Name">
            <summary>
            Gets or sets the name of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.JobStreamInfo.Location">
            <summary>
            Gets or sets the location of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.JobStreamInfo.DataFormat">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.JobStreamInfo.DataFormat"/> of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.JobStreamInfo.DataCompression">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.JobStreamInfo.DataCompression"/> of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.JobStreamInfo.Offset">
            <summary>
            Gets or sets a <see cref="T:System.TimeSpan"/> value indicating the offset of the stream from the associated batch's process time.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.JobStreamInfo.#ctor">
            <summary>
            For XML serialization.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.JobStreamInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.JobStreamInfo"/> class.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Endianness">
            <summary>
            Enumeration of possible endian values when iteracting with bits in a <see cref="T:Microsoft.BI.Common.Bitmap"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Endianness.Little">
            <summary>
            Little endian.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Endianness.Big">
            <summary>
            Big endian.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Bitmap">
            <summary>
            A wrapper class on top of a byte array allowing for bit-level manipulation of the array.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Bitmap.ByteValue">
            <summary>
            Gets or sets the byte array on top of which the <see cref="T:Microsoft.BI.Common.Bitmap"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Bitmap.Length">
            <summary>
            Gets the number of bits in the <see cref="T:Microsoft.BI.Common.Bitmap"/>.
            </summary>
            <remarks>
            <para>
            This should not be confused with the length of the underlying byte array - this property returns the number of
            bits in the <see cref="T:Microsoft.BI.Common.Bitmap"/>, not the number of bytes.  If the <see cref="T:Microsoft.BI.Common.Bitmap"/> was created from a byte
            array instance without specifying an explicit size (such as using the <see cref="M:Microsoft.BI.Common.Bitmap.#ctor(System.Byte[])"/> constructor,
            then the value of <see cref="P:Microsoft.BI.Common.Bitmap.Length"/> will be equal to 8 times the number of bytes in the original byte array.
            However, if an explicit size was specified, <see cref="P:Microsoft.BI.Common.Bitmap.Length"/> may be less than this number.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Bitmap.BitsSet">
            <summary>
            Gets the number of bits that are set (1) in the bitmap.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.#ctor(Microsoft.BI.Common.Bitmap)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Bitmap"/> class by copying the byte array from
            another <see cref="T:Microsoft.BI.Common.Bitmap"/> instance.
            </summary>
            <param name="other">Another <see cref="T:Microsoft.BI.Common.Bitmap"/> from which to copy data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Bitmap"/> class by copying bytes from the specified enumerable
            collection of bytes.
            </summary>
            <param name="bytes">An enumerable collection of bytes from which to copy data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Bitmap"/> with the specified number of bits.
            </summary>
            <param name="size">The number of bits.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Bitmap"/> on top of the existing byte array.
            </summary>
            <param name="bytes">The byte array on which to operate.</param>
            <remarks>
            <para>
            This constructor creates a <see cref="T:Microsoft.BI.Common.Bitmap"/> using the supplied byte array directly - that is, the array is not copied and any changes
            that are made to the original byte array will be reflected in the <see cref="T:Microsoft.BI.Common.Bitmap"/> and vice versa.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Bitmap"/> on top of the existing byte array.  The size parameter
            restricts the number of bits that are visible.
            </summary>
            <param name="bytes">The byte array on which to operate.</param>
            <param name="size">The number of bits in the byte array to include.</param>
            <remarks>
            <para>
            This constructor creates a <see cref="T:Microsoft.BI.Common.Bitmap"/> using the supplied byte array directly - that is, the array is not copied and any changes
            that are made to the original byte array will be reflected in the <see cref="T:Microsoft.BI.Common.Bitmap"/> and vice versa.
            </para>
            <para>
            <paramref name="size"/> determines the number of bits in <paramref name="bytes"/> that are visible - any bits beyond the specified range
            will not be accessible in the resulting <see cref="T:Microsoft.BI.Common.Bitmap"/>.  This means that, for example, if you create a <see cref="T:Microsoft.BI.Common.Bitmap"/> from a
            byte array and supply a size other than <c>bytes.Length * 8</c>, you will be unable to use bitwise operators to combine the <see cref="T:Microsoft.BI.Common.Bitmap"/>
            with the underlying byte array and <see cref="M:Microsoft.BI.Common.Bitmap.Equals(System.Object)"/> will return false when passed the underlying byte array.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.FromHexString(System.String)">
            <summary>
            Converts a string of hex characters (A-Z, 0-9) into the equivalent <see cref="T:Microsoft.BI.Common.Bitmap"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Bitmap"/> containing the equivalent byte array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> does not contain an even number of characters.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.TryFromHexString(System.String,Microsoft.BI.Common.Bitmap@)">
            <summary>
            Attempts to convert a string of hex characters (A-Z, 0-9) into the equivalent <see cref="T:Microsoft.BI.Common.Bitmap"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">If the conversion succeeds, this parameter will contain the result of the
            conversion.  If it fails, it will contain <c>null</c>.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.FromString(System.String,System.Text.Encoding)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.Bitmap"/> containing the byte representation of the given string with the specified encoding.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="encoding">The encoding to use; if not specified, <see cref="P:System.Text.Encoding.UTF8"/> is used.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Bitmap"/> containing the bytes of <paramref name="s"/> encoded using <paramref name="encoding"/>.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.Bitmap.Item(System.Int32)">
            <summary>
            Gets the bit at the specified bit position in the current <see cref="T:Microsoft.BI.Common.Bitmap"/> object.
            </summary>
            <param name="index">A bit position in the current <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <returns>0 or 1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is not 0 or 1.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is greater than or equal to the length of this
            object or less than 0.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_BitwiseOr(Microsoft.BI.Common.Bitmap,Microsoft.BI.Common.Bitmap)">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Bitmap"/> that contains the result of computing the bitwise-or between two <see cref="T:Microsoft.BI.Common.Bitmap"/> objects.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <returns>The result of computing the bitwise-or between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are of different lengths.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <c>null</c> -or- <paramref name="right"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_BitwiseOr(Microsoft.BI.Common.Bitmap,System.Byte[])">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Bitmap"/> that contains the result of computing the bitwise-or between a <see cref="T:Microsoft.BI.Common.Bitmap"/> and a byte array.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <param name="right">The byte array.</param>
            <returns>The result of computing the bitwise-or between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are of different lengths.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <c>null</c> -or- <paramref name="right"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_BitwiseAnd(Microsoft.BI.Common.Bitmap,Microsoft.BI.Common.Bitmap)">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Bitmap"/> that contains the result of computing the bitwise-and between two <see cref="T:Microsoft.BI.Common.Bitmap"/> objects.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <returns>The result of computing the bitwise-and between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are of different lengths.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <c>null</c> -or- <paramref name="right"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_BitwiseAnd(Microsoft.BI.Common.Bitmap,System.Byte[])">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Bitmap"/> that contains the result of computing the bitwise-and between a <see cref="T:Microsoft.BI.Common.Bitmap"/> and a byte array.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <param name="right">The byte array.</param>
            <returns>The result of computing the bitwise-and between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are of different lengths.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <c>null</c> -or- <paramref name="right"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_ExclusiveOr(Microsoft.BI.Common.Bitmap,Microsoft.BI.Common.Bitmap)">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Bitmap"/> that contains the result of computing the bitwise-xor between two <see cref="T:Microsoft.BI.Common.Bitmap"/> objects.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <param name="right">The second <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <returns>The result of computing the bitwise-xor between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are of different lengths.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <c>null</c> -or- <paramref name="right"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_ExclusiveOr(Microsoft.BI.Common.Bitmap,System.Byte[])">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Bitmap"/> that contains the result of computing the bitwise-xor between a <see cref="T:Microsoft.BI.Common.Bitmap"/> and a byte array.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.Bitmap"/>.</param>
            <param name="right">The byte array.</param>
            <returns>The result of computing the bitwise-xor between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are of different lengths.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is <c>null</c> -or- <paramref name="right"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_Equality(Microsoft.BI.Common.Bitmap,System.Object)">
            <summary>
            Determines whether two specified <see cref="T:Microsoft.BI.Common.Bitmap"/> objects have the same value.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.BI.Common.Bitmap"/> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.BI.Common.Bitmap"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_Inequality(Microsoft.BI.Common.Bitmap,System.Object)">
            <summary>
            Determines whether two specified <see cref="T:Microsoft.BI.Common.Bitmap"/> objects have different values.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.BI.Common.Bitmap"/> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.BI.Common.Bitmap"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is different from the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_Explicit(Microsoft.BI.Common.Bitmap)~System.Byte[]">
            <summary>
            Returns the value of the <see cref="T:Microsoft.BI.Common.Bitmap"/> as a byte array.
            </summary>
            <param name="b">The <see cref="T:Microsoft.BI.Common.Bitmap"/> to convert.</param>
            <returns>The value of <paramref name="b"/> as a byte array.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.op_Explicit(System.Byte[])~Microsoft.BI.Common.Bitmap">
            <summary>
            Returns the value of the byte array as a <see cref="T:Microsoft.BI.Common.Bitmap"/>.
            </summary>
            <param name="b">The byte array to convert.</param>
            <returns>The value of <paramref name="b"/> as a <see cref="T:Microsoft.BI.Common.Bitmap"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.SetBit(System.Int32)">
            <summary>
            Sets the specified bit if not already set; otherwise does nothing.
            </summary>
            <param name="bit">The bit to set.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.SetBit(System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Sets the specified bit relative to the specified endianness if not already set; otherwise does nothing.
            </summary>
            <param name="bit">The bit to set.</param>
            <param name="endianness">The endianness to use when calculating the bit position.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.UnsetBit(System.Int32)">
            <summary>
            Unsets the specified bit if it is set; otherwise does nothing.
            </summary>
            <param name="bit">The bit to unset.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.UnsetBit(System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Unsets the specified bit relative to the specified endianness if it is set; otherwise does nothing.
            </summary>
            <param name="bit">The bit to unset.</param>
            <param name="endianness">The endianness to use when calculating the bit position.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSetSafe(System.Int32)">
            <summary>
            Determines whether the specified bit is set and do not crash if the index exceeds the size of the bitmap.
            </summary>
            <param name="bit">The bit to check.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSetSafe(System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Determines whether the specified bit is set and do not crash if the index exceeds the size of the bitmap.
            </summary>
            <param name="bit">The bit to check.</param>
            <param name="endianness">The endianness to use when calculating the bit position.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSet(System.Int32)">
            <summary>
            Determines whether the specified bit is set.
            </summary>
            <param name="bit">The bit to check.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>true</c>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSet(System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Determines whether the specified bit is set.
            </summary>
            <param name="bit">The bit to check.</param>
            <param name="endianness">The endianness to use when calculating the bit position.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>false</c>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSetSafe(System.Byte[],System.Int32)">
            <summary>
            Determines whether the specified bit is set and do not crash if the index exceeds the size of the bitmap.
            </summary>
            <param name="bitmap">The array in which to check.</param>
            <param name="bit">The bit to check.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSetSafe(System.Byte[],System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Determines whether the specified bit is set and do not crash if the index exceeds the size of the bitmap.
            </summary>
            <param name="bitmap">The array in which to check.</param>
            <param name="bit">The bit to check.</param>
            <param name="endianness">The endianness to use when calculating the bit position.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSet(System.Byte[],System.Int32)">
            <summary>
            Determines whether the specified bit is set.
            </summary>
            <param name="bitmap">The array in which to check.</param>
            <param name="bit">The bit to check.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>true</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSet(System.Byte[],System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Determines whether the specified bit is set.
            </summary>
            <param name="bitmap">The array in which to check.</param>
            <param name="bit">The bit to check.</param>
            <param name="endianness">The endianness to use when calculating the bit position.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.IsBitSet(System.Byte[],System.Int32,System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Determines whether the specified bit is set.
            </summary>
            <param name="bitmap">The array in which to check.</param>
            <param name="length">The number of bits in <paramref name="bitmap"/> to consider.</param>
            <param name="bit">The bit to check.</param>
            <param name="endianness">The endianness to use when calculating the bit position.</param>
            <returns><c>true</c> if the bit is set; otherwise <c>false</c>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.CountSetBits(System.Byte[])">
            <summary>
            Gets the number of bits that are set (1) in the byte array.
            </summary>
            <param name="bitmap">The byte array in which to count set bits.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.CopyTo(Microsoft.BI.Common.Bitmap,System.Int32)">
            <summary>
            Copy the contents of this <see cref="T:Microsoft.BI.Common.Bitmap"/> to another Bitmap.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.Bitmap"/> to copy to.</param>
            <param name="index">The index in the other bitmap at which to start copying.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copy the contents of this <see cref="T:Microsoft.BI.Common.Bitmap"/> into a byte array.
            </summary>
            <param name="other">The byte array to copy to.</param>
            <param name="index">The index in the byte array at which to start copying.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.ToString(System.Text.Encoding)">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.Bitmap"/> with the given encoding.
            </summary>
            <param name="encoding">The encoding to use when converting.</param>
            <returns>The string representation of the <see cref="T:Microsoft.BI.Common.Bitmap"/> in the specified encoding.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.Bitmap"/> in hex.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.Bitmap"/> as a hexadecimal string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.ToHexString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.Bitmap"/> in hex.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.Bitmap"/> as a hexadecimal string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must be either a <see cref="T:Microsoft.BI.Common.Bitmap"/> or byte array, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Microsoft.BI.Common.Bitmap"/> to compare to this instance.</param>
            <returns><c>true</c> if the <paramref name="obj"/> and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.BI.Common.Bitmap"/> instances are compared by the value of their byte arrays, not by reference.  If the <see cref="T:Microsoft.BI.Common.Bitmap"/> instances
            have the same <see cref="P:Microsoft.BI.Common.Bitmap.Length"/> and every bit in each bitmap has the same value, the <see cref="T:Microsoft.BI.Common.Bitmap"/> instances are
            considered equal; otherwise, they are considered not equal.
            </para>
            <para>
            If <paramref name="obj"/> is a byte array, it is converted to a <see cref="T:Microsoft.BI.Common.Bitmap"/> object before comparison.  It otherwise follows
            all comparison rules for <see cref="T:Microsoft.BI.Common.Bitmap"/> objects as described above.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.Equals(Microsoft.BI.Common.Bitmap)">
            <summary>
            Determines whether this instance and another <see cref="T:Microsoft.BI.Common.Bitmap"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.Bitmap"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other"/> and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.BI.Common.Bitmap"/> instances are compared by the value of their byte arrays, not by reference.  If the <see cref="T:Microsoft.BI.Common.Bitmap"/> instances
            have the same <see cref="P:Microsoft.BI.Common.Bitmap.Length"/> and every bit in each bitmap has the same value, the <see cref="T:Microsoft.BI.Common.Bitmap"/> instances are
            considered equal; otherwise, they are considered not equal.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Microsoft.BI.Common.Bitmap"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual bits in this bitmap.
            </summary>
            <returns>An enumerator over the individual bits in the bitmap.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.BitmapEquals(Microsoft.BI.Common.Bitmap)">
            <summary>
            Determines whether all the bits in this <see cref="T:Microsoft.BI.Common.Bitmap"/> instance have the same state as all the bits in another <see cref="T:Microsoft.BI.Common.Bitmap"/> instance.
            </summary>
            <param name="other">The other Bitmap to compare to.</param>
            <returns><c>true</c> if every single bit matches between the two <see cref="T:Microsoft.BI.Common.Bitmap"/> objects; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.ByteLength(System.Int32)">
            <summary>
            Gets the number of bytes needed to represent the specified bit length.
            </summary>
            <param name="bitLength">The number of bits.</param>
            <returns>The number of bytes required to contain <paramref name="bitLength"/> bits.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.BitCount(System.Byte)">
            <summary>
            Gets the number of bits that are set in the specified byte.
            </summary>
            <param name="b">The byte to count bits in.</param>
            <returns>The number of bits that are set in the byte.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.ByteNumber(System.Int32,System.Int32,Microsoft.BI.Common.Endianness)">
            <summary>
            Gets the index of the byte in which a given bit will appear.
            </summary>
            <param name="length">The length of the bitmap.</param>
            <param name="bit">The bit number to get the byte index of.</param>
            <param name="endianness">The endianness of <paramref name="bit"/>.</param>
            <returns>The byte index in which this bit appears.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.CheckBitIndex(System.Int32,System.Int32)">
            <summary>
            Ensure the specified bit is within indexible range.
            </summary>
            <param name="length">The length of the bitmap.</param>
            <param name="bit">The bit index to check.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="bit"/> is less than zero -or- <paramref name="bit"/> is greater than or equal to the size
            of the <see cref="T:Microsoft.BI.Common.Bitmap"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.ByteArrayToHexString(System.Byte[])">
            <summary>
            Convert a byte array to a hex string.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>The byte array represented as a hex string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.ByteArrayToHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a portion of a byte array to a hex string.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <param name="offset">The index in the byte array to start converting.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>The byte array represented as a hex string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="bytes"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Bitmap.HexStringToByteArray(System.String)">
            <summary>
            Convert a hex string to a byte array.
            </summary>
            <param name="hex">The hex string to convert.</param>
            <returns>The equivalent byte array.</returns>
            <exception cref="T:System.FormatException"><paramref name="hex"/> does not have even length, starts with "0x"
            and has no more characters, or contains one or more characters that are not valid hex characters.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.BruteForceSerializer">
            -------------------------------------------------------------------------------
             <summary>
             Perform XML serialization on pretty much anything
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="F:Microsoft.BI.Common.BruteForceSerializer.m_alreadySerializedObjects">
            <summary>
            Track objects we have already serialized
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.BruteForceSerializer.m_alreadyDeserializedObjects">
            <summary>
            Track objecst we have already de-serialized
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.BruteForceSerializer.m_encodedFieldShortNames">
            <summary>
            Track the names of fields we have seen
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.BruteForceSerializer.m_types">
            <summary>
            Track Types that we resolve
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.BruteForceSerializer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.#ctor(System.Reflection.Assembly[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.BruteForceSerializer"/> class using the types defined in the specified assemblies.
            </summary>
            <param name="assemblies">An array of <see cref="T:System.Reflection.Assembly"/> objects to include.</param>
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.SerializeToXml(System.Object)">
            -------------------------------------------------------------------------------
             <summary>
             Serialize an object to an XML representation
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.SerializeObject(System.Object,System.Xml.XmlDocument)">
            -------------------------------------------------------------------------------
             <summary>
             Top of the recursion stack- serialize an object to XML using reflection
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.IsDelegate(System.Type)">
            -------------------------------------------------------------------------------
             <summary>
             Return true if the type in question is a delegate
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.IsSerializable(System.Reflection.FieldInfo)">
            -------------------------------------------------------------------------------
             <summary>
             Return true if this is a field we can serialize
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.SerializeField(System.Reflection.FieldInfo,System.Object,System.Xml.XmlDocument)">
            -------------------------------------------------------------------------------
             <summary>
             Serialize a particular field on an object
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.CreateFieldElement(System.String,System.Xml.XmlDocument)">
            -------------------------------------------------------------------------------
             <summary>
             Create a standard element for a field.
             To help save space, we remember field names and convert them to a short name
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.SerializeArray(System.Xml.XmlNode,System.Type,System.Array,System.Xml.XmlDocument)">
            -------------------------------------------------------------------------------
             <summary>
             Arrays get special treatment
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.IsSimpleArrayType(System.Type)">
            -------------------------------------------------------------------------------
             <summary>
             Identify types that can be represented with comma-separated ToString() output
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.SerializeValue(System.String,System.Object,System.Xml.XmlDocument)">
            -------------------------------------------------------------------------------
             <summary>
             Turn an actual value into an XML representation
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.Deserialize(System.String)">
            -------------------------------------------------------------------------------
             <summary>
             load a file and extract an object from it.
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.Deserialize(System.Xml.XmlReader)">
            -------------------------------------------------------------------------------
             <summary>
             extract an object from an xmlStream
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.ResolveType(System.Object)">
            -------------------------------------------------------------------------------
             <summary>
             Remember where we get types so the deserializer can work across domain 
             boundaries.   When deserializing, you may need to call this method to 
             teach the deserializer about certain types it can't see natively.
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.ResolveType(System.Type)">
            -------------------------------------------------------------------------------
             <summary>
             Remember where we get types so the deserializer can work across domain 
             boundaries.   When deserializing, you may need to call this method to 
             teach the deserializer about certain types it can't see natively.
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.ResolveType(System.String,System.Reflection.Assembly)">
            -------------------------------------------------------------------------------
             <summary>
             Remember where we get types so the deserializer can work across domain 
             boundaries.   When deserializing, you may need to call this method to 
             teach the deserializer about certain types it can't see natively.
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.DeserializeObject(System.Xml.XmlReader)">
            -------------------------------------------------------------------------------
             <summary>
             Top of the deserialization stack
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.GetTypeViaHints(System.String)">
            -------------------------------------------------------------------------------
             <summary>
             Get type based on hints from assembly names            
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.GetValue(System.Type,System.Xml.XmlReader)">
            -------------------------------------------------------------------------------
             <summary>
             Get back the actual value for this node.
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="M:Microsoft.BI.Common.BruteForceSerializer.DeserializeArray(System.Type,System.Xml.XmlReader)">
            -------------------------------------------------------------------------------
             <summary>
             Special handling for deserializing arrays
             </summary>
            -------------------------------------------------------------------------------
        </member>
        <member name="T:Microsoft.BI.Common.ByteArrayComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> for comparing byte arrays.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ByteArrayComparer.Default">
            <summary>
            Gets a default <see cref="T:Microsoft.BI.Common.ByteArrayComparer"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ByteArrayComparer.Compare(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first byte array to compare.</param>
            <param name="y">The second byte array to compare.</param>
            <returns><c>-1</c> if <paramref name="x"/> is less than <paramref name="y"/>; <c>0</c> if <paramref name="x"/> equals
            <paramref name="y"/>; <c>1</c> if <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteArrayComparer.Equals(System.Byte[],System.Byte[])">
            <summary>
            Determines whether the specified byte arrays are equal.
            </summary>
            <param name="x">The first byte array to compare.</param>
            <param name="y">The second byte array to compare.</param>
            <returns><c>true</c> if the specified byte arrays are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteArrayComparer.GetHashCode(System.Byte[])">
            <summary>
            Returns a hash code for the specified byte array.
            </summary>
            <param name="obj">The byte array for which a hash code is to be returned.</param>
            <returns>A hash code for the specified byte array.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ByteOrder">
            <content>
            Contains method permutations for changing byte orderings.
            </content>
            <summary>
            Contains methods for modifying the byte order of integer values.
            </summary>
            <remarks>
            <para>
            This class provides functions for changing the ordering of bytes with in integral values.  Most commonly
            (though not always), byte ordering is significant when considering the endianness of the CPU architecture
            running the program.
            </para>
            <para>
            (Note: in the vast majority of cases, it is desireable to write programs that are not sensitive to the
            underlying endianness of the machine on which they run, as it can be difficult to maintain and prone to
            errors to try to support both configurations.  However, there are some cases when such code is inevitable,
            and in these cases, the functions in <see cref="T:Microsoft.BI.Common.ByteOrder"/> can be useful.)
            </para>
            <para>
            "Endianness" refers to the convention used to interpret the bytes making up a data word in computer memory;
            specifically, the ordering of these bytes.  Big-endian systems store the most significant byte of a word
            in the smallest address and the least significant byte in the largest address.  Little-endian systems, in
            contrast, store the least significant byte in the smallest address and the most significant byte in the
            largest address.
            </para>
            <para>
            Consider the following example of storing the 32-bit integer <c>0x0A0B0C0D</c> in memory:
            <example>
              On a big-endian system, the following table shows how the integer will be laid out in memory:
              <list type="table">
                <listheader><term>Address     </term><term>Value     </term></listheader>
                <item>      <term><c>a    </c></term><term><c>0A</c></term></item>
                <item>      <term><c>a + 1</c></term><term><c>0B</c></term></item>
                <item>      <term><c>a + 2</c></term><term><c>0C</c></term></item>
                <item>      <term><c>a + 3</c></term><term><c>0D</c></term></item>
              </list>
              In contrast, on a little-endian system, the same integer will be laid out as follows:
              <list type="table">
                <listheader><term>Address     </term><term>Value    </term></listheader>
                <item>      <term><c>a    </c></term><term><c>0D</c></term></item>
                <item>      <term><c>a + 1</c></term><term><c>0C</c></term></item>
                <item>      <term><c>a + 2</c></term><term><c>0B</c></term></item>
                <item>      <term><c>a + 3</c></term><term><c>0A</c></term></item>
              </list>
            </example>
            </para>
            <para>
            The functions in the <see cref="T:Microsoft.BI.Common.ByteOrder"/> class facilitate transforming back and forth between little-,
            big-, and native byte ordering.  Native byte ordering is defined as the endianness of the CPU executing the
            current process.  When using a function to transform the byte order of a value, the actual ordering of the
            bytes in memory may or may not change, depending on the current and target endianness.  For example, the
            <see cref="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.Int32)"/> function is a no-op on a little-endian CPU.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.Byte@)">
            <summary>
            Reverses the byte ordering of a one-byte unsigned integer value.
            </summary>
            <param name="value">The one-byte unsigned integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.UInt16@)">
            <summary>
            Reverses the byte ordering of a two-byte unsigned integer value.
            </summary>
            <param name="value">The two-byte unsigned integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.UInt32@)">
            <summary>
            Reverses the byte ordering of a four-byte unsigned integer value.
            </summary>
            <param name="value">The four-byte unsigned integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.UInt64@)">
            <summary>
            Reverses the byte ordering of an eight-byte unsigned integer value.
            </summary>
            <param name="value">The eight-byte unsigned integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(Microsoft.BI.Common.UInt128@)">
            <summary>
            Reverses the byte ordering of a sixteen-byte unsigned integer value.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.SByte@)">
            <summary>
            Reverses the byte ordering of a one-byte signed integer value.
            </summary>
            <param name="value">The one-byte signed integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.Int16@)">
            <summary>
            Reverses the byte ordering of a two-byte signed integer value.
            </summary>
            <param name="value">The two-byte signed integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.Int32@)">
            <summary>
            Reverses the byte ordering of a four-byte signed integer value.
            </summary>
            <param name="value">The four-byte signed integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.Int64@)">
            <summary>
            Reverses the byte ordering of an eight-byte signed integer value.
            </summary>
            <param name="value">The eight-byte signed integer value whose bytes to reverse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.Byte)">
            <summary>
            Converts a one-byte unsigned integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert.</param>
            <returns>The one-byte unsigned integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.UInt16)">
            <summary>
            Converts a two-byte unsigned integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert.</param>
            <returns>The two-byte unsigned integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.UInt32)">
            <summary>
            Converts a four-byte unsigned integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert.</param>
            <returns>The four-byte unsigned integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.UInt64)">
            <summary>
            Converts an eight-byte unsigned integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert.</param>
            <returns>The eight-byte unsigned integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(Microsoft.BI.Common.UInt128)">
            <summary>
            Converts a sixteen-byte unsigned integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert.</param>
            <returns>The sixteen-byte unsigned integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.SByte)">
            <summary>
            Converts a one-byte signed integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The one-byte signed integer value to convert.</param>
            <returns>The one-byte signed integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.Int16)">
            <summary>
            Converts a two-byte signed integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The two-byte signed integer value to convert.</param>
            <returns>The two-byte signed integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.Int32)">
            <summary>
            Converts a four-byte signed integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The four-byte signed integer value to convert.</param>
            <returns>The four-byte signed integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndian(System.Int64)">
            <summary>
            Converts an eight-byte signed integer value in native byte ordering to little-endian byte ordering.
            </summary>
            <param name="value">The eight-byte signed integer value to convert.</param>
            <returns>The eight-byte signed integer value in little-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.Byte)">
            <summary>
            Converts a one-byte unsigned integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert.</param>
            <returns>The one-byte unsigned integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.UInt16)">
            <summary>
            Converts a two-byte unsigned integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert.</param>
            <returns>The two-byte unsigned integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.UInt32)">
            <summary>
            Converts a four-byte unsigned integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert.</param>
            <returns>The four-byte unsigned integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.UInt64)">
            <summary>
            Converts an eight-byte unsigned integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert.</param>
            <returns>The eight-byte unsigned integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(Microsoft.BI.Common.UInt128)">
            <summary>
            Converts a sixteen-byte unsigned integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert.</param>
            <returns>The sixteen-byte unsigned integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.SByte)">
            <summary>
            Converts a one-byte signed integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The one-byte signed integer value to convert.</param>
            <returns>The one-byte signed integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.Int16)">
            <summary>
            Converts a two-byte signed integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The two-byte signed integer value to convert.</param>
            <returns>The two-byte signed integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.Int32)">
            <summary>
            Converts a four-byte signed integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The four-byte signed integer value to convert.</param>
            <returns>The four-byte signed integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndian(System.Int64)">
            <summary>
            Converts an eight-byte signed integer value in native byte ordering to big-endian byte ordering.
            </summary>
            <param name="value">The eight-byte signed integer value to convert.</param>
            <returns>The eight-byte signed integer value in big-endian byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.Byte)">
            <summary>
            Converts a one-byte unsigned integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert.</param>
            <returns>The one-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.UInt16)">
            <summary>
            Converts a two-byte unsigned integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert.</param>
            <returns>The two-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.UInt32)">
            <summary>
            Converts a four-byte unsigned integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert.</param>
            <returns>The four-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.UInt64)">
            <summary>
            Converts an eight-byte unsigned integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert.</param>
            <returns>The eight-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(Microsoft.BI.Common.UInt128)">
            <summary>
            Converts a sixteen-byte unsigned integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert.</param>
            <returns>The sixteen-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.SByte)">
            <summary>
            Converts a one-byte signed integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The one-byte signed integer value to convert.</param>
            <returns>The one-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.Int16)">
            <summary>
            Converts a two-byte signed integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The two-byte signed integer value to convert.</param>
            <returns>The two-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.Int32)">
            <summary>
            Converts a four-byte signed integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The four-byte signed integer value to convert.</param>
            <returns>The four-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNative(System.Int64)">
            <summary>
            Converts an eight-byte signed integer value in little-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The eight-byte signed integer value to convert.</param>
            <returns>The eight-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.Byte)">
            <summary>
            Converts a one-byte unsigned integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert.</param>
            <returns>The one-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.UInt16)">
            <summary>
            Converts a two-byte unsigned integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert.</param>
            <returns>The two-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.UInt32)">
            <summary>
            Converts a four-byte unsigned integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert.</param>
            <returns>The four-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.UInt64)">
            <summary>
            Converts an eight-byte unsigned integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert.</param>
            <returns>The eight-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(Microsoft.BI.Common.UInt128)">
            <summary>
            Converts a sixteen-byte unsigned integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert.</param>
            <returns>The sixteen-byte unsigned integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.SByte)">
            <summary>
            Converts a one-byte signed integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The one-byte signed integer value to convert.</param>
            <returns>The one-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.Int16)">
            <summary>
            Converts a two-byte signed integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The two-byte signed integer value to convert.</param>
            <returns>The two-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.Int32)">
            <summary>
            Converts a four-byte signed integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The four-byte signed integer value to convert.</param>
            <returns>The four-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNative(System.Int64)">
            <summary>
            Converts an eight-byte signed integer value in big-endian byte ordering to native byte ordering.
            </summary>
            <param name="value">The eight-byte signed integer value to convert.</param>
            <returns>The eight-byte signed integer value in native byte ordering.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.Byte@)">
            <summary>
            Converts a one-byte unsigned integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.UInt16@)">
            <summary>
            Converts a two-byte unsigned integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.UInt32@)">
            <summary>
            Converts a four-byte unsigned integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.UInt64@)">
            <summary>
            Converts an eight-byte unsigned integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts a sixteen-byte unsigned integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.SByte@)">
            <summary>
            Converts a one-byte signed integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The one-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.Int16@)">
            <summary>
            Converts a two-byte signed integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The two-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.Int32@)">
            <summary>
            Converts a four-byte signed integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The four-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.Int64@)">
            <summary>
            Converts an eight-byte signed integer value in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="value">The eight-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.Byte[])">
            <summary>
            Converts an array of bytes in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a section of an array of bytes in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <param name="start">The point in <paramref name="array"/> at which to start converting.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="start"/> and <paramref name="count"/> do not refer to a location in the array.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToLittleEndianInPlace(System.Void*,System.UInt32)">
            <summary>
            Converts a buffer in native byte ordering to little-endian byte ordering in place.
            </summary>
            <param name="p">A pointer to the buffer to convert in place.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.Byte@)">
            <summary>
            Converts a one-byte unsigned integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.UInt16@)">
            <summary>
            Converts a two-byte unsigned integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.UInt32@)">
            <summary>
            Converts a four-byte unsigned integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.UInt64@)">
            <summary>
            Converts an eight-byte unsigned integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts a sixteen-byte unsigned integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.SByte@)">
            <summary>
            Converts a one-byte signed integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The one-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.Int16@)">
            <summary>
            Converts a two-byte signed integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The two-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.Int32@)">
            <summary>
            Converts a four-byte signed integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The four-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.Int64@)">
            <summary>
            Converts an eight-byte signed integer value in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="value">The eight-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.Byte[])">
            <summary>
            Converts an array of bytes in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a section of an array of bytes in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <param name="start">The point in <paramref name="array"/> at which to start converting.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="start"/> and <paramref name="count"/> do not refer to a location in the array.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.NativeToBigEndianInPlace(System.Void*,System.UInt32)">
            <summary>
            Converts a buffer in native byte ordering to big-endian byte ordering in place.
            </summary>
            <param name="p">A pointer to the buffer to convert in place.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.Byte@)">
            <summary>
            Converts a one-byte unsigned integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.UInt16@)">
            <summary>
            Converts a two-byte unsigned integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.UInt32@)">
            <summary>
            Converts a four-byte unsigned integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.UInt64@)">
            <summary>
            Converts an eight-byte unsigned integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts a sixteen-byte unsigned integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.SByte@)">
            <summary>
            Converts a one-byte signed integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The one-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.Int16@)">
            <summary>
            Converts a two-byte signed integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The two-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.Int32@)">
            <summary>
            Converts a four-byte signed integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The four-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.Int64@)">
            <summary>
            Converts an eight-byte signed integer value in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The eight-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.Byte[])">
            <summary>
            Converts an array of bytes in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a section of an array of bytes in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <param name="start">The point in <paramref name="array"/> at which to start converting.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="start"/> and <paramref name="count"/> do not refer to a location in the array.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.LittleEndianToNativeInPlace(System.Void*,System.UInt32)">
            <summary>
            Converts a buffer in little-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="p">A pointer to the buffer to convert in place.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.Byte@)">
            <summary>
            Converts a one-byte unsigned integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The one-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.UInt16@)">
            <summary>
            Converts a two-byte unsigned integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The two-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.UInt32@)">
            <summary>
            Converts a four-byte unsigned integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The four-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.UInt64@)">
            <summary>
            Converts an eight-byte unsigned integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The eight-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts a sixteen-byte unsigned integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.SByte@)">
            <summary>
            Converts a one-byte signed integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The one-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.Int16@)">
            <summary>
            Converts a two-byte signed integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The two-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.Int32@)">
            <summary>
            Converts a four-byte signed integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The four-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.Int64@)">
            <summary>
            Converts an eight-byte signed integer value in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="value">The eight-byte signed integer value to convert in place.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.Byte[])">
            <summary>
            Converts an array of bytes in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a section of an array of bytes in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="array">An array of bytes to convert in place.</param>
            <param name="start">The point in <paramref name="array"/> at which to start converting.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="start"/> and <paramref name="count"/> do not refer to a location in the array.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.BigEndianToNativeInPlace(System.Void*,System.UInt32)">
            <summary>
            Converts a buffer in big-endian byte ordering to native byte ordering in place.
            </summary>
            <param name="p">A pointer to the buffer to convert in place.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.ByteOrder.Endianness">
            <summary>
            Gets the <see cref="P:Microsoft.BI.Common.ByteOrder.Endianness"/> of the executing machine's architecture.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.Byte)">
            <summary>
            Reverses the byte ordering of a one-byte unsigned integer value.
            </summary>
            <param name="value">The one-byte unsigned integer value whose bytes to reverse.</param>
            <returns>The one-byte unsigned integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.UInt16)">
            <summary>
            Reverses the byte ordering of a two-byte unsigned integer value.
            </summary>
            <param name="value">The two-byte unsigned integer value whose bytes to reverse.</param>
            <returns>The two-byte unsigned integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.UInt32)">
            <summary>
            Reverses the byte ordering of a four-byte unsigned integer value.
            </summary>
            <param name="value">The four-byte unsigned integer value whose bytes to reverse.</param>
            <returns>The four-byte unsigned integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.UInt64)">
            <summary>
            Reverses the byte ordering of an eight-byte unsigned integer value.
            </summary>
            <param name="value">The eight-byte unsigned integer value whose bytes to reverse.</param>
            <returns>The eight-byte unsigned integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(Microsoft.BI.Common.UInt128)">
            <summary>
            Reverses the byte ordering of a sixteen-byte unsigned integer value.
            </summary>
            <param name="value">The sixteen-byte unsigned integer value whose bytes to reverse.</param>
            <returns>The sixteen-byte unsigned integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.SByte)">
            <summary>
            Reverses the byte ordering of a one-byte signed integer value.
            </summary>
            <param name="value">The one-byte signed integer value whose bytes to reverse.</param>
            <returns>The one-byte signed integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.Int16)">
            <summary>
            Reverses the byte ordering of a two-byte signed integer value.
            </summary>
            <param name="value">The two-byte signed integer value whose bytes to reverse.</param>
            <returns>The two-byte signed integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.Int32)">
            <summary>
            Reverses the byte ordering of a four-byte signed integer value.
            </summary>
            <param name="value">The four-byte signed integer value whose bytes to reverse.</param>
            <returns>The four-byte signed integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.Reverse(System.Int64)">
            <summary>
            Reverses the byte ordering of an eight-byte signed integer value.
            </summary>
            <param name="value">The eight-byte signed integer value whose bytes to reverse.</param>
            <returns>The eight-byte signed integer value with bytes in the reverse ordering of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.Byte[])">
            <summary>
            Reverses the byte ordering of an array of bytes in place.
            </summary>
            <param name="array">An array of bytes to reverse in place.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reverses a section of an array of bytes in place.
            </summary>
            <param name="array">An array of bytes to reverse in place.</param>
            <param name="start">The point in <paramref name="array"/> at which to start converting.</param>
            <param name="count">The number of bytes to convert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="start"/> and <paramref name="count"/> do not refer to a location in the array.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.ReverseInPlace(System.Void*,System.UInt32)">
            <summary>
            Reverses the byte ordering of a buffer.
            </summary>
            <param name="p">A pointer to the buffer to reverse.</param>
            <param name="count">The number of bytes in the buffer to reverse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.#cctor">
            <summary>
            Initializes the <see cref="T:Microsoft.BI.Common.ByteOrder"/> static class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ByteOrder.GetEndianness(System.Int32)">
            <summary>
            Gets the endianness of the current CPU based on the memory layout of the integer value <c>0x00000001</c>
            or <c>0x01000000</c>.,
            </summary>
            <param name="value">The value to check; should be either <c>0x00000001</c> or <c>0x01000000</c>.</param>
            <returns>The <see cref="P:Microsoft.BI.Common.ByteOrder.Endianness"/> of the system.</returns>
            <remarks>
            This method checks the value of the least-significant byte to determine whether the system is
            little or big-endian.  The behavior of this function is undefined if <paramref name="value"/>
            is not either <c>0x00000001</c> or <c>0x01000000</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.AccessAttributes">
            <summary>
            Defines access attributes for classes and members.
            </summary>
            <remarks>Although this enum is defined with the <see cref="T:System.FlagsAttribute"/> attribute, most languages
            are mutually-exclusive on many of the attributes, such as <see cref="F:Microsoft.BI.Common.CodeDom.AccessAttributes.Private"/> and <see cref="F:Microsoft.BI.Common.CodeDom.AccessAttributes.Public"/>.</remarks>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.AccessAttributes.None">
            <summary>
            Member access is not specified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.AccessAttributes.Private">
            <summary>
            A private member.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.AccessAttributes.Assembly">
            <summary>
            A member that is accessible to any class within the same assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.AccessAttributes.Family">
            <summary>
            A member that is accessible within the family of its class and derived classes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.AccessAttributes.FamilyAndAssembly">
            <summary>
            A member that is accessible within its class, and derived classes in the same assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.AccessAttributes.FamilyOrAssembly">
            <summary>
            A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.AccessAttributes.Public">
            <summary>
            A public member.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAttributeArgument">
            <summary>
            Represents an argument used in a metadata attribute declaration.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAttributeArgument.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAttributeArgument.Value">
            <summary>
            Gets or sets the value for the attribute argument.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeArgument"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeArgument.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeArgument"/> class using the specified value.
            </summary>
            <param name="value">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that represents the value of the argument.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeArgument.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeArgument" /> class using the specified name and value.
            </summary>
            <param name="name">The name of the attribute property the argument applies to. </param>
            <param name="value">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> that represents the value of the argument.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration">
            <summary>
            Represents an attribute declaration.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.Name">
            <summary>
            Gets or sets the name of the attribute being declared.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.Arguments">
            <summary>
            Gets the collection of arguments for the attribute.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.AttributeType">
            <summary>Gets or sets the code type reference for the code attribute declaration.</summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration"/> class using the specified name.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeAttributeArgument[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration"/> class using the specified name and arguments.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="arguments">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeArgument"/>  that contains the arguments for the attribute.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration"/> class using the specified code type reference.
            </summary>
            <param name="attributeType">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that identifies the attribute.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeAttributeArgument[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration" /> class using the specified code type reference and arguments.
            </summary>
            <param name="attributeType">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference" /> that identifies the attribute.</param>
            <param name="arguments">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeArgument" /> that contains the arguments for the attribute.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CheckingContext">
            <summary>
            Contains values representing the various possible checking contexts.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CheckingContext.Unchecked">
            <summary>
            Represents the unchecked checking context.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CheckingContext.Checked">
            <summary>
            Represents the checked checking context.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeCatchClause">
            <summary>
            Represents a catch exception block of a try/catch statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCatchClause.LocalName">
            <summary>
            Gets or sets the variable name of the exception that the catch clause handles.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCatchClause.CatchExceptionType">
            <summary>
            Gets or sets the type of the exception to handle with the catch block.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCatchClause.Statements">
            <summary>
            Gets the statements within the catch block.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class that catches any exception.
            </summary>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class that catches any exception.
            </summary>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> that represents the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class using the specified exception type.
            </summary>
            <param name="catchExceptionType">The name of the type of exception to catch.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class using the specified exception type.
            </summary>
            <param name="catchExceptionType">The type of exception to catch.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class using the specified exception type.
            </summary>
            <param name="catchExceptionType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of exception to catch.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class using the specified exception type.
            </summary>
            <param name="catchExceptionType">The name of the type of exception to catch.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> that represents the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class using the specified exception type.
            </summary>
            <param name="catchExceptionType">The type of exception to catch.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> that represents the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> class using the specified exception type.
            </summary>
            <param name="catchExceptionType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of exception to catch.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> that represents the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.String,System.String,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> class using the specified local variable name for the exception, exception type
            and statement collection.
            </summary>
            <param name="catchExceptionType">The name of the type of exception to catch.</param>
            <param name="localName">The name of the local variable declared in the catch clause for the exception.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.Type,System.String,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> class using the specified local variable name for the exception, exception type
            and statement collection.
            </summary>
            <param name="catchExceptionType">The type of exception to catch.</param>
            <param name="localName">The name of the local variable declared in the catch clause for the exception.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> class using the specified local variable name for the exception, exception type
            and statement collection.
            </summary>
            <param name="catchExceptionType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of exception to catch.</param>
            <param name="localName">The name of the local variable declared in the catch clause for the exception.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.String,System.String,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> class using the specified local variable name for the exception, exception type
            and statement collection.
            </summary>
            <param name="catchExceptionType">The name of the type of exception to catch.</param>
            <param name="localName">The name of the local variable declared in the catch clause for the exception.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> that represents the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(System.Type,System.String,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> class using the specified local variable name for the exception, exception type
            and statement collection.
            </summary>
            <param name="catchExceptionType">The type of exception to catch.</param>
            <param name="localName">The name of the local variable declared in the catch clause for the exception.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> that represents the contents of the catch block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCatchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> class using the specified local variable name for the exception, exception type
            and statement collection.
            </summary>
            <param name="catchExceptionType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of exception to catch.</param>
            <param name="localName">The name of the local variable declared in the catch clause for the exception.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> that represents the contents of the catch block.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeGroupByClause">
            <summary>
            Represents a <c>GROUP BY</c> clause.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeGroupByClause.Items">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects representing the items on which to group.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGroupByClause.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGroupByClause"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGroupByClause.#ctor(System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGroupByClause"/> class with the specified item names.
            </summary>
            <param name="items">The column names to group by.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGroupByClause.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGroupByClause"/> class with the specified item expressions.
            </summary>
            <param name="columns">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects representing the
            expressions to group by.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeJoinClause">
            <summary>
            Represents a <c>JOIN</c> clause.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinClause.Predicate">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> object representing the join predicate.
            </summary>
            <remarks>Not applicable to all join types.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinClause.Target">
            <summary>
            Gets or sets the target of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinClause.Presort">
            <summary>
            Gets or sets the sort order of the target of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinClause.JoinType">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.CodeDom.CodeJoinClause.JoinType"/> of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinClause.Using">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingClause"/> object associated with the join.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeJoinClause.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinClause"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeJoinClause.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.JoinType)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinClause"/> class with the specified parameters.
            </summary>
            <param name="target">The expression on the right side of the join.</param>
            <param name="predicate">The predicate on which to join.</param>
            <param name="joinType">The type of the join.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeJoinClause.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeUsingClause)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinClause"/> class with the specified parameters.
            </summary>
            <param name="target">The expression on the right side of the join.</param>
            <param name="predicate">The predicate on which to join.</param>
            <param name="using">The using clause for the join.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeOrderByClause">
            <summary>
            Represents an <c>ORDER BY</c> clause.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeOrderByClause.Items">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByExpression"/> objects representing the items on which to sort.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeOrderByClause.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByClause"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeOrderByClause.#ctor(System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByClause"/> class with the specified item names.
            </summary>
            <param name="items">The column names to order by.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeOrderByClause.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByClause"/> class with the specified item expressions.
            </summary>
            <param name="items">The column names to order by.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeOrderByClause.#ctor(Microsoft.BI.Common.CodeDom.CodeOrderByExpression[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByClause"/> class with the specified items.
            </summary>
            <param name="items">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByExpression"/> objects representing the
            items to order by.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeUsingClause">
            <summary>
            Represents a <c>USING</c> clause.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUsingClause.Target">
            <summary>
            Gets or sets the object, type, or member that will be used.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUsingClause.Arguments">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects representing the arguments passed to <see cref="P:Microsoft.BI.Common.CodeDom.CodeUsingClause.Target"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUsingClause.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingClause"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUsingClause.#ctor(Microsoft.BI.Common.CodeDom.CodeReference,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingClause"/> class with the specified item names.
            </summary>
            <param name="target">The target of the using clause.</param>
            <param name="arguments">The arguments to pass to the target.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause">
            <summary>
            Represents a single variable-expression combination within a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause.Name">
            <summary>
            Gets or sets the name of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause.Expression">
            <summary>
            Gets or sets the expression used to populate the variable.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause"/> with the specified name.
            </summary>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause"/> with the specified name and expression.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the initialization value.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeComment">
            <summary>
            Represents a comment.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeComment.Text">
            <summary>
            Gets or sets the text in the comment.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeComment.DocComment">
            <summary>
            Gets or sets a value that indicates whether the comment is a documentation comment.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeComment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeComment"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeComment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeComment"/> class using the specified text.
            </summary>
            <param name="text">The contents of the comment.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeComment"/> class using the specified text and documentation comment flag.
            </summary>
            <param name="text">The contents of the comment.</param>
            <param name="docComment"><c>true</c> if the comment is a documentation comment; otherwise, <c>false</c>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit">
            <summary>
            Provides a container for a CodeDOM program graph.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCompileUnit.Namespaces">
            <summary>
            Gets the collection of namespaces.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCompileUnit.ReferencedAssemblies">
            <summary>
            Gets the referenced assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCompileUnit.Imports">
            <summary>
            Gets the collection of namespace import directives used by the compile unit.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
            <summary>
            Gets a collection of custom attributes for the generated assembly.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCompileUnit.StartDirectives">
            <summary>
            Gets a collection of start directives.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCompileUnit.EndDirectives">
            <summary>
            Gets a collection of end directives.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCompileUnit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions">
            <summary>
            Provides options to an <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions.ThrowOnParseError">
            <summary>
            Gets or sets a value indicating whether to throw an exception when the evaluator encounters an error.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions.ThrowOnParseWarning">
            <summary>
            Gets or sets a value indicating whether to throw an exception when the evaluator encounters a warning.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions.CheckingContext">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions.CheckingContext"/> of the evaluator..
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeNamespace">
            <summary>
            Represents a namespace declaration.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespace.Namespaces">
            <summary>
            Gets the collection of namespaces that the namespace contains.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespace.Types">
            <summary>
            Gets the collection of types that the namespace contains.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespace.Imports">
            <summary>
            Gets the collection of namespace import directives used by the namespace.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespace.Comments">
            <summary>
            Gets the comments for the namespace.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespace.CustomAttributes">
            <summary>
            Gets or sets the custom attributes of the namespace.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespace.Name">
            <summary>
            Gets or sets the name of the namespace.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeNamespace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeNamespace.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace" /> class using the specified name.
            </summary>
            <param name="name">The name of the namespace being declared.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeNamespaceImport">
            <summary>
            Represents a namespace import directive that indicates a namespace to use.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespaceImport.LinePragma">
            <summary>
            Gets or sets the line and file the statement occurs on.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespaceImport.Namespace">
            <summary>
            Gets or sets the namespace to import.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespaceImport.Alias">
            <summary>
            Gets or sets the alias to assign to the import.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeNamespaceImport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceImport"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeNamespaceImport.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceImport"/> class using the specified namespace to import.
            </summary>
            <param name="nameSpace">The name of the namespace to import.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeObject">
            <summary>
            Provides a common base class for most Code Document Object Model (CodeDOM) objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeObject.UserData">
            <summary>
            Gets the user-defined data for the current object.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObject"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider">
            <summary>
            Provides a base class for <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider"/> implementations. This class is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.FileExtension">
            <summary>
            Gets the default file name extension to use for source code files in the current language.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
            <summary>
            Gets a language features identifier.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GeneratorOptions">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> used by the code generator in this instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
            <summary>
            When overridden in a derived class, creates a new code generator.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator"/> that can be used to generate <see cref="N:Microsoft.BI.Common.CodeDom"/>-based source code representations.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
            <summary>
            When overridden in a derived class, creates a new code compiler.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler"/> that can be used for compilation of <see cref="N:Microsoft.BI.Common.CodeDom"/> -based source code representations.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser">
            <summary>
            When overridden in a derived class, creates a new code parser.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser"/> that can be used to parse source code into <see cref="N:Microsoft.BI.Common.CodeDom"/>-based source code representations.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateEvaluator">
            <summary>
            When overridden in a derived class, creates a new code evaluator.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator"/> that can be used to evaluate <see cref="N:Microsoft.BI.Common.CodeDom"/>-based source code representations.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,Microsoft.BI.Common.CodeDom.CodeCompileUnit[])">
            <summary>
            Compiles an assembly based on the <see cref="N:Microsoft.BI.Common.CodeDom"/> trees contained in the specified array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> objects, using the
            specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for the compilation.</param>
            <param name="compilationUnits">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that indicates the code to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of the compilation.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateCompiler"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
            <summary>
            Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for the compilation.</param>
            <param name="fileNames">An array of the names of the files to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateCompiler"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
            <summary>
            Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the compiler settings for this compilation.</param>
            <param name="sources">An array of source code strings to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateCompiler"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
            <summary>Returns a value that indicates whether the specified value is a valid identifier for the current language.</summary>
            <param name="value">The value to verify as a valid identifier.</param>
            <returns>true if the <paramref name="value"/> parameter is a valid identifier; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
            <summary>
            Creates an escaped identifier for the specified value.
            </summary>
            <param name="value">The string for which to create an escaped identifier.</param>
            <returns>The escaped identifier for the value.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
            <summary>
            Creates a valid identifier for the specified value.
            </summary>
            <param name="value">The string for which to generate a valid identifier.</param>
            <returns>A valid identifier for the specified value.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Gets the type indicated by the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type to return.</param>
            <returns>A text representation of the specified type, formatted for the language in which code is generated by this code generator.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.Supports(Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport)">
            <summary>
            Returns a value indicating whether the specified code generation support is provided.
            </summary>
            <param name="generatorSupport">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport"/> object that indicates the type of code generation support to verify.</param>
            <returns>true if the specified code generation support is provided; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(Microsoft.BI.Common.CodeDom.CodeExpression,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.
            </summary>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> object that indicates the expression for which to generate code.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which output code is sent.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(Microsoft.BI.Common.CodeDom.CodeStatement,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.
            </summary>
            <param name="statement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> containing the CodeDOM elements for which to generate code.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which output code is sent.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatements(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement},System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statements and sends it to the specified text writer, using the specified options.
            </summary>
            <param name="statements">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>  objects containing the CodeDOM elements for which to generate code.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which output code is sent.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(Microsoft.BI.Common.CodeDom.CodeNamespace,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.
            </summary>
            <param name="codeNamespace">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace"/> object that indicates the namespace for which to generate code.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which output code is sent.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(Microsoft.BI.Common.CodeDom.CodeCompileUnit,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.
            </summary>
            <param name="compileUnit">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> for which to generate code.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which the output code is sent.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(Microsoft.BI.Common.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.
            </summary>
            <param name="codeType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration"/> object that indicates the type for which to generate code.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which output code is sent.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(Microsoft.BI.Common.CodeDom.CodeTypeMember,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.
            </summary>
            <param name="member">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> object that indicates the member for which to generate code.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which output code is sent.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <exception cref="T:System.NotImplementedException">This method is not overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(Microsoft.BI.Common.CodeDom.CodeCompileUnit,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) compile unit and returns it as a string.
            </summary>
            <param name="compileUnit">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate code for.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The compile unit <paramref name="compileUnit"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) expression and returns it as a string.
            </summary>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the expression to generate code for.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The expression <paramref name="expression"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(Microsoft.BI.Common.CodeDom.CodeTypeMember,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) member and returns it as a string.
            </summary>
            <param name="member">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> that indicates the member to generate code for.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The member <paramref name="member"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(Microsoft.BI.Common.CodeDom.CodeNamespace,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) namespace and returns it as a string.
            </summary>
            <param name="codeNamespace">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The namespace <paramref name="codeNamespace"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statement and returns it as a string.
            </summary>
            <param name="statement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that indicates the statement to generate code for.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The statement <paramref name="statement"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatements(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement},Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statements and returns it as a string.
            </summary>
            <param name="statements">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that indicates the statement to generate code for.</param>
            <param name="options">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The statements <paramref name="statements"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.Parse(System.String)">
            <summary>
            Parses the specified string into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> object that is used to read the code to be parsed.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.ParseExpression(System.String)">
            <summary>
            Parses the specified string into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.ParseExpression(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.ParseStatement(System.String)">
            <summary>
            Parses the specified string into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.ParseStatement(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.ParseStatements(System.String)">
            <summary>
            Parses the specified string into an array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.ParseStatements(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into an array of  <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
            <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.CreateParser"/> method is overridden in a derived class.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeDomProvider.FormatCompilerError(System.CodeDom.Compiler.CompilerError)">
            <summary>
            Formats a <see cref="T:System.CodeDom.Compiler.CompilerError"/> as a string.
            </summary>
            <param name="e">The error to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes">
            <summary>
            Enumeration describing the behavior of how types are output.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes.Always">
            <summary>
            Always output the full type name.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes.NamespaceBased">
            <summary>
            Output full or short type names based on what namespaces are imported.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes.Never">
            <summary>
            Never output the full type name; always use the short type name.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes.NoBuiltins">
            <summary>
            Don't output builtins with their short names; use the type name according to the other enum values.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes.TypeNameMask">
            <summary>
            Bit mask that includes only the bits which refer to how the type name is written.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.BracingStyle">
            <summary>
            Enumeration describing the way braces should be written in generated code.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.BracingStyle.Block">
            <summary>
            Braces start on the same line as the statement or declaration they are associated with.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.BracingStyle.C">
            <summary>
            Braces start on the line following the statement or declaration they are associated with.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions">
            <summary>
            Represents a set of options used by a code generator.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.WriteAttributeSuffix">
            <summary>
            Controls whether or not to write the "Attribute" suffix when writing <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttributeDeclaration"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.WriteThis">
            <summary>
            Controls whether or not to write "this" in <see cref="T:Microsoft.BI.Common.CodeDom.CodeThisReferenceExpression"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.TypeNameMode">
            <summary>
            Controls the way type names are written.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.AlwaysIncludeBracesAroundBlock">
            <summary>
            Controls whether to include braces around single line blocks.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.AlwaysWritePropertiesOnNewLine">
            <summary>
            Controls whether or not properties will be compressed based on the number of statements they contain.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="index">The name associated with the object to retrieve. </param>
            <returns>The object associated with the specified name. If no object associated with the specified name exists in the collection, null.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
            <summary>
            Gets or sets the string to use for indentations.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
            <summary>
            Gets or sets the style to use for bracing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
            <summary>
            Gets or sets a value indicating whether to append an else, catch, or finally block, including brackets, at the closing line of each previous if or try block.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
            <summary>
            Gets or sets a value indicating whether to insert blank lines between members.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
            <summary>
            Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.SortNamespaces">
            <summary>
            Gets or sets a value indicating whether namespace imports should be sorted.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.InitialIndentLevel">
            <summary>
            Gets or sets a value indicating the initial indent level of generated code.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> clss.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions.#ctor(Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> instance based on another <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> instance.
            </summary>
            <param name="options">The other instance to copy data from.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport">
            <summary>
            Defines identifiers used to determine whether a code generator supports certain types of code elements.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
            <summary>
            Indicates the generator supports arrays of arrays.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
            <summary>
            Indicates the generator supports a program entry point method designation.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.GotoStatements">
            <summary>
            Indicates the generator supports goto statements.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
            <summary>
            Indicates the generator supports referencing multidimensional arrays.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
            <summary>
            Indicates the generator supports static constructors.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
            <summary>
            Indicates the generator supports try...catch statements.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
            <summary>
            Indicates the generator supports return type attribute declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
            <summary>
            Indicates the generator supports value type declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
            <summary>
            Indicates the generator supports enumeration declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
            <summary>
            Indicates the generator supports delegate declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
            <summary>
            Indicates the generator supports interface declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
            <summary>
            Indicates the generator supports event declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
            <summary>
            Indicates the generator supports assembly attributes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
            <summary>
            Indicates the generator supports parameter attributes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
            <summary>
            Indicates the generator supports reference and out parameters.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
            <summary>
            Indicates the generator supports chained constructor arguments.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.NestedTypes">
            <summary>
            Indicates the generator supports the declaration of nested types.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
            <summary>
            Indicates the generator supports the declaration of members that implement multiple interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
            <summary>
            Indicates the generator supports public static members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
            <summary>
            Indicates the generator supports complex expressions.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.Win32Resources">
            <summary>
            Indicates the generator supports compilation with Win32 resources.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.Resources">
            <summary>
            Indicates the generator supports compilation with .NET Framework resources. These can be default resources compiled directly into an assembly,
            or resources referenced in a satellite assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.PartialTypes">
            <summary>
            Indicates the generator supports partial type declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
            <summary>
            Indicates the generator supports generic type references.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
            <summary>
            Indicates the generator supports generic type declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
            <summary>
            Indicates the generator supports the declaration of indexer properties.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler">
            <summary>
            Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,Microsoft.BI.Common.CodeDom.CodeCompileUnit)">
            <summary>
            Compiles an assembly from the <see cref="N:Microsoft.BI.Common.CodeDom"/> tree contained in the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>,
            using the specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for compilation.</param>
            <param name="compilationUnit">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that indicates the code to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for compilation.</param>
            <param name="fileName">The file name of the file that contains the source code to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Compiles an assembly from the specified string containing source code, using the specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for compilation.</param>
            <param name="source">The source code to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,Microsoft.BI.Common.CodeDom.CodeCompileUnit[])">
            <summary>
            Compiles an assembly based on the <see cref="N:System.CodeDom"/> trees contained in the specified array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> objects,
            using the specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for compilation.</param>
            <param name="compilationUnits">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that indicates the code to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
            <summary>
            Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.
            </summary>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for compilation.</param>
            <param name="fileNames">The file names of the files to compile.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
            <summary>
            Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.
            </summary>
            <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object that indicates the results of compilation.</returns>
            <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"/> object that indicates the settings for compilation.</param>
            <param name="sources">The source code strings to compile.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator">
            <summary>
            Defines an interface for evaluating code in a <see cref="N:Microsoft.BI.Common.CodeDom"/> tree.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator.Evaluate(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Evaluates a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to evaluate.</param>
            <returns>The result of evaluating <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator.Evaluate(Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Evaluates a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to evaluate.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator.Evaluate(Microsoft.BI.Common.CodeDom.CodeReference)">
            <summary>
            Evaluates a <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> to evaluate.</param>
            <returns>The result of evaluating <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator.TypeCheck(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to type check.</param>
            <returns>The type of the expression specified by <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator.TypeCheck(Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to type check.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator.TypeCheck(Microsoft.BI.Common.CodeDom.CodeReference)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> to type check.</param>
            <returns>The type of the reference specified by <paramref name="e"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator">
            <summary>
            Defines an interface for generating code.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
            <summary>
            Gets a value that indicates whether the specified value is a valid identifier for the current language.
            </summary>
            <param name="value">The value to test for being a valid identifier.</param>
            <returns>true if the <paramref name="value"/> parameter is a valid identifier; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
            <summary>
            Throws an exception if the specified value is not a valid identifier.
            </summary>
            <param name="value">The identifier to validate.</param>
            <exception cref="T:System.ArgumentException">The identifier is not valid.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
            <summary>
            Creates an escaped identifier for the specified value.
            </summary>
            <param name="value">The string to create an escaped identifier for.</param>
            <returns>The escaped identifier for the value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
            <summary>
            Creates a valid identifier for the specified value.
            </summary>
            <param name="value">The string to generate a valid identifier for.</param>
            <returns>A valid identifier for the specified value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary
            >Gets the type indicated by the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <returns>A text representation of the specified type for the language this code generator is designed to generate code in.</returns>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type to return.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.Supports(Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport)">
            <summary>
            Gets a value indicating whether the generator provides support for the language features represented by the specified <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.GeneratorSupport"/> object.
            </summary>
            <param name="supports">The capabilities to test the generator for.</param>
            <returns>true if the specified capabilities are supported; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(Microsoft.BI.Common.CodeDom.CodeExpression,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the expression to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(Microsoft.BI.Common.CodeDom.CodeStatement,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> containing the CodeDOM elements to translate.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatements(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement},System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.
            </summary>
            <param name="e">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects containing the CodeDOM elements to translate.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromMember(Microsoft.BI.Common.CodeDom.CodeTypeMember,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) member and outputs it to the specified text writer using the specified options.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> that indicates the member to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(Microsoft.BI.Common.CodeDom.CodeNamespace,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(Microsoft.BI.Common.CodeDom.CodeCompileUnit,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(Microsoft.BI.Common.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration"/> that indicates the type to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(Microsoft.BI.Common.CodeDom.CodeCompileUnit,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) compile unit and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The compile unit <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) expression and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the expression to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The expression <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromMember(Microsoft.BI.Common.CodeDom.CodeTypeMember,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) member and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> that indicates the member to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The member <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(Microsoft.BI.Common.CodeDom.CodeNamespace,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) namespace and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The namespace <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statement and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that indicates the statement to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The statement <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatements(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement},Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statements and returns it as a string.
            </summary>
            <param name="e">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that indicates the statement to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The statements <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser">
            <summary>
            Defines an interface for parsing code into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.Parse(System.String)">
            <summary>
            When implemented in a derived class, parses the specified string into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
            <summary>
            When implemented in a derived class, parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.ParseExpression(System.String)">
            <summary>
            When implemented in a derived class, parses the specified string into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.ParseExpression(System.IO.TextReader)">
            <summary>
            When implemented in a derived class, parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.ParseStatement(System.String)">
            <summary>
            When implemented in a derived class, parses the specified string into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.ParseStatement(System.IO.TextReader)">
            <summary>
            When implemented in a derived class, parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.ParseStatements(System.String)">
            <summary>
            When implemented in a derived class, parses the specified string into an array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser.ParseStatements(System.IO.TextReader)">
            <summary>
            When implemented in a derived class, parses the specified text stream into an array of  <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Compiler.LanguageOptions">
            <summary>
            Defines identifiers that indicate special features of a language.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.LanguageOptions.None">
            <summary>
            The language has default characteristics.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
            <summary>
            The language is case-insensitive.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeChecksumPragma">
            <summary>
            Represents a code checksum pragma code entity.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeChecksumPragma.FileName">
            <summary>
            Gets or sets the path to the checksum file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
            <summary>
            Gets or sets a GUID that identifies the checksum algorithm to use.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeChecksumPragma.ChecksumData">
            <summary>
            Gets or sets the value of the data for the checksum calculation.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeChecksumPragma.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeChecksumPragma" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeChecksumPragma" /> class using a file name, a GUID representing the checksum
            algorithm, and a byte stream representing the checksum data.
            </summary>
            <param name="fileName">The path to the checksum file.</param>
            <param name="checksumAlgorithmId">A <see cref="T:System.Guid"/> that identifies the checksum algorithm to use.</param>
            <param name="checksumData">A byte array that contains the checksum data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeDirective">
            <summary>
            Serves as the base class for code directive classes.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeLinePragma">
            <summary>
            Represents a specific location within a specific file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLinePragma.FileName">
            <summary>
            Gets or sets the name of the associated file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLinePragma.LineNumber">
            <summary>
            Gets or sets the line number of the associated reference.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLinePragma.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLinePragma"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLinePragma"/> class.
            </summary>
            <param name="fileName">The file name of the associated file.</param>
            <param name="lineNumber">The line number to store a reference to.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeRegionDirective">
            <summary>
            Specifies the name and mode for a code region.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeRegionDirective.RegionText">
            <summary>
            Gets or sets the name of the region.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeRegionDirective.RegionMode">
            <summary>
            Gets or sets the mode for the region directive.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeRegionDirective.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeRegionDirective"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeRegionDirective.#ctor(Microsoft.BI.Common.CodeDom.CodeRegionMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeRegionDirective"/> class, specifying its mode and name.
            </summary>
            <param name="regionMode">One of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeRegionMode"/> values.</param>
            <param name="regionText">The name for the region.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeRegionMode">
            <summary>
            Specifies the start or end of a code region.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeRegionMode.None">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeRegionMode.Start">
            <summary>
            Start of the region.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeRegionMode.End">
            <summary>
            End of the region.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeWarningPragma">
            <summary>
            Represents a warning pragma (i.e. #pragma warning disable 612, 618).
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeWarningPragma.WarningMode">
            <summary>
            Indicates whether the list of warnings should be disabled or restored.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeWarningPragma.Warnings">
            <summary>
            The list of warnings to be disabled or restored.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeWarningPragma.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeWarningPragma" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeWarningPragma.#ctor(Microsoft.BI.Common.CodeDom.CodeWarningMode,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeWarningPragma" /> class using a mode (disable/restore) and an array
            of warnings to disable/restore.
            </summary>
            <param name="mode">Indicates whether the list of warnings should be disabled or restored.</param>
            <param name="warnings">The list of warnings to be disabled or restored.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeWarningMode">
            <summary>
            Specifies whether to disable or restore warnings.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeWarningMode.Disable">
            <summary>
            Disable warnings.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeWarningMode.Restore">
            <summary>
            Restore warnings.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAliasExpression">
            <summary>
            Represents an "expression AS alias" expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAliasExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to alias.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAliasExpression.Alias">
            <summary>
            Gets or sets the alias of the expression.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAliasExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAliasExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAliasExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAliasExpression"/> class using the specified expression and type.
            </summary>
            <param name="expression">The expression to cast.</param>
            <param name="alias">The name of the type to cast to.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression">
            <summary>
            Represents an expression that invokes an anonymous function. 
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression.Statements">
            <summary>
            Gets the collection of statements in the anonymous function.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression.Parameters">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> that represent the method arguments.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression[],Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression"/> class using the specified parameters
            and statements.
            </summary>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to
            call the method with.</param>
            <param name="block">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> containing the statements to execute.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression[],Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAnonymousFunctionInvokeExpression"/> class using the specified parameters
            and statements.
            </summary>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to
            call the method with.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the statements to execute.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeArgumentReferenceExpression">
            <summary>
            Represents a reference to the value of an argument passed to a method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArgumentReferenceExpression.ParameterName">
            <summary>
            Gets or sets the name of the parameter to reference.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArgumentReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArgumentReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArgumentReferenceExpression"/> class using the specified parameter name.
            </summary>
            <param name="parameterName">The name of the parameter to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression">
            <summary>
            Represents an expression that creates an array.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.CreateType">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> representing the type of the object to be created.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.Initializer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> with which to initialize the array.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.SizeExpressions">
            <summary>
            Gets or sets the expression that indicates the size of the array.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.Rank">
            <summary>
            Gets or sets the rank of the array.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified array type reference
            and initialization expressions.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type name and initialization
            expressions.
            </summary>
            <param name="type">The name of the type to create.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type and initialization
            expressions.
            </summary>
            <param name="type">The type of the array type to create.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.Int32,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified array type reference
            and size.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="size">The size of the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.Int32[],Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified array type reference
            and size.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="sizes">The size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type and size.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="size">The size of the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32[],Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type name and initialization
            expressions.
            </summary>
            <param name="type">The name of the array type to create.</param>
            <param name="sizes">The size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type and size.
            </summary>
            <param name="type">The type of the array to create.</param>
            <param name="size">The size of the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32[],Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type and sizes.
            </summary>
            <param name="type">The type of the array to create.</param>
            <param name="sizes">The size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type reference
            and expression indicating the size of the array.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="size">The expression representing the size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeExpression[],Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type reference
            and expression the size of the array.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="sizes">An array of expressions representing the size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type reference
            and expression indicating the size of the array.
            </summary>
            <param name="type">The name of the type of the array to create.</param>
            <param name="size">The expression representing the size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression[],Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type name and
            expression indicating the size of the array.
            </summary>
            <param name="type">The name of the array type to create.</param>
            <param name="sizes">An array of expressions representing the size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type and expression
            indicating the size of the array.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="size">The expression representing the size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeExpression[],Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> class using the specified type and expression
            indicating the size of the array.
            </summary>
            <param name="type">The type reference of the array to create.</param>
            <param name="sizes">An array of expressions representing the size of each dimension in the array.</param>
            <param name="initializer">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> objects that represent the array initializer.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression">
            <summary>
            Represents a reference to an indexer of an array.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression.TargetObject">
            <summary>
            Gets or sets the target object of the array indexer.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression.Indices">
            <summary>
            Gets the collection of indices to the indexer expression.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression"/> class using the specified target object and indices.
            </summary>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the array indexer target.</param>
            <param name="indices">The index or indices to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression">
            <summary>
            Represents an array initializer expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression.InitializationValues">
            <summary>
            Gets a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects representing the initialization values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> class using the initialization values.
            </summary>
            <param name="values">The initial values to use.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAsExpression">
            <summary>
            Represents a "value as type" expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAsExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to check.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAsExpression.Type">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that specifies the type to check for.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAsExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAsExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/> class using the specified expression and type.
            </summary>
            <param name="expression">The expression to cast.</param>
            <param name="type">The name of the type to cast to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAsExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/> class using the specified expression and type.
            </summary>
            <param name="expression">The expression to cast.</param>
            <param name="type">The <see cref="P:Microsoft.BI.Common.CodeDom.CodeAsExpression.Type"/> to cast to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAsExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/> class using the specified expression and type.
            </summary>
            <param name="expression">The expression to cast.</param>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to cast to.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression">
            <summary>
            Represents an expression that assigns the value of one expression to another expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAssignExpression.Left">
            <summary>
            Gets or sets the expression representing the object or reference to assign to.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAssignExpression.Right">
            <summary>
            Gets or sets the expression representing the object or reference to assign.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAssignExpression.Operator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType"/> in the assignment expression.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAssignExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAssignExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> class using the specified expressions.
            </summary>
            <param name="left">The variable or object to assign to.</param>
            <param name="right">The value to assign.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAssignExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeAssignOperatorType,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> class using the specified expressions and operator.
            </summary>
            <param name="left">The variable or object to assign to.</param>
            <param name="op">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType"/> indicating the type of the operator.</param>
            <param name="right">The value to assign.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType">
            <summary>
            Defines identifiers for supported assign operations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.Assign">
            <summary>
            Assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.AddAssign">
            <summary>
            Addition assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.SubtractAssign">
            <summary>
            Subtraction assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.MultiplyAssign">
            <summary>
            Multiplication assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.DivideAssign">
            <summary>
            Division assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.ModulusAssign">
            <summary>
            Modulus assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.LeftShiftAssign">
            <summary>
            Left shift assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.RightShiftAssign">
            <summary>
            Right shift assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.BitwiseOrAssign">
            <summary>
            Bitwise or assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.BitwiseAndAssign">
            <summary>
            Bitwise and assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType.BitwiseExclusiveOrAssign">
            <summary>
            Bitwise exclusive or assignment operator.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeBaseReferenceExpression">
            <summary>
            Represents a reference to the base class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBaseReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBaseReferenceExpression"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression">
            <summary>
            Represents an expression that consists of a binary operation between two expressions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression.Left">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left side of the binary operator.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression.Right">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right side of the binary operator.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression.Operator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/> in the binary expression.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> class using the specified parameters.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left side of the operator.</param>
            <param name="op">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/> indicating the type of the operator.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right side of the operator.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType">
            <summary>
            Defines identifiers for supported binary operations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.Add">
            <summary>
            Addition operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.Subtract">
            <summary>
            Subtraction operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.Multiply">
            <summary>
            Multiplication operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.Divide">
            <summary>
            Division operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.Modulus">
            <summary>
            Modulus operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.Assign">
            <summary>
            Assignment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.IdentityInequality">
            <summary>
            Identity not equal operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.IdentityEquality">
            <summary>
            Identity equal operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.ValueEquality">
            <summary>
            Value equal operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.ValueInequality">
            <summary>
            Value not equal operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.BitwiseOr">
            <summary>
            Bitwise or operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
            <summary>
            Bitwise and operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.BitwiseExclusiveOr">
            <summary>
            Bitwise exclusive or operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.BooleanOr">
            <summary>
            Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate
            only as many expressions as necessary before returning a correct value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.BooleanAnd">
            <summary>
            Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate
            only as many expressions as necessary before returning a correct value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.LessThan">
            <summary>
            Less than operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
            <summary>
            Less than or equal operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.GreaterThan">
            <summary>
            Greater than operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
            <summary>
            Greater than or equal operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.LeftShift">
            <summary>
            Left shift operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.RightShift">
            <summary>
            Right shift operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.NullCoalesce">
            <summary>
            Null coalesce operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.As">
            <summary>
            As operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType.Is">
            <summary>
            Is operator.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeCastExpression">
            <summary>
            Represents an expression cast to a data type or interface.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCastExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to cast.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCastExpression.TargetType">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that specifies the destination type of the cast.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCastExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCastExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/> class using the specified expression and type.
            </summary>
            <param name="type">The name of the type to cast to.</param>
            <param name="expression">The expression to cast.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCastExpression.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/> class using the specified expression and type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to cast to.</param>
            <param name="expression">The expression to cast.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCastExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/> class using the specified expression and type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to cast to.</param>
            <param name="expression">The expression to cast.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeCheckedExpression">
            <summary>
            Represents a checked expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCheckedExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> inside parenthesis.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCheckedExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCheckedExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedExpression"/> class using the specified expression.
            </summary>
            <param name="expression">The expression inside parenthesis.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression">
            <summary>
            Represents an expression that defines collection initialization values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression.Values">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the collection creation values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression"/> class using the specified expressions.
            </summary>
            <param name="values">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the values to create the
            collection object with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression"/> class using the specified expressions.
            </summary>
            <param name="values">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression"/> objects that represent the values to create the
            collection object with.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression">
            <summary>
            Represents an expression that defines a single collection initialization value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression.Values">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represents the collection creation values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeElementInitializerExpression"/> class using the specified expressions.
            </summary>
            <param name="values">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> object that represent the value to create the
            collection object with.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeConditionalExpression">
            <summary>
            Represents a ternary (conditional) expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConditionalExpression.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConditionalExpression.TrueExpression">
            <summary>
            Gets or sets the expression to use when <see cref="P:Microsoft.BI.Common.CodeDom.CodeConditionalExpression.Condition"/> is true.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConditionalExpression.FalseExpression">
            <summary>
            Gets or sets the expression to use when <see cref="P:Microsoft.BI.Common.CodeDom.CodeConditionalExpression.Condition"/> is false.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConditionalExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionalExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConditionalExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionalExpression"/> class using the specified parameters.
            </summary>
            <param name="condition">The condition of the expression.</param>
            <param name="trueExpression">The expression to use when <paramref name="condition"/> evaluates to true.</param>
            <param name="falseExpression">The expression to use when <paramref name="condition"/> evaluates to false.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression">
            <summary>
            Represents an expression that gets the default value of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression.Type">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that specifies the type to get the default of.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/> class using the specified type.
            </summary>
            <param name="type">The name of the type to get the default value of.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/> class using the specified type.
            </summary>
            <param name="type">The <see cref="P:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression.Type"/> to get the default value of.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/> class using the specified type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to get the default value of.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression">
            <summary>
            Represents an expression that creates a delegate.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression.DelegateType">
            <summary>
            Gets or sets the data type of the delegate.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression.TargetObject">
            <summary>
            Gets or sets the object that contains the event-handler method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression.MethodName">
            <summary>
            Gets or sets the name of the event handler method.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDelegateCreateExpression"/> class.</summary>
            <param name="delegateType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the data type of the delegate.</param>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object containing the event-handler method.</param>
            <param name="methodName">The name of the event-handler method.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression">
            <summary>
            Represents an expression that raises an event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression.TargetObject">
            <summary>
            Gets or sets the event to invoke.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression.Parameters">
            <summary>
            Gets the parameters to pass to the event handling methods attached to the event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression" /> class using the specified target object.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> that indicates the target object. </param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDelegateInvokeExpression"/> class using the specified target object and parameters.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the target object. </param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that indicate the parameters. </param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression">
            <summary>
            Represents a reference to an event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression.TargetObject">
            <summary>
            Gets or sets the object that contains the event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression"/> class using the specified target object and event name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the event.</param>
            <param name="eventName">The name of the event to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeExpression">
            <summary>
            Represents a code expression.  This is a base class for all other code expressions.  This class cannot be instantiated.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression">
            <summary>
            Represents an expression containing a reference to a field.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression.Reference">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> that this expression represents.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression"/> class using the specified target object
            and field name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the field to reference.</param>
            <param name="fieldName">The name of the field to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression"/> class using the specified target object
            and field name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that indicates a reference to the object that contains the
            field to reference.</param>
            <param name="fieldName">The name of the field to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeFieldReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression"/> class using the specified field reference.
            </summary>
            <param name="field">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> that indicates a reference to the field to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeIncrementExpression">
            <summary>
            Represents an expression that increments or decrements the value of a variable.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIncrementExpression.Expression">
            <summary>
            Gets or sets the object that contains the property to reference.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the property to reference.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIncrementExpression.Operator">
            <summary>
            Gets or sets the operator in the increment expression.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIncrementExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIncrementExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementExpression"/> class using the specified expression and operator.
            </summary>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to operate upon.</param>
            <param name="op">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType"/> indicating the type of the operator.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType">
            <summary>
            Defines identifiers for supported increment operations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType.Increment">
            <summary>
            Increment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType.Decrement">
            <summary>
            Decrement operator.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeIndexerExpression">
            <summary>
            Represents a reference to an indexer property on an object.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIndexerExpression.TargetObject">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to index.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIndexerExpression.Indices">
            <summary>
            Gets the collection of indices to the indexer expression.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIndexerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIndexerExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIndexerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIndexerExpression"/> class using the specified target object and indices.
            </summary>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the indexer target.</param>
            <param name="indices">The index or indices to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIndexerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIndexerExpression"/> class using the specified target object and indices.
            </summary>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the indexer target.</param>
            <param name="indices">The index or indices to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeIsExpression">
            <summary>
            Represents a "value is type" expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIsExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> type to check.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIsExpression.Type">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that specifies the type to check for.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIsExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIsExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/> class using the specified expression and type.
            </summary>
            <param name="expression">The expression to check.</param>
            <param name="type">The name of the type to check for.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIsExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/> class using the specified expression and type.
            </summary>
            <param name="expression">The expression to check.</param>
            <param name="type">The <see cref="P:Microsoft.BI.Common.CodeDom.CodeIsExpression.Type"/> to check for.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIsExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/> class using the specified expression and type.
            </summary>
            <param name="expression">The expression to check.</param>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> specifying the type to check for.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeLambdaExpression">
            <summary>
            Represents an anonymous lambda expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLambdaExpression.Statements">
            <summary>
            Gets the collection of statements in the anonymous function.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLambdaExpression.Parameters">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> that represent the method arguments.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLambdaExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLambdaExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLambdaExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression[],Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLambdaExpression"/> class using the specified parameters
            and expression.
            </summary>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> objects that represent the arguments to call the method with.</param>
            <param name="expression">The expression invoked by the lambda expression.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLambdaExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression[],Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLambdaExpression"/> class using the specified parameters
            and statements.
            </summary>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to
            call the method with.</param>
            <param name="block">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> containing the statements to execute.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLambdaExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression[],Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLambdaExpression"/> class using the specified parameters
            and statements.
            </summary>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to
            call the method with.</param>
            <param name="statements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that represent the statements to execute.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeImplicitParameterDeclarationExpression">
            <summary>
            Represents an implicit parameter declaration for a lambda method.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeImplicitParameterDeclarationExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeImplicitParameterDeclarationExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeImplicitParameterDeclarationExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeImplicitParameterDeclarationExpression"/> class using the specified parameter name and type.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression">
            <summary>
            Represents an expression containing a reference to an object member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression.Reference">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that this expression represents.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression.FullName">
            <summary>
            Gets the full name of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression.TargetObject">
            <summary>
            Gets or sets the object that contains the member.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/> using the specified member reference.
            </summary>
            <param name="reference">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> to represent.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/> using the specified target object and
            member name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the member to reference.</param>
            <param name="memberName">The name of the member to reference.</param>
            <param name="typeArguments">The type arguments of the member.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/> using the specified target object and
            member name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that represents a reference to the object that contains the
            member to reference.</param>
            <param name="memberName">The name of the member to reference.</param>
            <param name="typeArguments">The type arguments of the member.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression">
            <summary>
            Represents an expression that invokes a method. 
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.Method">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression"/> representing the method to be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.Parameters">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> that represent the method arguments.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMethodReference,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified method reference and parameters.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified member reference and parameters.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified target object,
            method name, and parameters.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> indicating the object with the method to invoke.</param>
            <param name="method">The expression to cast.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified method reference and parameters.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMethodReference,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified method reference and parameters.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified member reference and parameters.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified target object,
            method name, and parameters.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> indicating the object with the method to invoke.</param>
            <param name="method">The expression to cast.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> class using the specified method reference and parameters.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the arguments to call the method with.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression">
            <summary>
            Represents an expression containing a reference to a method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression.Reference">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> that this expression represents.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression"/> class using the specified target object
            and method name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the method to reference.</param>
            <param name="methodName">The name of the method to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression"/> class using the specified target object
            and method name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that represents a reference the object that contains the method
            to reference.</param>
            <param name="methodName">The name of the method to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMethodReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReferenceExpression"/> class using the specified method reference.
            </summary>
            <param name="method">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> that represents a reference the method to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression">
            <summary>
            Represents an expression that creates a new instance of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.CreateType">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> representing the type of the object to be created.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.Parameters">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> objects that represent the object creation arguments.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.CollectionInitializer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCollectionInitializerExpression"/> to initialze the collection with.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.Initializer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectInitializerExpression"/> to initialize the object with.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> class using the specified type reference and parameters.
            </summary>
            <param name="type">The type reference of the object to create.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to create the object with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> class using the specified type name and parameters.
            </summary>
            <param name="type">The name of the type to create.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to create the object with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> class using the specified type and parameters.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to create the object with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> class using the specified type reference and parameters.
            </summary>
            <param name="type">The type reference of the object to create.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to create the object with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> class using the specified type name and parameters.
            </summary>
            <param name="type">The name of the type to create.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to create the object with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> class using the specified type and parameters.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="parameters">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the arguments to create the object with.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeObjectInitializerExpression">
            <summary>
            Represents an expression that defines object initialization values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeObjectInitializerExpression.Initializers">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression"/> that represent the object creation values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectInitializerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectInitializerExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeObjectInitializerExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectInitializerExpression"/> class using the specified expressions.
            </summary>
            <param name="values">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects that represent the values to create the object with.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression">
            <summary>
            Represents an expression that defines member initialization in an object initializer.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression.MemberName">
            <summary>
            Gets or sets the name of the member to initialize.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the value to set.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression"/> class using the specified member
            name and expression.
            </summary>
            <param name="memberName">The name of the member to initialize.</param>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the value to initialize the member with.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeOrderByExpression">
            <summary>
            Represents an expression containing ordering information.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeOrderByExpression.Expression">
            <summary>
            Gets or sets the expression of the item.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeOrderByExpression.Direction">
            <summary>
            Gets or sets the direction of the sort.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeOrderByExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.OrderByDirection)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByExpression"/> class with the specified expression and default sort direction.
            </summary>
            <param name="name">The name or identifier of the item.</param>
            <param name="direction">The sort direction of the item.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeOrderByExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.OrderByDirection)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByExpression"/> class with the specified expression and sort direction.
            </summary>
            <param name="expression">The name or identifier of the item.</param>
            <param name="direction">The sort direction of the item.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression">
            <summary>
            Represents a parameter declaration for a method, property, or constructor.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.Direction">
            <summary>
            Gets or sets the direction of the field.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.Type">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.DefaultValue">
            <summary>
            Gets or sets an expression representing the default value of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.IsParams">
            <summary>
            Gets or sets a value indicating whether the parameter is a params parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
            <summary>Gets the collection of custom attributes for the parameter declaration.</summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> class using the specified parameter name and type.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="defaultValue">An expression representing default value of the parameter.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> class using the specified parameter name and type.
            </summary>
            <param name="typeName">The name of the type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="defaultValue">An expression representing default value of the parameter.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> class using the specified parameter name and type.
            </summary>
            <param name="type">The type reference of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="defaultValue">An expression representing default value of the parameter.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/> from the specified
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/>.
            </summary>
            <returns>A string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterDeclarationExpression"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression">
            <summary>
            Represents an expression used as a method invoke parameter along with a reference direction indicator and optional parameter name.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.ParameterName">
            <summary>
            Gets or sets the name of the parameters.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.Direction">
            <summary>
            Gets or sets the field direction for the expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.Expression">
            <summary>
            Gets or sets the expression to represent.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> class using the specified expression.
            </summary>
            <param name="expression">An expression representing the value of the parameter.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> class using the specified parameter name and expression.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="expression">An expression representing the value of the parameter.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.FieldDirection,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> class using the specified expression and direction.
            </summary>
            <param name="direction">The direction of the parameter.</param>
            <param name="expression">An expression representing the value of the parameter.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.FieldDirection,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> class using the specified parameter name, expression, and direction.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <param name="expression">An expression representing the value of the parameter.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.FieldDirection">
            <summary>
            Defines identifiers used to indicate the direction of parameter and argument declarations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.FieldDirection.In">
            <summary>
            An incoming field.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.FieldDirection.Out">
            <summary>
            An outgoing field.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.FieldDirection.Ref">
            <summary>
            A field by reference.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.FieldDirection.This">
            <summary>
            A this-reference field (for extension methods).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression">
            <summary>
            Represents a parenthized expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> inside parenthesis.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression"/> class using the specified expression.
            </summary>
            <param name="expression">The expression inside parenthesis.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression">
            <summary>
            Represents a primitive data type value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression.Value">
            <summary>
            Gets or sets the primitive data type to represent.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/> class using the specified object.
            </summary>
            <param name="value">The object to represent.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression">
            <summary>
            Represents an expression containing a reference to a property.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression.Reference">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> that this expression represents.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression"/> class using the specified target object
            and property name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the Property to reference.</param>
            <param name="propertyName">The name of the property to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression"/> class using the specified target object
            and property name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that indicates a reference to the object that contains the
            property to reference.</param>
            <param name="propertyName">The name of the property to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodePropertyReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression"/> class using the property reference.
            </summary>
            <param name="property">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that indicates a reference to the property to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodePropertySetValueReferenceExpression">
            <summary>
            Represents the value argument of a property set method call within a property set method.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertySetValueReferenceExpression"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression">
            <summary>
            Represents an expression containing a reference to a variable, object, or object member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeReferenceExpression.Reference">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> that this expression represents.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeReferenceExpression.Name">
            <summary>
            Gets or sets the name of the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeReferenceExpression.TypeArguments">
            <summary>
            Gets the type arguments for the current generic member reference.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReferenceExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/> class using the specified name.
            </summary>
            <param name="name">The name to reference.</param>
            <param name="typeArguments">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing reference type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/> using the specified member reference.
            </summary>
            <param name="reference">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> to represent.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression">
            <summary>
            Represents an expression that gets the size of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression.Type">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that specifies the type to get the size of.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/> class using the specified type.
            </summary>
            <param name="type">The name of the type to get the size of.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/> class using the specified type.
            </summary>
            <param name="type">The <see cref="P:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression.Type"/> to get the size of.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/> class using the specified type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to get the size of.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSnippetExpression">
            <summary>
            Represents a literal expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSnippetExpression.Value">
            <summary>
            Gets or sets the literal code string.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSnippetExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSnippetExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSnippetExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSnippetExpression"/> class using the specified literal expression.
            </summary>
            <param name="value">The literal expression to represent.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeThisReferenceExpression">
            <summary>
            Represents a reference to the current local class instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeThisReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeThisReferenceExpression"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression">
            <summary>
            Represents an expression that gets a reference to type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression.Type">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that specifies the type to get the default of.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/> class using the specified type.
            </summary>
            <param name="type">The name of the type to get the type of.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/> class using the specified type.
            </summary>
            <param name="type">The <see cref="P:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression.Type"/> to get the type of.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/> class using the specified type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to get the type of.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression">
            <summary>
            Represents an expression containing a reference to a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.Reference">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that this expression represents.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> class using the specified type.
            </summary>
            <param name="type">The type to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> class using the specified type name.
            </summary>
            <param name="typeName">The name of the type to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> class using the specified target object
            and type name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the namespace or type that contains the type to reference.</param>
            <param name="typeName">The name of the type to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> class using the specified target object
            and type name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that indicates the reference to a namespace or type that contains the
            type to reference.</param>
            <param name="typeName">The name of the type to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> class using the specified array type name and rank.
            </summary>
            <param name="typeName">The name of the type to reference.</param>
            <param name="rank">The rank of the array.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> class using the specified type reference.
            </summary>
            <param name="reference">The type reference to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression">
            <summary>
            Represents an expression that consists of a unary operation on an expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right side of the unary operator.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression.Operator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/> in the unary expression.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression"/> class using the specified parameters.
            </summary>
            <param name="op">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/> indicating the type of the operator.</param>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right side of the operator.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType">
            <summary>
            Defines identifiers for supported unary operations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.Positive">
            <summary>
            Positive operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.Negative">
            <summary>
            Negative operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.OnesComplement">
            <summary>
            Ones complement operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.LogicalNegation">
            <summary>
            Logical negation operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.Decrement">
            <summary>
            Decrement operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.Increment">
            <summary>
            Increment operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.True">
            <summary>
            True operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType.False">
            <summary>
            False operator.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression">
            <summary>
            Represents an unchecked expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> inside parenthesis.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression"/> class using the specified expression.
            </summary>
            <param name="expression">The expression inside parenthesis.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression">
            <summary>
            Represents a reference to a local variable.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/> class using the specified local variable name.
            </summary>
            <param name="variableName">The name of the local variable to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression.#ctor(Microsoft.BI.Common.CodeDom.CodeVariableReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/> class using the specified local variable name.
            </summary>
            <param name="reference">The name of the local variable to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes">
            <summary>
            Static class containing ExtendedCodeDOM attributes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes.GenerateImports">
            <summary>
            Indicates whether to generate import statements within a <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes.Parenthesize">
            <summary>
            Indicates whether a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> should be generated with parenthesis around it or not.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes.CodeBlock">
            <summary>
            Indicates whether a set of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects should be generated in a block or not.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes.CallDefaultBaseConstructor">
            <summary>
            Indicates that a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConstructor"/> should call the default (0-argument) base constructor.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes.CallDefaultChainedConstructor">
            <summary>
            Indicates that a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConstructor"/> should call the default (0-argument) chained constructor.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes.BlankLinesBetweenMembers">
            <summary>
            Provides a way to toggle the BlankLinesBetweenMembers option at a per-member level.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ExtendedCodeDOMAttributes.PrimitiveFormat">
            <summary>
            Provides a formatting string to a <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/>, allowing the output formatting to be controlled.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions">
            <summary>
            Contains extension method related to array creation.
            </summary>
            <summary>
            Contains extension method related to <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> objects.
            </summary>
            <summary>
            Contains extension method related to <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects.
            </summary>
            <summary>
            Contains extension method related to <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> objects.
            </summary>
            <summary>
            Contains extension method related to <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> objects.
            </summary>
            <summary>
            Contains extension method related to primitives.
            </summary>
            <summary>
            Contains extension method related to the various *Reference types.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.Create``1(``0[])">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> representing the object.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="a">The array to represent.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> representing the object.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddTrue(Microsoft.BI.Common.CodeDom.CodeConditionStatement,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the true statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="conditional">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to add to.</param>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to add.</param>
            <returns><paramref name="conditional"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddTrue(Microsoft.BI.Common.CodeDom.CodeConditionStatement,Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Adds a statement to the true statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="conditional">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to add to.</param>
            <param name="statement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to add.</param>
            <returns><paramref name="conditional"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddTrue(Microsoft.BI.Common.CodeDom.CodeConditionStatement,System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement})">
            <summary>
            Adds statements to the true statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="conditional">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to add to.</param>
            <param name="statements">An enumerable set of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to add.</param>
            <returns><paramref name="conditional"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddFalse(Microsoft.BI.Common.CodeDom.CodeConditionStatement,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the false statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="conditional">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to add to.</param>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to add.</param>
            <returns><paramref name="conditional"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddFalse(Microsoft.BI.Common.CodeDom.CodeConditionStatement,Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Adds a statement to the false statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="conditional">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to add to.</param>
            <param name="statement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to add.</param>
            <returns><paramref name="conditional"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddFalse(Microsoft.BI.Common.CodeDom.CodeConditionStatement,System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement})">
            <summary>
            Adds statements to the false statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="conditional">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to add to.</param>
            <param name="statements">An enumerable set of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to add.</param>
            <returns><paramref name="conditional"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.If(System.Boolean)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> with the specified condition.
            </summary>
            <param name="condition">A primitive value representing the condition.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.If(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> with the specified condition.
            </summary>
            <param name="condition">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the condition.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToStatement(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> representing the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="expression">The expression to represent.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> representing the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddStmt(Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/>.
            </summary>
            <param name="foreachStatement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> to add to.</param>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to add.</param>
            <returns><paramref name="foreachStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddStmt(Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement,Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Adds a statement to the statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/>.
            </summary>
            <param name="foreachStatement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> to add to.</param>
            <param name="statement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to add.</param>
            <returns><paramref name="foreachStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.AddStmt(Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement,System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement})">
            <summary>
            Adds statements to the statements block of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/>.
            </summary>
            <param name="foreachStatement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> to add to.</param>
            <param name="statements">An enumerable set of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to add.</param>
            <returns><paramref name="foreachStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ForEach(System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> with the specified condition.
            </summary>
            <param name="typeName">The name of the type of each element in the enumerable.</param>
            <param name="name">The name of the iteration variable.</param>
            <param name="enumerable">A primitive value representing the enumerable.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ForEach(System.String,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> with the specified condition.
            </summary>
            <param name="typeName">The name of the type of each element in the enumerable.</param>
            <param name="name">The name of the iteration variable.</param>
            <param name="enumerable">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the enumerable.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ForEach(System.Type,System.String,System.Collections.IEnumerable)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> with the specified condition.
            </summary>
            <param name="type">The type of each element in the enumerable.</param>
            <param name="name">The name of the iteration variable.</param>
            <param name="enumerable">A primitive value representing the enumerable.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ForEach(System.Type,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> with the specified condition.
            </summary>
            <param name="type">The type of each element in the enumerable.</param>
            <param name="name">The name of the iteration variable.</param>
            <param name="enumerable">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the enumerable.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.Invoke(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeExpression[])">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> based on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>, method name, and arguments.
            </summary>
            <param name="expression">The expression containing the method.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="arguments">The arguments to pass to the method.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> representing the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToPrimitive(System.Object)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/> representing the object.
            </summary>
            <param name="o">The object to represent.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/> representing the object.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToExpression(Microsoft.BI.Common.CodeDom.CodeFieldReference)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression"/> from a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.
            </summary>
            <param name="reference">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReferenceExpression"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToExpression(Microsoft.BI.Common.CodeDom.CodePropertyReference)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression"/> from a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.
            </summary>
            <param name="reference">The <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReferenceExpression"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToTypeRef(System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> from a string.
            </summary>
            <param name="typeName">The string.</param>
            <param name="typeParams">The type parameters for the type.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> based on the string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToTypeRef(System.String,System.Int32)">
            <summary>
            Gets an array <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> from a string.
            </summary>
            <param name="typeName">The string.</param>
            <param name="rank">The rank of the array.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> based on the string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToTypeRef(System.Type)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> from a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> based on the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToExpression(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/> from a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <param name="reference">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceExpression"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToVariable(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/> from a string.
            </summary>
            <param name="variableName">The string.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/> based on the string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToExpression(Microsoft.BI.Common.CodeDom.CodeVariableReference)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/> from a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/>.
            </summary>
            <param name="reference">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.CodeDomExtensions.ToExpression(Microsoft.BI.Common.CodeDom.CodeMemberReference)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/> from a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/>.
            </summary>
            <param name="reference">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions">
            <summary>
            Contains extension method related to <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> objects.
            </summary>
            <summary>
            Contains extension method related to <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.AddAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the AddAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.AddAssign(System.String,System.Object)">
            <summary>
            Performs the AddAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.AddAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the AddAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.AddAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the AddAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Assign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the Assign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Assign(System.String,System.Object)">
            <summary>
            Performs the Assign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Assign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Assign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Assign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Assign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAndAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BitwiseAndAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAndAssign(System.String,System.Object)">
            <summary>
            Performs the BitwiseAndAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAndAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseAndAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAndAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseAndAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOrAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BitwiseExclusiveOrAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOrAssign(System.String,System.Object)">
            <summary>
            Performs the BitwiseExclusiveOrAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOrAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseExclusiveOrAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOrAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseExclusiveOrAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOrAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BitwiseOrAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOrAssign(System.String,System.Object)">
            <summary>
            Performs the BitwiseOrAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOrAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseOrAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOrAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseOrAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShiftAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the LeftShiftAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShiftAssign(System.String,System.Object)">
            <summary>
            Performs the LeftShiftAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShiftAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LeftShiftAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShiftAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LeftShiftAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ModulusAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the ModulusAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ModulusAssign(System.String,System.Object)">
            <summary>
            Performs the ModulusAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ModulusAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the ModulusAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ModulusAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the ModulusAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.MultiplyAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the MultiplyAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.MultiplyAssign(System.String,System.Object)">
            <summary>
            Performs the MultiplyAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.MultiplyAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the MultiplyAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.MultiplyAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the MultiplyAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShiftAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the RightShiftAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShiftAssign(System.String,System.Object)">
            <summary>
            Performs the RightShiftAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShiftAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the RightShiftAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShiftAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the RightShiftAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.SubtractAssign(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the SubtractAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.SubtractAssign(System.String,System.Object)">
            <summary>
            Performs the SubtractAssign operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The object to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.SubtractAssign(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the SubtractAssign operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.SubtractAssign(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the SubtractAssign operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The name of the variable to assign to.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to assign.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> representing the assignment operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Add(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the Add operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Add(System.String,System.Object)">
            <summary>
            Performs the Add operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Add(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Add operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Add(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Add operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Subtract(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the Subtract operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Subtract(System.String,System.Object)">
            <summary>
            Performs the Subtract operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Subtract(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Subtract operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Subtract(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Subtract operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Multiply(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the Multiply operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Multiply(System.String,System.Object)">
            <summary>
            Performs the Multiply operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Multiply(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Multiply operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Multiply(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Multiply operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Divide(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the Divide operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Divide(System.String,System.Object)">
            <summary>
            Performs the Divide operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Divide(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Divide operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Divide(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Divide operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Modulus(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the Modulus operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Modulus(System.String,System.Object)">
            <summary>
            Performs the Modulus operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Modulus(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Modulus operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Modulus(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Modulus operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityInequality(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the IdentityInequality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityInequality(System.String,System.Object)">
            <summary>
            Performs the IdentityInequality operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityInequality(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the IdentityInequality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityInequality(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the IdentityInequality operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityEquality(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the IdentityEquality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityEquality(System.String,System.Object)">
            <summary>
            Performs the IdentityEquality operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityEquality(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the IdentityEquality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.IdentityEquality(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the IdentityEquality operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueEquality(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the ValueEquality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueEquality(System.String,System.Object)">
            <summary>
            Performs the ValueEquality operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueEquality(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the ValueEquality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueEquality(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the ValueEquality operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueInequality(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the ValueInequality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueInequality(System.String,System.Object)">
            <summary>
            Performs the ValueInequality operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueInequality(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the ValueInequality operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.ValueInequality(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the ValueInequality operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOr(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BitwiseOr operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOr(System.String,System.Object)">
            <summary>
            Performs the BitwiseOr operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOr(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseOr operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseOr(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseOr operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAnd(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BitwiseAnd operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAnd(System.String,System.Object)">
            <summary>
            Performs the BitwiseAnd operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAnd(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseAnd operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseAnd(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseAnd operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOr(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BitwiseExclusiveOr operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOr(System.String,System.Object)">
            <summary>
            Performs the BitwiseExclusiveOr operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOr(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseExclusiveOr operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BitwiseExclusiveOr(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BitwiseExclusiveOr operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanOr(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BooleanOr operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanOr(System.String,System.Object)">
            <summary>
            Performs the BooleanOr operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanOr(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BooleanOr operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanOr(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BooleanOr operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanAnd(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the BooleanAnd operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanAnd(System.String,System.Object)">
            <summary>
            Performs the BooleanAnd operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanAnd(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BooleanAnd operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.BooleanAnd(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the BooleanAnd operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThan(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the LessThan operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThan(System.String,System.Object)">
            <summary>
            Performs the LessThan operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThan(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LessThan operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThan(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LessThan operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThanOrEqual(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the LessThanOrEqual operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThanOrEqual(System.String,System.Object)">
            <summary>
            Performs the LessThanOrEqual operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThanOrEqual(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LessThanOrEqual operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LessThanOrEqual(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LessThanOrEqual operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThan(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the GreaterThan operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThan(System.String,System.Object)">
            <summary>
            Performs the GreaterThan operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThan(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the GreaterThan operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThan(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the GreaterThan operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThanOrEqual(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the GreaterThanOrEqual operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Performs the GreaterThanOrEqual operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThanOrEqual(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the GreaterThanOrEqual operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.GreaterThanOrEqual(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the GreaterThanOrEqual operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShift(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the LeftShift operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShift(System.String,System.Object)">
            <summary>
            Performs the LeftShift operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShift(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LeftShift operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.LeftShift(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the LeftShift operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShift(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the RightShift operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShift(System.String,System.Object)">
            <summary>
            Performs the RightShift operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShift(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the RightShift operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.RightShift(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the RightShift operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.NullCoalesce(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the NullCoalesce operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.NullCoalesce(System.String,System.Object)">
            <summary>
            Performs the NullCoalesce operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.NullCoalesce(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the NullCoalesce operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.NullCoalesce(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the NullCoalesce operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.As(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the As operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.As(System.String,System.Object)">
            <summary>
            Performs the As operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.As(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the As operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.As(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the As operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Is(Microsoft.BI.Common.CodeDom.CodeExpression,System.Object)">
            <summary>
            Performs the Is operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Is(System.String,System.Object)">
            <summary>
            Performs the Is operation on the the varible with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The object on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Is(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Is operation on the the expression using the specified operand.
            </summary>
            <param name="left">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.Extensions.ReferenceExtensions.Is(System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs the Is operation on the the variable with the specified name using the specified operand.
            </summary>
            <param name="variableName">The variable name on the left of the operation.</param>
            <param name="right">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> on the right of the operation.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> representing the operation.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeDomCollectionExtensions">
            <summary>
            Contains a set of extension methods for the various <see cref="T:System.Collections.Generic.ICollection`1"/> containers
            used in CodeDom.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDomCollectionExtensions.Add(System.Collections.Generic.ICollection{Microsoft.BI.Common.CodeDom.CodeTypeReference},System.String)">
            <summary>
            Adds a type to the collection.
            </summary>
            <param name="collection">The collection to add to.</param>
            <param name="type">The name of the type to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDomCollectionExtensions.Add(System.Collections.Generic.ICollection{Microsoft.BI.Common.CodeDom.CodeTypeReference},System.Type)">
            <summary>
            Adds a type to the collection.
            </summary>
            <param name="collection">The collection to add to.</param>
            <param name="type">The type to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDomCollectionExtensions.Add(System.Collections.Generic.ICollection{Microsoft.BI.Common.CodeDom.CodeStatement},Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the collection as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement"/>.
            </summary>
            <param name="collection">The collection to add to.</param>
            <param name="expression">The expression to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDomCollectionExtensions.AddRange(System.Collections.Generic.ICollection{Microsoft.BI.Common.CodeDom.CodeStatement},Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Add all the statements in a <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> to the collection.
            </summary>
            <param name="collection">The collection to add to.</param>
            <param name="block">The block containing the statements to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDomCollectionExtensions.AddRange(System.Collections.Generic.ICollection{Microsoft.BI.Common.CodeDom.CodeStatement},Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Add the statements in a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array to the collection.
            </summary>
            <param name="collection">The collection to add to.</param>
            <param name="statements">The statements to add.</param>
            <remarks>If <paramref name="statements"/> contains a single statement of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>,
            then the contents of the block are added to the collection rather than the statement itself.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.JoinType">
            <summary>
            Contains values indicating the type of join in a JOIN clause.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.Inner">
            <summary>
            An inner join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.LeftOuter">
            <summary>
            A left outer join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.RightOuter">
            <summary>
            A right outer join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.FullOuter">
            <summary>
            A full outer join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.Cross">
            <summary>
            A cross join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.LeftSemi">
            <summary>
            A left semi join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.RightSemi">
            <summary>
            A right-semi join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.LeftAnti">
            <summary>
            A left anti join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.RightAnti">
            <summary>
            A right anti join.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.CrossApply">
            <summary>
            A cross apply.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.JoinType.OuterApply">
            <summary>
            An outer apply.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.ModifierAttributes">
            <summary>
            Defines modifier attributes for classes and members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.None">
            <summary>
            Indicates that no attributes have been specified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Abstract">
            <summary>
            Indicate that a class is intended only to be a base class of other classes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Const">
            <summary>
            Specify that the value of the field or the local variable cannot be modified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Extern">
            <summary>
            Indicates that the method is implemented externally.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Final">
            <summary>
            Sepecifies that a member cannot be overridden.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.New">
            <summary>
            Hides an inherited member from a base class member.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Override">
            <summary>
            Provides a new implementation of a virtual member inherited from a base class.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Partial">
            <summary>
            Defines partial classes, structs, and methods throughout the same assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.ReadOnly">
            <summary>
            Declares a field that can only be assigned values as part of the declaration or in a constructor in the same class.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Sealed">
            <summary>
            Sepecifies that a class cannot be inherited.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Static">
            <summary>
            Declares a member that belongs to the type itself instead of to a specific object.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Unsafe">
            <summary>
            Declares an unsafe context.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Virtual">
            <summary>
            Declares a method or an accessor whose implementation can be changed by an overriding member in a derived class. 
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.ModifierAttributes.Volatile">
            <summary>
            Indicates that a field can be modified in the program by something such as the operating system, the hardware, or
            a concurrently executing thread.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.OrderByDirection">
            <summary>
            Contains values indicating the direction of sorting in ORDER BY clauses.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.OrderByDirection.Unspecified">
            <summary>
            Indicates a sort direction was not specified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.OrderByDirection.Ascending">
            <summary>
            Indicates sorting in ascending order.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.OrderByDirection.Decending">
            <summary>
            Indicates sorting in descending order.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeGenerateQuery">
            <summary>
            Represents a query that generates data.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeGenerateQuery.Schema">
            <summary>
            Gets the collection of names and types this generate query will return.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeGenerateQuery.From">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects representing the source(s) of the data.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeGenerateQuery.Having">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that filters the output of the query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeGenerateQuery.Using">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> representing the code that will be ran to generate the data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGenerateQuery.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGenerateQuery"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeJoinQuery">
            <summary>
            Represents a <c>JOIN</c> query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.Columns">
            <summary>
            Gets the collection of columns this join query will return.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.Left">
            <summary>
            Gets or sets the expression on the left side of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.PresortLeft">
            <summary>
            Gets or sets the sort order of the left side of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.JoinTarget">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinClause"/> representing the join type, predicate, and target.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.Predicate">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> object representing the join predicate.
            </summary>
            <remarks>Not applicable to all join types.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.Right">
            <summary>
            Gets or sets the expression on the right side of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.PresortRight">
            <summary>
            Gets or sets the sort order of the right side of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.JoinType">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.JoinType"/> of the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.Using">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingClause"/> object associated with the join.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeJoinQuery.Having">
            <summary>
            Gets or sets the code expression that filters the output of the query.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeJoinQuery.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinQuery"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeJoinQuery.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.JoinType,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinQuery"/> class with the specified parameters.
            </summary>
            <param name="left">The expression on the left side of the join.</param>
            <param name="type">The type of the join.</param>
            <param name="right">The expression on the right side of the join.</param>
            <param name="predicate">The predicate on which to join.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeJoinQuery.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeUsingClause)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinQuery"/> class with the specified parameters.
            </summary>
            <param name="left">The expression on the left side of the join.</param>
            <param name="right">The expression on the right side of the join.</param>
            <param name="predicate">The predicate on which to join.</param>
            <param name="using">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingClause"/> representing the object to use to perform the join.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeJoinQuery.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeJoinClause)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinQuery"/> class with the specified paramters.
            </summary>
            <param name="left">The expression on the left side of the join.</param>
            <param name="target">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinClause"/> representing the join type, predicate, and target.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodePersistQuery">
            <summary>
            Represents a query that persists data to some permanent location or data structure.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodePersistQuery.From">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the source of the data.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodePersistQuery.To">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the location or data structure in which to persist the data.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodePersistQuery.Where">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that filters the input of the query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodePersistQuery.Using">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> representing the code that will be ran to persist the data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePersistQuery.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGenerateQuery"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSelectQuery">
            <summary>
            Represents a <c>SELECT</c> query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.Columns">
            <summary>
            Gets the collection of columns this select query will return.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.From">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the table or nested query to select from.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.IsDistinct">
            <summary>
            Gets or sets a boolean indicating whether or not the select is a DISTINCT select.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.TopCount">
            <summary>
            Gets or sets the maximum number of rows to return.  If 0, returns all rows.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.Where">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that filters the input of the query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.Having">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that filters the output of the query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.GroupBy">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGroupByClause"/> that represents the grouping applied to the query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.OrderBy">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeOrderByClause"/> that represents the ordering applied to the query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.JoinClauses">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeJoinClause"/> statements representing the tables or nested queries to join to.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSelectQuery.Using">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingClause"/> object associated with the select.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSelectQuery.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSelectQuery"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery">
            <summary>
            Represents a <c>UNION</c>, <c>INTERSECT</c>, or <c>EXCEPT</c> query.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery.Left">
            <summary>
            Gets or sets the expression on the left side of the set operator.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery.Right">
            <summary>
            Gets or sets the expression on the right side of the set operator.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery.Operator">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeSetOperatorType"/> value representing the type of set operator.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeSetOperatorType,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSetOperationQuery"/> class with the specified parameters.
            </summary>
            <param name="left">The expression on the left side of the set operation.</param>
            <param name="op">The set operator.</param>
            <param name="right">The expression on the right side of the set operation.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSetOperatorType">
            <summary>
            Contains values describing the types of supported set operators.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.Union">
            <summary>
            Represents the <c>UNION</c> set operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.UnionAll">
            <summary>
            Represents the <c>UNION ALL</c> set operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.Intersect">
            <summary>
            Represents the <c>INTERSECT</c> set operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.IntersectAll">
            <summary>
            Represents the <c>INTERSECT ALL</c> set operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.Except">
            <summary>
            Represents the <c>EXCEPT</c> set operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.ExceptAll">
            <summary>
            Represents the <c>EXCEPT ALL</c> set operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.Distinct">
            <summary>
            Represents the <c>DISTINCT</c> set operator.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeSetOperatorType.DistinctAll">
            <summary>
            Represents the <c>DISTINCT ALL</c> set operator.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeFieldReference">
            <summary>
            Represents a reference to an object field.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReference.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> class using the specified target object
            and field name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the field to reference.</param>
            <param name="fieldName">The name of the field to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReference.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> class using the specified target object
            and field name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that indicates a reference to the object that contains the
            field to reference.</param>
            <param name="fieldName">The name of the field to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeFieldReference.ToFieldReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberReference">
            <summary>
            Represents a reference to an object member.  This is the base class for all member reference
            subclasses.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberReference.TargetObject">
            <summary>
            Gets or sets the object that contains the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberReference.FullName">
            <summary>
            Gets the full name of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> class using the specified name.
            </summary>
            <param name="name">The name to reference.</param>
            <param name="typeArguments">The type arguments of the member.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> class using the specified target object
            and member name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the member to reference.</param>
            <param name="memberName">The name of the member to reference.</param>
            <param name="typeArguments">The type arguments of the member.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> class using the specified target object
            and member reference.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the member to reference.</param>
            <param name="reference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> representing the member to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> class using the specified target object
            and member name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that represents a reference to the object that contains the
            member to reference.</param>
            <param name="memberName">The name of the member to reference.</param>
            <param name="typeArguments">The type arguments of the member.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,Microsoft.BI.Common.CodeDom.CodeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> class using the specified target object
            and member reference.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that represents a reference to the object that contains the
            member to reference.</param>
            <param name="reference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> representing the member to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.ToTypeReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.ToMethodReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.ToFieldReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberReference.ToPropertyReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMethodReference">
            <summary>
            Represents a reference to an object method or method group.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReference.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> class using the specified target object
            and method name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the method to reference.</param>
            <param name="methodName">The name of the field to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReference.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> class using the specified target object
            and method name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that represents a reference the object that contains the method
            to reference.</param>
            <param name="methodName">The name of the field to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReference.ToMethodReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference">
            <summary>
            Represents a reference to a namespace.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespaceReference.TargetObject">
            <summary>
            Gets or sets the namespace that contains this namespace.
            </summary>
            <remarks><see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/> objects may only contain <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/> objects containing
            <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/> objects.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespaceReference.TargetNamespace">
            <summary>
            Gets the <see cref="P:Microsoft.BI.Common.CodeDom.CodeNamespaceReference.TargetObject"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeNamespaceReference.NamespaceElements">
            <summary>
            Gets the full namespace name of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeNamespaceReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeNamespaceReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/> class using the specified namspace name.
            </summary>
            <param name="ns">The name of the namespace to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeNamespaceReference.#ctor(Microsoft.BI.Common.CodeDom.CodeNamespaceReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/> class using the specified namspace parent and namespace name.
            </summary>
            <param name="parentNamespace">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespaceReference"/> that indicates the parent namespace of the namespace to reference.</param>
            <param name="memberName">The name of the namespace to reference.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodePropertyReference">
            <summary>
            Represents a reference to an object property.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReference.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> class using the specified target object
            and property name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the property to reference.</param>
            <param name="propertyName">The name of the property to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReference.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> class using the specified target object
            and property name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that indicates a reference to the object that contains the
            property to reference.</param>
            <param name="propertyName">The name of the property to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodePropertyReference.ToPropertyReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeReference">
            <summary>
            Represents a reference to a named variable, object, or object member.  This is the base class for all reference
            subclasses.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeReference.Name">
            <summary>
            Gets or sets the name of the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeReference.TypeArguments">
            <summary>
            Gets the type arguments for the current generic member reference.
            </summary>
            <remarks>For non-generic types, this should be empty.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReference.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> class using the specified name.
            </summary>
            <param name="name">The name to reference.</param>
            <param name="typeArguments">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing reference type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReference.ToTypeReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReference.ToMethodReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReference.ToFieldReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReference.ToPropertyReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeReference.ToVariableReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeReference">
            <summary>
            Represents a reference to a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeReference.ArrayRank">
            <summary>
            Gets or sets the array rank of the array.
            </summary>
            <remarks>For non-array types, this should be 0.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeReference.ArrayElementType">
            <summary>
            Gets or sets the type of the elements in the array.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeReference.Options">
            <summary>
            Gets or sets the code type reference option.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeReference.FullName">
            <summary>
            Gets or sets the type's full name.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> class using the specified type.
            </summary>
            <param name="type">The type to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> class using the specified type name.
            </summary>
            <param name="typeName">The name of the type to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> class using the specified target object
            and type name.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the namespace or type that contains the type to reference.</param>
            <param name="typeName">The name of the type to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.#ctor(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.String,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> class using the specified target object
            and type name.
            </summary>
            <param name="targetReference">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that indicates the reference to a namespace or type that contains the
            type to reference.</param>
            <param name="typeName">The name of the type to reference.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32,Microsoft.BI.Common.CodeDom.CodeTypeReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> class using the specified array type name and rank.
            </summary>
            <param name="typeName">The name of the type to reference.</param>
            <param name="rank">The rank of the array.</param>
            <param name="typeParams">An optional array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects representing the method type parameters.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.ToTypeReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.Equals(Microsoft.BI.Common.CodeDom.CodeTypeReference)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> is equal to another
            <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to compare to.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> values are equal; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <returns>A hash code for the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeReference.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <returns>A string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeReferenceOptions">
            <summary>
            Specifies how the code type reference is to be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeTypeReferenceOptions.None">
            <summary>
            No special options are specified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeTypeReferenceOptions.GlobalReference">
            <summary>
            Resolve the type from the root namespace.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
            <summary>
            Resolve the type from the type parameter.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeVariableReference">
            <summary>
            Represents a reference to a local variable.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/> class using the specified variable name.
            </summary>
            <param name="variableName">The name of the variable to reference.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableReference.ToVariableReference">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/> as a <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReference"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement">
            <summary>
            Represents a statement that attaches an event-handler delegate to an event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement.Event">
            <summary>
            Gets or sets the event to attach an event-handler delegate to.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement.Listener">
            <summary>
            Gets or sets the new event-handler delegate to attach to the event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement"/> class using the specified event and delegate.
            </summary>
            <param name="eventRef">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression"/> that indicates the event to attach an event handler to.</param>
            <param name="listener">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the new event handler.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeAttachEventStatement"/> class using the specified object containing the event, event name, and event-handler delegate.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the event.</param>
            <param name="eventName">The name of the event to attach an event handler to.</param>
            <param name="listener">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the new event handler.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeBlankLineStatement">
            <summary>
            Represents a blank line.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBlankLineStatement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlankLineStatement"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement">
            <summary>
            Represents a code block.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeBlockStatement.Statements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects contained in the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBlockStatement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBlockStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> class containing the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="statements">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects contained in the code block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBlockStatement.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects in the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects in the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBlockStatement.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects in the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects in the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeBreakStatement">
            <summary>
            Represents a break statement.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeBreakStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeBreakStatement"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeCheckedStatement">
            <summary>
            Represents a checked statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCheckedStatement.Statements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to be executed within the checked block.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCheckedStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCheckedStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedStatement"/> class using the specified parameters.
            </summary>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the checked block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCheckedStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedStatement"/> class using the specified parameters.
            </summary>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the checked block.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeCommentStatement">
            <summary>
            Represents a statement consisting of a single comment.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeCommentStatement.Comment">
            <summary>
            Gets or sets the contents of the comment.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCommentStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCommentStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCommentStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCommentStatement"/> class using the specified parameters.
            </summary>
            <param name="text">The contents of the comment.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCommentStatement"/> class using the specified parameters.
            </summary>
            <param name="text">The contents of the comment.</param>
            <param name="isDoc"><c>true</c> if the comment is a documentation comment; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeCommentStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeComment)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeCommentStatement"/> class using the specified comment.
            </summary>
            <param name="comment">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeComment"/> that indicates the comment.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement">
            <summary>
            Represents a conditional branch statement, typically represented as an if statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConditionStatement.Condition">
            <summary>
            Gets or sets the expression to evaluate true or false.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConditionStatement.TrueStatements">
            <summary>
            Gets the collection of statements to evaluate if the condition expression evaluates to true.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConditionStatement.FalseStatements">
            <summary>
            Gets the collection of statements to evaluate if the condition expression evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConditionStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConditionStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> class using the specified condition and statements.
            </summary>
            <param name="condition">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> that indicates the expression to evaluate.</param>
            <param name="trueStatements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements to execute if the condition is true.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConditionStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[],Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> class using the specified condition and statements.
            </summary>
            <param name="condition">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> that indicates the expression to evaluate.</param>
            <param name="trueStatements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements to execute if the condition is true.</param>
            <param name="falseStatements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements to execute if the condition is false.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConditionStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> class using the specified condition and statements.
            </summary>
            <param name="condition">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> that indicates the expression to evaluate.</param>
            <param name="trueStatements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements to execute if the condition is true.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConditionStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBlockStatement,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> class using the specified condition and statements.
            </summary>
            <param name="condition">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> that indicates the expression to evaluate.</param>
            <param name="trueStatements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements to execute if the condition is true.</param>
            <param name="falseStatements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements to execute if the condition is false.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeContinueStatement">
            <summary>
            Represents a continue statement.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeContinueStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeContinueStatement"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement">
            <summary>
            Represents a do while loop-type iteration statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement.TestExpression">
            <summary>
            Gets or sets the expression to test as the condition that continues the loop.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement.Statements">
            <summary>
            Gets the collection of statements to be executed within the loop.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement" /> class using the specified parameters.
            </summary>
            <param name="testExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement" /> class using the specified parameters.
            </summary>
            <param name="testExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeEmptyStatement">
            <summary>
            Represents an empty statement.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeEmptyStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeEmptyStatement"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement">
            <summary>
            Represents a statement that consists of a single expression.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeExpressionStatement.Expression">
            <summary>
            Gets or sets the expression for the statement.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeExpressionStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeExpressionStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement"/> class using the specified expression.
            </summary>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> for which to create a statement.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement">
            <summary>
            Represents an iteration statement on top of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.InitStatement">
            <summary>
            Gets or sets the foreach intialization <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.Enumerable">
            <summary>
            Gets or sets the expression describing the enumerable.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.Statements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to be executed within the foreach loop.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.#ctor(System.String,System.String,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> class using the specified parameters.
            </summary>
            <param name="type">The type name representing the type of the iteration value.</param>
            <param name="name">The name of the loop iteration value.</param>
            <param name="enumerable">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the enumerable over which to loop.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.#ctor(System.Type,System.String,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> class using the specified parameters.
            </summary>
            <param name="type">The type representing the type of the iteration value.</param>
            <param name="name">The name of the loop iteration value.</param>
            <param name="enumerable">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the enumerable over which to loop.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> class using the specified parameters.
            </summary>
            <param name="type">The type reference representing the type of the iteration value.</param>
            <param name="name">The name of the loop iteration value.</param>
            <param name="enumerable">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the enumerable over which to loop.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> class using the specified parameters.
            </summary>
            <param name="initStatement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> containing the loop initialization statement.</param>
            <param name="enumerable">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the enumerable over which to loop.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> class using the specified parameters.
            </summary>
            <param name="initStatement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> containing the loop initialization statement.</param>
            <param name="enumerable">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the enumerable over which to loop.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeGotoCaseStatement">
            <summary>
            Represents a goto case statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeGotoCaseStatement.Case">
            <summary>
            Gets or sets the expression representing the case to go to.
            </summary>
            <remarks>If this value is null, this represents a "goto default" statement.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGotoCaseStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoCaseStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGotoCaseStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoCaseStatement"/> class using the specified case.
            </summary>
            <param name="case">An expression representing the case to go to .</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeGotoStatement">
            <summary>
            Represents a goto statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeGotoStatement.Label">
            <summary>
            Gets or sets the name of the label at which to continue program execution.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGotoStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeGotoStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoStatement"/> class using the label name.
            </summary>
            <param name="label">The name of the label at which to continue program execution.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement">
            <summary>
            Represents a for statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIterationStatement.InitStatements">
            <summary>
            Gets the collection of loop initialization statements.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIterationStatement.TestExpression">
            <summary>
            Gets or sets the expression to test as the condition that continues the loop.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIterationStatement.IncrementStatements">
            <summary>
            Gets the collection of statement that is called after each loop cycle.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeIterationStatement.Statements">
            <summary>
            Gets the collection of statements to be executed within the loop.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIterationStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement" /> class using the specified parameters.
            </summary>
            <param name="initStatement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the loop initialization statement.</param>
            <param name="testExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
            <param name="incrementStatement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement" /> class using the specified parameters.
            </summary>
            <param name="initStatement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the loop initialization statement.</param>
            <param name="testExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
            <param name="incrementStatement">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement[],Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[],Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement" /> class using the specified parameters.
            </summary>
            <param name="initStatements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the loop initialization statement.</param>
            <param name="testExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
            <param name="incrementStatements">An array of type  <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement">
            <summary>
            Represents a labeled statement or stand-alone label.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLabeledStatement.Label">
            <summary>
            Gets or sets the name of the label.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLabeledStatement.Statement">
            <summary>
            Gets or sets the optional associated statement.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLabeledStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLabeledStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement"/> class using the specified label name.
            </summary>
            <param name="label">The name of the label.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLabeledStatement.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement" /> class using the specified label name and statement.
            </summary>
            <param name="label">The name of the label. </param>
            <param name="statement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to associate with the label.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeLockStatement">
            <summary>
            Represents a lock statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLockStatement.Expression">
            <summary>
            Gets or sets the expression representing the object to lock.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeLockStatement.Statements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to be executed within the lock block.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLockStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLockStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLockStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLockStatement"/> class using the specified parameters.
            </summary>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the object to lock.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the lock block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeLockStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeLockStatement"/> class using the specified parameters.
            </summary>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the object to lock.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the lock block.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMethodReturnStatement">
            <summary>
            Represents a return value statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMethodReturnStatement.Expression">
            <summary>
            Gets or sets the return value.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReturnStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReturnStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMethodReturnStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReturnStatement"/> class using the specified expression.
            </summary>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the return value.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement">
            <summary>
            Represents a statement that removes an event handler.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement.Event">
            <summary>
            Gets or sets the event to remove a listener from.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement.Listener">
            <summary>
            Gets or sets the event handler to remove.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement"/> class with the specified event and event handler.
            </summary>
            <param name="eventRef">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeEventReferenceExpression"/> that indicates the event to detach the event handler from.</param>
            <param name="listener">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the event handler to remove.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeRemoveEventStatement"/> class using the specified target object, event name, and event handler.
            </summary>
            <param name="targetObject">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the object that contains the event.</param>
            <param name="eventName">The name of the event.</param>
            <param name="listener">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the event handler to remove.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSnippetStatement">
            <summary>
            Represents a literal code fragment.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSnippetStatement.Value">
            <summary>
            Gets or sets the literal code fragment.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSnippetStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSnippetStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSnippetStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSnippetStatement"/> class using the specified code fragment.
            </summary>
            <param name="value">The literal expression to represent.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeStatement">
            <summary>
            Represents a code statement.  This is a base class for all other code statements.  This class cannot be instantiated.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeStatement.LinePragma">
            <summary>
            Gets or sets the line on which the code statement occurs.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeStatement.StartDirectives">
            <summary>
            Gets a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeDirective"/> objects that contains start directives.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeStatement.EndDirectives">
            <summary>
            Gets a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeDirective"/> objects that contains start directives.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeStatement.CustomAttributes">
            <summary>
            Gets or sets the custom attributes of the statement.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeStatement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSwitchStatement">
            <summary>
            Represents a switch statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSwitchStatement.Expression">
            <summary>
            Gets or sets a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the value to switch on.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSwitchStatement.Clauses">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchClause"/> objects contained in the switch statement.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSwitchStatement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSwitchStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeSwitchClause[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchStatement"/> class with the specified expression and
            switch clauses.
            </summary>
            <param name="expression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the value to switch on.</param>
            <param name="clauses">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchClause"/> containing the clauses in the
            switch statement.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSwitchClause">
            <summary>
            Represents a single clause within a switch statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSwitchClause.Labels">
            <summary>
            Gets the collection of labels of the switch clause.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSwitchClause.Statements">
            <summary>
            Gets the collection of statements in the switch clause.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSwitchClause.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchClause"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSwitchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchClause"/> class with the specified label and statements.
            </summary>
            <param name="label">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the label of the switch clause.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> containing the statements to include
            in the switch clause.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSwitchClause.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression[],Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchClause"/> class with the specified label and statements.
            </summary>
            <param name="labels">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the labels of the switch clause.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> containing the statements to include
            in the switch clause.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement">
            <summary>
            Represents a statement that throws an exception.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement.ToThrow">
            <summary>
            Gets or sets the exception to throw.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement"/> class with the specified exception type instance.
            </summary>
            <param name="toThrow">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the exception to throw.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement">
            <summary>
            Represents a try block with any number of catch clauses and, optionally, a finally block.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
            <summary>
            Gets the statements to try.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
            <summary>
            Gets the catch clauses to use.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
            <summary>
            Gets the finally statements to use.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement[],Microsoft.BI.Common.CodeDom.CodeCatchClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement"/> class using the specified statements for try and catch clauses.
            </summary>
            <param name="tryStatements">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that indicate the statements to try.</param>
            <param name="catchClauses">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> objects that indicate the clauses to catch.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeBlockStatement,Microsoft.BI.Common.CodeDom.CodeCatchClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement"/> class using the specified statements for try and catch clauses.
            </summary>
            <param name="tryStatements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements to try.</param>
            <param name="catchClauses">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause"/> objects that indicate the clauses to catch.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement[],Microsoft.BI.Common.CodeDom.CodeCatchClause[],Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement" /> class using the specified statements for try, catch clauses, and finally statements.
            </summary>
            <param name="tryStatements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements to try.</param>
            <param name="catchClauses">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> objects that indicate the clauses to catch.</param>
            <param name="finallyStatements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the finally statements to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeBlockStatement,Microsoft.BI.Common.CodeDom.CodeCatchClause[],Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement" /> class using the specified statements for try, catch clauses, and finally statements.
            </summary>
            <param name="tryStatements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements to try.</param>
            <param name="catchClauses">An array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeCatchClause" /> objects that indicate the clauses to catch.</param>
            <param name="finallyStatements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the finally statements to use.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement">
            <summary>
            Represents an unchecked statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement.Statements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to be executed within the unchecked block.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement"/> class using the specified parameters.
            </summary>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the unchecked block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedStatement"/> class using the specified parameters.
            </summary>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the unchecked block.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement">
            <summary>
            Represents a using statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUsingStatement.InitStatement">
            <summary>
            Gets or sets the using intialization <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeUsingStatement.Statements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to be executed within the using block.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUsingStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUsingStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> class using the specified parameters.
            </summary>
            <param name="initStatement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> used to initialize the using statement.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the using block.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeUsingStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> class using the specified parameters.
            </summary>
            <param name="initStatement">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> used to initialize the using statement.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the using block.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement">
            <summary>
            Represents a variable declaration.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.Initializers">
            <summary>
            Gets the collection of variable names and values to initialize.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.Type">
            <summary>
            Gets or sets the data type of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.IsConstant">
            <summary>
            Gets or sets a bool that indicates whether the variable value is constant.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified type and variable name.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the data type of the variable.</param>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type name and variable name.
            </summary>
            <param name="type">The name of the data type of the variable.</param>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type and variable name.
            </summary>
            <param name="type">The data type for the variable.</param>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified type and variable names.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the data type of the variable.</param>
            <param name="names">The names of the variables.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type name and variable names.
            </summary>
            <param name="type">The name of the data type of the variable.</param>
            <param name="names">The names of the variables.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type and variable names.
            </summary>
            <param name="type">The data type for the variable.</param>
            <param name="names">The names of the variables.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type, variable name, and initialization expression.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="initExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the initialization expression for the variable.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type, variable name, and initialization expression.
            </summary>
            <param name="type">The name of the data type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="initExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the initialization expression for the variable.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type, variable name, and initialization expression.
            </summary>
            <param name="type">The data type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="initExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the initialization expression for the variable.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type, variable names, and initialization expression.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of the variable.</param>
            <param name="expressions">The set of variable names and their associated initialization expressions.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type, variable names, and initialization expression.
            </summary>
            <param name="type">The name of the data type of the variable.</param>
            <param name="expressions">The set of variable names and their associated initialization expressions.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> class using the specified data type, variable names, and initialization expression.
            </summary>
            <param name="type">The data type of the variable.</param>
            <param name="expressions">The set of variable names and their associated initialization expressions.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement">
            <summary>
            Represents a while loop-type iteration statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement.TestExpression">
            <summary>
            Gets or sets the expression to test as the condition that continues the loop.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement.Statements">
            <summary>
            Gets the collection of statements to be executed within the loop.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement" /> class using the specified parameters.
            </summary>
            <param name="testExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
            <param name="statements">An array of type <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement" /> class using the specified parameters.
            </summary>
            <param name="testExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
            <param name="statements">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement" /> containing the statements within the loop.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeYieldStatement">
            <summary>
            Represents a yield statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeYieldStatement.Expression">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the return value.
            </summary>
            <remarks>If this value is null, this represents a "yield break" statement.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeYieldStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeYieldStatement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeYieldStatement.#ctor(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeYieldStatement"/> class returning the specified expression.
            </summary>
            <param name="expression">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> representing the value the statement will yield.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.TypeAttributes">
            <summary>
            Defines class attribute identifiers for classes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.TypeAttributes.Class">
            <summary>
            A class.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.TypeAttributes.Struct">
            <summary>
            A struct.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.TypeAttributes.Interface">
            <summary>
            An interface.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.TypeAttributes.Enum">
            <summary>
            An enum.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.TypeAttributes.Delegate">
            <summary>
            A delegate.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeConstructor">
            <summary>
            Represents a declaration for an instance constructor of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConstructor.BaseConstructorArgs">
            <summary>
            Gets the collection of base constructor arguments.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeConstructor.ChainedConstructorArgs">
            <summary>
            Gets the collection of chained constructor arguments.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConstructor" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeDestructor">
            <summary>
            Represents the declaration of an instance destructor of a type.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeDestructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConstructor" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberEvent">
            <summary>
            Represents a declaration for an event of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberEvent.Type">
            <summary>
            Gets or sets the data type of the delegate type that handles the event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberEvent.PrivateImplementationType">
            <summary>
            Gets or sets the privately implemented data type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberEvent.ImplementationTypes">
            <summary>
            Gets or sets the data type that the member event implements.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberEvent.HasAdd">
            <summary>
            Gets or sets a value indicating whether the property has an add method accessor.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberEvent.HasRemove">
            <summary>
            Gets or sets a value indicating whether the property has a remove method accessor.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberEvent.AddStatements">
            <summary>
            Gets the collection of add statements for the event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberEvent.RemoveStatements">
            <summary>
            Gets the collection of remove statements for the event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberEvent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberEvent"/> class with the specified name.
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberField">
            <summary>
            Represents a declaration for a field of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberField.Type">
            <summary>
            Gets or sets the data type of the field.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberField.InitExpression">
            <summary>
            Gets or sets the initialization expression for the field.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberField.Initializers">
            <summary>
            Gets the collection of field names and values to initialize.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberField.IsConstant">
            <summary>
            Gets or sets a bool that indicates whether the field is constant.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified field type and field name.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of the field.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified field type and field name.
            </summary>
            <param name="type">The data type of the field.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField" /> class using the specified field type and field name.
            </summary>
            <param name="type">The data type of the field.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified type and field names.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the data type of the field.</param>
            <param name="names">The names of the fields.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type name and field names.
            </summary>
            <param name="type">The name of the data type of the field.</param>
            <param name="names">The names of the fields.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type and field names.
            </summary>
            <param name="type">The data type for the field.</param>
            <param name="names">The names of the fields.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type, field name, and initialization expression.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of the field.</param>
            <param name="name">The name of the field.</param>
            <param name="initExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the initialization expression for the field.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.String,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type, field name, and initialization expression.
            </summary>
            <param name="type">The name of the data type of the field.</param>
            <param name="name">The name of the field.</param>
            <param name="initExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the initialization expression for the field.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.Type,System.String,Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type, field name, and initialization expression.
            </summary>
            <param name="type">The data type of the field.</param>
            <param name="name">The name of the field.</param>
            <param name="initExpression">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the initialization expression for the field.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type, field names, and initialization expression.
            </summary>
            <param name="type">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that indicates the type of the field.</param>
            <param name="expressions">The set of field names and their associated initialization expressions.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.String,Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type, field names, and initialization expression.
            </summary>
            <param name="type">The name of the data type of the field.</param>
            <param name="expressions">The set of field names and their associated initialization expressions.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.Type,Microsoft.BI.Common.CodeDom.CodeVariableDeclarationClause[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified data type, field names, and initialization expression.
            </summary>
            <param name="type">The data type of the field.</param>
            <param name="expressions">The set of field names and their associated initialization expressions.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/> class using the specified
            <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberField.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/>.
            </summary>
            <returns>A string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberField"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberMethod">
            <summary>
            Represents a declaration for a method of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.ReturnType">
            <summary>
            Gets or sets the data type of the return value of the method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.Statements">
            <summary>
            Gets the statements within the method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.Parameters">
            <summary>
            Gets the parameter declarations for the method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.PrivateImplementationType">
            <summary>
            Gets or sets the data type of the interface this method, if private, implements a method of, if any.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.ImplementationTypes">
            <summary>
            Gets the data types of the interfaces implemented by this method, unless it is a private method implementation,
            which is indicated by the <see cref="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.PrivateImplementationType"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
            <summary>
            Gets the custom attributes of the return type of the method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberMethod.TypeParameters">
            <summary>
            Gets the type parameters for the current generic method.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberMethod"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberMethod"/> class.
            </summary>
            <param name="name">The name of the method.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberMethod"/> class from the specified
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberMethod.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberMethod"/>.
            </summary>
            <returns>A string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberMethod"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberOperator">
            <summary>
            The base class for operator definitions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberOperator.ReturnType">
            <summary>
            Gets or sets the data type of the return value of the operator overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberOperator.Statements">
            <summary>
            Gets the statements within the operator overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberOperator.ReturnTypeCustomAttributes">
            <summary>
            Gets the custom attributes of the return type of the method.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberOperator"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberUnaryOperator">
            <summary>
            Represents the declaration of a unary operator overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberUnaryOperator.Operator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/> this operation overload overloads.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberUnaryOperator.Operand">
            <summary>
            Gets or sets the operand declaration for the operation overload.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberUnaryOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberUnaryOperator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberUnaryOperator.#ctor(Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberUnaryOperator"/> class.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/> of the operator.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator">
            <summary>
            Represents the declaration of a binary operator overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator.Operator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/> this operation overload overloads.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator.LeftOperand">
            <summary>
            Gets or sets the left operand declaration for the operation overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator.RightOperand">
            <summary>
            Gets or sets the right operand declaration for the operation overload.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator.#ctor(Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberBinaryOperator"/> class.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/> of the operator.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberConversionOperator">
            <summary>
            Represents the declaration of a conversion operator overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberConversionOperator.Operator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType"/> this operation overload overloads.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberConversionOperator.Operand">
            <summary>
            Gets or sets the operand declaration for the operation overload.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberConversionOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberConversionOperator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberConversionOperator.#ctor(Microsoft.BI.Common.CodeDom.CodeConversionOperatorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberConversionOperator"/> class.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType"/> of the operator.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType">
            <summary>
            Defines values for representing conversion operators.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType.Explicit">
            <summary>
            Indicates an explicit conversion.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType.Implicit">
            <summary>
            Indicates an implicit conversion.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty">
            <summary>
            Represents a declaration for a property of a type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.PrivateImplementationType">
            <summary>
            Gets or sets the data type of the interface, if any, this property, if private, implements.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.ImplementationTypes">
            <summary>
            Gets the data types of any interfaces that the property implements.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.Type">
            <summary>
            Gets or sets the data type of the property.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.HasGet">
            <summary>
            Gets or sets a value indicating whether the property has a get method accessor.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.HasSet">
            <summary>
            Gets or sets a value indicating whether the property has a set method accessor.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.GetStatements">
            <summary>
            Gets the collection of get statements for the property.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.SetStatements">
            <summary>
            Gets the collection of set statements for the property.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.GetAccess">
            <summary>
            Gets or sets the access attributes for the property getter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.SetAccess">
            <summary>
            Gets or sets the access attributes for the property setter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeMemberProperty.Parameters">
            <summary>
            Gets the collection of declaration expressions for the property.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/> class with the specified name.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/> class with the specified type
            and name.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberProperty.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/> class with the specified type
            and name.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberProperty.#ctor(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/> class with the specified type
            and name.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/> class from the specified
            <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeMemberProperty.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/>.
            </summary>
            <returns>A string representation of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberProperty"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeSnippetTypeMember">
            <summary>
            Represents a member of a type using a literal code fragment.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeSnippetTypeMember.Text">
            <summary>
            Gets or sets the literal code fragment for the type member.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSnippetTypeMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSnippetTypeMember"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeSnippetTypeMember" /> class using the specified text.
            </summary>
            <param name="text">The literal member to represent.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeConstructor">
            <summary>
            Represents a static constructor for a class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeConstructor" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration">
            <summary>
            Represents a type declaration for a class, structure, interface, or enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.TypeAttributes">
            <summary>
            Gets or sets the attributes of the type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.IsClass">
            <summary>
            Gets or sets a value indicating whether the type is a class or reference type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.IsStruct">
            <summary>
            Gets or sets a value indicating whether the type is a value type (struct).
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.IsEnum">
            <summary>
            Gets or sets a value indicating whether the type is an enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.IsInterface">
            <summary>
            Gets or sets a value indicating whether the type is an interface.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.IsDelegate">
            <summary>
            Gets or sets a value indicating whether the type is a delegate.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.IsPartial">
            <summary>
            Gets or sets a value indicating whether the type declaration is complete or partial.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.BaseTypes">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> objects that represent the base types of the type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.Members">
            <summary>
            Gets the collection of class members for the represented type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.TypeParameters">
            <summary>
            Gets the type parameters for the type declaration.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration" /> class with the specified name.</summary>
            <param name="name">The name for the new type. </param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration"/> class from the
            specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> from which to initialize the
            <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDeclaration"/>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeDelegate">
            <summary>
            Represents a delegate declaration.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDelegate.ReturnType">
            <summary>
            Gets or sets the return type of the delegate.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeDelegate.Parameters">
            <summary>
            Gets the parameters of the delegate.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeDelegate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDelegate"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeDelegate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeDelegate"/> class.
            </summary>
            <param name="name">The name of the delegate. </param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeMember">
            <summary>
            Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.Name">
            <summary>
            Gets or sets the name of the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.AccessAttributes">
            <summary>
            Gets or sets the access attributes of the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.ModifierAttributes">
            <summary>
            Gets or sets the modifier attributes of the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.CustomAttributes">
            <summary>
            Gets or sets the custom attributes of the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.LinePragma">
            <summary>
            Gets or sets the line on which the type member statement occurs.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.Comments">
            <summary>
            Gets the collection of comments for the type member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.StartDirectives">
            <summary>
            Gets the start directives for the member.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeMember.EndDirectives">
            <summary>
            Gets the end directives for the member.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeMember.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeMember.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> class with the specified name.
            </summary>
            <param name="name">The name of the member.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CodeDom.CodeTypeParameter">
            <summary>
            Represents a type parameter of a generic type or method.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.Name">
            <summary>
            Gets or sets the name of the type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.Constraints">
            <summary>
            Gets the constraints for the type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.CustomAttributes">
            <summary>
            Gets the custom attributes of the type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.HasConstructorConstraint">
            <summary>
            Gets or sets a value indicating whether the type parameter has a constructor constraint.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.HasClassConstraint">
            <summary>
            Gets or sets a value indicating whether the type parameter has a class constraint.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.HasStructConstraint">
            <summary>
            Gets or sets a value indicating whether the type parameter has a struct constraint.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.IsCovariant">
            <summary>
            Gets or sets a value indicating whether the type parameter is covariant.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CodeDom.CodeTypeParameter.IsContravariant">
            <summary>
            Gets or sets a value indicating whether the type parameter is contravariant.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeParameter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeParameter"/> class with the specified type parameter name.
            </summary>
            <param name="name">The name of the type parameter.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CodeDom.CodeTypeParameter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeParameter"/> class from the specified
            <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> from which to initialize the <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeParameter"/>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.ArrayTExtensions">
            <summary>
            Extension methods for arrays of objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayTExtensions.BinarySearch``1(``0[],``0)">
            <summary>
            Searches an entire one-dimensional sorted array for a value.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The sorted, one-dimensional array to search.</param>
            <param name="value">The value to search for.</param>
            <returns>The index of the specified value in the specified array, if value is found. If value is not found
            and value is less than one or more elements in array, a negative number which is the bitwise complement of
            the index of the first element that is larger than value. If value is not found and value is greater than any
            of the elements in array, a negative number which is the bitwise complement of (the index of the last element
            plus 1).</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayTExtensions.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches an entire one-dimensional sorted array for a value using the specified
            <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The sorted, one-dimensional array to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing items in the array.</param>
            <returns>The index of the specified value in the specified array, if value is found. If value is not found
            and value is less than one or more elements in array, a negative number which is the bitwise complement of
            the index of the first element that is larger than value. If value is not found and value is greater than any
            of the elements in array, a negative number which is the bitwise complement of (the index of the last element
            plus 1).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayTExtensions.Contains``1(``0[],``0)">
            <summary>
            Determines whether an array contains a specified element by using the default equality comparer.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The object to locate in the array.  The value can be <c>null</c> for reference
            types.</param>
            <returns><c>true</c> if the array contains the specified value; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The array is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method is more efficient than <see cref="M:Microsoft.BI.Common.IListExtensions.Contains``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"/>
            when used on arrays due to better optimized IL instructions.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is
            the length of the array.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayTExtensions.Contains``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether an array contains a specified element by using the specifed equality comparer.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The object to locate in the array.  The value can be <c>null</c>
            for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items in the
            array.</param>
            <returns><c>true</c> if the array contains the specified value; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            The array is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method is more efficient than <see cref="M:Microsoft.BI.Common.IListExtensions.Contains``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"/>
            when used on arrays due to better optimized IL instructions.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is
            the length of the array.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayTExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the occurence within the array.
            Item equality is determined using the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type
            of the elements in the array.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The object to locate in the array.  The value can be <c>null</c> for reference
            types.</param>
            <returns>The zero-based index of the first occurence of <paramref name="value"/> within the array;
            otherwise, -1.</returns>
            <remarks>
            <para>
            The array is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method is more efficient than <see cref="M:Microsoft.BI.Common.IListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"/>
            when used on arrays due to better optimized IL instructions.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is
            the length of the array.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayTExtensions.IndexOf``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the occurence within the array.
            Item equality is determined using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The object to locate in the array.  The value can be <c>null</c>
            for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items in the
            array.</param>
            <returns>The zero-based index of the first occurence of <paramref name="value"/> within the array;
            otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            The array is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method is more efficient than <see cref="M:Microsoft.BI.Common.IListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"/>
            when used on arrays due to better optimized IL instructions.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is
            the length of the array.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.BinaryTreeNode`1">
            <summary>
            Represents a node within a binary tree.
            </summary>
            <typeparam name="T">Specifies the element type of the tree.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.BinaryTreeNode`1.Value">
            <summary>
            Gets the value contained in the the node.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.BinaryTreeNode`1.Depth">
            <summary>
            Gets the depth of the <see cref="T:Microsoft.BI.Common.Collections.BinaryTreeNode`1"/> in the tree.
            </summary>
            <remarks>
            <para>
            The depth of a node is defined as the distance from the root, which has a depth of 0.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.BinaryTreeNode`1.ParentNode">
            <summary>
            Gets the parent of the node.
            </summary>
            <remarks>
            <para>
            <see cref="P:Microsoft.BI.Common.Collections.BinaryTreeNode`1.ParentNode"/> is set to the value of the current node's parent, or <c>null</c> if the node has no parent.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.BinaryTreeNode`1.Children">
            <summary>
            Gets the collection of nodes that are this node's children.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.BinaryTreeNode`1.LeftChild">
            <summary>
            Gets or sets the node's left child.
            </summary>
            <remarks>
            <para>
            This returns the current node's left child, or <c>null</c> if this node has no left child.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.BinaryTreeNode`1.RightChild">
            <summary>
            Gets or sets the node's right child.
            </summary>
            <remarks>
            <para>
            This returns the current node's right child, or <c>null</c> if this node has no right child.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.BinaryTreeNode`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.BinaryTreeNode`1"/> class using the specified value.
            </summary>
            <param name="value">The value of the <see cref="T:Microsoft.BI.Common.Collections.BinaryTreeNode`1"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.BinaryTreeNode`1.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Microsoft.BI.Common.Collections.BinaryTreeNode`1"/>.
            </summary>
            <returns>A string that represents the <see cref="T:Microsoft.BI.Common.Collections.BinaryTreeNode`1"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.ComparisonAdapter">
            <summary>
            A wrapper class around the various forms of comparison that are supported in the .NET framework
            that provides a uniform way of comparing objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.ComparisonAdapter.CanCompare(System.Object,System.Object)">
            <summary>
            Returns a value that indicates whether the specified objects can be compared.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if the specified objects can be compared; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.ComparisonAdapter.Compare(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, compares two objects and returns a value indicating whether
            one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as shown in the following table.
            <list type="table">
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Less than zero</term><description><paramref name="x"/> is less than <paramref name="y"/></description></item>
            <item><term>Zero</term><description><paramref name="x"/> equals <paramref name="y"/></description></item>
            <item><term>Greater than zero</term><description><paramref name="x"/> is greater than <paramref name="y"/></description></item>
            </list>
            </returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.ComparisonAdapter.Create(System.Collections.IComparer)">
            <summary>
            Creates a <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> from an <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> that uses <paramref name="comparer"/> to compare objects.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.ComparisonAdapter.Create``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> from an <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> that uses <paramref name="comparer"/> to compare objects.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.ComparisonAdapter.Create``1(System.Comparison{``0})">
            <summary>
            Creates a <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> from a <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Comparison`1"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/>.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> that uses <paramref name="comparer"/> to compare objects.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.ComparisonAdapter.ComparerAdapter">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> implementation for <see cref="T:System.Collections.IComparer"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.ComparisonAdapter.GenericComparerAdapter`1">
            <summary>
            The base class for a generic <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/>.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.ComparisonAdapter.GenericComparerAdapter`1.CanCompare(System.Object,System.Object)">
            <summary>
            Returns a value indicating whether the specified objects can be compared.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if both <paramref name="x"/> and <paramref name="y"/> can be assigned from
            <typeparamref name="T"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.ComparisonAdapter.GenericComparerAdapter`1.CheckTypes(System.Object,System.Object)">
            <summary>
            Validates that the specified objects are of the correct type.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/>, <paramref name="y"/> or both are not assignable from
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.ComparisonAdapter.ComparerAdapter`1">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> implementation for <see cref="T:System.Collections.Generic.IComparer`1"/> instances.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.ComparisonAdapter.ComparisonFuncAdapter`1">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Collections.ComparisonAdapter"/> implementation for <see cref="T:System.Comparison`1"/> delegates.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.DescendingComparer`1">
            <summary>
            Defines a method that compares two objects and reverses the result.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.DescendingComparer`1.BaseComparer">
            <summary>
            Gets the underlying comparer to use when comparing objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.DescendingComparer`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.DescendingComparer`1"/> class using
            the default comparer to compare objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.DescendingComparer`1.Default">
            <summary>
            Gets a default <see cref="T:Microsoft.BI.Common.Collections.DescendingComparer`1"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.DescendingComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.DescendingComparer`1"/> class using
            the specified <see cref="T:System.Collections.Generic.IComparer`1"/> to comparer objects.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing objects.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.DescendingComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or
            greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as shown in the following table.
            <list type="table">
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Less than zero</term><description><paramref name="x"/> is greater than <paramref name="y"/></description></item>
            <item><term>Zero</term><description><paramref name="x"/> equals <paramref name="y"/></description></item>
            <item><term>Greater than zero</term><description><paramref name="x"/> is less than <paramref name="y"/></description></item>
            </list>
            </returns>
            <remarks>
            The return of this class is the opposite of the return value for most <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementers.  This causes operations using this comparer to sort in descending order instead of ascending
            order.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualityAdapter">
            <summary>
            A wrapper class around the various forms of equality that are supported in the .NET framework
            that provides a uniform way of testing for equality.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.CanCompare(System.Object,System.Object)">
            <summary>
            Returns a value that indicates whether the specified objects can be compared.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if the specified objects can be compared; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.Equals(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> type does not support getting hash
            codes.</exception>
            <remarks>
            The default implementation for this method throws a <see cref="T:System.NotSupportedException"/>, as only
            certain equality implementations support getting a hash code.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.Create(System.Collections.IComparer)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> from an <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/>.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> that uses <paramref name="comparer"/> to check for equality.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.Create``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> from an <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/>.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> that uses <paramref name="comparer"/> to check for equality.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.Create(System.Collections.IEqualityComparer)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> from an <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IEqualityComparer"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/>.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> that uses <paramref name="comparer"/> to check for equality.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> from an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/>.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> that uses <paramref name="comparer"/> to check for equality.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.Create``1(System.Comparison{``0})">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> from a <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Comparison`1"/> from which to create the <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/>.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> that uses <paramref name="comparer"/> to check for equality.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualityAdapter.ComparerAdapter">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> implementation for <see cref="T:System.Collections.IComparer"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualityAdapter.EqualityComparerAdapter">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> implementation for <see cref="T:System.Collections.IEqualityComparer"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualityAdapter.GenericComparerAdapter`1">
            <summary>
            The base class for a generic <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/>.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.GenericComparerAdapter`1.CanCompare(System.Object,System.Object)">
            <summary>
            Returns a value indicating whether the specified objects can be compared.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if both <paramref name="x"/> and <paramref name="y"/> can be assigned from
            <typeparamref name="T"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.EqualityAdapter.GenericComparerAdapter`1.CheckTypes(System.Object,System.Object)">
            <summary>
            Validates that the specified objects are of the correct type.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/>, <paramref name="y"/> or both are not assignable from
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualityAdapter.ComparerAdapter`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> implementation for <see cref="T:System.Collections.Generic.IComparer`1"/> instances.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualityAdapter.EqualityComparerAdapter`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> implementation for <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instances.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.EqualityAdapter.ComparisonAdapter`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Collections.EqualityAdapter"/> implementation for <see cref="T:System.Comparison`1"/> delegates.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.IEqualityComparer`2">
            <summary>
            Defines methods to support the comparison of two objects of different types for equality.
            </summary>
            <typeparam name="T1">The first type of object to compare.  This type parameter is contravariant. That 
            is, you can use either the type you specified or any type that is less derived.</typeparam>
            <typeparam name="T2">The second type of object to compare.  This type parameter is contravariant. That
            is, you can use either the type you specified or any type that is less derived.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.IEqualityComparer`2.Equals(`0,`1)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="a">The first object of type <typeparamref name="T1"/> to compare.</param>
            <param name="b">The second object of type <typeparamref name="T2"/> to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.InsertionSortedList`1">
            <summary>
            Represents a collection of items that are sorted based on the associated <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.</typeparam>
            <remarks>
            <para>
            Items are sorted using insertion sort.  As such, this class is best for operating on already-sorted or mostly-sorted data.
            If data is unsorted, then adding items to the list approaches O(n) complexity.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.InsertionSortedList`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.InsertionSortedList`1.Capacity">
            <summary>
            Gets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.InsertionSortedList`1.First">
            <summary>
            Gets the first element in the list.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.InsertionSortedList`1.Last">
            <summary>
            Gets the last element in the list.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.InsertionSortedList`1.Item(System.Int32)">
            <summary>
            Retrieves an element from the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> using a zero-based index.
            </summary>
            <param name="index">The index of the element to retrieve.</param>
            <returns>The element at <paramref name="index"/> in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is negative or greater than the number of elements</exception>
            <exception cref="T:System.NotSupportedException">Attempting to set a value using the indexer.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> class using the default comparer to compare elements.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> class using a given comparer to compare elements.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used for keeping the list sorted.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used for keeping the list sorted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> class that contains elements copied from the specified
            collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> class that contains elements copied from the specified
            collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used for keeping the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> sorted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is <c>null</c>.</exception>
            <remarks>May be slow for large and/or very unordered collections.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.#ctor(Microsoft.BI.Common.Collections.InsertionSortedList{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> class that contains elements copied from the specified
            collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="list">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.InitCapacity(System.Int32)">
            <summary>
            Initializes the internal data structures of an <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> to hold the specified capacity.
            </summary>
            <param name="capacity">The capacity to initialize.</param>
            <remarks>
            If capacity is less than 1, this method will set the capacity to 1.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Add(`0)">
            <summary>
            Adds an object to the the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>. 
            </summary>
            <param name="input">The object to be added to the end of <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>. The value can be null for reference types.</param>
            <remarks>
            <para>Uses insertion sort from the end of the list to choose where to add the element.  As such, if the item to be added is not already near the
            end of the collection, adding may need to scan the entire list.  Best case complexity is O(1); worst case is O(n).
            </para>
            <para>
            May resize the list if additional capacity is needed.  Resizing the list is an O(n) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>. The value can be null for reference types.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The index to start copying to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> is greater than the available space
            from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within
            the entire <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>. The value
            can be <c>null</c> for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Merge(Microsoft.BI.Common.Collections.InsertionSortedList{`0},System.Int32)">
            <summary>
            Merges elements from another <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> into the current one.
            </summary>
            <param name="other">The other <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> to merge with.</param>
            <param name="maxMergedSize">The maximum size to limit the resulting merged size to. If the resulting size would be greater than this maximum, the result 
            is truncated to the top or largest N elements.</param>
            <remarks>The current list is explicitly being modified. Its contents will change and the list may be resized.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>. The value can be <c>null</c> for reference types.</param>
            <returns><c>true</c> if <paramref name="item"/> is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if
            <paramref name="item"/> was not found in the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>is less than 0. -or- <paramref name="index"/> is equal to or greater than
            <see cref="P:Microsoft.BI.Common.Collections.InsertionSortedList`1.Count"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.RemoveFromBeginning(System.Int32)">
            <summary>
            Removes the specified number of elements from the front of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/>.
            </summary>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0 or greater than the number of items
            in the list.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.RemoveFromBeginningWhile(System.Func{`0,System.Boolean})">
            <summary>
            Removes elements from the front of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> while the specified predicate returns <c>true</c>.
            </summary>
            <param name="predicate">A delegate that defines the conditions of the elements to remove.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.RemoveFromBeginningWhile(System.Func{`0,System.Int32,System.Boolean})">
            <summary>
            Removes elements from the front of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> while the specified predicate returns <c>true</c>.
            </summary>
            <param name="predicate">A delegate that defines the conditions of the elements to remove.  An integer parameter</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.BinarySearch(`0,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the 0-based index of a specific item.
            </summary>
            <remarks>Returns a 0-based index regardless of the StartIndex offset.</remarks>
            <param name="item">The item to search for</param>
            <param name="low">Where to begin the search</param>
            <param name="high">Where to end the search</param>
            <param name="findMissingPosition">If the element does not exist, should the search return where it should be?</param>
            <returns>The index of <paramref name="item"/>. If the element is not found, it returns -1 unless
            <paramref name="findMissingPosition"/> is true. Then it returns the index where <paramref name="item"/> should be.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.FindInsertionIndex(`0)">
            <summary>
            Finds the proper place to insert <paramref name="input"/>
            using either a linear search or binary search
            </summary>
            <param name="input">The element to insert.</param>
            <returns>The index where the element should be inserted</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.ShiftRightFrom(System.Int32)">
            <summary>
            Shifts the underlying array from a specified internal index,
            moving elements around such that an element can
            safely be inserted at <paramref name="i"/> without clobbering a value.
            </summary>
            <param name="i">An internal index</param>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.InsertionSortedList`1.Enumerator">
            <summary>
            An enumerator for the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1"/> type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.InsertionSortedList`1.Enumerator.Current">
            <summary>
            Gets the current element of the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Enumerator.#ctor(Microsoft.BI.Common.Collections.InsertionSortedList{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.InsertionSortedList`1.Enumerator"/> class.
            </summary>
            <param name="list">The list to create the enumerator for.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Enumerator.System#IDisposable#Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next element.
            </summary>
            <returns><c>true</c> if there are more elements in the list to be enumerated; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.InsertionSortedList`1.Enumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.ITreeNode`1">
            <summary>
            Represents a node in a tree structure.
            </summary>
            <typeparam name="T">The type of the elements in the tree.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.ITreeNode`1.Value">
            <summary>
            Gets the value of the element in the node.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.ITreeNode`1.ParentNode">
            <summary>
            Gets the parent of the current node.
            </summary>
            <remarks>
            <para>
            <see cref="P:Microsoft.BI.Common.Collections.ITreeNode`1.ParentNode"/> may be <c>null</c> if the <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> is the root of the tree.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.ITreeNode`1.Children">
            <summary>
            Gets an enumerable collection of the children of the node.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.KeyValueTreeNode`2">
            <summary>
            Represents a node within a tree that has both a key and a value.
            </summary>
            <typeparam name="TKey">The type of the keys in the tree.</typeparam>
            <typeparam name="TValue">The type of the values in the tree.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.KeyValueTreeNode`2.Children">
            <summary>
            Gets the collection of nodes that are this node's children.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueTreeNode`2.#ctor(`1)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.KeyValueTreeNode`2"/> class using the specified value.
            </summary>
            <param name="value">The value of the <see cref="T:Microsoft.BI.Common.Collections.KeyValueTreeNode`2"/>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2">
            <summary>
            Represents a collection of <see cref="T:Microsoft.BI.Common.Collections.KeyValueTreeNode`2"/> objects with associated keys.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.#ctor(Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> class.
            </summary>
            <param name="parentNode">The node to which this collection of nodes belongs.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Add(`0,Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1})">
            <summary>
            Adds the specified node with the specified key to the dictionary.
            </summary>
            <param name="key">The key of the node to add.</param>
            <param name="value">The node to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.</exception>
            <remarks>
            <para>
            You can also use the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property to add new elements by setting the value of a key that does not exist
            in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>; for example, <code>myCollection[myKey] = myValue</code>.
            However, if the specified key already exists in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>, setting the
            <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property overwrites the old value. In contrast, the 
            <see cref="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Add(`0,Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1})"/> method throws an exception if a value
            with the specified key already exists.
            </para>
            <para>
            If the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/> property value already equals the capacity, the capacity of the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> is increased by automatically reallocating the internal array, and
            the existing elements are copied to the new array before the new element is added.
            </para>
            <para>
            Neither the key nor value can be <c>null</c>.
            </para>
            <para>
            If <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/> is less than the capacity, this method approaches an O(1) operation. If the capacity must be
            increased to accommodate the new element, this method becomes an O(n) operation, where n is <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> contains the specifed key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> contains a node with the specified key;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The order of the keys in the <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it is the same order as the
            associated values in the <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Values"/> property.
            </para>
            <para>
            The returned <see cref="T:System.Collections.Generic.ICollection`1"/> is not a static copy; instead, the <see cref="T:System.Collections.Generic.ICollection`1"/>
            refers back to the keys in the original <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>. Therefore, changes to the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> continue to be reflected in the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.  This method returns
            <c>false</c> if <paramref name="key"/> is not found in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.</returns>
            <remarks>
            <para>
            If the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> does not contain an element with the specified key, the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> remains unchanged. No exception is thrown.
            </para>
            <para>
            This method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.TryGetValue(`0,Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> contains an element with the specified
            key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method combines the functionality of the <see cref="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.ContainsKey(`0)"/> method and the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property.
            </para>
            <para>
            If the key is not found, then the value parameter gets the appropriate default value for the type <typeparamref name="TValue"/>;
            for example, 0 (zero) for integer types, <c>false</c> for <see cref="T:System.Boolean"/> types, and <c>null</c> for reference types.
            </para>
            <para>
            Use the <see cref="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.TryGetValue(`0,Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1}@)"/> method if your code frequently attempts to
            access keys that are not in the dictionary. Using this method is more efficient than catching the <see cref="T:System.Collections.Generic.KeyNotFoundException"/>
            thrown by the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property.
            </para>
            <para>
            This method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Values">
            <summary>
            Gets a collection of the values in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The order of the keys in the <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it is the same order as the
            associated values in the <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Keys"/> property.
            </para>
            <para>
            The returned <see cref="T:System.Collections.Generic.ICollection`1"/> is not a static copy; instead, the <see cref="T:System.Collections.Generic.ICollection`1"/>
            refers back to the keys in the original <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>. Therefore, changes to the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> continue to be reflected in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)">
            <summary>
            Gets or sets the node at the specified index.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The node associated with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> does not exist in the
            collection.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/> of <paramref name="value"/> is not
            <c>null</c> (this node has already been added or inserted into a tree).</exception>
            <remarks>
            <para>
            This property provides the ability to access a specific element in the collection by using the following C# syntax:
            <c>myCollection[key]</c>.
            </para>
            <para>
            You can also use the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property to add new elements by setting the value of a key that does not exist
            in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>. When you set the property value, if the key is in the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>, the value associated with that key is replaced by the assigned value.
            If the key is not in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>, the key and value are added to the dictionary.
            In contrast, the <see cref="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Add(`0,Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1})"/> method does not modify existing elements.
            </para>
            <para>
            Neither <paramref name="key"/> nor <paramref name="value"/> can be <c>null</c>.
            </para>
            <para>
            Getting or setting the value of this property approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/> property is set to 0, and references to other objects from elements of the collection
            are also released. The capacity remains unchanged.
            </para>
            <para>
            This method is an O(n) operation, where n is the capacity of the dictionary.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count">
            <summary>
            Get the number of key/value pairs in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The capacity of a <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> is the number of elements that the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> can store. The <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/> property is the number of
            elements that are actually in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.
            </para>
            <para>
            The capacity is always greater than or equal to <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/>. If <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/> exceeds the capacity while
            adding elements, the capacity is increased by automatically reallocating the internal array before copying the old
            elements and adding the new elements.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Add(`0,`1)">
            <summary>
            Adds a new node with the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the node to add.</param>
            <param name="value">The value of the new node to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>.</exception>
            <remarks>
            <para>
            You can also use the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property to add new elements by setting the value of a key that does not exist
            in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>; for example, <code>myCollection[myKey] = myValue</code>.
            However, if the specified key already exists in the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/>, setting the
            <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property overwrites the old value. In contrast, the <see cref="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Add(`0,`1)"/> method throws an
            exception if a value with the specified key already exists.
            </para>
            <para>
            If the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/> property value already equals the capacity, the capacity of the
            <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> is increased by automatically reallocating the internal array, and
            the existing elements are copied to the new array before the new element is added.
            </para>
            <para>
            A key cannot be <c>null</c>, but the value can be, if <typeparamref name="TValue"/> is a reference type.
            </para>
            <para>
            If <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/> is less than the capacity, this method approaches an O(1) operation. If the capacity must be
            increased to accommodate the new element, this method becomes an O(n) operation, where n is <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2"/> contains an element with the specified
            key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method combines the functionality of the <see cref="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.ContainsKey(`0)"/> method and the <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property.
            </para>
            <para>
            If the key is not found, then the value parameter gets the appropriate default value for the type <typeparamref name="TValue"/>
            for example, 0 (zero) for integer types, <c>false</c> for <see cref="T:System.Boolean"/> types, and <c>null</c> for reference types.
            </para>
            <para>
            Use the <see cref="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.TryGetValue(`0,`1@)"/> method if your code frequently attempts to access keys that are not in the
            dictionary. Using this method is more efficient than catching the <see cref="T:System.Collections.Generic.KeyNotFoundException"/> thrown by the
            <see cref="P:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Item(`0)"/> property.
            </para>
            <para>
            This method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.InternalAddNode(`0,Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1})">
            <summary>
            Inserts a node into the collection at the specified index.
            </summary>
            <param name="key">The key at which to insert.</param>
            <param name="node">The node to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.InternalInsertNode(`0,Microsoft.BI.Common.Collections.KeyValueTreeNode{`0,`1})">
            <summary>
            Inserts a node into the collection at the specified index.
            </summary>
            <param name="key">The key at which to insert.</param>
            <param name="node">The node to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.InternalRemoveNode(`0)">
            <summary>
            Removes a the specified node from the collection.
            </summary>
            <param name="key">The key of the node.</param>
            <returns><c>true</c> if the node was found and removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.Nodes">
            <summary>
            The underlying list of nodes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.KeyValueNodeCollection`2.ParentNode">
            <summary>
            The parent node of the collection.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.LinkedTreeNode`1">
            <summary>
            Represents a node within a tree that contains links to its siblings.
            </summary>
            <typeparam name="T">Specifies the element type of the tree.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.Children">
            <summary>
            Gets the collection of nodes that are this node's children.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling">
            <summary>
            Gets the previous node in the tree.
            </summary>
            <remarks>
            <para>
            This returns the previous sibling node to the current node, or <c>null</c> if this node has no previous sibling.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling">
            <summary>
            Gets the next node in the tree.
            </summary>
            <remarks>
            <para>
            This returns the next sibling node to the current node, or <c>null</c> if this node has no next sibling.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.FirstChild">
            <summary>
            Gets the node's first child.
            </summary>
            <remarks>
            <para>
            This returns the current node's first child, or <c>null</c> if this node has no children.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.LastChild">
            <summary>
            Gets the node's last child.
            </summary>
            <remarks>
            <para>
            This returns the current node's last child, or <c>null</c> if this node has no children.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNode`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNode`1"/> class using the specified value.
            </summary>
            <param name="value">The value of the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNode`1"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNode`1.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNode`1"/>.
            </summary>
            <returns>A string that represents the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNode`1"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1">
            <summary>
            Represents a collection of <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNode`1"/> objects.
            </summary>
            <typeparam name="T">The type of the element in each node.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.FirstNode">
            <summary>
            Gets the first node in the collection, or <c>null</c> if the collection is empty.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.LastNode">
            <summary>
            Gets the last node in the collection, or <c>null</c> if the collection is empty.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.#ctor(Microsoft.BI.Common.Collections.LinkedTreeNode{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> class.
            </summary>
            <param name="parentNode">The node to which this collection of nodes belongs.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.IndexOf(Microsoft.BI.Common.Collections.LinkedTreeNode{`0})">
            <summary>
            Determines the index of a specific node in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
            <param name="node">The node to locate in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <returns>The index of <paramref name="node"/> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Insert(System.Int32,Microsoft.BI.Common.Collections.LinkedTreeNode{`0})">
            <summary>
            Inserts a node into the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="node"/> should be inserted.</param>
            <param name="node">The node to insert into the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/> of <paramref name="node"/> is not
            <c>null</c> (this node has already been added or inserted into a tree).</exception>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> and <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/> properties are updated to
            reflect the new contents of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> node at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</exception>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> and <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/> properties are updated to
            reflect the new contents of the collection.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the node at the specified index.
            </summary>
            <param name="index">The zero-based index of the node to get or set.</param>
            <returns>The node at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/> of <paramref name="value"/> is not
            <c>null</c> (this node has already been added or inserted into a tree).</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Add(Microsoft.BI.Common.Collections.LinkedTreeNode{`0})">
            <summary>
            Adds a node to the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
            <param name="node">The node to add to the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <remarks>
            <para>
            The node is added to the end of the current node list.  The <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/> and
            <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> properties on the existing nodes and the new node are updated appropriately.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
            <remarks>
            <para>
            All nodes in the collection will also have their <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/>,
            <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/>, and <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> properties set to <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Contains(Microsoft.BI.Common.Collections.LinkedTreeNode{`0})">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> contains a specific node.
            </summary>
            <param name="node">The node to locate in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="node"/> is found in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.System#Collections#Generic#ICollection{Microsoft#BI#Common#Collections#LinkedTreeNode{T}}#CopyTo(Microsoft.BI.Common.Collections.LinkedTreeNode{`0}[],System.Int32)">
            <summary>
            Copies the nodes of the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular
            <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the
            <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Count">
            <summary>
            Gets the number of nodes in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.System#Collections#Generic#ICollection{Microsoft#BI#Common#Collections#LinkedTreeNode{T}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Remove(Microsoft.BI.Common.Collections.LinkedTreeNode{`0})">
            <summary>
            Removes the first occurence of a specific node from the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
            <param name="node">The node to remove from the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="node"/> was successfully removed from the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>; otherwise,
            <c>false</c>.  This method also returns <c>false</c> if <paramref name="node"/> was not found in the original
            <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</returns>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> and <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/> properties are updated to
            reflect the new contents of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <remarks>
            <para>
            The item is added to the end of the current node list.  The <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/> and
            <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> properties on the existing nodes and the new node are updated appropriately.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="value"/> is found in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Remove(`0)">
            <summary>
            Removes the first occurence of a specific item from the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
            <param name="item">The item to remove from the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>; otherwise,
            <c>false</c>.  This method also returns <c>false</c> if <paramref name="item"/> was not found in the original
            <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</returns>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> and <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/> properties are updated to
            reflect the new contents of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of an item in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.
            </summary>
            <param name="item">The item to locate in the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The item to insert into the <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1"/>.</exception>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.NextSibling"/> and <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNode`1.PreviousSibling"/> properties are updated to
            reflect the new contents of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.ValidateIndex(System.Int32)">
            <summary>
            Ensures that the specified index is in range.
            </summary>
            <param name="index">The index to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Count"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.InternalInsertNode(Microsoft.BI.Common.Collections.LinkedTreeNode{`0},Microsoft.BI.Common.Collections.LinkedTreeNode{`0},System.Int32)">
            <summary>
            Inserts a node into the collection at the specified index.
            </summary>
            <param name="node">The node to insert.</param>
            <param name="next">A node in the collection that is immediately after this node, or <c>null</c> to insert at the end.</param>
            <param name="index">The index in the collection at which to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.InternalRemoveNode(Microsoft.BI.Common.Collections.LinkedTreeNode{`0},System.Int32)">
            <summary>
            Removes a the specified node from the collection.
            </summary>
            <param name="node">The node to remove.</param>
            <param name="index">The index of the node.</param>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.Nodes">
            <summary>
            The underlying list of nodes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.LinkedTreeNodeCollection`1.ParentNode">
            <summary>
            The parent node of the collection.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.SortedDeque`1">
            <summary>
            Represents a sorted, double-ended queue (deque) of objects where objects can be added
            and removed to both ends of the deque.
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.SortedDeque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the deque.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.SortedDeque`1.Capacity">
            <summary>
            Gets or sets the capacity of the deque.
            </summary>
            <remarks>
            This value must be greater than zero.  It cannot be set to a value less than <see cref="P:Microsoft.BI.Common.Collections.SortedDeque`1.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> is less than <see cref="P:Microsoft.BI.Common.Collections.SortedDeque`1.Count"/>.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.SortedDeque`1.Count">
            <summary>
            Gets the number of elements contained in the deque.
            </summary>
            <returns>The number of elements contained in the deque.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Collections.SortedDeque`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Collections.SortedDeque`1"/> class using the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing objects.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Collections.SortedDeque`1"/> class with the specifed capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Collections.SortedDeque`1"/> class with the specifed capacity and using the specified
            <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing objects.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Collections.SortedDeque`1"/> class with the elements from the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Collections.SortedDeque`1"/> class with the elements from the specified collection
            and using the specified <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.AddToStart(`0)">
            <summary>
            Adds an item to the start of the deque.
            </summary>
            <param name="item">The object to add to the deque.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.AddToEnd(`0)">
            <summary>
            Adds an item to the end of the deque.
            </summary>
            <param name="item">The object to add to the deque.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the deque.
            </summary>
            <param name="item">The object to locate in the deque.</param>
            <returns>The index of <paramref name="item"/> if found in the deque; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the deque.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.RemoveFromStart">
            <summary>
            Removes and returns the element at the start of the deque.
            </summary>
            <returns>The element that was removed.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.RemoveFromStartWhile(System.Func{`0,System.Boolean})">
            <summary>
            Removes and returns the elements at the start of the deque matching the specified predicate.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An enumerable collection of the elements that were removed.</returns>
            <remarks>
            The return of this method is an enumerable.  Elements will not actually be removed from the collection
            until this enumerable is enumerated.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.RemoveFromEnd">
            <summary>
            Removes and returns the element at the end of the deque.
            </summary>
            <returns>The element that was removed.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.RemoveFromEndWhile(System.Func{`0,System.Boolean})">
            <summary>
            Removes and returns the elements at the end of the deque matching the specified predicate.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An enumerable collection of the elements that were removed.</returns>
            <remarks>
            The return of this method is an enumerable.  Elements will not actually be removed from the collection
            until this enumerable is enumerated.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.Clear">
            <summary>
            Removes all items from the deque.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.Contains(`0)">
            <summary>
            Determines whether the deque contains a specific value.
            </summary>
            <param name="item">The object to locate in the deque.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the deque; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the deque.
            </summary>
            <param name="item">The object to remove from the deque.</param>
            <returns><c>true</c> if <paramref name="item"/> was successfully removed from the deque; otherwise, <c>false</c>.
            This method also returns <c>false</c> if <paramref name="item"/> is not found in the deque.
            </returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.EnsureCapacity">
            <summary>
            Ensures the deque has enough room for an element.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.IndexToBufferIndex(System.Int32)">
            <summary>
            Gets the index in <see cref="F:Microsoft.BI.Common.Collections.SortedDeque`1._Buffer"/> from an external index.
            </summary>
            <param name="index">The external index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.SortedDeque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes <paramref name="count"/> elements, starting from <paramref name="index"/>.
            </summary>
            <param name="index">The index at which to start removing.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.Tree`1">
            <summary>
            Represents a collection of nodes stored in a tree structure.
            </summary>
            <typeparam name="T">Specifies the element type of the tree.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.Tree`1.Root">
            <summary>
            The root node of the <see cref="T:Microsoft.BI.Common.Collections.Tree`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.Tree`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.Tree`1"/> class using the specified value in the root.
            </summary>
            <param name="value">The value to use in the root node.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.TreeEnumerator`1">
            <summary>
            The base class for <see cref="T:System.Collections.Generic.IEnumerator`1"/> implementations that iterate over <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> instances.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the tree.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.Root">
            <summary>
            Gets the root <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> of the tree being enumerated.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.CurrentNode">
            <summary>
            Gets or sets the current <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.Done">
            <summary>
            Gets or sets a value indicating that the current enumeration is done.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.#ctor(Microsoft.BI.Common.Collections.ITreeNode{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.TreeEnumerator`1"/> class that will be used to enumerate the specified
            <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/>.
            </summary>
            <param name="root">The <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.Current">
            <summary>
            Gets the node in the tree at the current position of the enumerator.
            </summary>
            <remarks>
            <para>
            <see cref="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.Current"/> is undefined under any of the following conditions:
            <list type="bullet">
            <item><description>
            The enumerator is positioned before the first node of the tree, immediately after the enumerator is created.
            <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> must be called to advance the enumerator to the first node of the tree before reading the value of
            <see cref="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.Current"/>.
            </description></item>
            <item><description>
            The last call to <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> returned <c>false</c>, which indicates the end of the tree.
            </description></item>
            <item><description>
            The enumerator is invalidated due to changes in the tree, such as adding, modifying, or deleting nodes.
            </description></item>
            </list>
            <see cref="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.Current"/> returns the same object until <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> is called.  <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> sets <see cref="P:Microsoft.BI.Common.Collections.TreeEnumerator`1.Current"/>
            to the next node.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext">
            <summary>
            When overridden in a derived class, advances the enumerator to the next node in the tree.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next node; <c>false</c> if the enumerator has
            passed the end of the tree.</returns>
            <remarks>
            <para>
            After an enumerator is created or after the <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> Reset method is called, an enumerator is positioned before the
            first element of the collection, and the first call to the <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> MoveNext method moves the enumerator over the
            first element of the collection.
            </para>
            <para>
            If <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> passes the end of the collection, the enumerator is positioned after the last element in the collection
            and <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> returns <c>false</c>. When the enumerator is at this position, subsequent calls to <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/>
            return <c>false</c> until <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> is called.
            </para>
            <para>
            An enumerator remains valid as long as the tree remains unchanged. If changes are made to the tree, such as adding, modifying, or
            deleting nodes, the enumerator is irrecoverably invalidated and the next call to <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> or <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> throws
            an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first node of the tree.
            </summary>
            <remarks>
            <para>
            An enumerator remains valid as long as the tree remains unchanged. If changes are made to the tree, such as adding, modifying, or
            deleting nodes, the enumerator is irrecoverably invalidated and the next call to <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.MoveNext"/> or <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> throws
            an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Collections.TreeEnumerator`1"/> that enumerates nodes in depth-first order.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the nodes of the tree.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.#ctor(Microsoft.BI.Common.Collections.ITreeNode{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1"/> class that will be used to enumerate the specified
            <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/>.
            </summary>
            <param name="root">The <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next node in the tree.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next node; <c>false</c> if the enumerator has
            passed the end of the tree.</returns>
            <remarks>
            <para>
            The next node is chosen according to the depth-first search (DFS) algorithm.  In DFS, each node is explored as far as possible
            before backtracking to a node that has not yet been fully explored.  The search continues until the goal is reached or all nodes
            have been fully processed.
            </para>
            <para>
            After an enumerator is created or after the <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> method is called, an enumerator is positioned
            before the first element of the collection, and the first call to the <see cref="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.MoveNext"/> method moves the enumerator over the
            first element of the collection.
            </para>
            <para>
            If <see cref="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.MoveNext"/> passes the end of the collection, the enumerator is positioned after the last element in the collection
            and <see cref="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.MoveNext"/> returns <c>false</c>. When the enumerator is at this position, subsequent calls to <see cref="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.MoveNext"/>
            return <c>false</c> until <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> is called.
            </para>
            <para>
            An enumerator remains valid as long as the tree remains unchanged. If changes are made to the tree, such as adding, modifying, or
            deleting nodes, the enumerator is irrecoverably invalidated and the next call to <see cref="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.MoveNext"/> or
            <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> throws an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.GetEnumerator(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.Collections.ITreeNode{`0}})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> on the given enumerable collection of nodes.
            </summary>
            <param name="nodes">The nodes over which to enumerate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to enumerate over <paramref name="nodes"/>.</returns>
            <remarks>
            Subclasses may choose to override this method to provide a different enumerator over <paramref name="nodes"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.DepthFirstTreeEnumerator`1.Stack">
            <summary>
            The stack used to hold the child node enumerators for subsequent processing.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Collections.TreeEnumerator`1"/> that enumerates nodes in breadth-first order.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the nodes of the tree.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.#ctor(Microsoft.BI.Common.Collections.ITreeNode{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1"/> class that will be used to enumerate the specified
            <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/>.
            </summary>
            <param name="root">The <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next node in the tree.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next node; <c>false</c> if the enumerator has
            passed the end of the tree.</returns>
            <remarks>
            <para>
            The next node is chosen according to the breadth-first search (BFS) algorithm.  In BFS, a node and all of its neighbors are searched
            first before moving on to the next level of the tree.  The search continues until the goal is reached or all nodes have been fully
            processed.
            </para>
            <para>
            After an enumerator is created or after the <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> method is called, an enumerator is
            positioned before the first element of the collection, and the first call to the <see cref="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.MoveNext"/> method moves the enumerator
            over the first element of the collection.
            </para>
            <para>
            If <see cref="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.MoveNext"/> passes the end of the collection, the enumerator is positioned after the last element in the collection
            and <see cref="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.MoveNext"/> returns <c>false</c>. When the enumerator is at this position, subsequent calls to <see cref="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.MoveNext"/>
            return <c>false</c> until <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> is called.
            </para>
            <para>
            An enumerator remains valid as long as the tree remains unchanged. If changes are made to the tree, such as adding, modifying, or
            deleting nodes, the enumerator is irrecoverably invalidated and the next call to <see cref="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.MoveNext"/> or
            <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> throws an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.GetEnumerator(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.Collections.ITreeNode{`0}})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> on the given enumerable collection of nodes.
            </summary>
            <param name="nodes">The nodes over which to enumerate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to enumerate over <paramref name="nodes"/>.</returns>
            <remarks>
            Subclasses may choose to override this method to provide a different enumerator over <paramref name="nodes"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.BreadthFirstTreeEnumerator`1.Queue">
            <summary>
            The queue used to hold child node enumerators for subsequent processing.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Collections.TreeEnumerator`1"/> that enumerates nodes that match a query.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the nodes of the tree.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.#ctor(Microsoft.BI.Common.Collections.ITreeNode{`0},System.Collections.Generic.IEnumerable{System.String},Microsoft.BI.Common.Collections.IEqualityComparer{System.String,`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1"/> class that will be used to enumerate the specified
            <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/>.
            </summary>
            <param name="root">The <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> to be enumerated.</param>
            <param name="querySegments">The query segments used to navigate the tree.</param>
            <param name="equalityComparer">The equality comparer to use when comparing a query segment to a node in the tree.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next node in the tree.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next node; <c>false</c> if the enumerator has
            passed the end of the tree.</returns>
            <remarks>
            <para>
            The next node is chosen according to the depth-first search (DFS) algorithm.  In DFS, each node is explored as far as possible
            before backtracking to a node that has not yet been fully explored.  The search continues until the goal is reached or all nodes
            have been fully processed.
            </para>
            <para>
            After an enumerator is created or after the <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> method is called, an enumerator is positioned
            before the first element of the collection, and the first call to the <see cref="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.MoveNext"/> method moves the enumerator over the
            first element of the collection.
            </para>
            <para>
            If <see cref="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.MoveNext"/> passes the end of the collection, the enumerator is positioned after the last element in the collection
            and <see cref="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.MoveNext"/> returns <c>false</c>. When the enumerator is at this position, subsequent calls to <see cref="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.MoveNext"/>
            return <c>false</c> until <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> is called.
            </para>
            <para>
            An enumerator remains valid as long as the tree remains unchanged. If changes are made to the tree, such as adding, modifying, or
            deleting nodes, the enumerator is irrecoverably invalidated and the next call to <see cref="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.MoveNext"/> or
            <see cref="M:Microsoft.BI.Common.Collections.TreeEnumerator`1.Reset"/> throws an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.GetEnumerator(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.Collections.ITreeNode{`0}})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> on the given enumerable collection of nodes.
            </summary>
            <param name="nodes">The nodes over which to enumerate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to enumerate over <paramref name="nodes"/>.</returns>
            <remarks>
            Subclasses may choose to override this method to provide a different enumerator over <paramref name="nodes"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.Stack">
            <summary>
            The stack used to hold the child node enumerators for subsequent processing.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.QuerySegments">
            <summary>
            The segments of the query.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.QueryTreeEnumerator`1.EqualityComparer">
            <summary>
            The equality comparer to use when comparing nodes to a query segment.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.TreeNavigator`1">
            <summary>
            A class that can be used to navigate a <see cref="T:Microsoft.BI.Common.Collections.Tree`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNavigator`1.Current">
            <summary>
            Gets the current <see cref="T:Microsoft.BI.Common.Collections.ITreeNode`1"/> of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/>
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNavigator`1.EqualityComparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.#ctor(Microsoft.BI.Common.Collections.ITreeNode{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> class whose position is at the specified node.
            </summary>
            <param name="node">The node at which to start navigation.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToChild(`0)">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the first child with the specified value.
            </summary>
            <param name="value">The value of the child to move to.</param>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no children that
            have a matching value, this method returns <c>false</c>.  If <c>false</c>, the position of the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToFirstSibling">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the first sibling node of the current node.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no parent, this
            method returns <c>false</c>.  If <c>false</c>, the position of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is
            unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToFirstChild">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the first child of the current node.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no children, this
            method returns <c>false</c>.  If <c>false</c>, the position of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is
            unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToNextSibling">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the next sibling of the current node.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no next sibling, this
            method returns <c>false</c>.  If <c>false</c>, the position of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is
            unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToNextSibling(`0)">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the next sibling with the specified value.
            </summary>
            <param name="value">The value of the sibling to move to.</param>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no siblings that
            have a matching value, this method returns <c>false</c>.  If <c>false</c>, the position of the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToParent">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the parent of the current node.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no parent, this
            method returns <c>false</c>.  If <c>false</c>, the position of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is
            unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToPreviousSibling">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the next sibling of the current node.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no previous sibling, this
            method returns <c>false</c>.  If <c>false</c>, the position of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is
            unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToPreviousSibling(`0)">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the previous sibling with the specified value.
            </summary>
            <param name="value">The value of the sibling to move to.</param>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no siblings that
            have a matching value, this method returns <c>false</c>.  If <c>false</c>, the position of the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToLastChild">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the last child of the current node.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no children, this
            method returns <c>false</c>.  If <c>false</c>, the position of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is
            unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToLastSibling">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the last sibling of the current node.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If the current node has no parent, this
            method returns <c>false</c>.  If <c>false</c>, the position of the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> is
            unchanged.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNavigator`1.MoveToRoot">
            <summary>
            Moves the <see cref="T:Microsoft.BI.Common.Collections.TreeNavigator`1"/> to the root of the current tree.
            </summary>
            <returns><c>true</c> if moving was successful; otherwise, <c>false</c>.  If </returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.TreeNode`1">
            <summary>
            Represents a node within a tree.
            </summary>
            <typeparam name="T">Specifies the element type of the tree.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNode`1.Value">
            <summary>
            Gets the value contained in the the node.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNode`1.Tree">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.Collections.Tree`1"/> to which this node belongs.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNode`1.Depth">
            <summary>
            Gets the depth of the <see cref="T:Microsoft.BI.Common.Collections.TreeNode`1"/> in the tree.
            </summary>
            <remarks>
            <para>
            The depth of a node is defined as the distance from the root, which has a depth of 0.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode">
            <summary>
            Gets the parent of the node.
            </summary>
            <remarks>
            <para>
            <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/> is set to the value of the current node's parent, or <c>null</c> if the node has no parent.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNode`1.Children">
            <summary>
            Gets the collection of nodes that are this node's children.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNode`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.TreeNode`1"/> class using the specified value.
            </summary>
            <param name="value">The value of the <see cref="T:Microsoft.BI.Common.Collections.TreeNode`1"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNode`1.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Microsoft.BI.Common.Collections.TreeNode`1"/>.
            </summary>
            <returns>A string that represents the <see cref="T:Microsoft.BI.Common.Collections.TreeNode`1"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1">
            <summary>
            Represents a collection of <see cref="T:Microsoft.BI.Common.Collections.TreeNode`1"/> objects.
            </summary>
            <typeparam name="T">The type of the element in each node.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.#ctor(Microsoft.BI.Common.Collections.TreeNode{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> class.
            </summary>
            <param name="parentNode">The node to which this collection of nodes belongs.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.IndexOf(Microsoft.BI.Common.Collections.TreeNode{`0})">
            <summary>
            Determines the index of a specific node in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
            <param name="node">The node to locate in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <returns>The index of <paramref name="node"/> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Insert(System.Int32,Microsoft.BI.Common.Collections.TreeNode{`0})">
            <summary>
            Inserts a node into the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="node"/> should be inserted.</param>
            <param name="node">The node to insert into the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/> of <paramref name="node"/> is not
            <c>null</c> (this node has already been added or inserted into a tree).</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> node at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the node at the specified index.
            </summary>
            <param name="index">The zero-based index of the node to get or set.</param>
            <returns>The node at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/> of <paramref name="value"/> is not
            <c>null</c> (this node has already been added or inserted into a tree).</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Add(Microsoft.BI.Common.Collections.TreeNode{`0})">
            <summary>
            Adds a node to the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
            <param name="node">The node to add to the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <remarks>
            <para>
            The node is added to the end of the current node list.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
            <remarks>
            <para>
            All nodes in the collection will also have their <see cref="P:Microsoft.BI.Common.Collections.TreeNode`1.ParentNode"/> property set to <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Contains(Microsoft.BI.Common.Collections.TreeNode{`0})">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> contains a specific node.
            </summary>
            <param name="node">The node to locate in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="node"/> is found in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.System#Collections#Generic#ICollection{Microsoft#BI#Common#Collections#TreeNode{T}}#CopyTo(Microsoft.BI.Common.Collections.TreeNode{`0}[],System.Int32)">
            <summary>
            Copies the nodes of the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular
            <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Count">
            <summary>
            Gets the number of nodes in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Collections.TreeNodeCollection`1.System#Collections#Generic#ICollection{Microsoft#BI#Common#Collections#TreeNode{T}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Remove(Microsoft.BI.Common.Collections.TreeNode{`0})">
            <summary>
            Removes the first occurence of a specific node from the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
            <param name="node">The node to remove from the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="node"/> was successfully removed from the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>; otherwise,
            <c>false</c>.  This method also returns <c>false</c> if <paramref name="node"/> was not found in the original
            <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <remarks>
            <para>
            The item is added to the end of the current node list.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="value"/> is found in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Remove(`0)">
            <summary>
            Removes the first occurence of a specific item from the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
            <param name="item">The item to remove from the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>; otherwise,
            <c>false</c>.  This method also returns <c>false</c> if <paramref name="item"/> was not found in the original
            <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of an item in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.
            </summary>
            <param name="item">The item to locate in the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The item to insert into the <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to the size of the
            <see cref="T:Microsoft.BI.Common.Collections.TreeNodeCollection`1"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.ValidateIndex(System.Int32)">
            <summary>
            Ensures that the specified index is in range.
            </summary>
            <param name="index">The index to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Count"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.InternalInsertNode(Microsoft.BI.Common.Collections.TreeNode{`0},Microsoft.BI.Common.Collections.TreeNode{`0},System.Int32)">
            <summary>
            Inserts a node into the collection at the specified index.
            </summary>
            <param name="node">The node to insert.</param>
            <param name="next">A node in the collection that is immediately after this node, or <c>null</c> to insert at the end.</param>
            <param name="index">The index in the collection at which to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Collections.TreeNodeCollection`1.InternalRemoveNode(Microsoft.BI.Common.Collections.TreeNode{`0},System.Int32)">
            <summary>
            Removes a the specified node from the collection.
            </summary>
            <param name="node">The node to remove.</param>
            <param name="index">The index of the node.</param>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.TreeNodeCollection`1.Nodes">
            <summary>
            The underlying list of nodes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Collections.TreeNodeCollection`1.ParentNode">
            <summary>
            The parent node of the collection.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.ICollectionExtensions">
            <summary>
            Provides extension methods for ICollection&lt;T&gt; types.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="collection">The collection instance.</param>
            <param name="items">An enumerable collection of items to add.</param>
            <remarks>If <paramref name="items"/> is null, nothing will be added to the collection, and no exception
            will be thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ICollectionExtensions.IndexOf``1(System.Collections.Generic.ICollection{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the occurence within the entire <see cref="T:System.Collections.Generic.ICollection`1"/>.
            Item equality is determined using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.  The value can be <c>null</c> for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items in the collection.</param>
            <returns>The zero-based index of the first occurence of <paramref name="item"/> within the entire collection; otherwise, -1.</returns>
            <remarks>
            <para>
            The collection is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IDictionaryExtensions">
            <summary>
            Provides extension methods for IDictionary&lt;K, V&gt; types.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IDictionaryExtensions.Add``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Adds the specified <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <param name="item">The key-value pair to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            Uses the specified functions to add a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist,
            or to update a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key already exists.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <param name="key">THe key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the key. This will be either be the result of <paramref name="addValueFactory"/> (if the key was absent) or the
            result of <paramref name="updateValueFactory"/> (if the key was present).</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
            Adds a key/value pair to an <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist, or updates a key/value pair
            in the <see cref="T:System.Collections.Generic.IDictionary`2"/> by using the specified function if the key already exists.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <param name="key">THe key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the key. This will be either be <paramref name="addValue"/> (if the key was absent) or the result of
            <paramref name="updateValueFactory"/> (if the key was present).</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IDictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the elements of the specified enumerable collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects to the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <param name="items">An enumerable collection of key-value pairs to add.</param>
            <remarks>If <paramref name="items"/> is null, nothing will be added to the collection, and no exception
            will be thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> by using the specified function, if
            the key does not already exist.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate the value for the key.</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the
            dictionary, or the new value for the key as returned by <paramref name="valueFactory"/> if the key was not in the
            dictionary.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the
            dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IDictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Merges the contents of the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> with the current contents.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <param name="other">Another dictionary containing the values to merge.</param>
            <returns>The merged dictionary.</returns>
            <remarks>The values in <paramref name="other"/> will overwrite any values in the current instance
            with the same key.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IList`1"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},``1)">
            <summary>
            Performs a binary search through the sorted <see cref="T:System.Collections.Generic.IList`1"/> for the given value and returns
            the index of a match.
            </summary>
            <typeparam name="T1">The type of the items in the list.</typeparam>
            <typeparam name="T2">The type of the item to compare to.</typeparam>
            <param name="list">The list upon which the search will be performed.</param>
            <param name="value">The value to search for within the list.</param>
            <returns>
            The index within the list of an entry matching the given value. If no match is found, -1 is returned.
            </returns>
        </member>
        <member name="M:Microsoft.BI.Common.IListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a binary search through the sorted <see cref="T:System.Collections.Generic.IList`1"/> for the given value and returns
            the index of a match.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list upon which the search will be performed.</param>
            <param name="value">The value to search for within the list.</param>
            <param name="comparer">The comparer to use when comparing elements.</param>
            <returns>
            The index within the list of an entry matching the given value. If no match is found, -1 is returned.
            </returns>
        </member>
        <member name="M:Microsoft.BI.Common.IListExtensions.Contains``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a list contains a specified element by using the specifed equality comparer.
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The object to locate in the list.  The value can be <c>null</c>
            for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items in the
            list.</param>
            <returns><c>true</c> if the list contains the specified value; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            The list is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is
            <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the occurence within the
            <see cref="T:System.Collections.Generic.IList`1"/>.  Item equality is determined using the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.  The value can be <c>null</c>
            for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items in the
            list.</param>
            <returns>The zero-based index of the first occurence of <paramref name="value"/> within the list;
            otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            The list is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is
            <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.PackedValue`1">
            <summary>
            A class for extracting typed values from a packed value string.
            </summary>
            <typeparam name="T">The type of elements in the packed value.</typeparam>
        </member>
        <member name="F:Microsoft.BI.Common.PackedValue`1.Delimiter">
            <summary>
            The delimiter character between each value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.PackedValue`1.Items">
            <summary>
            A list of the start index of each item.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.PackedValue`1.Formatter">
            <summary>
            The <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> to use when parsing values.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.PackedValue`1.FormatProvider">
            <summary>
            The <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> to use when parsing values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PackedValue`1.DataType">
            <summary>
            Cached data type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PackedValue`1.DataTypeAttributes">
            <summary>
            Cached data type attributes.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.#ctor(System.Char)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.PackedValue"/>.
            </summary>
            <param name="delimiter">The delimiter between each value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.#ctor(System.String,System.Char)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.PackedValue"/> based on the specified string.
            </summary>
            <param name="values">The string containing the packed values.</param>
            <param name="delimiter">The delimiter between each value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.PackedValue"/> based on the specified set of strings.
            </summary>
            <param name="values">A collection of string values to add.</param>
            <param name="delimiter">The delimiter between each value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.Parse(System.String)">
            <summary>
            Loads a string of packed values with the specified delimiter.
            </summary>
            <param name="values">The string containing the packed values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.AddValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse each value and add to <see cref="F:Microsoft.BI.Common.PackedValue`1.Items"/>.
            </summary>
            <param name="values">The values to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.Add(`0)">
            <summary>
            Add an item to the <see cref="T:Microsoft.BI.Common.PackedValue"/>.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.Clear">
            <summary>
            Clears the contents of the <see cref="T:Microsoft.BI.Common.PackedValue"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.IndexOf(`0)">
            <summary>
            Returns the first index of the specified item, or -1 if not found.
            </summary>
            <param name="item">The item to get the index of.</param>
            <returns>The first index of <paramref name="item"/>, or -1 if not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item into the <see cref="T:Microsoft.BI.Common.PackedValue"/> at the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
            <remarks>If <paramref name="index"/> is out of range, no exception is thrown.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.PackedValue`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index, or the default value for the <see cref="T:Microsoft.BI.Common.PackedValue"/>
            type if not found.</returns>
            <remarks>If <paramref name="index"/> is out of range, the default value of the type will be
            returned when getting, and no exception is thrown when setting.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.Contains(`0)">
            <summary>
            Determines whether the specified item exists in the <see cref="T:Microsoft.BI.Common.PackedValue"/>.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>true if the item was found; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the values in the <see cref="T:Microsoft.BI.Common.PackedValue"/> to an array.
            </summary>
            <param name="array">The array to copy values into.</param>
            <param name="arrayIndex">The starting index at which to store values in <paramref name="array"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <remarks>If the index is out of range, no exception is thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.Remove(`0)">
            <summary>
            Removes the first occurance of the specified item.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if the item was removed; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.PackedValue`1.Count">
            <summary>
            Returns the number of items in the <see cref="T:Microsoft.BI.Common.PackedValue"/>.
            </summary>
            <remarks>This value is statically cached rather than dynamically computed in order to improve performance.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.PackedValue`1.IsReadOnly">
            <summary>
            Always false; <see cref="T:Microsoft.BI.Common.PackedValue"/>s are read-write.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.PackedValue"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Microsoft.BI.Common.PackedValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.ToString">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.PackedValue"/> as a string.
            </summary>
            <returns>The original string that was loaded into the <see cref="T:Microsoft.BI.Common.PackedValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue`1.Extract(System.String,System.Int32,System.Char)">
            <summary>
            Extract the value at the specified index of a packed value string.
            </summary>
            <param name="s">The packed value string.</param>
            <param name="index">The index in the packed value to extract.</param>
            <param name="delimeter">The character to use as a delimiter.</param>
            <returns>The extracted value.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.PackedValue">
            <summary>
            An untyped <see cref="T:Microsoft.BI.Common.PackedValue"/> optimized for dealing with strings.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue.#ctor(System.Char)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.PackedValue"/>.
            </summary>
            <param name="delimiter">The delimiter between each value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue.#ctor(System.String,System.Char)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.PackedValue"/> based on the specified string.
            </summary>
            <param name="values">The string containing the packed values.</param>
            <param name="delimiter">The delimiter between each value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.PackedValue"/> based on the specified set of strings.
            </summary>
            <param name="values">A collection of string values to add.</param>
            <param name="delimiter">The delimiter between each value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue.Parse(System.String)">
            <summary>
            Loads a string of packed values with the specified delimiter.
            </summary>
            <param name="values">The string containing the packed values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PackedValue.ToString">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.PackedValue"/> as a string.
            </summary>
            <returns>The original string that was loaded into the <see cref="T:Microsoft.BI.Common.PackedValue"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ScopedDictionary`2">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> implementation that includes the concept of "scopes", or logical groupings of
            key-value pairs that can be added, removed, and overridden in groups.
            </summary>
            <typeparam name="K">The type of the keys in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</typeparam>
            <typeparam name="V">The type of the values in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> class, copying the key-value pairs from the
            specified dictionary.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> class using the specified key and value
            comparers.
            </summary>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or null to
            use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing value, or null to
            use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> class, copying the key-value pairs from the
            specified dictionary and using the specified key and value comparers.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or null to
            use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing value, or null to
            use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Push">
            <summary>
            Pushes a new scope onto the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Push(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Pushes the specified scope onto the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
            <param name="scope">A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the values to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Pop">
            <summary>
            Removes and returns the topmost scope off of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> removed from the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Peek(System.Int32)">
            <summary>
            Returns the topmost scope in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>
            </summary>
            <param name="offset">The number of scopes down the stack to peek.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/> at the top of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedDictionary`2.Scopes">
            <summary>
            Returns an enumeration of each dictionary on the scope stack, starting at the top of the stack.
            </summary>
            <returns>An enumerable of each dictionary on the scope stack.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the specified key and value to the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedDictionary`2.Keys">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> containnig the keys of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if 
            <paramref name="key"/> was not found in the original <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the <paramref name="value"/> parameter.  This parameter is passed
            uninitialized.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> contains an element with the specified key;
            otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedDictionary`2.Values">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>THe element with the specified key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>; otherwise
            false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination for the elements to be copied.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurance of a specified object from the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>;
            otherwise, false.  The method also returns false if <paramref name="item"/> was not found in the original
            <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the
            <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ScopedHashSet`1">
            <summary>
            An <see cref="T:System.Collections.Generic.ISet`1"/> implementation that includes the concept of "scopes", or logical groupings of
            values that can be added, removed, and overridden in groups.
            </summary>
            <typeparam name="T">The type of the items in the hash set.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> class, copying the keys from the
            specified set.
            </summary>
            <param name="set">The <see cref="T:System.Collections.Generic.ISet`1"/> whose elements are copied to the new
            <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> class using the specified key comparer.
            </summary>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or null to
            use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.#ctor(System.Collections.Generic.ISet{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> class, copying the keys from the
            specified set and using the specified key comparer.
            </summary>
            <param name="set">The <see cref="T:System.Collections.Generic.ISet`1"/> whose elements are copied to the new
            <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or null to
            use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Push">
            <summary>
            Pushes a new scope onto the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Push(System.Collections.Generic.ISet{`0})">
            <summary>
            Pushes the specified scope onto the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.
            </summary>
            <param name="scope">A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the values to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Pop">
            <summary>
            Removes and returns the topmost scope off of the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.ISet`1"/> removed from the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Peek(System.Int32)">
            <summary>
            Returns the topmost scope in the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>
            </summary>
            <param name="offset">The number of scopes down the stack to peek.</param>
            <returns>The <see cref="T:System.Collections.Generic.ISet`1"/> at the top of the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Add(`0)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>true if the element is added to the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> object; false if the element
            is already present.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination for the elements to be copied.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ScopedHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.Remove(`0)">
            <summary>
            Removes the first occurance of a specified object from the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>;
            otherwise, false.  The method also returns false if <paramref name="item"/> was not found in the original
            <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ScopedHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the
            <see cref="T:Microsoft.BI.Common.ScopedHashSet`1"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.cstring">
            <summary>
            Contains several functions to manipulate strings and arrays.
            </summary>
            <remarks>
            These methods are based on methods of the same name defined in <c>string.h</c> in c++.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memcmp(System.Void*,System.Void*,System.UInt32)">
            <summary>
            Compares two blocks of memory for equality.
            </summary>
            <param name="ptr1">A pointer to the first block of memory to compare.</param>
            <param name="ptr2">A pointer to the second block of memory to compare.</param>
            <param name="count">The number of bytes to compare.</param>
            <returns>A value less than 0 if the first byte that does not match in both memory blocks has
            a lesser value in <paramref name="ptr1"/> than in <paramref name="ptr2"/>; a value greater than
            0 if the first byte that does not match in both memory blocks has a greater value in
            <paramref name="ptr1"/> than in <paramref name="ptr2"/>; otherwise, 0.</returns>
            <remarks>
            <para>
            This method compares the first <paramref name="count"/> bytes of the block of memory pointed to by
            <paramref name="ptr1"/> to the first <paramref name="count"/> bytes of the block of memory pointed to
            by <paramref name="ptr2"/>, returning zero if they all match or a value different from zero
            representing which is greater if not.
            </para>
            <para>
            Note that, unlike <c>strcmp</c>, this function does not stop comparing after finding a null character.
            </para>
            <para>
            Contrast to <see cref="M:Microsoft.BI.Common.cstring.memeq(System.Void*,System.Void*,System.UInt32)"/>, which returns a boolean value indicating whether two blocks of memory
            are different.  This method is less performant than <see cref="M:Microsoft.BI.Common.cstring.memeq(System.Void*,System.Void*,System.UInt32)"/>, and should only be used when
            the relative value between the two blocks of memory is required.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.cstring.memeq(System.Void*,System.Void*,System.UInt32)"/>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.WordwiseMemoryCompare(System.UInt64*,System.UInt64*,System.UInt32)">
            <summary>
            Compares memory one word at a time.
            </summary>
            <param name="ptr1">A pointer to the first block of memory to compare.</param>
            <param name="ptr2">A pointer to the second block of memory to compare.</param>
            <param name="count">The number of words to compare.</param>
            <returns>A value less than 0 if the first byte that does not match in both memory blocks has
            a lesser value in <paramref name="ptr1"/> than in <paramref name="ptr2"/>; a value greater than
            0 if the first byte that does not match in both memory blocks has a greater value in
            <paramref name="ptr1"/> than in <paramref name="ptr2"/>; otherwise, 0.</returns>
            <remarks>
            <para>
            This method compares blocks of memory 1 word (8 bytes) at a time.  It has no special alignment
            requirements.  <paramref name="count"/> must be greater than or equal to 8.
            </para>
            <para>
            If a difference is found, the result is defined as the first difference between the byte values
            at the same offset in each block of memory, regardless of how many differences there are in total.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.BytewiseMemoryCompare(System.Byte*,System.Byte*,System.UInt32)">
            <summary>
            Compares memory one byte at a time.
            </summary>
            <param name="ptr1">A pointer to the first block of memory to compare.</param>
            <param name="ptr2">A pointer to the second block of memory to compare.</param>
            <param name="count">The number of bytes to compare.</param>
            <returns>A value less than 0 if the first byte that does not match in both memory blocks has
            a lesser value in <paramref name="ptr1"/> than in <paramref name="ptr2"/>; a value greater than
            0 if the first byte that does not match in both memory blocks has a greater value in
            <paramref name="ptr1"/> than in <paramref name="ptr2"/>; otherwise, 0.</returns>
            <remarks>
            <para>
            This method compares blocks of memory 1 byte at a time.  It has no special alignment requirements.
            </para>
            <para>
            If a difference is found, the result is defined as the first difference between the byte values at
            the same offset in each block of memory, regardless of how many differences there are in total.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.GetFirstByteDifference(System.UInt64,System.UInt64)">
            <summary>
            Gets the difference between the first two bytes that differ in two unsigned long values.  The supplied
            values must have already been verified to be different.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The difference between the first bytes that differ between <paramref name="first"/> and
            <paramref name="second"/>.</returns>
            <remarks>
            <paramref name="first"/> and <paramref name="second"/> must be different.  If they are not different,
            the behavior of this method is undefined.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memeq(System.Void*,System.Void*,System.UInt32)">
            <summary>
            Compares two blocks of memory for equality.
            </summary>
            <param name="ptr1">A pointer to the first block of memory to compare.</param>
            <param name="ptr2">A pointer to the second block of memory to compare.</param>
            <param name="count">The number of bytes to compare.</param>
            <returns><c>true</c> if the block of memory pointed to by <paramref name="ptr1"/> and the block of
            memory pointed to by <paramref name="ptr2"/> are equal; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            This method compares the first <paramref name="count"/> bytes of the block of memory pointed to by
            <paramref name="ptr1"/> to the first <paramref name="count"/> bytes of the block of memory pointed to
            by <paramref name="ptr2"/>, returning <c>true </c>if they all match or <c>false</c> if not.
            </para>
            <para>
            Note that, unlike <c>strcmp</c>, this function does not stop comparing after finding a null character.
            </para>
            <para>
            Contrast to <see cref="M:Microsoft.BI.Common.cstring.memcmp(System.Void*,System.Void*,System.UInt32)"/>, which returns an integer value indicating the difference between the
            first differing byte in two blocks of memory.  This method is slightly more performant than
            <see cref="M:Microsoft.BI.Common.cstring.memcmp(System.Void*,System.Void*,System.UInt32)"/> and should be used when testing for equality alone.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.cstring.memcmp(System.Void*,System.Void*,System.UInt32)"/>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.WordwiseMemoryEqualityCompare(System.UInt64*,System.UInt64*,System.UInt32)">
            <summary>
            Compares memory one word at a time.
            </summary>
            <param name="ptr1">A pointer to the first block of memory to compare.</param>
            <param name="ptr2">A pointer to the second block of memory to compare.</param>
            <param name="count">The number of words to compare.</param>
            <returns><c>true</c> if the block of memory pointed to by <paramref name="ptr1"/> and the block of
            memory pointed to by <paramref name="ptr2"/> are equal; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            This method compares blocks of memory 1 word (8 bytes) at a time.  It has no special alignment
            requirements.  <paramref name="count"/> must be greater than or equal to 8.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.BytewiseMemoryEqualityCompare(System.Byte*,System.Byte*,System.UInt32)">
            <summary>
            Compares memory one byte at a time.
            </summary>
            <param name="ptr1">A pointer to the first block of memory to compare.</param>
            <param name="ptr2">A pointer to the second block of memory to compare.</param>
            <param name="count">The number of bytes to compare.</param>
            <returns><c>true</c> if the block of memory pointed to by <paramref name="ptr1"/> and the block of
            memory pointed to by <paramref name="ptr2"/> are equal; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            This method compares blocks of memory 1 byte at a time.  It has no special alignment requirements.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memcpy(System.Void*,System.Void*,System.UInt32)">
            <summary>
            Copies the values of <paramref name="count"/> bytes from the location pointed by <paramref name="source"/>
            directly to the memory block pointed by <paramref name="destination"/>.  <paramref name="source"/> and
            <paramref name="destination"/> may not overlap.
            </summary>
            <param name="destination">Pointer to the destination array where the content is to be copied.</param>
            <param name="source">Pointer to the source of data to be copied.</param>
            <param name="count">Number of bytes to copy.</param>
            <returns>A pointer to the destination (<paramref name="destination"/>).</returns>
            <remarks>
            <para>
            The underlying type of the objects pointed by both the source and destination pointers are irrelevant for
            this function; the result is a binary copy of the data.
            </para>
            <para>
            The function does not check for any terminating null character in source - it always copies exactly
            <paramref name="count"/> bytes.
            </para>
            <para>
            To avoid overflows, the size of the arrays pointed by both the <paramref name="destination"/> and
            <paramref name="source"/> parameters shall be at least <paramref name="count"/> bytes, and should not
            overlap (for overlapping memory blocks, <c>memmove</c> is a safer approach).
            </para>
            <para>
            If <paramref name="source"/> and <paramref name="destination"/> overlap, the behavior of this method
            is undefined.  Use <see cref="M:Microsoft.BI.Common.cstring.memmove(System.Void*,System.Void*,System.UInt32)"/> if it is possible for <paramref name="source"/> and
            <paramref name="destination"/> to overlap.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memchr(System.Void*,System.Byte,System.UInt32)">
            <summary>
            Searches within the first <paramref name="count"/> bytes of the block of memory pointed
            to by <paramref name="ptr"/> for the first occurence of <paramref name="value"/> and
            returns a pointer to it.
            </summary>
            <param name="ptr">A pointer to the block of memory where the search is performed.</param>
            <param name="value">The value to search for.</param>
            <param name="count">The number of bytes to search.</param>
            <returns>A pointer to the first occurence of <paramref name="value"/> in the block of
            memory pointed to by <paramref name="ptr"/>, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memchr(System.Char*,System.Char,System.UInt32)">
            <summary>
            Searches within the first <paramref name="count"/> characters of the block of memory pointed
            to by <paramref name="ptr"/> for the first occurence of <paramref name="value"/> and
            returns a pointer to it.
            </summary>
            <param name="ptr">A pointer to the block of memory where the search is performed.</param>
            <param name="value">The value to search for.</param>
            <param name="count">The number of characters to search.</param>
            <returns>A pointer to the first occurence of <paramref name="value"/> in the block of
            memory pointed to by <paramref name="ptr"/>, or <c>null</c> if not found.</returns>
            <remarks>
            <para>
            This method considers the alignment of <paramref name="ptr"/> - a character will only be considered
            a match if it has the same alignment as <paramref name="ptr"/>.  For example, the following byte
            sequence would not be considered a match, even though it does contain a sequence of two bytes
            that match the bytes of the character 'a' (0x0061): 0x00006100.
            </para>
            <para>
            If <paramref name="ptr"/> is not aligned evenly (the address is not even), this method will have
            significantly worse performance than if it is.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memrchr(System.Void*,System.Byte,System.UInt32)">
            <summary>
            Searches within the first <paramref name="count"/> bytes of the block of memory pointed
            to by <paramref name="ptr"/> for the last occurence of <paramref name="value"/> and
            returns a pointer to it.
            </summary>
            <param name="ptr">A pointer to the block of memory where the search is performed.</param>
            <param name="value">The value to search for.</param>
            <param name="count">The number of bytes to search.</param>
            <returns>A pointer to the last occurence of <paramref name="value"/> in the block of
            memory pointed to by <paramref name="ptr"/>, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memrchr(System.Char*,System.Char,System.UInt32)">
            <summary>
            Searches within the first <paramref name="count"/> characters of the block of memory pointed
            to by <paramref name="ptr"/> for the last occurence of <paramref name="value"/> and
            returns a pointer to it.
            </summary>
            <param name="ptr">A pointer to the block of memory where the search is performed.</param>
            <param name="value">The value to search for.</param>
            <param name="count">The number of characters to search.</param>
            <returns>A pointer to the last occurence of <paramref name="value"/> in the block of
            memory pointed to by <paramref name="ptr"/>, or <c>null</c> if not found.</returns>
            <remarks>
            <para>
            This method considers the alignment of <paramref name="ptr"/> - a character will only be considered
            a match if it has the same alignment as <paramref name="ptr"/>.  For example, the following byte
            sequence would not be considered a match, even though it does contain a sequence of two bytes
            that match the bytes of the character 'a' (0x0061): 0x00006100.
            </para>
            <para>
            If <paramref name="ptr"/> is not aligned evenly (the address is not even), this method will have
            significantly worse performance than if it is.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memmove(System.Void*,System.Void*,System.UInt32)">
            <summary>
            Copies the values of <paramref name="count"/> bytes from the location pointed by <paramref name="source"/>
            directly to the memory block pointed by <paramref name="destination"/>.  <paramref name="source"/> and
            <paramref name="destination"/> may overlap.
            </summary>
            <param name="destination">Pointer to the destination array where the content is to be copied.</param>
            <param name="source">Pointer to the source of data to be copied.</param>
            <param name="count">Number of bytes to copy.</param>
            <remarks>
            <para>
            The underlying type of the objects pointed by both the source and destination pointers are irrelevant for
            this function; the result is a binary copy of the data.
            </para>
            <para>
            The function does not check for any terminating null character in source - it always copies exactly
            <paramref name="count"/> bytes.
            </para>
            <para>
            To avoid overflows, the size of the arrays pointed by both the <paramref name="destination"/> and
            <paramref name="source"/> parameters shall be at least <paramref name="count"/> bytes.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.cstring.memset(System.Void*,System.Byte,System.UInt32)">
            <summary>
            Sets the first <paramref name="num"/> bytes of memory pointed to by <paramref name="ptr"/> to
            the specified <paramref name="value"/>.
            </summary>
            <param name="ptr">Pointer to the block of memory to fill.</param>
            <param name="value">Value to be set.</param>
            <param name="num">Number of bytes to be set in <paramref name="ptr"/>.</param>
            <returns>A pointer to the buffer (<paramref name="ptr"/>).</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.AesCodec">
            <summary>
            Provides static methods for encrypting and decrypting data via AES.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesCodec.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts a byte array using the specified key and initialization vector.
            </summary>
            <param name="key">The key to use for decryption.</param>
            <param name="iv">The initialization vector.</param>
            <param name="encryptedData">The data to decrypt.</param>
            <returns>The result of decrypting <paramref name="encryptedData"/> with the given <paramref name="key"/>
            and <paramref name="iv"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesCodec.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts a byte array using the specified key and initialization vector.
            </summary>
            <param name="key">The key to use for encryption.</param>
            <param name="iv">The initialization vector.</param>
            <param name="dataToEncrypt">The data to encrypt.</param>
            <returns>The result of encrypting <paramref name="dataToEncrypt"/> with the given <paramref name="key"/>
            and <paramref name="iv"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.KeyParty">
            <summary>
            Party that a key applies to.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CryptoUtils.KeyParty.None">
            <summary>
            No key party specified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CryptoUtils.KeyParty.Microsoft">
            <summary>
            A Microsoft key.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CryptoUtils.KeyParty.Yahoo">
            <summary>
            A Yahoo key.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey">
            <summary>
            Storage object for an AES encryption key.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.IsDefault">
            <summary>
            Gets or sets a value indicating whether the key represents a default decryption.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.KeyParty">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.KeyParty"/> of the key.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.KeyVersion">
            <summary>
            Gets or sets the version of the key.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.KeyData">
            <summary>
            Gets or sets a byte array containing the encryption key.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.#ctor(System.Boolean,Microsoft.BI.Common.CryptoUtils.KeyParty,System.UInt32,System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey"/> structure.
            </summary>
            <param name="isDefault">Whether the key represents a default decryption.</param>
            <param name="keyParty">The <see cref="P:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.KeyParty"/> of the key.</param>
            <param name="keyVersion">The key version of the key.</param>
            <param name="keyData">The encryption key data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.#ctor(System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey"/> structure.
            </summary>
            <param name="row">Row data, boxed in object array.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey"/>.
            </summary>
            <returns>A string that represents the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage">
            <summary>
            Class to handle loading of AesDecryption keys from a file or stream.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.KeyStorageSchema">
            <summary>
            Contains the schema of a KeyStorage mapfile.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.Item(System.Byte,System.UInt32)">
            <summary>
            Party, version indexer for retrieving key data.
            </summary>
            <param name="party">The key party.</param>
            <param name="version">The key version.</param>
            <returns>The associated key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="party"/> and <paramref name="version"/> are not found
            in the key store.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.Item(Microsoft.BI.Common.CryptoUtils.KeyParty,System.UInt32)">
            <summary>
            Party, version indexer for retrieving key data.
            </summary>
            <param name="party">The key party.</param>
            <param name="version">The key version.</param>
            <returns>The associated key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="party"/> and <paramref name="version"/> are not found
            in the key store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/> class using the specified store path.
            </summary>
            <param name="keyStoreFilePath">The path to the key store to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/> class using the specified store stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the key data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.#ctor(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/> class using the specified IDataReader.
            </summary>
            <param name="reader">A <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> containing the key data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.Add(Microsoft.BI.Common.CryptoUtils.AesDecryptionKey)">
            <summary>
            Adds an <see cref="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey"/> to the store.
            </summary>
            <param name="key">The key to add to the store.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Load the keys in to the Key storage.
            </summary>
            <param name="reader">IDataReader to read the keys.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.Load(System.Object[])">
            <summary>
            Load a key into the key store.
            </summary>
            <param name="row">Row data, boxed in object array.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.TryGetValue(System.Byte,System.UInt32,Microsoft.BI.Common.CryptoUtils.AesDecryptionKey@)">
            <summary>
            Gets a decryption key out of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/>.
            </summary>
            <param name="party">The key party.</param>
            <param name="version">The key version.</param>
            <param name="decryptionKey">When this method returns, contains the decryption key found in the storage.</param>
            <returns><c>true</c> if a matching decryption key was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.TryGetValue(Microsoft.BI.Common.CryptoUtils.KeyParty,System.UInt32,Microsoft.BI.Common.CryptoUtils.AesDecryptionKey@)">
            <summary>
            Gets a decryption key out of the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/>.
            </summary>
            <param name="party">The key party.</param>
            <param name="version">The key version.</param>
            <param name="decryptionKey">When this method returns, contains the decryption key found in the storage.</param>
            <returns><c>true</c> if a matching decryption key was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.CreateKey(System.Int64,System.Byte)">
            <summary>
            Turn a party and version into a key.
            </summary>
            <param name="version">The key version.</param>
            <param name="party">The key party.</param>
            <returns>The key, as a long.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey"/> objects in the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesDecryptionKey"/> objects in the <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.EncryptionUtils">
            <summary>
            Provides utility functions for performing encryption.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.EncryptionUtils.FixBase64String(System.String)">
            <summary>
            Fix URL-encoded base64 encoding and turn it into padded standard base64.
            </summary>
            <param name="base64String">The string to fix.</param>
            <returns>The result of fixing <paramref name="base64String"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.EncryptionUtils.ToBase64UrlString(System.String)">
            <summary>
            Turn base64 to base64url, which is non-padded and uses '-' for 62 and '_' for 63.
            </summary>
            <param name="base64String">The string to modify.</param>
            <returns>The resulting base64url value.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.IPFormat">
            <summary>
            Contains values indicating the format of IP addresses passed to a <see cref="T:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CryptoUtils.IPFormat.IPv4">
            <summary>
            An IP address in IPv4 format.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CryptoUtils.IPFormat.IPv6">
            <summary>
            An IP address in IPv6 format.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CryptoUtils.IPFormat.SameAsSource">
            <summary>
            The IP address should be returned in the same format as the source.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor">
            <summary>
            Class for decrypting IP addresses in M* logs.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor"/>.
            </summary>
            <param name="keyFilePath">The file name of the key store.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor"/>.
            </summary>
            <param name="stream">A stream containing key store information.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.#ctor(Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor"/>.
            </summary>
            <param name="keyStore">An <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/> key store containing keys information.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.DecryptIP(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.UInt32},System.String,System.String,System.String,Microsoft.BI.Common.CryptoUtils.IPFormat)">
            <summary>
            Perform IP decryption on the raw data from a row in the log.
            </summary>
            <param name="keyParty">The key party for the data.</param>
            <param name="algorithmId">The algorithm ID to use for decryption.</param>
            <param name="keyVersion">The key version for the data.</param>
            <param name="base64EncodedIV">The initialization vector as a base-64 encoded string.</param>
            <param name="base64EncodedEncryptedIPAddress">The encoded IP address as a base-64 encoded string.</param>
            <param name="logServerName">The name of the log server in which the IP address was encrypted.</param>
            <param name="format">The format of the IP address.</param>
            <returns>The decrypted IP address, or <see cref="F:System.String.Empty"/> if decryption fails.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.DecryptIPAddress(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.UInt32},System.String,System.String,System.String,Microsoft.BI.Common.CryptoUtils.IPFormat)">
            <summary>
            Perform IP decryption on the raw data from a row in the log.
            </summary>
            <param name="keyParty">The key party for the data.</param>
            <param name="algorithmId">The algorithm ID to use for decryption.</param>
            <param name="keyVersion">The key version for the data.</param>
            <param name="base64EncodedIV">The initialization vector as a base-64 encoded string.</param>
            <param name="base64EncodedEncryptedIPAddress">The encoded IP address as a base-64 encoded string.</param>
            <param name="logServerName">The name of the log server in which the IP address was encrypted.</param>
            <param name="format">The format of the IP address.</param>
            <returns>The decrypted IP address, or <c>null</c> if decryption fails.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.EncryptIP(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.UInt32},System.String,System.String,System.String,Microsoft.BI.Common.CryptoUtils.IPFormat)">
            <summary>
            Perform encryption on the IP from a row in the log.
            </summary>
            <param name="keyParty">The key party for the data.</param>
            <param name="algorithmId">The algorithm ID to use for encryption.</param>
            <param name="keyVersion">The key version for the data.</param>
            <param name="base64EncodedIV">The initialization vector as a base-64 encoded string.</param>
            <param name="ipAddress">The IP address string.</param>
            <param name="logServerName">The name of the log server in which the IP address was encrypted.</param>
            <param name="format">The format of the IP address.</param>
            <returns>The base64 encoded encrypted IP address, or String.Empty if encryption fails.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.IsMappedIPv4(System.Byte[])">
            <summary>
            Check a byte[] for IPv4 mapped IPv6 address.
            </summary>
            <param name="data">A byte array containing the IP data to check.</param>
            <returns><c>true</c> if <paramref name="data"/> is an IPv4 address mapped to IPv6; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.GetAlerts(System.Double,System.Double)">
            <summary>
            Gets a string containing the alerts for the decryptor given the specified thresholds.
            </summary>
            <param name="defaultKeyRatioAlertThreshold">The key ratio alert threshold.</param>
            <param name="badDecryptionRatioAlertThreshold">The bad decryption ratio threshold.</param>
            <returns>A string containing the alert message.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.IPAddressDecryptor.GetAlerts(System.Double,System.Double,System.TimeSpan,System.DateTime)">
            <summary>
            Gets a string containing the alerts for the decryptor given the specified thresholds.
            </summary>
            <param name="defaultKeyRatioAlertThreshold">The key ratio alert threshold.</param>
            <param name="badDecryptionRatioAlertThreshold">The bad decryption ratio threshold.</param>
            <param name="keyAgeThreshold">The key age threshold.</param>
            <param name="delta">The delta of the current job.</param>
            <returns>A string containing the alert message.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor">
            <summary>
            This class helps to decrypt the latitude and longitude.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor"/> class using the specified key file.
            </summary>
            <param name="keyFilePath">The path to the key file to se.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor.#ctor(Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor"/>.
            </summary>
            <param name="keyStore">An <see cref="T:Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage"/> key store containing keys information.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor.DecryptLatitude(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.UInt32},System.String,System.String)">
            <summary>
            Decrypts the latitude and validates the decrypted value for valid range.
            </summary>
            <param name="keyParty">The key party for the data.</param>
            <param name="algorithmId">The algorithm ID to use for encryption.</param>
            <param name="keyVersion">The key version for the data.</param>
            <param name="base64EncodedIV">The initialization vector as a base-64 encoded string.</param>
            <param name="base64EncodedEncryptedLatitude">The encrypted latitude value.</param>
            <returns>The decrypted latitude, or <see cref="F:System.String.Empty"/> if decryption fails or the value is out of range.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor.DecryptLongitude(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.UInt32},System.String,System.String)">
            <summary>
            Decrypts the latitude and validates the decrypted value for valid range.
            </summary>
            <param name="keyParty">The key party for the data.</param>
            <param name="algorithmId">The algorithm ID to use for encryption.</param>
            <param name="keyVersion">The key version for the data.</param>
            <param name="base64EncodedIV">The initialization vector as a base-64 encoded string.</param>
            <param name="base64EncodedEncryptedLongitude">The encrypted longitude value.</param>
            <returns>The decrypted longitude, or <see cref="F:System.String.Empty"/> if decryption fails or the value is out of range.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CryptoUtils.LatLongDecryptor.DecryptLatLong(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.UInt32},System.String,System.String)">
            <summary>
            This is an internal function which helps in decrypting latitude or longitude.
            </summary>
            <param name="keyParty">The key party for the data.</param>
            <param name="algorithmId">The algorithm ID to use for encryption.</param>
            <param name="keyVersion">The key version for the data.</param>
            <param name="base64EncodedIV">The initialization vector as a base-64 encoded string.</param>
            <param name="base64EncodedEncryptedLatLong">The encrypted value.</param>
            <returns>The decrypted longitude, or <see cref="F:System.String.Empty"/> if decryption fails or the value is out of range.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.KeyDecryptor">
            <summary>
            Base Class for decrypting keys
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyDecryptor.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.KeyDecryptor"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyDecryptor.Schema">
            <summary>
            Gets the schema of the <see cref="T:Microsoft.BI.Common.KeyDecryptor"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.KeyDecryptor._keyStore">
            <summary>
            Key storage.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyDecryptor.KeyStore">
            <summary>
            Key storage.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.KeyDecryptor.#ctor">
            <summary>
            Initializes a new instance of the KeyDecryptor.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.KeyDecryptor.#ctor(Microsoft.BI.Common.CryptoUtils.AesEncryptionKeyStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.KeyDecryptor"/> class using the specified store.
            </summary>
            <param name="keyStore">An AesEncryptionKeyStorage key store containing keys information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyStore"/> is <c>null</c></exception>
        </member>
        <member name="M:Microsoft.BI.Common.KeyDecryptor.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the the <see cref="T:Microsoft.BI.Common.KeyDecryptor"/> class using the specified store stream.
            </summary>
            <param name="stream">A stream containing key store information.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyDecryptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.BI.Common.KeyDecryptor"/> class using the specified key file
            </summary>
            <param name="filename">A file containing key store information.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyDecryptor.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Load the keys in to the Key storage.
            </summary>
            <param name="reader">IDataReader to read the keys.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyDecryptor.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            Adds the data from an object array into the <see cref="T:Microsoft.BI.Common.KeyDecryptor"/>.
            </summary>
            <param name="row">The objects to be loaded into the lookup.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyDecryptor.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider">
            <summary>
            A <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> subclass that formats data as it would appear in C# code.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider"/> class.
            </summary>
            <param name="importedNamespaces">An optional collection of imported namespaces to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_BOOL(System.Object)">
            <summary>
            Formats a <see cref="T:System.Boolean"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>The default behavior of <see cref="M:System.Boolean.ToString"/> returns "True" and "False"; this method returns
            "true" and "false", respectively.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_BYTES(System.Object)">
            <summary>
            Formats a byte array as a string.
            </summary>
            <param name="value">The byte array to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a new byte array expression with element initializer values for each byte in the original array.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_CY(System.Object)">
            <summary>
            Formats a <see cref="T:System.Decimal"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a decimal literal with an 'M' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DATE(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DBDATE(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DBTIME(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DBTIME2(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DBTIMESTAMP(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DBTIMESTAMP2(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DBTIMESTAMPOFFSET(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_FILETIME(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a DateTime object using the <see cref="M:System.DateTime.FromBinary(System.Int64)"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_DECIMAL(System.Object)">
            <summary>
            Formats a <see cref="T:System.Decimal"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a decimal.</returns>
            <remarks>This method produces a decimal literal with an 'M' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_I1(System.Object)">
            <summary>
            Formats a <see cref="T:System.SByte"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces an integer literal with a sbyte cast.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_I2(System.Object)">
            <summary>
            Formats an <see cref="T:System.Int16"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces an integer literal with a short cast.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_I8(System.Object)">
            <summary>
            Formats an <see cref="T:System.Int64"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces an integer literal with an 'L' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_GUID(System.Object)">
            <summary>
            Formats a <see cref="T:System.Guid"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces a new Guid expression based on the <see cref="M:System.Guid.ToString"/> method.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_NUMERIC(System.Object)">
            <summary>
            Formats a <see cref="T:System.Decimal"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a decimal.</returns>
            <remarks>This method produces a decimal literal with an 'M' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_R4(System.Object)">
            <summary>
            Formats a <see cref="T:System.Single"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a float.</returns>
            <remarks>This method produces a float literal with an 'F' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_R8(System.Object)">
            <summary>
            Formats a <see cref="T:System.Double"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a double.</returns>
            <remarks>This method produces a double literal with a 'D' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_STR(System.Object)">
            <summary>
            Formats a <see cref="T:System.String"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a string literal prefixed by '@'.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_UI1(System.Object)">
            <summary>
            Formats an <see cref="T:System.Byte"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces an integer literal with a byte cast.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_UI2(System.Object)">
            <summary>
            Formats an <see cref="T:System.UInt16"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces an integer literal with a ushort cast.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_UI4(System.Object)">
            <summary>
            Formats a <see cref="T:System.UInt32"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces an integer literal with an 'U' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_UI8(System.Object)">
            <summary>
            Formats a <see cref="T:System.UInt64"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This produces an integer literal with an 'UL' suffix.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_DT_WSTR(System.Object)">
            <summary>
            Formats a <see cref="T:System.String"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a string literal prefixed by '@'.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharpCodeDataTypeFormatProvider.Format_ATTR_COLLECTION(System.Object,Microsoft.BI.Common.DataType,Microsoft.BI.Common.DataTypeFormatter)">
            <summary>
            Formats a <see cref="T:System.Collections.ICollection"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Collections.ICollection"/> object to format.</param>
            <param name="type">The <see cref="T:Microsoft.BI.Common.DataType"/> of the elements in <paramref name="value"/>.</param>
            <param name="formatter">The <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> to use when formatting each item.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>This method produces a collection with an element initializer for each element in the collection.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.AssemblyViewer">
            <summary>
            Provides a way to get the type names from an assembly when not all assembly dependencies
            are available.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.AssemblyViewer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.AssemblyViewer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.AssemblyViewer.GetTypes(System.String)">
            <summary>
            Gets an enumerable collection of the type names in an assembly.
            </summary>
            <param name="assemblyFile">The absolute path to the assembly to load.</param>
            <returns>An enumerable collection of the type names in an assembly.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.AssemblyViewer.GetExportedTypes(System.String)">
            <summary>
            Gets an enumerable collection of the type names in an assembly.
            </summary>
            <param name="assemblyFile">The absolute path to the assembly to load.</param>
            <returns>An enumerable collection of the type names in an assembly.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.AssemblyViewer.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            An event handler for <see cref="E:System.AppDomain.AssemblyResolve"/> that handles loading a mock dynamic
            assembly for all missing dependencies.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments to the event.</param>
            <returns>A mock dynamic assembly that serves as a proxy to a missing assembly.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.AssemblyViewer.GenerateMockType(System.String,System.String)">
            <summary>
            Generates a mock type that serves as a proxy for a missing type.
            </summary>
            <param name="assemblyFile">The absolute path to the assembly.</param>
            <param name="typeName">The name of the type.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.AssemblyViewer.LoadAssemblyForViewFrom(System.String)">
            <summary>
            Loads an assembly for viewing.
            </summary>
            <param name="assemblyFile">The absolute path to the assembly to load.</param>
            <returns>An <see cref="T:System.Reflection.Assembly"/>.</returns>
            <remarks>
            If any dependency for <paramref name="assemblyFile"/> is missing, the <see cref="T:Microsoft.BI.Common.CSharp.AssemblyViewer"/> will
            generate a mock assembly that acts as a proxy for the missing type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.ActivationRecord">
            <summary>
            Represents a single element in a call stack, contains information such as current local variables,
            method arguments, and return address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.ActivationRecord.ReturnValue">
            <summary>
            Gets or sets the returned value from a method call.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.ActivationRecord.ReturnAddress">
            <summary>
            Gets the "address" of the next statement to execute after the execution of the method or subroutine finishes.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.ActivationRecord.Scope">
            <summary>
            Gets the set of variables and values that are in scope in this activation record.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.ActivationRecord.Labels">
            <summary>
            Gets the set of labels that are in scope in this activation record.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.ActivationRecord.ThisPointer">
            <summary>
            Gets a pointer to &lt;this&gt; for members of instanced classes.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.ActivationRecord.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.ActivationRecord"/> class.
            </summary>
            <param name="returnAddress">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to run once this subroutine finishes.</param>
            <param name="thisPointer">A pointer to the current instance, for instance methods.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.ActivationRecord.#ctor(Microsoft.BI.Common.CodeDom.CodeStatement,System.Object,System.Collections.Generic.IDictionary{System.String,Microsoft.BI.Common.CSharp.VariableContext})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.ActivationRecord"/> class.
            </summary>
            <param name="returnAddress">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to run once this subroutine finishes.</param>
            <param name="thisPointer">A pointer to the current instance, for instance methods.</param>
            <param name="arguments">A dictionary of argument names and values passed to the subroutine.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CodeDomExtensions">
            <summary>
            Extension methods to CodeDom classes for parsing CSharp.  This class is not inheritable.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CodeDomExtensions.GetLocation(Microsoft.BI.Common.CodeDom.CodeObject)">
            <summary>
            Gets the location of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObject"/>.
            </summary>
            <param name="o">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeObject"/> to get the location of.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object representing the location.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CodeDomExtensions.SetLocation(Microsoft.BI.Common.CodeDom.CodeObject,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Sets the location of the <see cref="T:Microsoft.BI.Common.CodeDom.CodeObject"/>.
            </summary>
            <param name="o">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeObject"/> to set the location of.</param>
            <param name="location">An <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object representing the location.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CodeErrorExpression">
            <summary>
            Represents a code expression with an error in it.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CodeErrorExpression.Error">
            <summary>
            Gets or sets the message associated with the parse error.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CodeErrorExpression.#ctor(Microsoft.BI.Common.Parsing.ParseError)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.CodeErrorExpression"/> class using the specified parameters.
            </summary>
            <param name="error">The message for the error.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.Errors.CompilationError">
            <summary>
            Base class for all exceptions thrown when evaluating code in a code dom tree with a <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.Errors.CompilationError.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> class.
            </summary>
            <param name="message">The message to associate with this error.</param>
            <param name="isWarning">Whether the error represents a warning or an error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.Errors.CompilationError.#ctor(System.String,Microsoft.BI.Common.Parsing.ICodeLocation,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> class.
            </summary>
            <param name="message">The message to associate with this error.</param>
            <param name="errorLocation">An <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/> instance representing the location of the error.</param>
            <param name="isWarning">Whether the error represents a warning or an error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.Errors.CompilationError.#ctor(System.String,Microsoft.BI.Common.Parsing.ICodeLocation,Microsoft.BI.Common.Parsing.ICodeLocation,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> class.
            </summary>
            <param name="message">The message to associate with this error.</param>
            <param name="location">An <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/> representing the full span of the statement or expression containing the error.</param>
            <param name="errorLocation">An <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/> instance representing the location of the error within <paramref name="location"/>.</param>
            <param name="isWarning">Whether the error represents a warning or an error.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator">
            <summary>
            Implementation of <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator"/> for C#.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Errors">
            <summary>
            Gets a list of compilation errors for the last call to any Evaluate or TypeCheck overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Warnings">
            <summary>
            Gets a list of compilation warnings for the last call to any Evaluate or TypeCheck overload.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.ImportedNamespaces">
            <summary>
            Gets the collection of namespaces that will be imported when evaluating expressions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.CurrentScope">
            <summary>
            Gets a dictionary containing the names and values of the variables in the current context.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Options">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.CodeDom.CodeEvaluatorOptions"/> used when evaluating expressions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Context">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> representing the current scope of the
            <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.ThisScope">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> representing the 'this' scope of the
            <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.LocalScope">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> representing the local scope of the
            <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.NextJump">
            <summary>
            Represents the next jump action to be taken by the evaluator.
            </summary>
            <remarks>This will likely be expanded on later.</remarks>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.CanRethrow">
            <summary>
            Returns a value indicating whether a parameterless <c>throw</c> statement is allowed in the current scope.
            </summary>
            <remarks>This won't work once we can support evaluating methods and the like - you can only throw within
            the contents of a given method call.  In that case, we'll probably have to make this a stack also.</remarks>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.PendingException">
            <summary>
            Returns the pending <see cref="T:System.Exception"/>, if any.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.LocalLabels">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> representing the current labels in scope for the
            <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BreakLevel">
            <summary>
            Represents the number of breakable statements we have seen so far.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Globals">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> representing the variables in the global
            scope of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.DefaultCheckingContext">
            <summary>
            Gets the current <see cref="T:Microsoft.BI.Common.CodeDom.CheckingContext"/> of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.CurrentCheckingContext">
            <summary>
            Gets the default <see cref="T:Microsoft.BI.Common.CodeDom.CheckingContext"/> of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Evaluate(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to evaluate.</param>
            <returns>The result of evaluating <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalEvaluate(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Evaluates a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to evaluate.</param>
            <returns>The result of evaluating <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalEvaluate(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeExpression})">
            <summary>
            Evaluates a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects in sequence..
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects to evaluate.</param>
            <returns>The result of evaluating <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Evaluate(Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Evaluates a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to evaluate.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalEvaluate(Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Evaluates a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to evaluate.</param>
            <returns>An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that can be enumerated to evaluate.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Evaluate(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement})">
            <summary>
            Evaluates a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to evaluate.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalEvaluate(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement})">
            <summary>
            Evaluates a collection of statements, one-by-one, and yields each statement as it is evaluated.
            </summary>
            <param name="e">An enumerable collection of statements to evaluate.</param>
            <returns>An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that were evaluted.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.Evaluate(Microsoft.BI.Common.CodeDom.CodeReference)">
            <summary>
            Evaluates a <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> to evaluate.</param>
            <returns>The result of evaluating <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheck(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to type check.</param>
            <returns>The type of the expression specified by <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalTypeCheck(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,System.Boolean)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to type check.</param>
            <param name="type">On a successful type check, this will contain the result of the type check.</param>
            <param name="enforceConstraints">Whether to throw an exception on a failed type check.</param>
            <returns>The type of the expression specified by <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheck(Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to type check.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalTypeCheck(Microsoft.BI.Common.CodeDom.CodeStatement,System.Boolean)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to type check.</param>
            <param name="enforceConstraints">Whether to throw an exception on a failed type check.</param>
            <returns><c>true</c> if type checking was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheck(Microsoft.BI.Common.CodeDom.CodeReference)">
            <summary>
            Performs type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> to type check.</param>
            <returns>The type of the reference specified by <paramref name="e"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.GetStatementEvaluator(Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be enumerated in order to evaluate statements
            and sub-statements one-by-one.
            </summary>
            <param name="statement">The statement to evaluate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be enumerated to evaluate the statements
            and sub-statements of <paramref name="statement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InitializeTypeCheck">
            <summary>
            Initializes the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/> for type checking.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.FinalizeTypeCheck">
            <summary>
            Throws any exceptions encountered by the evaluator after type checking.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InitializeEvaluate">
            <summary>
            Initializes the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/> for evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.FinalizeEvaluate">
            <summary>
            Throws any exceptions encountered by the evaluator after evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EnforceConstraints">
            <summary>
            Throws any pending errors.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.PushScope(System.Boolean)">
            <summary>
            Pushes a new scope level onto the stack.
            </summary>
            <param name="canBreak"><c>true</c> if this scope can be broken out of with <c>break</c> or <c>continue</c>; otherwise, <c>false.</c></param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.PopScope(System.Boolean)">
            <summary>
            Pops the current scope level from the stack.
            </summary>
            <param name="canBreak"><c>true</c> if this scope can be broken out of with <c>break</c> or <c>continue</c>; otherwise, <c>false.</c></param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.GetExpressionType(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@)">
            <summary>
            Gets the type of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="o">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to get the type of.</param>
            <param name="type">If the expression has a type set, this will contain that type.</param>
            <returns>true if the expression had a type pre-set; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.SetExpressionType(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult)">
            <summary>
            Sets the type of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="o">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> to set the type of.</param>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult"/> of the code expression.</param>
            <remarks>Setting this value will cause the code expression to skip type checking.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.GetStatementCheckResult(Microsoft.BI.Common.CodeDom.CodeStatement,System.Boolean@)">
            <summary>
            Gets the type check result of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="o">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to get the check result of.</param>
            <param name="success">If the statement has previously been type checked, this will contain the result.</param>
            <returns>true if the statement has already been type checked; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.SetStatementCheckResult(Microsoft.BI.Common.CodeDom.CodeStatement,System.Boolean)">
            <summary>
            Sets the type of a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="o">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> to set the check result of.</param>
            <param name="success">Whether type checking was successful on the statement.</param>
            <remarks>Setting this value will cause the code statement to skip type checking.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalTypeCheckExpressionList(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeExpression},System.Collections.Generic.List{Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult}@)">
            <summary>
            Performs type checking on a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects..
            </summary>
            <param name="expressions">A collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects to type check.</param>
            <param name="result">On a successful type check, this will contain the result of type checking each individual expression.</param>
            <returns>true if type checking succeeded for each <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> in <paramref name="expressions"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InternalTypeCheckStatementList(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement})">
            <summary>
            Performs type checking on a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="statements">A collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects to type check.</param>
            <returns>true if type checking succeeded for each <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> in <paramref name="statements"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckInitializer(Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression,System.Type,System.Int32,System.Collections.Generic.List{System.Int64},System.Int32)">
            <summary>
            Performs recursive type checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> and all sub-expressions.
            </summary>
            <param name="initializer">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> to typecheck.</param>
            <param name="expectedType">The expected type of the elements in the initializer.</param>
            <param name="depth">The current depth in the initializer.</param>
            <param name="expectedCounts">A list of expected counts per level in the initializer.</param>
            <param name="expectedRank">The expected rank of the initializer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayCreateExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.GetDimensionsFromSize(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeExpression})">
            <summary>
            Gets the size of each dimension from a collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects.
            </summary>
            <param name="sizes">The collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects describing the array dimensions.</param>
            <returns>A list of the sizes of each dimension.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.GetDimensionsFromInitializer(System.Collections.Generic.List{System.Int64},System.Int32,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Gets the size of each dimension from a <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/>
            </summary>
            <param name="dimensions">The list of dimension lengths.</param>
            <param name="depth">The current depth in the initializer expression.</param>
            <param name="arrayInitializer">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> to check.</param>
            <returns>A list of dimension lengths up to and including the current depth.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.CheckInitializer(System.Int32,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Checks a <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> to ensure it matches the expected rank.
            </summary>
            <param name="rank">The expected rank of the initializer.</param>
            <param name="arrayInitializer">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> to check.</param>
            <returns><c>true</c> if the rank of the initializer matches <paramref name="rank"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.InitializeArray(System.Array,System.Collections.Generic.List{System.Int32},System.Int32,Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Populates the contents of an <see cref="T:System.Array"/> with the values in the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/>.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> instance to populate.</param>
            <param name="indices">The current array index.</param>
            <param name="depth">The current depth in the initializer.</param>
            <param name="arrayInitializer">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> to populate <paramref name="array"/> with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayIndexerExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeArrayInitializerExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeAsExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
            <remarks>This method stores the original expression type in <see cref="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.BaseType"/>.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeAsExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeAsExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeAssignExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeAssignExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.AssignImpl(Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult,System.Object)">
            <summary>
            Assigns the specified object to the <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/>'s value.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/> to assign to.</param>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult"/> from type checking.</param>
            <param name="o">The value to assign.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.AssignImpl(Microsoft.BI.Common.CodeDom.CodeReferenceExpression,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult,System.Object)">
            <summary>
            Assigns the specified object to the <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/>'s value.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/> to assign to.</param>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult"/> from type checking.</param>
            <param name="o">The value to assign.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckBinaryExpression(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType,Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Performs type checking on a two <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> objects using the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/>.
            </summary>
            <param name="left">The expression on the left side of the operator.</param>
            <param name="op">The operator.</param>
            <param name="right">The expression on the right side of the operator.</param>
            <param name="location">The location of the expression in the code.</param>
            <returns>The result of the type check.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeCastExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeCastExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeCheckedExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeCheckedExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeCheckedExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeConditionalExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionalExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionalExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeConditionalExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionalExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionalExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeDefaultValueExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CSharp.CodeErrorExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CSharp.CodeErrorExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CSharp.CodeErrorExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CSharp.CodeErrorExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CSharp.CodeErrorExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CSharp.CodeErrorExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeIncrementExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeIncrementExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeIndexerExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIndexerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeCastExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeIndexerExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIndexerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIndexerExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeIsExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
            <remarks>This method stores the original expression type in <see cref="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.NestedType"/> and the target cast
            type in <see cref="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.BaseType"/>.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeIsExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIsExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberInitializerExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReferenceExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodInvokeExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeObjectCreateExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeParameterReferenceExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeParenthizedExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeParenthizedExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeParenthizedExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodePrimitiveExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodePrimitiveExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodePrimitiveExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeReferenceExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeReferenceExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReferenceExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeSizeOfExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
            <remarks>This method saves the original type in <see cref="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.BaseType"/>.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeSizeOfExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeSizeOfExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeTypeOfExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
            <remarks>This method saves the original type in <see cref="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.BaseType"/>.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeTypeOfExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeOfExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeUncheckedExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeUncheckedExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUncheckedExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/> to type check.</param>
            <returns>The type of the expression.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableReferenceExpression"/> to evaluate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluteImpl(Microsoft.BI.Common.CodeDom.CodeBlockStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBlockStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeBreakStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBreakStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBreakStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeBreakStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBreakStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBreakStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeConditionStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeConditionStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConditionStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeContinueStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeContinueStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeContinueStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeContinueStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeContinueStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeContinueStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeDoWhileIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeExpressionStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeExpressionStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpressionStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeForEachIterationStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeGotoStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeGotoStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeGotoStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeIterationStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeIterationStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIterationStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeLabeledStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeLabeledStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeLabeledStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeLockStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeLockStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeLockStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeLockStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeLockStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeSwitchStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.IsJumpStatement(Microsoft.BI.Common.CodeDom.CodeStatement)">
            <summary>
            Returns whether the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> is a jump statement.
            </summary>
            <param name="s">The statement to check.</param>
            <returns>true if the statement is a jump statement; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.ValidateSwitchType(System.Type)">
            <summary>
            Returns whether the specified type is a valid case clause type.
            </summary>
            <param name="type">The type to validate.</param>
            <returns>true if the type can be used in a case clause; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeSwitchStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeSwitchStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeThrowExceptionStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTryCatchFinallyStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeUsingStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeUsingStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUsingStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.IsConstant(Microsoft.BI.Common.CodeDom.CodeExpression)">
            <summary>
            Returns whether an expression represents a constant value or not.
            </summary>
            <param name="expression">The expression to check.</param>
            <returns>true if the expression is constant; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeVariableDeclarationStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckImpl(Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement)">
            <summary>
            Performs type checking on the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement"/> to type check.</param>
            <returns>Whether type checking succeeded.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.EvaluateImpl(Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement)">
            <summary>
            Evaluates the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeWhileIterationStatement"/> to evaluate.</param>
            <returns>An enumerable collection of statements in <paramref name="e"/> that are evaluated
            as the enumerable is enumerated.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult">
            <summary>
            Class that contains the result of a call to <see cref="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheck(Microsoft.BI.Common.CodeDom.CodeExpression)"/> or other overloads.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.BaseType">
            <summary>
            Gets or sets the base type of the type check result.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.NestedType">
            <summary>
            Gets or sets the type of the nested type of the type check result for type check results that represent nested types.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.ReturnType">
            <summary>
            Gets or sets the return type for type check results that represent members that return values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.Constructor">
            <summary>
            Gets or sets a <see cref="T:System.Reflection.ConstructorInfo"/> representing the constructor found by the type check.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.Field">
            <summary>
            Gets or sets a <see cref="T:System.Reflection.FieldInfo"/> representing the field found by the type check.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.Method">
            <summary>
            Gets or sets a <see cref="T:System.Reflection.MethodInfo"/> representing the method found by the type check.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.Property">
            <summary>
            Gets or sets a <see cref="T:System.Reflection.PropertyInfo"/> representing the property found by the type check.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.Context">
            <summary>
            Gets or sets a <see cref="T:Microsoft.BI.Common.CSharp.TypeContext"/> representing the context of the type check.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.State">
            <summary>
            Allows a typecheck result to store additional state.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.ToString">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult"/> represented as a string.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult"/> represented as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult.Clone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult"/>.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeBinder">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeBinder"/> used to resolve types.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BindField(Microsoft.BI.Common.CodeDom.CodeFieldReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,System.Boolean)">
            <summary>
            Attempts to bind the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> to a method.  Adds the appropriate
            <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list if binding fails or the matching member
            is not a field.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeFieldReference"/> on which to perform binding.</param>
            <param name="result">Contains the result of the bind, or null if binding failed.</param>
            <param name="resolveOnly">Whether to only resolve the member and to skip context, static, and readability checks or not.</param>
            <returns>true if typechecking succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BindProperty(Microsoft.BI.Common.CodeDom.CodePropertyReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,System.Boolean)">
            <summary>
            Attempts to bind the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> to a method.  Adds the appropriate
            <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list if binding fails or the matching member
            is not a property.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodePropertyReference"/> on which to perform binding.</param>
            <param name="result">Contains the result of the bind, or null if binding failed.</param>
            <param name="resolveOnly">Whether to only resolve the member and to skip context, static, and readability checks or not.</param>
            <returns>true if typechecking succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BindMethod(Microsoft.BI.Common.CodeDom.CodeMethodReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,System.Boolean)">
            <summary>
            Attempts to bind the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> to a method.  Adds the appropriate
            <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list if binding fails or the matching member
            is not a method.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMethodReference"/> on which to perform binding.</param>
            <param name="result">Contains the result of the bind, or null if binding failed.</param>
            <param name="resolveOnly">Whether to only resolve the member and to skip context, static, and readability checks or not.</param>
            <returns>true if typechecking succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BindType(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,System.Boolean)">
            <summary>
            Attempts to bind the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to a type.  Adds the appropriate
            <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list if binding fails or the matching member
            is not a type.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> on which to perform binding.</param>
            <param name="result">Contains the result of the bind, or null if binding failed.</param>
            <param name="resolveOnly">Whether to only resolve the member and to skip context, static, and readability checks or not.</param>
            <returns>true if typechecking succeeded; otherwise, false.</returns>
            <returns>true if binding succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BindMember(Microsoft.BI.Common.CodeDom.CodeMemberReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,Microsoft.BI.Common.CSharp.TypeContext,System.Boolean)">
            <summary>
            Attempts to bind the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> to a type.  Adds the appropriate
            <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list if binding fails or doesn't match
            the specified context.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> on which to perform binding.</param>
            <param name="result">Contains the result of the bind, or null if binding failed.</param>
            <param name="expectedContext">An optional <see cref="T:Microsoft.BI.Common.CSharp.TypeContext"/> describing the expected context of the member.</param>
            <param name="resolveOnly">Whether to only resolve the member and to skip context, static, and readability checks or not.</param>
            <returns>true if binding succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BindMemberWrite(Microsoft.BI.Common.CodeDom.CodeReferenceExpression,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,Microsoft.BI.Common.CSharp.TypeContext,System.Boolean)">
            <summary>
            Attempts to bind the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> to a type.  Adds the appropriate
            <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list if binding fails or doesn't match
            the specified context.
            </summary>
            <param name="exp">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignExpression"/> on which to perform binding.</param>
            <param name="leftType">Contains the result of typechecking the left expression, or null if binding failed.</param>
            <param name="expectedContext">An optional <see cref="T:Microsoft.BI.Common.CSharp.TypeContext"/> describing the expected context of the member.</param>
            <param name="resolveOnly">Whether to only resolve the member and to skip context, static, and readability checks or not.</param>
            <returns>true if binding succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.BindVariable(Microsoft.BI.Common.CodeDom.CodeReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@)">
            <summary>
            Attempts to bind the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> to a type.  Adds the appropriate
            <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list if binding fails or doesn't match
            the specified context.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeReference"/> on which to perform binding.</param>
            <param name="result">Contains the result of the bind, or null if binding failed.</param>
            <returns>true if binding succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckReference(Microsoft.BI.Common.CodeDom.CodeReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@)">
            <summary>
            Performs type checking on a baseless reference, such as a type or variable name.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> representing the member.</param>
            <param name="type">The result of type check binding.</param>
            <returns>true if binding suceeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckMember(Microsoft.BI.Common.CodeDom.CodeMemberReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,Microsoft.BI.Common.CSharp.TypeContext,System.Boolean)">
            <summary>
            Performs type checking on a (based) member reference, such as a field, property, method, or nested type reference,
            that will be read from.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> representing the member.</param>
            <param name="type">The result of type check binding.</param>
            <param name="expectedContext">The expected context of the member.</param>
            <param name="resolveOnly">Whether to perform semantic checks on the result.</param>
            <returns>true if binding succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckMemberWrite(Microsoft.BI.Common.CodeDom.CodeMemberReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@,Microsoft.BI.Common.CSharp.TypeContext,System.Boolean)">
            <summary>
            Performs type checking on a (based) member reference, such as a field, property, method, or nested type reference,
            that will be assigned to.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> representing the member.</param>
            <param name="type">The result of type check binding.</param>
            <param name="expectedContext">The expected context of the member.</param>
            <param name="resolveOnly">Whether to perform semantic checks on the result.</param>
            <returns>true if binding succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.AddMissingMemberError(Microsoft.BI.Common.CodeDom.CodeMemberReference,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult,Microsoft.BI.Common.CSharp.TypeContext)">
            <summary>
            Adds the appropriate <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> to the error list based on the
            specified expression, type, and context.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> representing the member.</param>
            <param name="type">The result of the type check binding.</param>
            <param name="expectedContext">The expected context for the expression.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.SemanticCheckRead(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.Boolean,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@)">
            <summary>
            Performs semantic checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that will be read from.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> to check.</param>
            <param name="isStatic">Whether the reference indicates a static member.</param>
            <param name="type">The result of the member reference binding.</param>
            <returns>true if the member represents a readable member; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.SemanticCheckWrite(Microsoft.BI.Common.CodeDom.CodeMemberReference,System.Boolean,Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.TypeCheckResult@)">
            <summary>
            Performs semantic checking on a <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> that will be assigned to.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> to check.</param>
            <param name="isStatic">Whether the reference indicates a static member.</param>
            <param name="type">The result of the member reference binding.</param>
            <returns>true if the member represents a writable member; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator.CheckContext(Microsoft.BI.Common.CodeDom.CodeMemberReference,Microsoft.BI.Common.CSharp.TypeContext,Microsoft.BI.Common.CSharp.TypeContext)">
            <summary>
            Checks to ensure the found <see cref="T:Microsoft.BI.Common.CSharp.TypeContext"/> matches the expected <see cref="T:Microsoft.BI.Common.CSharp.TypeContext"/>.
            </summary>
            <param name="e">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeMemberReference"/> being checked.</param>
            <param name="context">The found context, or <see cref="F:Microsoft.BI.Common.CSharp.TypeContext.Unspecified"/> if not specified.</param>
            <param name="expectedContext">The expected context, or <see cref="F:Microsoft.BI.Common.CSharp.TypeContext.Unspecified"/> if not specified.</param>
            <returns>true if both <paramref name="context"/> and <paramref name="expectedContext"/> are not
            <see cref="F:Microsoft.BI.Common.CSharp.TypeContext.Unspecified"/> and are equal; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.JumpState">
            <summary>
            Contains values describing the behavior of a program after completing evaluation of a statement.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.JumpState.None">
            <summary>
            Indicates program execution should continue to the next statement normally.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.JumpState.Return">
            <summary>
            Indicates the program is returning from a subroutine.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.JumpState.Jump">
            <summary>
            Indicates the program should jump to a label.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.JumpState.Break">
            <summary>
            Indicates the program should break out of the current loop or case statement.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.JumpState.Continue">
            <summary>
            Indicates the program should continue to the next iteration of the current loop.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.JumpState.Exception">
            <summary>
            Indicates that an exception has been thrown.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.StatementAddressPointer">
            <summary>
            A class that contains state information after evaluating a statement.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.JumpState">
            <summary>
            The instruction containing the "address" of the next statement to execute.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.Label">
            <summary>
            When <see cref="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.JumpState"/> is <see cref="T:JumpState.Jump"/>, this contains the name
            of the label to jump to.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.Exception">
            <summary>
            When <see cref="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.JumpState"/> is <see cref="T:JumpState.Exception"/>, this contains the
            exception being thrown.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.StatementAddressPointer.#ctor(Microsoft.BI.Common.CSharp.JumpState)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.StatementAddressPointer"/> class with the specified state.
            </summary>
            <param name="state">The <see cref="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.JumpState"/> value of the <see cref="T:Microsoft.BI.Common.CSharp.StatementAddressPointer"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.StatementAddressPointer.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.StatementAddressPointer"/> class referring to the specified label.
            </summary>
            <param name="label">The label of the <see cref="T:Microsoft.BI.Common.CSharp.StatementAddressPointer"/>.</param>
            <remarks>This constructor sets the <see cref="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.JumpState"/> to <see cref="F:Microsoft.BI.Common.CSharp.JumpState.Jump"/>.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.StatementAddressPointer.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.StatementAddressPointer"/> class with the specified exception.
            </summary>
            <param name="exception">The exception that is currently being thrown.</param>
            <remarks>This constructor sets the <see cref="P:Microsoft.BI.Common.CSharp.StatementAddressPointer.JumpState"/> to <see cref="F:Microsoft.BI.Common.CSharp.JumpState.Exception"/>.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.TypeContext">
            <summary>
            Describes the context of a given reference expression.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.TypeContext.Unspecified">
            <summary>
            Default context.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.TypeContext.Field">
            <summary>
            Field reference.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.TypeContext.Method">
            <summary>
            Method reference.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.TypeContext.Property">
            <summary>
            Property reference.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.TypeContext.Type">
            <summary>
            Type reference.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.TypeContext.Namespace">
            <summary>
            Namespace reference.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.TypeContext.Variable">
            <summary>
            Variable reference.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.VariableContext">
            <summary>
            A class that represents a variable with a type and optional value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.VariableContext.Type">
            <summary>
            Gets the type of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.VariableContext.Value">
            <summary>
            Gets or sets the value of the variable.
            </summary>
            <exception cref="T:System.ArgumentException"><see cref="P:Microsoft.BI.Common.CSharp.VariableContext.Type"/> is not nullable but <paramref name="value"/> is null, or
            <paramref name="value"/> is not implicitly castable to <see cref="P:Microsoft.BI.Common.CSharp.VariableContext.Type"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Attempting to access the value before being initialized, or attempting
            to change the value of a constant variable.</exception>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.VariableContext.IsConstant">
            <summary>
            Gets a boolean indicating whether the variable was declared as constant or not.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.VariableContext.IsInitialized">
            <summary>
            Gets a boolean indicating whether the variable has been initialized or not.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.VariableContext.#ctor(System.Type,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.VariableContext"/> class with the specified type and value.
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="value">The initial value to assign to the variable.</param>
            <param name="isConstant">A boolean indicating whether the variable represents a constant value or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is <c>null</c> and <paramref name="type"/> is not a nullable type, or
            <paramref name="value"/> is not implicitly castable to <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.VariableContext.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.VariableContext"/> class with the specified value.
            </summary>
            <param name="value">The initial value to assign to the variable.</param>
            <param name="isConstant">A boolean indicating whether the variable represents a constant value or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.VariableContext.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.VariableContext"/> class with the specified type and value.
            </summary>
            <param name="type">The type of the variable.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.VariableContextExtensions">
            <summary>
            Provides extension methods to <see cref="T:IDictionary&lt;K, V&gt;"/> instances that allow addition
            of <see cref="T:Microsoft.BI.Common.CSharp.VariableContext"/> objects by value.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.VariableContextExtensions.Add(System.Collections.Generic.IDictionary{System.String,Microsoft.BI.Common.CSharp.VariableContext},System.String,System.Object)">
            <summary>
            Adds a new value to the current context.
            </summary>
            <param name="dictionary">The current context.</param>
            <param name="key">The name of the variable to add.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpCodeGenerator">
            <summary>
            Implementation of <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator"/> with a few extensions to CodeDom that are not officially
            supported.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromCompileUnit(Microsoft.BI.Common.CodeDom.CodeCompileUnit,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) compile unit and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The compile unit <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromCompileUnit(Microsoft.BI.Common.CodeDom.CodeCompileUnit,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) compile unit and outputs it to the specified text writer.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromExpression(Microsoft.BI.Common.CodeDom.CodeExpression,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) expression and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the expression to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The expression <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromExpression(Microsoft.BI.Common.CodeDom.CodeExpression,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that indicates the expression to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromMember(Microsoft.BI.Common.CodeDom.CodeTypeMember,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) member and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> that indicates the member to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The member <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromMember(Microsoft.BI.Common.CodeDom.CodeTypeMember,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) member and outputs it to the specified text writer.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeMember"/> that indicates the member to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromNamespace(Microsoft.BI.Common.CodeDom.CodeNamespace,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) namespace and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The namespace <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromNamespace(Microsoft.BI.Common.CodeDom.CodeNamespace,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) nanespace and outputs it to the specified text writer.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromStatement(Microsoft.BI.Common.CodeDom.CodeStatement,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statement and returns it as a string.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that indicates the statement to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The statement <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromStatement(Microsoft.BI.Common.CodeDom.CodeStatement,System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that indicates the statement to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromStatements(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement},Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statements and returns it as a string.
            </summary>
            <param name="e">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that indicates the statement to generate code for.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
            <returns>The statements <paramref name="e"/> formatted as C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.GenerateCodeFromStatements(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.CodeDom.CodeStatement},System.IO.TextWriter,Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) statements and outputs it to the specified text writer.
            </summary>
            <param name="e">An enumerable collection of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects that indicates the statement to generate code for.</param>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to output code to.</param>
            <param name="o">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeGenerator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeGenerator.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeGenerator"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.IParserCallback`2">
            <exclude/>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.Callback">
            <exclude/>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.DebugCallback`2">
            <exclude/>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.ParseResultCallback`2">
            <exclude/>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpCodeParser">
            <summary>
            A class that provides parsing of C# code into CodeDom trees.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.Parse(System.String)">
            <summary>
            Parses the specified string into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.Parse(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeCompileUnit"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseExpression(System.String)">
            <summary>
            Parses the specified string as an expression and returns the result.
            </summary>
            <param name="code">The string to parse.</param>
            <returns>The resulting <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseExpression(System.String,Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Parses the specified string as an expression and returns the result.
            </summary>
            <param name="code">The string to parse.</param>
            <param name="offset">An optional offset describing the offset of the expression within the source file.</param>
            <returns>The resulting <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseExpression(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseExpression(System.IO.TextReader,Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <param name="offset">An optional offset describing the offset of the statement within the source file.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeExpression"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatement(System.String)">
            <summary>
            Parses the specified string as a statement and returns the result.
            </summary>
            <param name="code">The string to parse.</param>
            <returns>The resulting <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatement(System.String,Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Parses the specified string as a statement and returns the result.
            </summary>
            <param name="code">The string to parse.</param>
            <param name="offset">An optional offset describing the offset of the statement within the source file.</param>
            <returns>The resulting <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatement(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatement(System.IO.TextReader,Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/>.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <param name="offset">An optional offset describing the offset of the statement within the source file.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatements(System.String)">
            <summary>
            Parses the specified string into an array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatements(System.String,Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Parses the specified string into an array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <param name="offset">An optional offset describing the offset of the statement within the source file.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatements(System.IO.TextReader)">
            <summary>
            Parses the specified text stream into an array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseStatements(System.IO.TextReader,Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Parses the specified text stream into an array of <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> objects.
            </summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that can be used to read the code to be compiled.</param>
            <param name="offset">An optional offset describing the offset of the statement within the source file.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeStatement"/> array that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.ParseType(System.String)">
            <summary>
            Parses the specified text stream into a <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/>.
            </summary>
            <param name="code">A string that contains the code to be compiled.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> that contains a representation of the parsed code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.Lex(System.String)">
            <summary>
            Returns an enumerable collection of strings representing the individual tokens in a piece of C# code.
            </summary>
            <param name="code">A string that contains the code to be lexed.</param>
            <returns>An enumerable collection of strings representing the individual tokens in the C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.Lex(System.IO.TextReader)">
            <summary>
            Returns an enumerable collection of strings representing the individual tokens in a piece of C# code.
            </summary>
            <param name="codeStream">A stream that containst he code to be lexed.</param>
            <returns>An enumerable collection of strings representing the individual tokens in the C# code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeParser.Lex(System.IO.Stream)">
            <summary>
            Returns an enumerable collection of strings representing the individual tokens in a piece of C# code.
            </summary>
            <param name="codeStream">A stream that contains the code to be lexed.</param>
            <returns>An enumerable collection of strings representing the individual tokens in the C# code.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpLexer">
            <summary>
            Summary Canonical example of GPLEX automaton
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpLexer.Buffer">
            <summary>
            The input buffer for this scanner.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.MkBuffCtx">
            <summary>
            This method creates a buffer context record from
            the current buffer object, together with some
            scanner state values. 
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.RestoreBuffCtx(Microsoft.BI.Common.CSharp.CSharpLexer.BufferContext)">
            <summary>
            This method restores the buffer value and allied
            scanner state from the given context record value.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.SetSource(System.String,System.Int32)">
            <summary>
            Create and initialize a StringBuff buffer object for this scanner
            </summary>
            <param name="source">the input string</param>
            <param name="offset">starting offset in the string</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.SetSource(System.Collections.Generic.IList{System.String})">
            <summary>
            Create and initialize a LineBuff buffer object for this scanner
            </summary>
            <param name="source">the list of input strings</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.SetSource(System.IO.Stream)">
            <summary>
            Create and initialize a StreamBuff buffer object for this scanner.
            StreamBuff is buffer for 8-bit byte files.
            </summary>
            <param name="source">the input byte stream</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.SetSource(System.IO.Stream,System.Int32)">
            <summary>
            Create and initialize a TextBuff buffer object for this scanner.
            TextBuff is a buffer for encoded unicode files.
            </summary>
            <param name="source">the input text file</param>
            <param name="fallbackCodePage">Code page to use if file has
            no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.yyless(System.Int32)">
            <summary>
            Discards all but the first "n" codepoints in the recognized pattern.
            Resets the buffer position so that only n codepoints have been consumed;
            yytext is also re-evaluated. 
            </summary>
            <param name="n">The number of codepoints to consume</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer._yytrunc(System.Int32)">
            <summary>
            Removes the last "n" code points from the pattern.
            </summary>
            <param name="n">The number to remove</param>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpLexer.yyleng">
            <summary>
            The length of the pattern in codepoints (not the same as 
            string-length if the pattern contains any surrogate pairs).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.Parser">
            <summary>
            A pointer back to the parser.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.LastToken">
            <summary>
            The last <see cref="T:Microsoft.BI.Common.Parsing.Token`1"/> the lexer parsed.  Primarily used for hooking tokens up to each other,
            but also used in DoLookahead_QUESTION.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.Whitespace">
            <summary>
            Contains the current whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.CurrentString">
            <summary>
            Contains the current string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.StringStart">
            <summary>
            The location of the start of the current string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.CommentStart">
            <summary>
            The location of the start of the current comment.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.LessThanCount">
            <summary>
            Contains the current number of '&lt;' tokens; used in the RIGHTSHIFTLOOKAHEAD state.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.PendingPosition">
            <summary>
            For strings, the default lexing behavior for setting position to the last token does't work well.
            Setting PendingPosition will cause the next call to Scan() to set the position to the position specified
            instead of the default behavior.  This should generally be used to merge the beginning of the string with
            the final quote mark to get the right final position.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLexer.SuppressLookahead">
            <summary>
            When enabled, all Lookahead_*() methods will be ignored.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.EscapeString(System.String,System.Int32,System.Int32)">
            <summary>
            Takes a string and changes all characters to their escaped versions.
            </summary>
            <param name="s">The string to escape.</param>
            <param name="skipLeft">The number of character to automatically append on the left.</param>
            <param name="skipRight">The number of character to automatically append on the right.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLexer.SetSource(System.IO.TextReader)">
            <summary>
            Create and initialize a StreamBuff buffer object for this scanner.
            StreamBuff is buffer for 8-bit byte files.
            </summary>
            <param name="source">The input byte stream.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpLexer.LexerState">
            <summary>
            Stores current lexer state, allowing it to be restored from an arbitrary future position.
            Used for performing parser-based lookaheads.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeLexer.MapTokenToTypeToken(System.Int32)">
            <summary>
            Map <see cref="T:Microsoft.BI.Common.CSharp.Tokens"/> to <see cref="T:Microsoft.BI.Common.CSharp.TypeTokens"/>.
            </summary>
            <param name="token">The <see cref="T:Microsoft.BI.Common.CSharp.Tokens"/> to get the mapping for.</param>
            <returns>The equivalent <see cref="T:Microsoft.BI.Common.CSharp.TypeTokens"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpParser.DoLookahead_LESSTHAN(Microsoft.BI.Common.CSharp.CSharpLexer)">
            <summary>
            Does lookahead on the LESSTHAN token to resolve the very complicated relational_expression vs
            type_argument_list conflict.
            </summary>
            <param name="scanner">The lexer.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpValueType">
            <summary>
            The value type used by the C# parser.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpCodeProvider">
            <summary>
            Provides access to instances of the extended C# code generator and code compilier.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeProvider.GeneratorOptions">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.CodeGeneratorOptions"/> used by the code generator in this instance.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpCodeProvider.FileExtension">
            <summary>
            Gets the default file name extension to use for source code files in C#.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeProvider"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeProvider.CreateGenerator">
            <summary>
            Creates a new code generator.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeGenerator"/> that can be used to generate <see cref="N:Microsoft.BI.Common.CodeDom"/>-based source code
            representations.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeProvider.CreateCompiler">
            <summary>
            Creates a new code compiler.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeCompiler"/> that can be used for compilation of <see cref="N:Microsoft.BI.Common.CodeDom"/>-based source code
            representations.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeProvider.CreateParser">
            <summary>
            Creates a new code parser.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser"/> that can be used to parse text into <see cref="N:Microsoft.BI.Common.CodeDom"/>-based source code
            representations.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeProvider.CreateEvaluator">
            <summary>
            Creates a new code evaluator.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeEvaluator"/> that can be used to evaluate <see cref="N:Microsoft.BI.Common.CodeDom"/>-based source code representations
            at runtime.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeProvider.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpCodeProvider.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeProvider"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpLanguageInfo">
            <summary>
            Contains language-specific information about C#.  This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsBuiltinType(System.Type)">
            <summary>
            Returns whether <paramref name="t"/> represents a builtin type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to check.</param>
            <returns>true if <paramref name="t"/> is a builtin type; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsBuiltinType(System.String)">
            <summary>
            Returns whether <paramref name="typeName"/> represents the full name of a builtin type.
            </summary>
            <param name="typeName">The full name of a type to check.</param>
            <returns>true if <paramref name="typeName"/> is the name of a builtin type; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsNumericType(System.Type)">
            <summary>
            Returns whether <paramref name="t"/> represents a numeric type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to check.</param>
            <returns>true if <paramref name="t"/> is a numeric type; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsIntegralType(System.Type)">
            <summary>
            Returns whether <paramref name="t"/> represents a numeric type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to check.</param>
            <returns>true if <paramref name="t"/> is a numeric type; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsNullable(System.Type)">
            <summary>
            Returns whether <paramref name="t"/> represents a nullable type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to check.</param>
            <returns>true if <paramref name="t"/> can be nulled; otherwise, false.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._BuiltinTypes">
            <summary>
            Collection of all C# builtin types.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._BuiltinTypeNames">
            <summary>
            Collection of all C# builtin type names.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._NumericTypes">
            <summary>
            Collection of all C# numeric types.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._IntegralTypes">
            <summary>
            Collection of all C# integral types.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsKeyword(System.String)">
            <summary>
            Gets whether a given string is a reserved C# keyword.
            </summary>
            <param name="s">The string to check.</param>
            <returns>true if the string is an reserved keyword; otherwise, false.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._Keywords">
            <summary>
            Contains a collection of all known C# identifiers.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetTypeName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets the name of a type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the formatted name of.</param>
            <param name="usePrimitiveNames">Whether to use primitive names ("int") instead of full type names ("System.Int32").</param>
            <param name="fullName">Whether to use the full type name.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetTypeName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the name of a type.
            </summary>
            <param name="type">The name of the type to get the formatted name of.</param>
            <param name="usePrimitiveNames">Whether to use primitive names ("int") instead of full type names ("System.Int32").</param>
            <param name="fullName">Whether to use the full type name.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetTypeName(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.Boolean,System.Boolean)">
            <summary>
            Gets the name of a type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to get the name of.</param>
            <param name="usePrimitiveNames">Whether to use primitive names for primitive types.</param>
            <param name="fullName">Whether to return the full type name or just the type name.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetTypeName(System.Type,System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the name of a type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the formatted name of.</param>
            <param name="usePrimitiveNames">Whether to use primitive names ("int") instead of full type names ("System.Int32").</param>
            <param name="importedNamespaces">An optional collection of strings containing the namespaces to include when generating
            type names.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetTypeName(System.String,System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the name of a type.
            </summary>
            <param name="type">The name of the type to get the formatted name of.</param>
            <param name="usePrimitiveNames">Whether to use primitive names ("int") instead of full type names ("System.Int32").</param>
            <param name="importedNamespaces">An optional collection of strings containing the namespaces to include when generating
            type names.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetTypeName(Microsoft.BI.Common.CodeDom.CodeTypeReference,System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the name of a type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to get the name of.</param>
            <param name="usePrimitiveNames">Whether to use primitive names ("int") instead of full type names ("System.Int32").</param>
            <param name="importedNamespaces">An optional collection of strings containing the namespaces to include when generating
            type names with <see cref="F:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes.NamespaceBased"/>.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.InternalGetTypeName(Microsoft.BI.Common.CodeDom.CodeTypeReference,Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the name of a type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeTypeReference"/> to get the name of.</param>
            <param name="flags">A <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes"/> value indicating how the name should be formatted.</param>
            <param name="importedNamespaces">An optional collection of string scontaining the namespaces to include when generating
            type names with <see cref="F:Microsoft.BI.Common.CodeDom.Compiler.TypeNameAttributes.NamespaceBased"/>.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type (the same as would be returned by default&lt;T&gt;).
            </summary>
            <param name="t">The type to get the default of.</param>
            <returns>The default value for the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.HasImplicitCast(System.Object,System.Type)">
            <summary>
            Returns whether <paramref name="o"/> can be implicitly cast to <paramref name="t2"/>.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check.</param>
            <param name="t2">The <see cref="T:System.Type"/> to attempt to cast to.</param>
            <returns>true if <paramref name="o"/> can be implicitly cast as <paramref name="t2"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.HasImplicitCast(System.Type,System.Type[])">
            <summary>
            Returns whether <paramref name="t1"/> can be implicitly cast to any type in <paramref name="t2"/>.
            </summary>
            <param name="t1">The <see cref="T:System.Type"/> to check.</param>
            <param name="t2">An array of <see cref="T:System.Type"/>s to attempt to cast to.</param>
            <returns>true if <paramref name="t1"/> can be implicitly cast as any type in <paramref name="t2"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._HasImplicitCast(System.Type,System.Type)">
            <summary>
            Returns whether <paramref name="t1"/> can be implicitly cast to <paramref name="t2"/>.
            </summary>
            <param name="t1">The <see cref="T:System.Type"/> to check.</param>
            <param name="t2">The <see cref="T:System.Type"/> to attempt to cast to.</param>
            <returns>true if <paramref name="t1"/> can be implicitly cast as <paramref name="t2"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.HasExplicitCast(System.Object,System.Type)">
            <summary>
            Returns whether <paramref name="o"/> can be explicitly cast to <paramref name="t2"/>.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check.</param>
            <param name="t2">The <see cref="T:System.Type"/> to attempt to cast to.</param>
            <returns>true if <paramref name="o"/> can be explicitly cast as <paramref name="t2"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.HasExplicitCast(System.Type,System.Type[])">
            <summary>
            Returns whether <paramref name="t1"/> can be explicitly cast to any type in <paramref name="t2"/>.
            </summary>
            <param name="t1">The <see cref="T:System.Type"/> to check.</param>
            <param name="t2">An array of <see cref="T:System.Type"/>s to attempt to cast to.</param>
            <returns>true if <paramref name="t1"/> can be explicitly cast as any type in <paramref name="t2"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._HasExplicitCast(System.Type,System.Type)">
            <summary>
            Returns whether <paramref name="t1"/> can be explicitly cast to <paramref name="t2"/>.
            </summary>
            <param name="t1">The <see cref="T:System.Type"/> to check.</param>
            <param name="t2">The <see cref="T:System.Type"/> to attempt to cast to.</param>
            <returns>true if <paramref name="t1"/> can be explicitly cast as <paramref name="t2"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetImplicitCastOperator(System.Type,System.Type)">
            <summary>
            Gets the method representing the specified implicit cast.
            </summary>
            <param name="t1">The type to cast from.</param>
            <param name="t2">The type to cast to.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> representing the implicit cast operator, or <c>null</c> if
            no such operator is present on either <paramref name="t1"/> or <paramref name="t2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetExplicitCastOperator(System.Type,System.Type)">
            <summary>
            Gets the method representing the specified explicit cast.
            </summary>
            <param name="t1">The type to cast from.</param>
            <param name="t2">The type to cast to.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> representing the explicit cast operator, or <c>null</c> if
            no such operator is present on either <paramref name="t1"/> or <paramref name="t2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetCastOperator(Microsoft.BI.Common.CodeDom.CodeConversionOperatorType,System.Type,System.Type)">
            <summary>
            Gets the method representing the specified implicit or explicit cast.
            </summary>
            <param name="type">The type of the cast, implicit or explicit.</param>
            <param name="t1">The type to cast from.</param>
            <param name="t2">The type to cast to.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> representing the cast operation, or <c>null</c> if no such
            operator is present on either <paramref name="t1"/> or <paramref name="t2"/>.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._ImplicitCasts">
            <summary>
            Collection of primitive-to-primitive implicit casts.
            </summary>
            <remarks> 
            See library documentation at http://msdn.microsoft.com/en-us/library/y5b434w4.aspx for details.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpLanguageInfo._ExplicitCasts">
            <summary>
            Collection of primitive-to-primitive explicit casts.
            </summary>
            <remarks>
            See library documentation at http://msdn.microsoft.com/en-us/library/yht2cx7b.aspx for details.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperator(Microsoft.BI.Common.CodeDom.CodeAssignOperatorType)">
            <summary>
            Returns the operator for the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType"/>.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType"/> to get the operator of.</param>
            <returns>The operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperator(Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType)">
            <summary>
            Returns the operator for the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/>.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/> to get the operator of.</param>
            <returns>The operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperator(Microsoft.BI.Common.CodeDom.CodeConversionOperatorType)">
            <summary>
            Returns the operator for the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType"/>.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType"/> to get the operator of.</param>
            <returns>The operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperator(Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType)">
            <summary>
            Returns the operator for the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/>.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/> to get the operator of.</param>
            <returns>The operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperator(Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType)">
            <summary>
            Returns the operator for the specified <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType"/>.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType"/> to get the operator of.</param>
            <returns>The operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperatorMethodName(Microsoft.BI.Common.CodeDom.CodeAssignOperatorType)">
            <summary>
            Returns the method name of the special method for the given operator.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType"/> to get the method of.</param>
            <returns>The method name of the given operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperatorMethodName(Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType)">
            <summary>
            Returns the method name of the special method for the given operator.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/> to get the method of.</param>
            <returns>The method name of the given operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperatorMethodName(Microsoft.BI.Common.CodeDom.CodeConversionOperatorType)">
            <summary>
            Returns the method name of the special method for the given operator.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType"/> to get the method of.</param>
            <returns>The method name of the given operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperatorMethodName(Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType)">
            <summary>
            Returns the method name of the special method for the given operator.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType"/> to get the method of.</param>
            <returns>The method name of the given operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.GetOperatorMethodName(Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType)">
            <summary>
            Returns the method name of the special method for the given operator.
            </summary>
            <param name="op">The <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/> to get the method of.</param>
            <returns>The method name of the given operator.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsFixedSizeStruct(System.Type)">
            <summary>
            Returns whether a given type is a struct type containing only fixed-size struct values.
            </summary>
            <param name="t">The type to check.</param>
            <returns>true if the type contains only fixed-size struct values; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.SizeOf(System.Type)">
            <summary>
            Gets the size of a fixed-size struct type.
            </summary>
            <param name="t">The type to get the size of.</param>
            <returns>The size of the type.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="t"/> is not a fixed-size struct.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.InternalSizeOf(System.Type)">
            <summary>
            Gets the size of a type without performing the fixed size check.
            </summary>
            <param name="t">The type to get the size of.</param>
            <returns>The size of the type.</returns>
            <remarks>The type passed to this method should be checked with <see cref="M:Microsoft.BI.Common.CSharp.CSharpLanguageInfo.IsFixedSizeStruct(System.Type)"/> first or the returned value will
            be incorrect.  This method also assumes all enum values are of size 4, which is not always correct.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpTypeBinder">
            <summary>
            Contains functions for resolving types by name and binding members to types by name.  This class cannot
            be inherited.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.Default">
            <summary>
            The default type binder.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.PublicInstanceFlags">
            <summary>
            Contains <see cref="T:System.Reflection.BindingFlags"/> values for resolving publicly-accessible instance members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.PublicStaticFlags">
            <summary>
            Contains <see cref="T:System.Reflection.BindingFlags"/> values for resolving publicly-accessible static members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.NonPublicInstanceFlags">
            <summary>
            Contains <see cref="T:System.Reflection.BindingFlags"/> values for resolving publicly- and privately-accessible instance members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.NonPublicStaticFlags">
            <summary>
            Contains <see cref="T:System.Reflection.BindingFlags"/> values for resolving publicly- and privately-accessible static members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.PublicFlags">
            <summary>
            Contains <see cref="T:System.Reflection.BindingFlags"/> values for resolving publicly-accessible instance and static members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.NonPublicFlags">
            <summary>
            Contains <see cref="T:System.Reflection.BindingFlags"/> values for resolving publicly- and privately-accessible instance and static members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.CSharp.CSharpTypeBinder.NET_VERSION">
            <summary>
            Current .NET version.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpTypeBinder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.LoadDll(System.String)">
            <summary>
            Loads an assembly from the specified path, or the assembly with the given name from the GAC.
            </summary>
            <param name="path">The path to an assembly - or - the name of an assembly in the GAC.</param>
            <returns>The loaded <see cref="T:System.Reflection.Assembly"/> object.</returns>
            <remarks><see cref="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.LoadDll(System.String,System.String@)"/></remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.LoadDll(System.String,System.String@)">
            <summary>
            Loads an assembly from the specified path, or the assembly with the given name from the GAC.
            </summary>
            <param name="path">The path to an assembly - or - the name of an assembly in the GAC.</param>
            <param name="actualPath">The actual path to the assembly that was loaded.  This is primarily used when loading
            assemblies from the GAC.</param>
            <returns>The loaded <see cref="T:System.Reflection.Assembly"/> object.</returns>
            <remarks>
            This method supports two different ways to load assmeblies:
            <list type="table">
              <listheader>
                <term>Type</term>
                <description>Behavior</description>
              </listheader>
              <item>
                <term>Local path</term>
                <description>
                Attempts to load the assembly by file name from the local disk.  In this case, <paramref name="actualPath"/>
                will return the same value as <paramref name="path"/>.
                </description>
              </item>
              <item>
                <term>GAC (Global Assembly Cache)</term>
                <description>
                Attempts to load the assembly by name from the GAC.  In this case, <paramref name="actualPath"/> will be resolved
                to the final path on disk in which the GAC'd DLL resides.
                </description>
              </item>
            </list>
            GAC assembly loading currently only works reliably with builtin .NET assemblies.  It is possible to load others,
            but if the <see cref="P:System.Reflection.AssemblyName.Version"/> is greater than the current .NET version, loading won't work.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.LoadTypes(System.Reflection.Assembly)">
            <summary>
            Load all exported types in an assembly.
            </summary>
            <param name="assembly">The assembly from which to load types.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.AddType(System.Type)">
            <summary>
            Adds a type to the set of loaded types.
            </summary>
            <param name="type">The type to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Searches for a constructor whose parameters match the specified argument types, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <param name="argtypes">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the constructor to get.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor that matches the specified requirements, if
            found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Searches for a constructor whose parameters match the specified argument types, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <param name="arguments">An array of objects representing the arguments of the constructor to get.</param>
            <returns>A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor that matches the specified requirements, if
            found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetNestedType(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            Searches for a nested type on the specified type with the specified name.
            </summary>
            <param name="type">The type in which to search.</param>
            <param name="name">The name of the type to search for.</param>
            <param name="typeParameters">The generic type parameters for the type.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.
            -or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Type"/> object representing the nested type that matches the specified requirements, if found; otherwise,
            null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetField(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for a field on the specified type with the specified name.
            </summary>
            <param name="type">The type in which to search.</param>
            <param name="name">The name of the field to search for.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.
            -or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.FieldInfo"/> object representing the field that matches the specified requirements, if found; otherwise,
            null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for a property on the specified type with the specified name.
            </summary>
            <param name="type">The type in which to search.</param>
            <param name="name">The name of the property to search for.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.
            -or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> object representing the property that matches the specified requirements, if found; otherwise,
            null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetMethod(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            Searches for a method on the specified type with the specified name.
            </summary>
            <param name="type">The type in which to search.</param>
            <param name="name">The name of the method to search for.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for
            the method to get. -or- An empty array of <see cref="T:System.Type"/> objects to get a method that takes no parameters.
            -or- null to ignore method parameters entirely in the search.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.
            -or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the property that matches the specified requirements, if found; otherwise,
            null.</returns>
            <remarks>If <paramref name="types"/> is <c>null</c>, this method will not throw an <see cref="T:System.Reflection.AmbiguousMatchException"/> if two
            or more method are found; it will instead merely return the first one.  Note that this may give the wrong method info if more
            than one match is found.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetMethod(System.Type,System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Searches for the public method on the specified type with the specified name.
            </summary>
            <param name="type">The type in which to search.</param>
            <param name="name">The name of the method to search for.</param>
            <param name="arguments">An array of objects representing the arguments of method to get. -or- An empty array of objects to get a method
            that takes no parameters.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.
            -or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the property that matches the specified requirements, if found; otherwise,
            <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetMethods(System.Type,System.String,System.Type[]@,System.Object[]@,System.String[]@,Microsoft.BI.Common.CSharp.Errors.CompilationError@,System.Reflection.BindingFlags)">
            <summary>
            Gets a list of <see cref="T:System.Reflection.MethodBase"/> objects that match the specified method name and binding flags.
            </summary>
            <param name="type">The type in which to search for the method.</param>
            <param name="methodName">The name of the method to search for.</param>
            <param name="argTypes">A pointer to an array of <see cref="T:System.Type"/> objects representing the types to pass to the method.</param>
            <param name="args">An optional pointer to an array of objects representing the arguments to pass to the method.</param>
            <param name="names">An optional pointer to an array of strings representing the name and order of the parameters passed to the method.</param>
            <param name="error">When this method returns, if no matching methods were found, this will contain a <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/>
            containing information on the failure.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use when searching for methods.</param>
            <returns>A list of <see cref="T:System.Reflection.MethodBase"/> objects that matched the specified name and binding flags.</returns>
            <remarks>
            If no methods are found on <paramref name="type"/>, this method will search for extension methods defined in the current app domain.
            If found, <paramref name="argTypes"/> and <paramref name="args"/> will be modified to reflect the signature of the extension method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.FindBestMatch(System.Collections.Generic.List{System.Reflection.MethodBase},System.Type,System.String,System.Object[]@,System.Type[]@,System.String[],System.Object@,Microsoft.BI.Common.CSharp.Errors.CompilationError@)">
            <summary>
            Attempts to select a single method matching the specified argument types.
            </summary>
            <param name="matches">The collection of matches from which to choose.</param>
            <param name="type">The type containing the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="args">An optional array of arguments passed to the method.</param>
            <param name="argTypes">The types of the arguments.</param>
            <param name="names">An optional array of parameter names specified on the arguments.</param>
            <param name="state">When this method returns, this will contain state about the bind.</param>
            <param name="error">When this method returns, this will contain the reason for a bind failure, if any, or <c>null</c> if the bind was successful.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> containing the matched method, or <c>null</c> if binding failed.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.CreateParamOrder(System.Int32[],System.Reflection.ParameterInfo[],System.String[],System.String@)">
            <summary>
            Creates the mapping between a set of parameters and the specified arguments based on the <paramref name="names"/> array.
            </summary>
            <param name="paramOrder">The array in which the parameter mapping will be stored.</param>
            <param name="parameters">The array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the method's parameters.</param>
            <param name="names">The array of names that were supplied to the method call.</param>
            <param name="missingParameterName">When this method returns, this will contain the name of the first parameter in <paramref name="names"/>
            that was not defined in <paramref name="parameters"/>, if any.</param>
            <returns><c>true</c> if creating the mapping was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            Any parameter that is not explicitly called out in <paramref name="names"/> is assigned to the remaining slots in order.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.DoesArgumentMatchParameter(System.Type,System.Type)">
            <summary>
            Returns a value indicating whether the type of an argument can be implicitly cast to the type of a parameter.
            </summary>
            <param name="parameterType">The type of the parameter.</param>
            <param name="argType">The type of the argument.</param>
            <returns><c>true</c> if <paramref name="argType"/> can be implicitly cast to <paramref name="parameterType"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.IsMatch(System.Reflection.MethodBase,System.Type[],System.Int32[],System.Type@,Microsoft.BI.Common.CSharp.Errors.CompilationError@)">
            <summary>
            Gets a value indicating whether the specified method matches the specified arguments.
            </summary>
            <param name="match">The method to check.</param>
            <param name="argTypes">The type of the arguments.</param>
            <param name="paramOrder">The mapping of the types in <paramref name="argTypes"/> to the parameters in <paramref name="match"/>.</param>
            <param name="paramArrayType">When this method returns, this parameter will contain the type of the <c>params</c> array of
            <paramref name="match"/>, if any.</param>
            <param name="error">A pointer to a <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> indicating the reason for the mismatch, if any.</param>
            <returns><c>true</c> if <paramref name="match"/> matches the specified arguments using the specified mapping; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.IsMatch(System.Reflection.MethodBase,System.Type[],System.Int32[],System.Type,System.String,System.Type@,Microsoft.BI.Common.CSharp.Errors.CompilationError@)">
            <summary>
            Gets a value indicating whether the specified method matches the specified arguments.
            </summary>
            <param name="match">The method to check.</param>
            <param name="argTypes">The type of the arguments.</param>
            <param name="paramOrder">The mapping of the types in <paramref name="argTypes"/> to the parameters in <paramref name="match"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> to use in <paramref name="error"/> when reporting an error.</param>
            <param name="methodName">The name of the method to use in <paramref name="error"/> when reporting an error.</param>
            <param name="paramArrayType">When this method returns, this parameter will contain the type of the <c>params</c> array of
            <paramref name="match"/>, if any.</param>
            <param name="error">A pointer to a <see cref="T:Microsoft.BI.Common.CSharp.Errors.CompilationError"/> indicating the reason for the mismatch, if any.</param>
            <returns><c>true</c> if <paramref name="match"/> matches the specified arguments using the specified mapping; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.ReorderArguments(System.Reflection.ParameterInfo[],System.Object[]@,System.Type[]@,System.Type,System.Int32[],System.Reflection.CallingConventions)">
            <summary>
            Reorders an array of arguments and argument types based on the specified param mapping.
            </summary>
            <param name="parameters">The parameters of the method.</param>
            <param name="args">An optional array of the arguments passed to the method.</param>
            <param name="argTypes">An array of the argument types passed to the method.</param>
            <param name="paramArrayType">The type of the <c>params</c> array of the method, or <c>null</c> if the method has no <c>params</c> parameter.</param>
            <param name="paramOrder">A mapping of the method arguments to the method's parameters.</param>
            <param name="callingConvention">Unused</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetHierarchyDepth(System.Type)">
            <summary>
            Gets the depth of the current type in the object hierarchy.
            </summary>
            <param name="t">The object whose hierarchy depth to get.</param>
            <returns>The depth in the object hierarchy.  Depth is defined as the number of steps away from <see cref="T:System.Object"/> + 1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.CompareMethodSignatureAndName(System.Reflection.MethodBase,System.Reflection.MethodBase)">
            <summary>
            Compares two method signatures for equality.
            </summary>
            <param name="m1">The first method to compare.</param>
            <param name="m2">The second method to compare.</param>
            <returns><c>true</c> if <paramref name="m1"/> and <paramref name="m2"/> have the same method name, number of parameters,
            and parameter types; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.ReorderParams(System.Int32[],System.Object[]@,System.Type[]@)">
            <summary>
            Sorts the <paramref name="args"/> and <paramref name="argTypes"/> arrays into the mapping order stored in
            the <paramref name="paramOrder"/> array.
            </summary>
            <param name="paramOrder">The param order mapping.</param>
            <param name="args">The arguments to reorder.</param>
            <param name="argTypes">The argument types to reorder.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetOperator(System.Type,Microsoft.BI.Common.CodeDom.CodeAssignOperatorType,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Searches for an operator on the specified type, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="operatorType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeAssignOperatorType"/> describing the operator to search for.</param>
            <param name="other">The type of the operand.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method that matches the specified operator, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetOperator(System.Type,Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Searches for an operator on the specified type, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="operatorType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeBinaryOperatorType"/> describing the operator to search for.</param>
            <param name="other">The type of the operand.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method that matches the specified operator, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetOperator(System.Type,Microsoft.BI.Common.CodeDom.CodeConversionOperatorType,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Searches for an operator on the specified type, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="operatorType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeConversionOperatorType"/> describing the operator to search for.</param>
            <param name="other">The type of the operand.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method that matches the specified operator, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetOperator(System.Type,Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType,System.Reflection.BindingFlags)">
            <summary>
            Searches for an operator on the specified type, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="operatorType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeIncrementOperatorType"/> describing the operator to search for.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method that matches the specified operator, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetOperator(System.Type,Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType,System.Reflection.BindingFlags)">
            <summary>
            Searches for an operator on the specified type, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="operatorType">A <see cref="T:Microsoft.BI.Common.CodeDom.CodeUnaryOperatorType"/> describing the operator to search for.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method that matches the specified operator, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetBinaryOperator(System.Type,System.String,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Searches for an operator on the specified type, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="method">The name of the method to search for.</param>
            <param name="other">The type of the operand.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method that matches the specified operator, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetUnaryOperator(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for an operator on the specified type, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="method">The name of the method to search for.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method that matches the specified operator, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetIndexer(System.Type,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Searches for an indexer whose parameters match the specified argument types, using the specified binding constraints.
            </summary>
            <param name="baseType">The <see cref="T:System.Type"/> to search.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <param name="argtypes">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the indexer to get.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> object representing the property that matches the specified requirements, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.NamespaceResolution(System.String)">
            <summary>
            Returns whether the specified namespace exists.
            </summary>
            <param name="ns">The root of the namespace to check.</param>
            <returns><c>true</c> if <paramref name="ns"/> was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeResolution(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the <see cref="T:System.Type"/> with the given name, or null if not found.
            </summary>
            <param name="name">The name of the <see cref="T:System.Type"/> to get.</param>
            <param name="usingDirectives">A collection of namespaces to include when resolving the type.</param>
            <returns>The <see cref="T:System.Type"/> with the given name, or null if no matching types were found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeResolution(System.String,System.Type[],System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the <see cref="T:System.Type"/> with the given name, or null if not found.
            </summary>
            <param name="name">The name of the <see cref="T:System.Type"/> to get.</param>
            <param name="genericArguments">The generic arguments for the type.</param>
            <param name="usingDirectives">Optional enumerable of namespace prefixes to include in type resolution.</param>
            <returns>The <see cref="T:System.Type"/> with the given name, or null if no matching types were found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeResolutionCore(System.String,System.Type[],System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a list of types that match the given name.
            </summary>
            <param name="name">The name of the <see cref="T:System.Type"/> to get.</param>
            <param name="genericArguments">The generic arguments for the type.</param>
            <param name="usingDirectives">Optional enumerable of namespace prefixes to include in type resolution.</param>
            <returns>The list of types that match the specified name.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.MemberResolution(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Searches for the specified member, using the specified binding constraints.
            </summary>
            <param name="type">The type to search.</param>
            <param name="member">The name of the member to search for.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the
            search is conducted.-or- Zero, to return null.</param>
            <param name="argtypes">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the method to get.</param>
            <returns>A <see cref="T:System.Reflection.MemberInfo"/> object representing the member that matches the specified requirements, if found;
            otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetExtensionMethods(System.Type)">
            <summary>
            Finds all extension methods on a given type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> on which to find extension methods.</param>
            <returns>An array of <see cref="T:System.Reflection.MemberInfo"/> object representing the extension methods on the type, if found;
            otherwise, an empty array.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.GetExtensionMethods(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Finds all extension methods on a given type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> on which to find extension methods.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search
            is conducted.-or- Zero, to return an empty array.</param>
            <returns>An array of <see cref="T:System.Reflection.MemberInfo"/> object representing the extension methods on the type, if found;
            otherwise, an empty array.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> for comparing which of two types is closer to the expected type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeComparer.ExpectedType">
            <summary>
            Gets the expected type.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeComparer.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeComparer"/> class.
            </summary>
            <param name="expectedType">The type to compare to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeComparer.Compare(System.Type,System.Type)">
            <summary>
            Determines which of two types is closer to the expected type.
            </summary>
            <param name="x">The first type candidate.</param>
            <param name="y">The second type candidate.</param>
            <returns><c>0</c> if <paramref name="x"/> and <paramref name="y"/> are the same type, <c>-1</c> if <paramref name="x"/> is
            closer to <see cref="P:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeComparer.ExpectedType"/> than <paramref name="y"/>, or <c>1</c> if <paramref name="y"/> is closer to
            <see cref="P:Microsoft.BI.Common.CSharp.CSharpTypeBinder.TypeComparer.ExpectedType"/> than <paramref name="x"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.GenericParameterPseudoType">
            <summary>
            Implementation of abstract <see cref="T:System.Type"/> class that represents a generic parameter.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CSharp.NamespacePseudoType">
            <summary>
            Implementation of abstract <see cref="T:System.Type"/> class that represents a namespace.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.IBatch">
            <summary>
            Defines methods for interacting with a batch, or a collection of operations that are performed in a single
            call to an <see cref="T:Microsoft.BI.Common.DataStore.IDataStore"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IBatch.Abort">
            <summary>
            Aborts all pending batch operations.
            </summary>
            <remarks>
            <para>
            Aborting a batch before it is committed will result in no changes being applied to the store.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IBatch.Commit">
            <summary>
            Commits all pending batch operations.
            </summary>
            <remarks>
            <para>
            If any operation results in an exception, the exception will be propagated to the caller.  Any operations that have
            already completed will not be rolled back, and any pending operations will not be performed.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.IColumnStoreView">
            <summary>
            Not ready for public consumption.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.IDataStore">
            <summary>
            Represents an untyped data store which can be read from and written to.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.DataStore.IDataStore"/> interface represents an untyped data store from which data can be read and to which data
            can be written.  The store supports namespacing, allowing the smae key to be present in the store as long as it has
            a different namespace, and allowing for organization of data by access type (as objects or columns).  The store also
            supports expiring data via TTL.
            </para>
            <para>
            Generally, consumers are not expected to interact with the data store directly via the methods on this interface.
            Instead, they should use <see cref="M:Microsoft.BI.Common.DataStore.IDataStore.CreateKeyValueStoreView``2(System.String)"/> and <see cref="M:Microsoft.BI.Common.DataStore.IDataStore.CreateColumnStoreView(System.String)"/>
            to get a data view which facilitates easier interaction with the store.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.CreateKeyValueStoreView``2(System.String)">
            <summary>
            Creates a view on top of the store that treats a namespace as an object store.
            </summary>
            <typeparam name="TKey">The type of the keys in the object store.</typeparam>
            <typeparam name="TValue">The type of the values in the object store.</typeparam>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2"/> that acts as an object store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.CreateKeyValueStoreView``2(System.String,System.TimeSpan)">
            <summary>
            Creates a view on top of the store that treats a namespace as an object store.
            </summary>
            <typeparam name="TKey">The type of the keys in the object store.</typeparam>
            <typeparam name="TValue">The type of the values in the object store.</typeparam>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <param name="expiry">The default TTL for items added to the data store via the view.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2"/> that acts as an object store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.CreateColumnStoreView(System.String)">
            <summary>
            Creates a view on top of the store that treats a namespace as a column store.
            </summary>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IColumnStoreView"/> that acts as a column store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.CreateColumnStoreView(System.String,System.TimeSpan)">
            <summary>
            Creates a view on top of the store that treats a namespace as a column store.
            </summary>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <param name="expiry">The default TTL for items added to the data store via the view.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IColumnStoreView"/> that acts as a column store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Add(System.String,System.Object,System.Object,System.TimeSpan)">
            <summary>
            Adds an item to the store without overwriting any existing item.
            </summary>
            <param name="nameSpace">The namespace of the key to add.</param>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns><c>true</c> if the value was successfully added; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            <para>
            If the store already contains <paramref name="key"/>, this method will return <c>false</c> and no modifications
            are made to the store.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.AddOrUpdate(System.String,System.Object,System.Object,System.Func{System.Object,System.Object,System.Object},System.TimeSpan)">
            <summary>
            Adds an item to the store if the key does not already exist, or updates an item in the store by using the
            specified function if the key already exists.
            </summary>
            <param name="nameSpace">The namespace of the key to add.</param>
            <param name="key">Thee key to be added or whose value should be updated.</param>
            <param name="value">The value to be added for an absent key.</param>
            <param name="updateFactory">The function used to generate a new value for an existing key based on the key's current value.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The new value for the key.  This will either be <paramref name="value"/> (if the key was absent), or the result of
            <paramref name="updateFactory"/> (if they key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="updateFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.AddOrUpdate(System.String,System.Object,System.Func{System.Object,System.Object},System.Func{System.Object,System.Object,System.Object},System.TimeSpan)">
            <summary>
            Uses the specified functions to add an item to the underlying store if the key does not already exist, or to update an item in
            the store if the key already exists.
            </summary>
            <param name="nameSpace">The namespace of the key to add.</param>
            <param name="key">Thee key to be added or whose value should be updated.</param>
            <param name="valueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateFactory">The function used to generate a new value for an existing key based on the key's current value.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The new value for the key.  This will either be the result of <paramref name="valueFactory"/> (if the key was absent), or the result of
            <paramref name="updateFactory"/> (if they key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>, <paramref name="valueFactory"/>, or <paramref name="updateFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="valueFactory"/> or <paramref name="updateFactory"/> return a value equal to the default value
            for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.BeginBatch">
            <summary>
            Returns an <see cref="T:Microsoft.BI.Common.DataStore.IBatch"/> for running one or more operations in a batch.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.DataStore.IBatch"/> for running one or more operations in a batch.</returns>
            <exception cref="T:System.NotSupportedException">The store implementation does not support batching.</exception>
            <remarks>
            <para>
            A batch is a unit of work performed in the store that contains potentially several operations in a single command.  Unlike a transaction, these
            operations do not necessarily need to be executed according to ACID properties.  Rather, batches provide a way to amoritize the cost of communication
            between the store and the consumer by combining many operations into a single call to and from the store.
            </para>
            <para>
            An implementer that does not support batching should throw a <see cref="T:System.NotSupportedException"/> when this method is called.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.BeginTransaction">
            <summary>
            Begins a store transaction where all operations are committed atomically.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.ITransaction"/> instance for managing the transaction.</returns>
            <exception cref="T:System.NotSupportedException">The store implementation does not support transactions.</exception>
            <remarks>
            <para>
            A transaction is a unit of work performed the store that is treated in a coherent and reliable way independent of other transactions.  Transactions
            are atomic, consistent, isolated, and durable (ACID).  Transactions are "all-or-nothing", meaning that each operation performed in the store must
            either complete in its entirety or have no effect whatsoever.
            </para>
            <para>
            An implementer that does not support transactions should throw a <see cref="T:System.NotSupportedException"/> when this method is called.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Clear">
            <summary>
            Clears the contents of the entire store.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Clear(System.String)">
            <summary>
            Clears the contents of the specified namespace in the store.
            </summary>
            <param name="nameSpace">The namespace to clear.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Contains(System.String,System.Object)">
            <summary>
            Determines whether the store contains the specified key.
            </summary>
            <param name="nameSpace">The namespace of the key to locate.</param>
            <param name="key">The key to locate in the store.</param>
            <returns><c>true</c> if the store contains an element with the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Get(System.String,System.Object)">
            <summary>
            Gets the value of the specified key from the underlying store.
            </summary>
            <param name="nameSpace">The namespace of the key to get.</param>
            <param name="key">The key to locate in the store.</param>
            <returns>The value of the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, this method does not throw an exception.  Instead, it returns the
            default value for the value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.GetCount(System.String)">
            <summary>
            Gets the number of keys in the store.
            </summary>
            <param name="nameSpace">The namespace of the items to count.</param>
            <returns>The number of keys in the store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.GetExpiry(System.String,System.Object)">
            <summary>
            Gets the absolute <see cref="T:System.DateTime"/> value representing when the specified key will expire from the store.
            </summary>
            <param name="nameSpace">The namespace of the item from which to get the expiry.</param>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.DateTime"/> value representing the absolute expiration time of the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.GetKeys(System.String)">
            <summary>
            Gets an enumerable collection of the keys in the store.
            </summary>
            <param name="nameSpace">The namespace of the keys to get.</param>
            <returns>An enumerable collection of the keys in the store.</returns>
            <remarks>
            The enumerable returned by this method is safe to use concurrently with reads and writes to the store; however, it does not represent
            a moment-in-time snapshot of the store.  The contents exposed through the enumerator may contain modifications made to the store
            after the <see cref="M:Microsoft.BI.Common.DataStore.IDataStore.GetKeys(System.String)"/> method was called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.GetOrAdd(System.String,System.Object,System.Object,System.TimeSpan)">
            <summary>
            Adds a key/value pair to the store if the key does not already exist.
            </summary>
            <param name="nameSpace">The namespace of the key to get or add.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The value for the key.  This will either be the existing value for the key if the key already exists in the store, or the new value
            if the key was not in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.GetOrAdd(System.String,System.Object,System.Func{System.Object,System.Object},System.TimeSpan)">
            <summary>
            Adds a key/value pair to the store by using the specified function if the key does not already exist.
            </summary>
            <param name="nameSpace">The namespace of the key to get or add.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The value for the key.  This will either be the existing value for the key if the key already exists in the store, or the new value
            for the key as returned by <paramref name="valueFactory"/> if the key was not in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="valueFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="valueFactory"/> returns a value equal to the default value for the type of objects in
            the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.GetValues(System.String)">
            <summary>
            Gets an enumerable collection of the values in the store.
            </summary>
            <param name="nameSpace">The namespace of the values to get.</param>
            <returns>An enumerable collection of the values in the store.</returns>
            <remarks>
            The enumerable returned by this method is safe to use concurrently with reads and writes to the store; however, it does not represent
            a moment-in-time snapshot of the store.  The contents exposed through the enumerator may contain modifications made to the store
            after the <see cref="M:Microsoft.BI.Common.DataStore.IDataStore.GetValues(System.String)"/> method was called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Remove(System.String,System.Object)">
            <summary>
            Removes a value from the store and returns it.
            </summary>
            <param name="nameSpace">The namespace of the key to remove.</param>
            <param name="key">The key of the element to remove and return.</param>
            <returns>The value that was removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, this method does not throw an exception.  Instead, it returns the
            default value for the value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Replace(System.String,System.Object,System.Object,System.TimeSpan)">
            <summary>
            Set the value of a key in the store and returns the original value.
            </summary>
            <param name="nameSpace">The namespace of the key to replace.</param>
            <param name="key">The key of the element to update.</param>
            <param name="value">The value to be added.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The original value for the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            If <paramref name="key"/> does not exist in the store, this method will return the default value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.Set(System.String,System.Object,System.Object,System.TimeSpan)">
            <summary>
            Sets the value of the specified key.
            </summary>
            <param name="nameSpace">The namespace of the key to set.</param>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to write into the store.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, a new key will be added.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IDataStore.SetExpiry(System.String,System.Object,System.DateTime)">
            <summary>
            Sets the expiration of the specified key.
            </summary>
            <param name="nameSpace">The namespace of the key to set the expiration of.</param>
            <param name="key">The key to set the expiration of.</param>
            <param name="expiration">The absolute time at which the key should expire.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2">
            <summary>
            Represents a non-transactional collection of commands on a store view.
            </summary>
            <typeparam name="TKey">The type of the keys in the store view.</typeparam>
            <typeparam name="TValue">The type of the values in the store view.</typeparam>
            <seealso cref="T:Microsoft.BI.Common.DataStore.ITransaction"/>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Add(`0,`1)">
            <summary>
            Adds a batch operation that, when committed, adds an item to the store without overwriting any existing item.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Add(`0,`1,System.Action{System.Boolean})">
            <summary>
            Adds a batch operation that, when committed, adds an item to the store without overwriting any existing item and
            calls the specified function.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="onAdd">The function to call when the operation is executed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Get(`0)">
            <summary>
            Adds a batch operation that, when committed, gets the value of the specified key from the underyling store.
            </summary>
            <param name="key">The key to locate in the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Get(`0,System.Action{`1})">
            <summary>
            Adds a batch operation that, when committed, gets the value of the specified key from the underyling store and calls
            the specified function.
            </summary>
            <param name="key">The key to locate in the store.</param>
            <param name="onGet">The function to call when the operation is executed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, this method does not throw an exception.  Instead, it returns the
            default value for the value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.GetExpiry(`0)">
            <summary>
            Adds a batch operation that, when committed, gets the absolute <see cref="T:System.DateTime"/> value representing when the specified
            key will expire from the store.
            </summary>
            <param name="key">The key to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.GetExpiry(`0,System.Action{System.DateTime})">
            <summary>
            Adds a batch operation that, when committed, gets the absolute <see cref="T:System.DateTime"/> value representing when the specified
            key will expire from the store.
            </summary>
            <param name="key">The key to check.</param>
            <param name="onGetExpiry">The function to call when the operation is executed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Remove(`0)">
            <summary>
            Adds a batch operation that, when committed, removes a value from the store and returns it.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Remove(`0,System.Action{`1})">
            <summary>
            Adds a batch operation that, when committed, removes a value from the store and returns it.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <param name="onRemove">The function to call when the operation is executed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Replace(`0,`1)">
            <summary>
            Adds a batch operation that, when committed, sets the value of a key in the store and returns the original value.
            </summary>
            <param name="key">The key of the element to update.</param>
            <param name="value">The value to be added.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Replace(`0,`1,System.Action{`1})">
            <summary>
            Adds a batch operation that, when committed, sets the value of a key in the store and returns the original value.
            </summary>
            <param name="key">The key of the element to update.</param>
            <param name="value">The value to be added.</param>
            <param name="onReplace">The function to call when the operation is executed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Set(`0,`1)">
            <summary>
            Adds a batch operation that, when committed, sets the value of the specified key.
            </summary>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to write into the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, a new key will be added.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.SetExpiry(`0,System.DateTime)">
            <summary>
            Adds a batch operation that, when committed, sets the expiration of the specified key.
            </summary>
            <param name="key">The key to set the expiration of.</param>
            <param name="expiration">The absolute time at which the key should expire.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds an enumerable collection of items to the store as a single batch.
            </summary>
            <param name="items">An enumerable collection of items to add.</param>
            <returns>An enumerable collection of boolean values indicating whether the specific add operation succeeded.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
            <remarks>
            The entire batch operation is queued and committed in a single call to this method.  There is no need to call <see cref="M:Microsoft.BI.Common.DataStore.IBatch.Commit"/>
            after calling <see cref="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Get(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the items from the store with the specified keys.
            </summary>
            <param name="keys">The keys of the items to get.</param>
            <returns>An enumerable collection of values from the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
            <remarks>
            The entire batch operation is queued and committed in a single call to this method.  There is no need to call <see cref="M:Microsoft.BI.Common.DataStore.IBatch.Commit"/>
            after calling <see cref="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Get(System.Collections.Generic.IEnumerable{`0})"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Set(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Gets the value of the specified keys to the specified values.
            </summary>
            <param name="items">The items to set in the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
            <remarks>
            The entire batch operation is queued and committed in a single call to this method.  There is no need to call <see cref="M:Microsoft.BI.Common.DataStore.IBatch.Commit"/>
            after calling <see cref="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Set(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the items from the store with the specified keys.
            </summary>
            <param name="keys">The keys of the items to remove.</param>
            <returns>An enumerable collection of values that were removed from the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The batch has already been committed or aborted.</exception>
            <remarks>
            The entire batch operation is queued and committed in a single call to this method.  There is no need to call <see cref="M:Microsoft.BI.Common.DataStore.IBatch.Commit"/>
            after calling <see cref="M:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2.Remove(System.Collections.Generic.IEnumerable{`0})"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2">
            <summary>
            A view on top of an <see cref="T:Microsoft.BI.Common.DataStore.IDataStore"/> with a specific namespace that allows accessing of data using strongly-typed
            key, value pairs.
            </summary>
            <typeparam name="TKey">The type of the keys in the object store.</typeparam>
            <typeparam name="TValue">The type of the values in the object store.</typeparam>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2"/> interface allows a namespace from an <see cref="T:Microsoft.BI.Common.DataStore.IDataStore"/> to be
            treated as a strongly-typed object store.  All items in the namespace must have the same type of keys and the same type of
            values.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Expiry">
            <summary>
            Gets the expiry that is applied to values that are added to the view.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Namespace">
            <summary>
            Gets the namespace in which the view performs its operations.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Add(`0,`1)">
            <summary>
            Adds an item to the store without overwriting any existing item.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <returns><c>true</c> if the value was successfully added; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            <para>
            If the store already contains <paramref name="key"/>, this method will return <c>false</c> and no modifications
            are made to the store.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds an item to the store if the key does not already exist, or updates an item in the store by using the
            specified function if the key already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="value">The value to be added for an absent key.</param>
            <param name="updateFactory">The function used to generate a new value for an existing key based on the key's current value.</param>
            <returns>The new value for the key.  This will either be <paramref name="value"/> (if the key was absent), or the result of
            <paramref name="updateFactory"/> (if they key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="updateFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            Uses the specified functions to add an item to the underlyig store if the key does not already exist, or to update an item in
            the store if the key already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="valueFactory">The fucntion used to generate a value for an absent key.</param>
            <param name="updateFactory">The function used to generate a new value for an existing key based on the key's current value.</param>
            <returns>The new value for the key.  This will either be the result of <paramref name="valueFactory"/> (if the key was absent), or the result of
            <paramref name="updateFactory"/> (if they key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>, <paramref name="valueFactory"/>, or <paramref name="updateFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="valueFactory"/> or <paramref name="updateFactory"/> return a value equal to the default value
            for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.BeginBatch">
            <summary>
            Returns an <see cref="T:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2"/> for running one or more operations in a batch.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.DataStore.IKeyValueStoreBatch`2"/> for running one or more operations in a batch.</returns>
            <exception cref="T:System.NotSupportedException">The store implementation does not support batching.</exception>
            <remarks>
            <para>
            A batch is a unit of work performed in the store that contains potentially several operations in a single command.  Unlike a transaction, these
            operations do not necessarily need to be executed according to ACID properties.  Rather, batches provide a way to amoritize the cost of communication
            between the store and the consumer by combining many operations into a single call to and from the store.
            </para>
            <para>
            An implementer that does not support batching should throw a <see cref="T:System.NotSupportedException"/> when this method is called.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.BeginTransaction">
            <summary>
            Begins a store transaction where all operations are committed atomically.
            </summary>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.ITransaction"/> instance for managing the transaction.</returns>
            <exception cref="T:System.NotSupportedException">The store implementation does not support transactions.</exception>
            <remarks>
            <para>
            A transaction is a unit of work performed the store that is treated in a coherent and reliable way independent of other transactions.  Transactions
            are atomic, consistent, isolated, and durable (ACID).  Transactions are "all-or-nothing", meaning that each operation performed in the store must
            either complete in its entirety or have no effect whatsoever.
            </para>
            <para>
            An implementer that does not support transactions should throw a <see cref="T:System.NotSupportedException"/> when this method is called.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Clear">
            <summary>
            Clears the contents of the view.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Contains(`0)">
            <summary>
            Determines whether the store contains the specified key.
            </summary>
            <param name="key">The key to locate in the store.</param>
            <returns><c>true</c> if the store contains an element with the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Get(`0)">
            <summary>
            Gets the value of the specified key from the underyling store.
            </summary>
            <param name="key">The key to locate in the store.</param>
            <returns>The value of the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, this method does not throw an exception.  Instead, it returns the
            default value for the value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetCount">
            <summary>
            Gets the number of keys in the store.
            </summary>
            <returns>The number of keys in the store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetExpiry(`0)">
            <summary>
            Gets the absolute <see cref="T:System.DateTime"/> value representing when the specified key will expire from the store.
            </summary>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.DateTime"/> value representing the absolute expiration time of the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetKeys">
            <summary>
            Gets an enumerable collection of the keys in the store.
            </summary>
            <returns>An enumerable collection of the keys in the store.</returns>
            <remarks>
            The enumerable returned by this method is safe to use concurrently with reads and writes to the store; however, it does not represent
            a moment-in-time snapshot of the store.  The contents exposed through the enumerator may contain modifications made to the store
            after the <see cref="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetKeys"/> method was called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the store if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>The value for the key.  This will either be the existing value for the key if the key already exists in the store, or the new value
            if the key was not in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the store by using the specified function if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>The value for the key.  This will either be the existing value for the key if the key already exists in the store, or the new value
            for the key as returned by <paramref name="valueFactory"/> if the key was not in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="valueFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="valueFactory"/> returns a value equal to the default value for the type of objects in
            the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetValues">
            <summary>
            Gets an enumerable collection of the values in the store.
            </summary>
            <returns>An enumerable collection of the values in the store.</returns>
            <remarks>
            The enumerable returned by this method is safe to use concurrently with reads and writes to the store; however, it does not represent
            a moment-in-time snapshot of the store.  The contents exposed through the enumerator may contain modifications made to the store
            after the <see cref="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.GetValues"/> method was called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Remove(`0)">
            <summary>
            Removes a value from the store and returns it.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <returns>The value that was removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, this method does not throw an exception.  Instead, it returns the
            default value for the value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Replace(`0,`1)">
            <summary>
            Set the value of a key in the store and returns the original value.
            </summary>
            <param name="key">The key of the element to update.</param>
            <param name="value">The value to be added.</param>
            <returns>The original value for the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            If <paramref name="key"/> does not exist in the store, this method will return the default value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.Set(`0,`1)">
            <summary>
            Sets the value of the specified key.
            </summary>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to write into the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, a new key will be added.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2.SetExpiry(`0,System.DateTime)">
            <summary>
            Sets the expiration of the specified key.
            </summary>
            <param name="key">The key to set the expiration of.</param>
            <param name="expiration">The absolute time at which the key should expire.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.ITransaction">
            <summary>
            Defines methods for interacting with a transaction, or a collection of operations that are performed in a single
            atomic operation in an <see cref="T:Microsoft.BI.Common.DataStore.IDataStore"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.ITransaction.Abort">
            <summary>
            Aborts the transaction, rolling back the store's state to the initial state.
            </summary>
            <remarks>
            <para>
            Aborting a batch before it is committed will result in no changes being applied to the store.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.ITransaction.Commit">
            <summary>
            Commits all pending transaction operations.
            </summary>
            <remarks>
            <para>
            If any operation results in an exception, the exception will be propagated to the caller.  Any operations that have
            already completed will be rolled back, and any pending operations will not be performed.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch">
            <summary>
            Provides batching for the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataStore.MemoryCacheBatch.RowsAdded">
            <summary>
            Gets a value indicating how many rows were added during a commit.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataStore.MemoryCacheBatch.RowsRemoved">
            <summary>
            Gets a value indicating how many rows were removed during a commit.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataStore.MemoryCacheBatch.RowsUpdated">
            <summary>
            Gets a value indicating how many rows were updated during a commit.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Results">
            <summary>
            The results of any operations that returned results during a commit.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.#ctor(Microsoft.BI.Common.DataStore.MemoryCacheDataStore)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> class.
            </summary>
            <param name="store">The <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/> to commit the batch to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Dispose">
            <summary>
            Disposed of the batch.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Abort">
            <summary>
            Aborts all pending batch operations.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
            <remarks>
            <para>
            Aborting a batch before it is committed will result in no changes being applied to the store.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Commit">
            <summary>
            Commits all pending batch operations.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
            <remarks>
            <para>
            If any operation results in an exception, the exception will be propagated to the caller.  Any operations that have
            already completed will not be rolled back, and any pending operations will not be performed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Add(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="value">The value to be used for the operation.</param>
            <param name="expiry">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.AddOrUpdate(System.String,System.String,System.Object,System.Func{System.Object,System.Object,System.Object},System.TimeSpan)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.AddOrUpdate operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="value">The value to be used for the operation.</param>
            <param name="updateFactory">The update function to be used for the operation.</param>
            <param name="expiry">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.AddOrUpdate(System.String,System.String,System.Func{System.Object,System.Object},System.Func{System.Object,System.Object,System.Object},System.TimeSpan)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.AddOrUpdate operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="valueFactory">The value factory function to be used for the operation.</param>
            <param name="updateFactory">The update function to be used for the operation.</param>
            <param name="expiry">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Get(System.String,System.String)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.Get operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.GetOrAdd(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.GetOrAdd operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="value">The value to be used for the operation.</param>
            <param name="expiry">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.GetOrAdd(System.String,System.String,System.Func{System.Object,System.Object},System.TimeSpan)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.GetOrAdd operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="valueFactory">The value factory function to be used for the operation.</param>
            <param name="expiry">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Remove(System.String,System.String)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.Remove operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Replace(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.Replace operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="value">The value to be used for the operation.</param>
            <param name="expiry">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.Set(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.Set operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="value">The value to be used for the operation.</param>
            <param name="expiry">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheBatch.SetExpiry(System.String,System.String,System.DateTime)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.SetExpiry operation to the batch.
            </summary>
            <param name="nameSpace">The namespace to be used for the operation.</param>
            <param name="key">The key to be used for the operation.</param>
            <param name="expiration">The expiry to be used for the operation.</param>
            <exception cref="T:System.ObjectDisposedException">If the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> has already been disposed.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore">
            <summary>
            An implementation of <see cref="T:Microsoft.BI.Common.DataStore.IDataStore"/> on top of a <see cref="T:System.Runtime.Caching.MemoryCache"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/> class.
            </summary>
            <remarks>Uses a <see cref="T:System.Runtime.Caching.MemoryCache"/> with default parameters.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.#ctor(System.TimeSpan,System.Double)">
            <summary>
            Constructor. Sets the <see cref="T:System.Runtime.Caching.MemoryCache"/> parameters for polling interval and memory limit percentage.
            </summary>
            <param name="pollingInterval">The interval for the underlying <see cref="T:System.Runtime.Caching.MemoryCache"/> to poll for eviction.</param>
            <param name="memoryLimitPercent">The percentage of physical memory used at which the <see cref="T:System.Runtime.Caching.MemoryCache"/> evict.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pollingInterval"/> is less than 5 seconds, -or-
            <paramref name="memoryLimitPercent"/> is less than 0 or greater than or equal to 1.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.#ctor(System.TimeSpan,System.Int64)">
            <summary>
            Constructor. Sets the <see cref="T:System.Runtime.Caching.MemoryCache"/> parameters for polling interval and memory limit in megabytes.
            </summary>
            <param name="pollingInterval">The interval for the underlying <see cref="T:System.Runtime.Caching.MemoryCache"/> to poll for eviction.</param>
            <param name="memoryLimitMegabytes">The number of megabytes of physical memory the <see cref="T:System.Runtime.Caching.MemoryCache"/> is allowed to use.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pollingInterval"/> is less than 5 seconds, -or-
            <paramref name="memoryLimitMegabytes"/> is less than 1.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.#ctor(System.TimeSpan)">
            <summary>
            Constructor. Uses default memory allocation parameters and a given polling interval.
            </summary>
            <param name="pollingInterval">The interval for the underlying <see cref="T:System.Runtime.Caching.MemoryCache"/> to poll for eviction.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pollingInterval"/> is less than 5 seconds.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Dispose">
            <summary>
            Disposes of the store.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.CreateKeyValueStoreView``2(System.String,System.Func{``0,System.String},System.Func{System.String,``0})">
            <summary>
            Creates a view on top of the store that treats a namespace as an object store.
            </summary>
            <typeparam name="TKey">The type of the keys in the object store.</typeparam>
            <typeparam name="TValue">The type of the values in the object store.</typeparam>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <param name="convertToString">The function that converts <typeparamref name="TKey"/> into a string.</param>
            <param name="convertFromString">The function that converts a string into a <typeparamref name="TKey"/>.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2"/> that acts as an object store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.CreateKeyValueStoreView``2(System.String,System.Func{``0,System.String},System.Func{System.String,``0},System.TimeSpan)">
            <summary>
            Creates a view on top of the store that treats a namespace as an object store.
            </summary>
            <typeparam name="TKey">The type of the keys in the object store.</typeparam>
            <typeparam name="TValue">The type of the values in the object store.</typeparam>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <param name="convertToString">The function that converts <typeparamref name="TKey"/> into a string.</param>
            <param name="convertFromString">The function that converts a string into a <typeparamref name="TKey"/>.</param>
            <param name="expiry">The default TTL for items added to the data store via the view.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IKeyValueStoreView`2"/> that acts as an object store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.CreateColumnStoreView(System.String)">
            <summary>
            Creates a view on top of the store that treats a namespace as a column store.
            </summary>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IColumnStoreView"/> that acts as a column store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.CreateColumnStoreView(System.String,System.TimeSpan)">
            <summary>
            Creates a view on top of the store that treats a namespace as a column store.
            </summary>
            <param name="nameSpace">The namespace in which to create the view.</param>
            <param name="expiry">The default TTL for items added to the data store via the view.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataStore.IColumnStoreView"/> that acts as a column store view on the data store.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Add(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds an element to the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/>.
            </summary>
            <param name="nameSpace">The namespace to add the element to.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <param name="expiry">The absolute expiration period after which the element will be evicted.</param>
            <returns>True if the element was added, false if the element already existed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.AddOrUpdate(System.String,System.String,System.Object,System.Func{System.Object,System.Object,System.Object},System.TimeSpan)">
            <summary>
            Adds an element to the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/> if the key does not exist. Otherwise, it updates the value using the supplied function
            </summary>
            <param name="nameSpace">The namespace to add the element to.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <param name="updateFactory">The function to use to generate a new value based on the key and current value.</param>
            <param name="expiry">The absolute expiration period after which the element will be evicted.</param>
            <returns>The new value for the key.  This will either be <paramref name="value"/> (if the key was absent), or the result of
            <paramref name="updateFactory"/> (if they key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="updateFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.AddOrUpdate(System.String,System.String,System.Func{System.Object,System.Object},System.Func{System.Object,System.Object,System.Object},System.TimeSpan)">
            <summary>
            Uses the specified functions to add an item to the <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheDataStore"/> if the key does not already exist, or to update an item in
            the store if the key already exists.
            </summary>
            <param name="nameSpace">The namespace of the key to add.</param>
            <param name="key">Thee key to be added or whose value should be updated.</param>
            <param name="valueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateFactory">The function used to generate a new value for an existing key based on the key's current value.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The new value for the key.  This will either be the result of <paramref name="valueFactory"/> (if the key was absent), or the result of
            <paramref name="updateFactory"/> (if they key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>, <paramref name="valueFactory"/>, or <paramref name="updateFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="valueFactory"/> or <paramref name="updateFactory"/> return a value equal to the default value
            for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.BeginBatch">
            <summary>
            Returns an <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> for running one or more operations in a batch.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> for running one or more operations in a batch.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.BeginTransaction">
            <summary>
            Returns an <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> for running one or more operations in a batch.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.DataStore.MemoryCacheBatch"/> for running one or more operations in a batch.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Clear">
            <summary>
            Clears the contents of the entire store.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Clear(System.String)">
            <summary>
            Clears the contents of the specified namespace in the store.
            </summary>
            <param name="nameSpace">The namespace to clear.</param>
            <remarks>This method may be slow.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Contains(System.String,System.String)">
            <summary>
            Determines whether the store contains the specified key.
            </summary>
            <param name="nameSpace">The namespace of the key to locate.</param>
            <param name="key">The key to locate in the store.</param>
            <returns><c>true</c> if the store contains an element with the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Get(System.String,System.String)">
            <summary>
            Gets the value of the specified key from the underlying <see cref="T:System.Runtime.Caching.MemoryCache"/>.
            </summary>
            <param name="nameSpace">The namespace of the key to get.</param>
            <param name="key">The key to locate in the store.</param>
            <returns>The value of the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, this method does not throw an exception.  Instead, it returns the
            default value for the value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.GetCount(System.String)">
            <summary>
            Gets the number of keys in a namespace.
            </summary>
            <param name="nameSpace">The namespace of the items to count.</param>
            <returns>The number of keys in the namespace.</returns>
            <remarks>This method may be slow.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.GetKeys(System.String)">
            <summary>
            Gets an enumerable collection of the keys in the store.
            </summary>
            <param name="nameSpace">The namespace of the keys to get.</param>
            <returns>An enumerable collection of the keys in the store.</returns>
            <remarks>
            <para>
            The enumerable returned by this method is safe to use concurrently with reads and writes to the store; however, it does not represent
            a moment-in-time snapshot of the store.  The contents exposed through the enumerator may contain modifications made to the store
            after the <see cref="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.GetKeys(System.String)"/> method was called.
            </para>
            <para>
            The order in which keys are returned is not guaranteed to be inserted order.
            </para>
            <para>
            This method may be slow.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.GetOrAdd(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a key/value pair to the store if the key does not already exist.
            </summary>
            <param name="nameSpace">The namespace of the key to get or add.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The value for the key.  This will either be the existing value for the key if the key already exists in the store, or the new value
            if the key was not in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.GetOrAdd(System.String,System.String,System.Func{System.Object,System.Object},System.TimeSpan)">
            <summary>
            Adds a key/value pair to the store by using the specified function if the key does not already exist.
            </summary>
            <param name="nameSpace">The namespace of the key to get or add.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The value for the key.  This will either be the existing value for the key if the key already exists in the store, or the new value
            for the key as returned by <paramref name="valueFactory"/> if the key was not in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="valueFactory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="valueFactory"/> returns a value equal to the default value for the type of objects in
            the store.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.GetValues(System.String)">
            <summary>
            Gets an enumerable collection of the values in the namespace.
            </summary>
            <param name="nameSpace">The namespace of the values to get.</param>
            <returns>An enumerable collection of the values in the namespace.</returns>
            <remarks>
            <para>
            The enumerable returned by this method is safe to use concurrently with reads and writes to the store; however, it does not represent
            a moment-in-time snapshot of the store.  The contents exposed through the enumerator may contain modifications made to the store
            after the <see cref="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.GetValues(System.String)"/> method was called.
            </para>
            <para>
            This method may be slow
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Remove(System.String,System.String)">
            <summary>
            Removes a value from the store and returns it.
            </summary>
            <param name="nameSpace">The namespace of the key to remove.</param>
            <param name="key">The key of the element to remove and return.</param>
            <returns>The value that was removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, this method does not throw an exception.  Instead, it returns the
            default value for the value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Replace(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Set the value of a key in the store and returns the original value.
            </summary>
            <param name="nameSpace">The namespace of the key to replace.</param>
            <param name="key">The key of the element to update.</param>
            <param name="value">The value to be added.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <returns>The original value for the key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            If <paramref name="key"/> does not exist in the store, this method will return the default value type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.Set(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Sets the value of the specified key.
            </summary>
            <param name="nameSpace">The namespace of the key to set.</param>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to write into the store.</param>
            <param name="expiry">The amount of time before the item expires from the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to the default value for the type of objects in the store.</exception>
            <remarks>
            If <paramref name="key"/> is not found in the store, a new key will be added.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataStore.MemoryCacheDataStore.SetExpiry(System.String,System.String,System.DateTime)">
            <summary>
            Sets the expiration of the specified key.
            </summary>
            <param name="nameSpace">The namespace of the key to set the expiration of.</param>
            <param name="key">The key to set the expiration of.</param>
            <param name="expiration">The absolute time at which the key should expire.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.DataType">
            <summary>
            Enumeration describing C# types.
            </summary>
            <remarks>Ported from dts.h.</remarks>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_EMPTY">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_NULL">
            <summary>
            Null.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_I2">
            <summary>
            <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_I4">
            <summary>
            <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_R4">
            <summary>
            <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_R8">
            <summary>
            <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_CY">
            <summary>
            Currency, represented in C# as <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DATE">
            <summary>
            <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>Some sort of fancy, decimal-like representation of date.</remarks>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_BOOL">
            <summary>
            <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DECIMAL">
            <summary>
            <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_I1">
            <summary>
            <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_UI1">
            <summary>
            <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_UI2">
            <summary>
            <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_UI4">
            <summary>
            <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_I8">
            <summary>
            <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_UI8">
            <summary>
            <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_FILETIME">
            <summary>
            File time (yyyy-MM-dd HH:mm:ss:fff), represented in C# as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_GUID">
            <summary>
            <see cref="T:System.Guid"/> (N).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_BYTES">
            <summary>
            <see cref="T:System.Byte"/> array.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_STR">
            <summary>
            <see cref="T:System.String"/> (ASCII).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_WSTR">
            <summary>
            <see cref="T:System.String"/> (Unicode).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_NUMERIC">
            <summary>
            Decimal plus precision; represented in C# as <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DBDATE">
            <summary>
            <see cref="T:System.DateTime"/> (yyyy-MM-dd).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DBTIME">
            <summary>
            <see cref="T:System.DateTime"/> (HH:mm:ss).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DBTIMESTAMP">
            <summary>
            <see cref="T:System.DateTime"/> (yyyy-MM-dd HH:mm:ss.FFF).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DBTIME2">
            <summary>
            <see cref="T:System.TimeSpan"/> (HH:mm:ss.FFFFFFF).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DBTIMESTAMPOFFSET">
            <summary>
            <see cref="T:System.DateTime"/> (yyyy-MM-dd HH:mm:ss.FFFFFFF zzz).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_IMAGE">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_TEXT">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_NTEXT">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_DBTIMESTAMP2">
            <summary>
            <see cref="T:System.DateTime"/> (yyyy-MM-dd HH:mm:ss.FFFFFFF).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataType.DT_OBJECT">
            <summary>
            <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DataTypeAttributes">
            <summary>
            Enumeration of supported type attributes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataTypeAttributes.ATTR_EMPTY">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataTypeAttributes.ATTR_BYREF">
            <summary>
            Type is passed by reference.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataTypeAttributes.ATTR_NULLABLE">
            <summary>
            Type is nullable.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataTypeAttributes.ATTR_COLLECTION">
            <summary>
            Type represents a collection.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataTypeAttributes.ATTR_ARRAY">
            <summary>
            Type is an array.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataTypeAttributes.ATTR_ENUM">
            <summary>
            Type is an enum.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DataTypeEnum">
            <summary>
            Provides conversion methods from and to the DataType enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.ToType(Microsoft.BI.Common.DataType,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Convert a <see cref="T:Microsoft.BI.Common.DataType"/> to a C# type.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to convert.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>The corresponding C# type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.ToDataType(System.Type)">
            <summary>
            Convert a <see cref="T:System.Type"/> to the equivalent <see cref="T:Microsoft.BI.Common.DataType"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to convert.</param>
            <returns>The equivalent <see cref="T:Microsoft.BI.Common.DataType"/>.</returns>
            <remarks>
            In the case of <see cref="T:System.String"/> and <see cref="T:System.DateTime"/>, there not a 1-to-1 mapping to an
            appropriate <see cref="T:Microsoft.BI.Common.DataType"/>.  In these cases, this method returns <see cref="F:Microsoft.BI.Common.DataType.DT_WSTR"/> or
            <see cref="F:Microsoft.BI.Common.DataType.DT_DATE"/>, respectively, as these types can easily be converted to the other, similar
            types.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.GetDataTypeAttributes(System.Type)">
            <summary>
            Get the <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> for a <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to convert.</param>
            <returns>The equivalent <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.GetDefault(System.Type)">
            <summary>
            Gets the default value for a <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to get the primitive name of.</param>
            <returns>The default value of the <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.GetName(System.Type,System.Boolean)">
            <summary>
            Gets the name of a <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to get the name of.</param>
            <param name="fullName">Whether to return the type's full name or the short name.</param>
            <returns>The name of the <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.GetPrimitiveName(System.Type,System.Boolean)">
            <summary>
            Gets the primitive name of a <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to get the primitive name of.</param>
            <param name="fullName">Whether to return the type's full name or the short name.</param>
            <returns>The primitive name of the <see cref="T:System.Type"/>, or the name if not a primitive.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.GetSize(Microsoft.BI.Common.DataType)">
            <summary>
            Get the size of the <see cref="T:Microsoft.BI.Common.DataType"/>, for primitive types, as reported by sizof().
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to get the size of.</param>
            <returns>The size of the type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.ExtendedTypeToDataType(System.String)">
            <summary>
            Convert a DSV ExtendedDataType to a <see cref="T:Microsoft.BI.Common.DataType"/>.
            </summary>
            <param name="t">The ExtendedDataType to convert.</param>
            <returns>The corresponding <see cref="T:Microsoft.BI.Common.DataType"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.ToExtendedDataType(Microsoft.BI.Common.DataType)">
            <summary>
            Get the DSV ExtendedDataType representation of the <see cref="T:Microsoft.BI.Common.DataType"/>.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to convert.</param>
            <returns>The DSV ExtendedDataType representation of the DataType.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.UsesDataSize(Microsoft.BI.Common.DataType)">
            <summary>
            Returns whether the <see cref="T:Microsoft.BI.Common.DataType"/> requires an explicit size to be specified.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to check.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.DataType"/> requires an explicit size; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.UsesPrecision(Microsoft.BI.Common.DataType)">
            <summary>
            Returns whether the specified <see cref="T:Microsoft.BI.Common.DataType"/> requires an explicit precision to be specified.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to check.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.DataType"/> requires an explicit precision; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.UsesScale(Microsoft.BI.Common.DataType)">
            <summary>
            Returns whether the specified <see cref="T:Microsoft.BI.Common.DataType"/> requires an explicit scale to be specified.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to check.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.DataType"/> require an explicit scale; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.UsesCodePage(Microsoft.BI.Common.DataType)">
            <summary>
            Returns whether the specified <see cref="T:Microsoft.BI.Common.DataType"/> requires an explict code page to be specified.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to check.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.DataType"/> requires an explicit code page; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.MaxValue(Microsoft.BI.Common.DataType)">
            <summary>
            Get the maximum value for the <see cref="T:Microsoft.BI.Common.DataType"/>.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to get the maximum value of.</param>
            <returns>The maximum allowed value for the data type.</returns>
            <remarks>Only works for numeric data types.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.MinValue(Microsoft.BI.Common.DataType)">
            <summary>
            Gets the minimum value for the <see cref="T:Microsoft.BI.Common.DataType"/>.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to get the minimum value of.</param>
            <returns>The minimum allowed value for the data type.</returns>
            <remarks>Only works for numeric data types.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.GetEmptyValue(Microsoft.BI.Common.DataType,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Gets the empty value for the <see cref="T:Microsoft.BI.Common.DataType"/>.
            </summary>
            <param name="t">The <see cref="T:Microsoft.BI.Common.DataType"/> to get the empty value of.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>The empty value of the <see cref="T:Microsoft.BI.Common.DataType"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeEnum.GetEmptyCollection(Microsoft.BI.Common.DataType)">
            <summary>
            Creates an empty <see cref="T:System.Collections.Generic.ICollection`1"/> with the correct type.
            </summary>
            <param name="t">The type of the collection to create.</param>
            <returns>The empty collection.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.DataTypeFormatter">
            <summary>
            Handles the conversion of CLR types to strings based on a set of predefined formats.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.#ctor">
            <summary>
            Creates a new instance of the ExtendedDataTypeFormatter class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DataTypeFormatter.FormatDelegate">
            <summary>
            A delegate matching the signature of <see cref="M:Microsoft.BI.Common.DataTypeFormatter.Format(Microsoft.BI.Common.DataType,System.Object,System.IFormatProvider,Microsoft.BI.Common.DataTypeAttributes)"/> and
            <see cref="M:Microsoft.BI.Common.DataTypeFormatter.UnsafeFormat(Microsoft.BI.Common.DataType,System.Object,System.IFormatProvider,Microsoft.BI.Common.DataTypeAttributes)"/>.
            </summary>
            <param name="dataType">A <see cref="T:Microsoft.BI.Common.DataType"/> specifying the target formatting type.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="dataType"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.FormatObject(System.Object)">
            <summary>
            Converts the value of a specified object to an equivalent string representation.
            </summary>
            <param name="arg">An object to format.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted based on its type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.FormatObject(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation.
            </summary>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted based on its type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Format(System.String,System.Object)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format.
            </summary>
            <param name="format">A format string containing format specifications.</param>
            <param name="arg">An object to format.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="format"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format and domain-specific formatting information.
            </summary>
            <param name="format">A format string containing format specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="format"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Format(Microsoft.BI.Common.DataType,System.Object,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format.
            </summary>
            <param name="dataType">A <see cref="T:Microsoft.BI.Common.DataType"/> specifying the target formatting type.</param>
            <param name="arg">An object to format.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> for the type.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="dataType"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Format(Microsoft.BI.Common.DataType,System.Object,System.IFormatProvider,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format and domain-specific formatting information.
            </summary>
            <param name="dataType">A <see cref="T:Microsoft.BI.Common.DataType"/> specifying the target formatting type.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> for the type.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="dataType"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.InternalFormat(Microsoft.BI.Common.DataType,System.Object,Microsoft.BI.Common.DataTypeFormatProvider,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Formats the specified object as an equivalent string using the specified format and domain-specific
            formatting information.
            </summary>
            <param name="dataType">A <see cref="T:Microsoft.BI.Common.DataType"/> specifying the target formatting type.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="attributes">A <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> specifiying any special attributes of the type.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="dataType"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.UnsafeFormatObject(System.Object)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format.  Does not perform type or range checking prior to writing value.
            </summary>
            <param name="arg">An object to format.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted based on its type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.UnsafeFormatObject(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format.  Does not perform type or range checking prior to writing value.
            </summary>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted based on its type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.UnsafeFormat(System.String,System.Object)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format.  Does not perform type or range checking prior to writing value.
            </summary>
            <param name="fmt">A format string containing format specifications.</param>
            <param name="arg">An object to format.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="fmt"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.UnsafeFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format and domain-specific formatting information.  Does not perform type or range checking prior
            to writing value.
            </summary>
            <param name="fmt">A format string containing format specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="fmt"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.UnsafeFormat(Microsoft.BI.Common.DataType,System.Object,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format.  Does not perform type or range checking prior to writing value.
            </summary>
            <param name="dataType">A <see cref="T:Microsoft.BI.Common.DataType"/> specifying the target formatting type.</param>
            <param name="arg">An object to format.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> for the type.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="dataType"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.UnsafeFormat(Microsoft.BI.Common.DataType,System.Object,System.IFormatProvider,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified
            format and domain-specific formatting information.  Does not perform type or range checking prior
            to writing value.
            </summary>
            <param name="dataType">A <see cref="T:Microsoft.BI.Common.DataType"/> specifying the target formatting type.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> for the type.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="dataType"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.InternalUnsafeFormat(Microsoft.BI.Common.DataType,System.Object,Microsoft.BI.Common.DataTypeFormatProvider,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Formats the specified object as an equivalent string using the specified format and domain-specific
            formatting information.  Does not perform type or range checking prior to writing value.
            </summary>
            <param name="dataType">A <see cref="T:Microsoft.BI.Common.DataType"/> specifying the target formatting type.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="attributes">A <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> specifiying any special attributes for the type.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified in
            <paramref name="dataType"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Parse(Microsoft.BI.Common.DataType,System.String,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Parses the specified string into an object of the specified format.
            </summary>
            <param name="dataType">The <see cref="T:Microsoft.BI.Common.DataType"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>The object representation of the value of <paramref name="arg"/>, parsed as specified in
            <paramref name="dataType"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Parse(Microsoft.BI.Common.DataType,System.String,System.IFormatProvider,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Parses the specified string into an object of the specified format.
            </summary>
            <param name="dataType">The <see cref="T:Microsoft.BI.Common.DataType"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>The object representation of the value of <paramref name="arg"/>, parsed as specified in
            <paramref name="dataType"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.InternalParse(Microsoft.BI.Common.DataType,System.String,Microsoft.BI.Common.DataTypeFormatProvider,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Parses the specified string into an object of the specified format.
            </summary>
            <param name="dataType">The <see cref="T:Microsoft.BI.Common.DataType"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>The object representation of the value of <paramref name="arg"/>, parsed as specified in
            <paramref name="dataType"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Parse(System.Type,System.String)">
            <summary>
            Parses the specified string into an object of the specified format.
            </summary>
            <param name="format">The <see cref="T:System.Type"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <returns>The object representation of the value of <paramref name="arg"/>, parsed as specified in
            <paramref name="format"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.Parse(System.Type,System.String,System.IFormatProvider)">
            <summary>
            Parses the specified string into an object of the specified format.
            </summary>
            <param name="format">The <see cref="T:System.Type"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>The object representation of the value of <paramref name="arg"/>, parsed as specified in
            <paramref name="format"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.InternalParse(System.Type,System.String,Microsoft.BI.Common.DataTypeFormatProvider)">
            <summary>
            Parses the specified string into an object of the specified format.
            </summary>
            <param name="format">The <see cref="T:System.Type"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>The object representation of the value of <paramref name="arg"/>, parsed as specified in
            <paramref name="format"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.TryParse(Microsoft.BI.Common.DataType,System.String,System.Object@,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Attempt to parse the specified string into an object of the specified format.
            </summary>
            <param name="dataType">The <see cref="T:Microsoft.BI.Common.DataType"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="result">If parse is successful, this parameter will contain an object representation of <paramref name="arg"/>,
            parsed as specified in <paramref name="dataType"/>.  If parse fails, the value is undefined; however,
            it will generally contain null.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.TryParse(Microsoft.BI.Common.DataType,System.String,System.IFormatProvider,System.Object@,Microsoft.BI.Common.DataTypeAttributes)">
            <summary>
            Attempt to parse the specified string into an object of the specified format.
            </summary>
            <param name="dataType">The <see cref="T:Microsoft.BI.Common.DataType"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="result">If parse is successful, this parameter will contain an object representation of <paramref name="arg"/>,
            parsed as specified in <paramref name="dataType"/> and <paramref name="formatProvider"/>.  If parse
            fails, the value is undefined; however, it will generally contain null.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.InternalTryParse(Microsoft.BI.Common.DataType,System.String,Microsoft.BI.Common.DataTypeFormatProvider,System.Object@,Microsoft.BI.Common.DataTypeAttributes,System.String)">
            <summary>
            Attempt to parse the specified string into an object of the specified format.
            </summary>
            <param name="dataType">The <see cref="T:Microsoft.BI.Common.DataType"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="result">If parsing is successful, this parameter will contain an object representation of <paramref name="arg"/>,
            parsed as specified in <paramref name="dataType"/> and <paramref name="formatProvider"/>.  If parsing fails, the value is
            undefined; however, it will generally contain <c>null</c>.</param>
            <param name="attributes">The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the type.</param>
            <param name="nullString">The string to use as the null string.</param>
            <returns><c>true</c> if the parse succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.TryParse(System.Type,System.String,System.Object@)">
            <summary>
            Attempt to parse the specified string into an object of the specified format.
            </summary>
            <param name="format">The <see cref="T:System.Type"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="result">If parse is successful, this parameter will contain an object representation of <paramref name="arg"/>,
            parsed as specified in <paramref name="format"/>.  If parse fails, the value is undefined; however,
            it will generally contain null.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.TryParse(System.Type,System.String,System.IFormatProvider,System.Object@)">
            <summary>
            Attempt to parse the specified string into an object of the specified format.
            </summary>
            <param name="format">The <see cref="T:System.Type"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="result">If parse is successful, this parameter will contain an object representation of <paramref name="arg"/>,
            parsed as specified in <paramref name="format"/> and <paramref name="formatProvider"/>.  If parse
            fails, the value is undefined; however, it will generally contain null.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.InternalTryParse(System.Type,System.String,Microsoft.BI.Common.DataTypeFormatProvider,System.Object@)">
            <summary>
            Attempt to parse the specified string into an object of the specified format.
            </summary>
            <param name="format">The <see cref="T:System.Type"/> to parse <paramref name="arg"/> into.</param>
            <param name="arg">The string to parse.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <param name="result">If parse is successful, this parameter will contain an object representation of <paramref name="arg"/>,
            parsed as specified in <paramref name="format"/> and <paramref name="formatProvider"/>.  If parse
            fails, the value is undefined; however, it will generally contain null.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatter.GetFormatInfo(System.IFormatProvider)">
            <summary>
            Gets an <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> from the specified <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> to get format info from.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> object corresponding to <paramref name="formatProvider"/>,
            or <see cref="P:Microsoft.BI.Common.FormatSettings.DefaultFormatProvider"/> if not specified or otherwise invalid.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.DataTypeFormatProvider">
            <summary>
            Provides customizable formatting information for <see cref="T:Microsoft.BI.Common.DataType"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.NullString">
            <summary>
            Gets or sets the string to use to represent a value when it is null.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.CollectionDelimiter">
            <summary>
            Gets or sets the string used to separate values in collections.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.DT_DBDATE_Formats">
            <summary>
            Gets or sets the list of accepted formats for <see cref="F:Microsoft.BI.Common.DataType.DT_DBDATE"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.DT_DBTIME_Formats">
            <summary>
            Gets or sets the list of accepted formats for <see cref="F:Microsoft.BI.Common.DataType.DT_DBTIME"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.DT_DBTIME2_Formats">
            <summary>
            Gets or sets the list of accepted formats for <see cref="F:Microsoft.BI.Common.DataType.DT_DBTIME2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.DT_DBTIMESTAMP_Formats">
            <summary>
            Gets or sets the list of accepted formats for <see cref="F:Microsoft.BI.Common.DataType.DT_DBTIMESTAMP"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.DT_DBTIMESTAMP2_Formats">
            <summary>
            Gets or sets the list of accepted formats for <see cref="F:Microsoft.BI.Common.DataType.DT_DBTIMESTAMP2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.DT_DBTIMESTAMPOFFSET_Formats">
            <summary>
            Gets or sets the list of accepted formats for <see cref="F:Microsoft.BI.Common.DataType.DT_DBTIMESTAMPOFFSET"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DataTypeFormatProvider.DT_FILETIME_Formats">
            <summary>
            Gets or sets the list of accepted formats for <see cref="F:Microsoft.BI.Common.DataType.DT_FILETIME"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> class with default format values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> if <paramref name="formatType"/> is a supported
            type; otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_BOOL(System.Object)">
            <summary>
            Formats a <see cref="T:System.Boolean"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_BYTES(System.Object)">
            <summary>
            Formats a byte array as a string.
            </summary>
            <param name="value">The byte array to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_CY(System.Object)">
            <summary>
            Formats a <see cref="T:System.Decimal"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DATE(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DBDATE(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DBTIME(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DBTIME2(System.Object)">
            <summary>
            Formats a <see cref="T:System.TimeSpan"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DBTIMESTAMP(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DBTIMESTAMP2(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DBTIMESTAMPOFFSET(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTimeOffset"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_DECIMAL(System.Object)">
            <summary>
            Formats a <see cref="T:System.Decimal"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_FILETIME(System.Object)">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_GUID(System.Object)">
            <summary>
            Formats a <see cref="T:System.Guid"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_NULL(System.Object)">
            <summary>
            Formats a null value as a string.
            </summary>
            <param name="value">The null value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_I1(System.Object)">
            <summary>
            Formats a <see cref="T:System.SByte"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_I2(System.Object)">
            <summary>
            Formats an <see cref="T:System.Int16"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_I4(System.Object)">
            <summary>
            Formats an <see cref="T:System.Int32"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_I8(System.Object)">
            <summary>
            Formats an <see cref="T:System.Int64"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_NUMERIC(System.Object)">
            <summary>
            Formats a <see cref="T:System.Decimal"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_R4(System.Object)">
            <summary>
            Formats a <see cref="T:System.Single"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_R8(System.Object)">
            <summary>
            Formats a <see cref="T:System.Double"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_STR(System.Object)">
            <summary>
            Formats a <see cref="T:System.String"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_UI1(System.Object)">
            <summary>
            Formats an <see cref="T:System.Byte"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_UI2(System.Object)">
            <summary>
            Formats an <see cref="T:System.UInt16"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_UI4(System.Object)">
            <summary>
            Formats a <see cref="T:System.UInt32"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_UI8(System.Object)">
            <summary>
            Formats a <see cref="T:System.UInt64"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_WSTR(System.Object)">
            <summary>
            Formats a <see cref="T:System.String"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object to format.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_DT_OBJECT(System.Object)">
            <summary>
            Formats an <see cref="T:System.Object"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> object to format.</param>
            <returns><paramref name="value"/> formatted as an object.</returns>
            <remarks>The default behavior of this method is to throw an exception, as the formatter has no idea
            how to format an arbitrary object.  Users should subclass <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> and override
            this method to provide specific implementation details for formatting objects of whatever type is required.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Format_ATTR_COLLECTION(System.Object,Microsoft.BI.Common.DataType,Microsoft.BI.Common.DataTypeFormatter)">
            <summary>
            Formats a <see cref="T:System.Collections.ICollection"/> object as a string.
            </summary>
            <param name="value">The <see cref="T:System.Collections.ICollection"/> object to format.</param>
            <param name="type">The <see cref="T:Microsoft.BI.Common.DataType"/> of the elements in <paramref name="value"/>.</param>
            <param name="formatter">The <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> to use when formatting each item.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_BOOL(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_BYTES(System.String)">
            <summary>
            Parses the specified value as a byte array.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting byte array.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_CY(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DATE(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DBDATE(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DBTIME(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DBTIME2(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.TimeSpan"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DBTIMESTAMP(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DBTIMESTAMP2(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DBTIMESTAMPOFFSET(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_DECIMAL(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_FILETIME(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_GUID(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Guid"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_NULL(System.String)">
            <summary>
            Parses the specified value as a null literal.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting null literal.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_I1(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.SByte"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_I2(System.String)">
            <summary>
            Parses the specified value as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Int16"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_I4(System.String)">
            <summary>
            Parses the specified value as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_I8(System.String)">
            <summary>
            Parses the specified value as an <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_NUMERIC(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_R4(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Single"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_R8(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_STR(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_UI1(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_UI2(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.UInt16"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_UI4(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_UI8(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_WSTR(System.String)">
            <summary>
            Parses the specified value as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_DT_OBJECT(System.Type,System.String)">
            <summary>
            Parses the specified value as an <see cref="T:System.Object"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the object to parse.</param>
            <param name="value">The value to parse.</param>
            <returns>The resulting <see cref="T:System.Object"/> value.</returns>
            <remarks>The default behavior of this method is to throw an exception.  Users should subclass the
            <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> and override this method in order to provide parsing of various
            required objects from strings.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Parse_ATTR_COLLECTION(Microsoft.BI.Common.DataType,System.String,Microsoft.BI.Common.DataTypeFormatter)">
            <summary>
            Parses the specified value as a <see cref="T:System.Collections.ICollection"/> of objects.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.DataType"/> of the elements in the collection.</param>
            <param name="value">The value to parse.</param>
            <param name="formatter">The <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> to use when parsing each element.</param>
            <returns>The resulting <see cref="T:System.Collections.ICollection"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_BOOL(System.String,System.Boolean@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Boolean"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_BYTES(System.String,System.Byte[]@)">
            <summary>
            Parses the specified value as an array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as an array of <see cref="T:System.Byte"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_CY(System.String,System.Decimal@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Decimal"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DATE(System.String,System.DateTime@)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.DateTime"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DBDATE(System.String,System.DateTime@)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.DateTime"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DBTIME(System.String,System.DateTime@)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.DateTime"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DBTIME2(System.String,System.TimeSpan@)">
            <summary>
            Parses the specified value as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.TimeSpan"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DBTIMESTAMP(System.String,System.DateTime@)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.DateTime"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DBTIMESTAMP2(System.String,System.DateTime@)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.DateTime"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DBTIMESTAMPOFFSET(System.String,System.DateTimeOffset@)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.DateTimeOffset"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_DECIMAL(System.String,System.Decimal@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Decimal"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_FILETIME(System.String,System.DateTime@)">
            <summary>
            Parses the specified value as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.DateTime"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_GUID(System.String,System.Guid@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Guid"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_NULL(System.String,System.Object@)">
            <summary>
            Parses the specified value as a null literal.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a null literal.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_I1(System.String,System.SByte@)">
            <summary>
            Parses the specified value as a <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.SByte"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_I2(System.String,System.Int16@)">
            <summary>
            Parses the specified value as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Int16"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_I4(System.String,System.Int32@)">
            <summary>
            Parses the specified value as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Int32"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_I8(System.String,System.Int64@)">
            <summary>
            Parses the specified value as an <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Int64"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_NUMERIC(System.String,System.Decimal@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Decimal"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_R4(System.String,System.Single@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Single"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_R8(System.String,System.Double@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Double"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_STR(System.String,System.String@)">
            <summary>
            Parses the specified value as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.String"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_UI1(System.String,System.Byte@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Byte"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_UI2(System.String,System.UInt16@)">
            <summary>
            Parses the specified value as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.UInt16"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_UI4(System.String,System.UInt32@)">
            <summary>
            Parses the specified value as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.UInt32"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_UI8(System.String,System.UInt64@)">
            <summary>
            Parses the specified value as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.UInt64"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_WSTR(System.String,System.String@)">
            <summary>
            Parses the specified value as a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.String"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_DT_OBJECT(System.Type,System.String,System.Object@)">
            <summary>
            Parses the specified value as an <see cref="T:System.Object"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the object to parse.</param>
            <param name="value">The value to parse.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as an <see cref="T:System.Object"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
            <remarks>The default behavior of this method is to throw an exception.  Users should subclass the
            <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> in order to provide the necessary code to parse the required objects.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.TryParse_ATTR_COLLECTION(Microsoft.BI.Common.DataType,System.String,Microsoft.BI.Common.DataTypeFormatter,System.Object@)">
            <summary>
            Parses the specified value as a <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <param name="type">The <see cref="T:Microsoft.BI.Common.DataType"/> of the elements in the collection.</param>
            <param name="value">The value to parse.</param>
            <param name="formatter">The <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> to use to parse each element in the collection.</param>
            <param name="result">When this method completes, contains the result of parsing <paramref name="value"/>
            as a <see cref="T:System.Collections.ICollection"/>.</param>
            <returns>true if the parse succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DataTypeFormatProvider.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/>.
            </summary>
            <returns>A new copy of this <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> instance.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.FormatSettings">
            <summary>
            Contains domain-specific formatting settings.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.FormatSettings.DefaultFormatter">
            <summary>
            Gets the default <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.FormatSettings.DefaultFormatProvider">
            <summary>
            Gets the default <see cref="P:Microsoft.BI.Common.FormatSettings.DefaultFormatProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.FormatSettings.GetDefaultClasses">
            <summary>
            Probes loaded assemblies to determine the correct <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> and
            <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> to use based on the current domain's types.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Data.IDataClient">
            <summary>
            Defines methods to interact with a data store.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Data.IDataClient.ExecuteNonQuery(Microsoft.BI.Common.Data.DataClientExecuteArgs)">
            <summary>
            Executes a SQL statement against the connection and returns the number of rows affected.
            </summary>
            <param name="arguments">
            A <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> instance that represents the information required to execute the SQL statement.
            </param>
            <returns>The number of rows affected by the SQL statement executed.</returns>
            <remarks>
            Use this method to perform catalog operations (for example, querying the structure of a database or
            creating database objects such as tables), or to change the data in a database without using a <see cref="T:System.Data.DataSet"/>
            by executing <c>INSERT</c>, <c>UPDATE</c>, or <c>DELETE</c> statements.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Data.IDataClient.ExecuteDataSet(Microsoft.BI.Common.Data.DataClientExecuteArgs)">
            <summary>
            Executes the SQL statement and returns the results in a new <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="arguments">
            A <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> instance that represents the information required to execute the SQL statement.
            </param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the SQL statement executed.</returns>
            <remarks>
            Use this method to retrieve multiple result sets from the database.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Data.IDataClient.ExecuteReader(Microsoft.BI.Common.Data.DataClientExecuteArgs)">
            <summary>
            Executes the SQL statement and returns the results in a <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="arguments">
            An instance of <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> that represents the information required to execute the SQL statement.
            </param>
            <returns>An <see cref="T:System.Data.IDataReader"/> with the results of the SQL statement executed.</returns>
            <remarks>
            Use this method to retrieve a single dataset in a readonly and forward-only mode.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Data.IDataClient.ExecuteScalar``1(Microsoft.BI.Common.Data.DataClientExecuteArgs,System.Func{System.Object,``0})">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="arguments">
            A <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> instance that represents the information required to execute the SQL statement.
            </param>
            <param name="selector">
            The function to use to transform <see cref="T:System.Object"/> to <typeparamref name="T"/>.
            </param>
            <returns>
            The first column of the first row in the result set transformed to the type <typeparamref name="T"/> using the supplied
            <paramref name="selector"/>.
            </returns>
            <remarks>
            Use this method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using
            the <see cref="M:Microsoft.BI.Common.Data.IDataClient.ExecuteReader(Microsoft.BI.Common.Data.DataClientExecuteArgs)"/> method and then performing the operations that you need to generate the single value using the
            data returned by an <see cref="T:System.Data.IDataReader"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Data.SqlDataClient">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Data.IDataClient"/> implementation that provides methods to interact with Microsoft SQL Server database.
            </summary>
            <remarks>
            This class is not thread-safe.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Data.SqlDataClient.ConnectionString">
            <summary>
            Gets the connection string used to conenct to the SQL Server instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Data.SqlDataClient.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.BI.Common.Data.SqlDataClient"/> class.
            </summary>
            <param name="connectionString">The connection string to use to connect to the SQL Server instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionString"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Data.SqlDataClient.ExecuteNonQuery(Microsoft.BI.Common.Data.DataClientExecuteArgs)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected.
            </summary>
            <param name="arguments">
            A <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> instance that represents the information required to execute the Transact-SQL statement.
            </param>
            <returns>The number of rows affected by the Transact-SQL statement executed.</returns>
            <remarks>
            Use this method to perform catalog operations (for example, querying the structure of a database or
            creating database objects such as tables), or to change the data in a database without using a <see cref="T:System.Data.DataSet"/>
            by executing <c>INSERT</c>, <c>UPDATE</c>, or <c>DELETE</c> statements.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="arguments"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Data.SqlDataClient.ExecuteDataSet(Microsoft.BI.Common.Data.DataClientExecuteArgs)">
            <summary>
            Executes the Transact-SQL statement and returns the results in a new <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="arguments">
            A <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> instance that represents the information required to execute the Transact-SQL statement.
            </param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the Transact-SQL statement executed.</returns>
            <remarks>
            Use this method to retrieve multiple result sets from the database.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="arguments"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Data.SqlDataClient.ExecuteReader(Microsoft.BI.Common.Data.DataClientExecuteArgs)">
            <summary>
            Executes the Transact-SQL statement and returns the results in a <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="arguments">
            An instance of <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> that represents the information required to execute the Transact-SQL statement.
            </param>
            <returns>An <see cref="T:System.Data.IDataReader"/> with the results of the Transact-SQL statement executed.</returns>
            <remarks>
            Use this method to retrieve a single dataset in a readonly and forward-only mode.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="arguments"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Data.SqlDataClient.ExecuteScalar``1(Microsoft.BI.Common.Data.DataClientExecuteArgs,System.Func{System.Object,``0})">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="arguments">
            A <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> instance that represents the information required to execute the Transact-SQL statement.
            </param>
            <param name="selector">
            The function to use to transform <see cref="T:System.Object"/> to <typeparamref name="T"/>.
            </param>
            <returns>
            The first column of the first row in the result set transformed to the type <typeparamref name="T"/> using the supplied
            <paramref name="selector"/>.
            </returns>
            <remarks>
            Use this method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using
            the <see cref="M:Microsoft.BI.Common.Data.SqlDataClient.ExecuteReader(Microsoft.BI.Common.Data.DataClientExecuteArgs)"/> method and then performing the operations that you need to generate the single value using the
            data returned by an <see cref="T:System.Data.IDataReader"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="arguments"/> is <c>null</c> - or - <paramref name="selector"/> is null.
            </exception>
        </member>
        <member name="T:Microsoft.BI.Common.Data.DataClientExecuteArgs">
            <summary>
            Represents the arguments required to execute a SQL statement.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Data.DataClientExecuteArgs.ParameterCollection">
            <summary>
            Except Add method, all other methods in this class are passthrough to the underlying
            <see cref="T:System.Collections.ICollection"/> implementaion.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.CommandText">
            <summary>
            Gets the SQL statement, table name or stored procedure to execute at the data source.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.CommandType">
            <summary>
            Gets a <see cref="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.CommandType"/> value indicating how the <see cref="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.CommandText"/> property is to be interpreted.
            </summary>
            <remarks>One of the <see cref="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.CommandType"/> values. The default is <see cref="N:Microsoft.BI.Common.Text"/>.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>
            The amount of time to wait for the command to execute. The default is 30 seconds.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.Parameters">
            <summary>
            Gets the collection of <see cref="T:System.Data.IDbDataParameter"/> objects that needs to be used to execute the specified <see cref="P:Microsoft.BI.Common.Data.DataClientExecuteArgs.CommandText"/> at the data source.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Data.DataClientExecuteArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> class.
            </summary>
            <param name="commandText">The SQL command to be executed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandText"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Data.DataClientExecuteArgs.#ctor(System.String,System.Data.CommandType)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.BI.Common.Data.DataClientExecuteArgs"/> class.
            </summary>
            <param name="commandText">The SQL command to be executed.</param>
            <param name="commandType">Indicates how the <paramref name="commandText"/> is to be interpreted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandText"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.DateTimeDeltaExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.DateTime"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.ToDeltaString(System.DateTime)">
            <summary>
            Returns a string representation of the DateTime in "yyyyMMddHH" format.
            </summary>
            <param name="instance">The DateTime to convert.</param>
            <returns>The DateTime in "yyyyMMddHH" format.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.ToProcessDayString(System.DateTime)">
            <summary>
            Returns a string representation of the DateTime in "yyyyMMdd" format.
            </summary>
            <param name="instance">The DateTime to convert.</param>
            <returns>The DateTime in "yyyyMMdd" format.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.ToProcessHourString(System.DateTime)">
            <summary>
            Returns a string representation of the DateTime in "HHmm" format.
            </summary>
            <param name="instance">The DateTime to convert.</param>
            <returns>The DateTime in "HHmm" format.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.ToUnixTimeStamp(System.DateTime)">
            <summary>
            Returns the unix timestamp representation of the DateTime.
            </summary>
            <param name="instance">The DateTime to convert.</param>
            <returns>The DateTime as a Unix timestamp.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Truncate(System.DateTime,System.Int64)">
            <summary>
            Truncate a <see cref="T:System.DateTime"/> to the specified resolution, in ticks.
            </summary>
            <example><c>DateTime.Now.Truncate(TimeSpan.TicksPerHour)</c></example>
            <example><c>DateTime.Now.Truncate(TimeSpan.TicksPerDay)</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to truncate.</param>
            <param name="resolution">The resolution of the truncation (ie., TimeSpan.TicksPerHour
            to truncate to the nearest hour).</param>
            <returns>The truncated <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Truncate(System.DateTime,System.TimeSpan)">
            <summary>
            Truncate a <see cref="T:System.DateTime"/> to the specified <see cref="T:System.TimeSpan"/> resolution.
            </summary>
            <example><c>DateTime.Now.Truncate(TimeSpan.FromHours(1))</c></example>
            <example><c>DateTime.Now.Truncate(TimeSpan.FromDays(1))</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to truncate.</param>
            <param name="resolution">The resolution of the truncation (ie., TimeSpan.FromHours(1)
            to truncate to the nearest hour).</param>
            <returns>The truncated <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Truncate(System.DateTime,System.Int64,System.Int64)">
            <summary>
            Truncate a <see cref="T:System.DateTime"/> to the specified resolution, in ticks.
            </summary>
            <example><c>DateTime.Now.Truncate(TimeSpan.TicksPerHour)</c></example>
            <example><c>DateTime.Now.Truncate(TimeSpan.TicksPerDay)</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to truncate.</param>
            <param name="resolution">The resolution of the truncation (ie., TimeSpan.TicksPerHour
            to truncate to the nearest hour).</param>
            <param name="alignment">The offset within the resolution to truncate to (ie., resolution of TimeSpan.TicksPerHour
            and alignment of TimeSpan.TicksPerMinute to truncate to the nearest first minute of the hour).</param>
            <returns>The truncated <see cref="T:System.DateTime"/>.</returns>
            <remarks>Values for <paramref name="alignment"/> that are not between 0 and <paramref name="resolution"/> act as
            the euclidean division remainder of alignment divided by resolution.
            For example, if <paramref name="resolution"/> is 60, then <paramref name="alignment"/> values of -50, 10, 70, etc
            would all produce the same result.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Truncate(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Truncate a <see cref="T:System.DateTime"/> to the specified <see cref="T:System.TimeSpan"/> resolution.
            </summary>
            <example><c>DateTime.Now.Truncate(TimeSpan.FromHours(1))</c></example>
            <example><c>DateTime.Now.Truncate(TimeSpan.FromDays(1))</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to truncate.</param>
            <param name="resolution">The resolution of the truncation (ie., TimeSpan.FromHours(1)
            to truncate to the nearest hour).</param>
            <param name="alignment">The offset within the resolution to ceiling to (ie., resolution of TimeSpan.FromHours(1)
            and alignment of TimeSpan.FromMinutes(1) to ceiling to the nearest first minute of the hour).</param>
            <returns>The truncated <see cref="T:System.DateTime"/>.</returns>
            <remarks>Values for <paramref name="alignment"/> that are not between 0 and <paramref name="resolution"/> act as
            the euclidean division remainder of alignment divided by resolution.
            For example, if <paramref name="resolution"/> is 01:00, then <paramref name="alignment"/> values
            of -00:50, 00:10, 01:10, etc would all produce the same result.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Ceiling(System.DateTime,System.Int64)">
            <summary>
            Ceiling a <see cref="T:System.DateTime"/> to the specified resolution, in ticks.
            </summary>
            <example><c>DateTime.Now.Ceiling(TimeSpan.TicksPerHour)</c></example>
            <example><c>DateTime.Now.Ceiling(TimeSpan.TicksPerDay)</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to ceiling.</param>
            <param name="resolution">The resolution of the operation (ie., TimeSpan.TicksPerHour
            to ceiling to the nearest hour).</param>
            <returns>The ceilinged <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Ceiling(System.DateTime,System.TimeSpan)">
            <summary>
            Ceiling a <see cref="T:System.DateTime"/> to the specified <see cref="T:System.TimeSpan"/> resolution.
            </summary>
            <example><c>DateTime.Now.Ceiling(TimeSpan.FromHours(1))</c></example>
            <example><c>DateTime.Now.Ceiling(TimeSpan.FromDays(1))</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to ceiling.</param>
            <param name="resolution">The resolution of the operation (ie., TimeSpan.FromHours(1)
            to ceiling to the nearest hour).</param>
            <returns>The ceilinged <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Ceiling(System.DateTime,System.Int64,System.Int64)">
            <summary>
            Ceiling a <see cref="T:System.DateTime"/> to the specified resolution, in ticks.
            </summary>
            <example><c>DateTime.Now.Ceiling(TimeSpan.TicksPerHour)</c></example>
            <example><c>DateTime.Now.Ceiling(TimeSpan.TicksPerDay)</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to ceiling.</param>
            <param name="resolution">The resolution of the operation (ie., TimeSpan.TicksPerHour
            to ceiling to the nearest hour).</param>
            <param name="alignment">The offset within the resolution to ceiling to (ie., resolution of TimeSpan.TicksPerHour
            and alignment of TimeSpan.TicksPerMinute to ceiling to the nearest first minute of the hour).</param>
            <returns>The ceilinged <see cref="T:System.DateTime"/>.</returns>
            <remarks>Values for <paramref name="alignment"/> that are not between 0 and <paramref name="resolution"/> act as
            the euclidean division remainder of alignment divided by resolution.
            For example, if <paramref name="resolution"/> is 60, then <paramref name="alignment"/> values of -50, 10, 70, etc
            would all produce the same result.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.Ceiling(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Ceiling a <see cref="T:System.DateTime"/> to the specified <see cref="T:System.TimeSpan"/> resolution.
            </summary>
            <example><c>DateTime.Now.Ceiling(TimeSpan.FromHours(1))</c></example>
            <example><c>DateTime.Now.Ceiling(TimeSpan.FromDays(1))</c></example>
            <param name="instance">The <see cref="T:System.DateTime"/> to ceiling.</param>
            <param name="resolution">The resolution of the operation (ie., TimeSpan.FromHours(1)
            to ceiling to the nearest hour).</param>
            <param name="alignment">The offset within the resolution to ceiling to (ie., resolution of TimeSpan.FromHours(1)
            and alignment of TimeSpan.FromMinutes(1) to ceiling to the nearest first minute of the hour).</param>
            <returns>The ceilinged <see cref="T:System.DateTime"/>.</returns>
            <remarks>Values for <paramref name="alignment"/> that are not between 0 and <paramref name="resolution"/> act as
            the euclidean division remainder of alignment divided by resolution.
            For example, if <paramref name="resolution"/> is 01:00, then <paramref name="alignment"/> values
            of -00:50, 00:10, 01:10, etc would all produce the same result.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.GetDayId(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Get the DayId of the specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="delta">The <see cref="T:System.DateTime"/> to get the DayId of.</param>
            <param name="timeZoneId">An optional TimeZone ID by which to offset <paramref name="delta"/>.</param>
            <returns>The DayId of <paramref name="delta"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.TimeZoneAdjust(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Adjust a UTC <see cref="T:System.DateTime"/> based on a TimeZone ID.
            </summary>
            <param name="delta">The <see cref="T:System.DateTime"/> value to adjust.</param>
            <param name="timeZoneId">A TimeZone ID, or -1 for UTC.</param>
            <returns>The result of adjusting <paramref name="delta"/> into the timezone specified by
            <paramref name="timeZoneId"/>.</returns>
            <exception cref="T:System.TimeZoneNotFoundException">The specified TimeZone ID is not found.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeDeltaExtensions.TryTimeZoneAdjust(System.DateTime,System.Nullable{System.Int32},System.DateTime@)">
            <summary>
            Attempts to adjust a <see cref="T:System.DateTime"/> based on a Time Zone ID.
            </summary>
            <param name="delta">The <see cref="T:System.DateTime"/> value to adjust.</param>
            <param name="timeZoneId">A TimeZone ID, or -1 for UTC.</param>
            <param name="result">The result of adjusting <paramref name="delta"/> into the timezone specified
            by <paramref name="timeZoneId"/>.</param>
            <returns><c>true</c> if the time zone adjustment succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.DateTimeDeltaExtensions.TimeZoneDictionary">
            <summary>
            Map of time zone IDs to .NET time zone names.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DateTimeDeltaExtensions.MagicStartDate">
            <summary>
            Some sort of magical start delta from which DayId is computed.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DateTimeHelper">
            <summary>
            Contains additional static functions for producing and manipulating <see cref="T:System.DateTime"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeHelper.IsValidTimeZoneId(System.Nullable{System.Int32})">
            <summary>
            Returns whether the specified ID represents a valid time zone ID.
            </summary>
            <param name="id">The ID to check.</param>
            <returns>true if <paramref name="id"/> represents a valid time zone ID; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeHelper.FromUnixTimestamp(System.Double)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> from a unix timestamp.
            </summary>
            <param name="unixTimestamp">The unix timestamp.</param>
            <returns>The corresponding <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeHelper.ReplaceInPattern(System.String,System.DateTime)">
            <summary>
            Replaces <see cref="T:System.DateTime"/> format specifiers in <paramref name="pattern"/> with the specified <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="pattern">The string containing the format specifiers to replace.</param>
            <param name="value">The <see cref="T:System.DateTime"/> value to replace.</param>
            <returns><paramref name="pattern"/> with all format specifiers replaced by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="pattern"/> contains an invalid pattern (see remarks for details).</exception>
            <remarks>
            <para>
            <see cref="T:System.DateTime"/> format specifiers must be delimited on either side by the pattern start and pattern end characters,
            '{' and '}', respectively.  For example, <c>"{yyyy}/{MM}/{dd}"</c> or <c>"{yyyy/MM/dd}"</c>.
            </para>
            <para>
            Format specifier replacement works in exactly the same way as normal pattern replacement in <see cref="M:System.DateTime.ToString(System.String)"/>
            and associated overrides.  However, format specifiers will only be replaced when delimited in a pattern via the pattern start and
            end characters; any format specifier outside these delimiters will be copied literally to the output without replacement.
            </para>
            <para>
            In order to escape the pattern start or end characters, place two in a sequence; for example, "{{yyyy}}".
            </para>
            <para>
            The pattern start and end characters must be balanced within <paramref name="pattern"/>.  Furthermore, they cannot be nested (there
            may only be one active pattern at once).  Violations to either of these conditions will result in a <see cref="T:System.FormatException"/> being
            thrown.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.DateTimeRange">
            <summary>
            Represents a range of time, typically expressed as two <see cref="T:System.DateTime"/> values or a <see cref="T:System.DateTime"/>
            value and a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <remarks>
            <para>
            As a <see cref="T:Microsoft.BI.Common.DateTimeRange"/> is based on at least one <see cref="T:System.DateTime"/> value, it can represent ranges of dates
            and times with values starting or ending between from 00:00:00 (midnight), January 1, 0001 Anno Domini (Common Era) through
            11:59:59 P.M., December 31st, 9999 A.D. (C.E.) in the Gregorian calendar, just like <see cref="T:System.DateTime"/> values.
            </para>
            <para>
            A calculation using a <see cref="T:Microsoft.BI.Common.DateTimeRange"/> structure, such as <see cref="M:Microsoft.BI.Common.DateTimeRange.Intersect(Microsoft.BI.Common.DateTimeRange)"/> or <see cref="M:Microsoft.BI.Common.DateTimeRange.Union(Microsoft.BI.Common.DateTimeRange)"/>, does
            not modify the value of the structure.  Instead, the calculation returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> structure whose
            value is the result of the calculation.
            </para>
            <para>
            A <see cref="T:Microsoft.BI.Common.DateTimeRange"/> differs from a <see cref="T:System.DateTime"/> or a <see cref="T:System.TimeSpan"/> in that a <see cref="T:System.DateTime"/>
            represents an instant in time and a <see cref="T:System.TimeSpan"/> represents a time interval, whereas a <see cref="T:Microsoft.BI.Common.DateTimeRange"/>
            represents both an instant in time and a time interval starting at that instant in time.
            </para>
            <para>
            You can add or subtract a time interval from the beginning or end of a <see cref="T:Microsoft.BI.Common.DateTimeRange"/> object.  Time intervals can
            be negative or positive, can be expressed in units such as ticks or seconds, or can be expressed as a <see cref="T:System.TimeSpan"/>
            object.
            </para>
            <para>
            The interval expressed by the <see cref="T:Microsoft.BI.Common.DateTimeRange"/> is inclusive at the start and exclusive at the end.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.DateTimeRange.Start">
            <summary>
            Gets a <see cref="T:System.DateTime"/> value representing the start of this instance.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> property is inclusive.
            </para>
            <para>
            Since <see cref="T:System.DateTime"/> objects are immutable, you cannot change the interval of a <see cref="T:Microsoft.BI.Common.DateTimeRange"/> by calling
            <see cref="M:System.DateTime.Add(System.TimeSpan)"/> on this property.  Instead, use <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToEnd(System.TimeSpan)"/>, <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToStart(System.TimeSpan)"/>,
            <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromEnd(System.TimeSpan)"/>, or <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromStart(System.TimeSpan)"/> to create a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> with the desired values.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.DateTimeRange.End">
            <summary>
            Gets a <see cref="T:System.DateTime"/> value representing the end of this instance.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> property is exclusive.
            </para>
            <para>
            Since <see cref="T:System.DateTime"/> objects are immutable, you cannot change the interval of a <see cref="T:Microsoft.BI.Common.DateTimeRange"/> by calling
            <see cref="M:System.DateTime.Add(System.TimeSpan)"/> on this property.  Instead, use <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToEnd(System.TimeSpan)"/>, <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToStart(System.TimeSpan)"/>,
            <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromEnd(System.TimeSpan)"/>, or <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromStart(System.TimeSpan)"/> to create a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> with the desired values.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.DateTimeRange.Interval">
            <summary>
            Gets the range of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <remarks>
            <para>
            The value returned by this property is always positive or zero.
            </para>
            <para>
            Since <see cref="T:System.TimeSpan"/> objects are immutable, you cannot change the interval of a <see cref="T:Microsoft.BI.Common.DateTimeRange"/> by calling
            <see cref="M:System.TimeSpan.Add(System.TimeSpan)"/> on this property.  Instead, use <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToEnd(System.TimeSpan)"/>, <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToStart(System.TimeSpan)"/>,
            <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromEnd(System.TimeSpan)"/>, or <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromStart(System.TimeSpan)"/> to create a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> with the desired values.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.#ctor(System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/> structure with the specified start and a duration of 1 tick.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value representing the start of the range.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/> structure with the specified start and end date time.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value representing the start of the range.</param>
            <param name="end">A <see cref="T:System.DateTime"/> value representing the end of the range.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/> structure with the specified start date time and interval.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value representing the start of the range.</param>
            <param name="interval">A <see cref="T:System.TimeSpan"/> value representing the amount of time in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval"/> is <see cref="F:System.TimeSpan.Zero"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.AddToEnd(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that adds the value of the specified <see cref="T:System.TimeSpan"/> to the range in this instance.
            </summary>
            <param name="value">A positive or negative time interval.</param>
            <returns>An object whose value is the sum of the date, time, and range represented by this instance and the time interval represented
            by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting value's <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> property is less than <see cref="F:System.DateTime.MinValue"/>,
            greater than <see cref="F:System.DateTime.MaxValue"/>, or less than this value's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> property.</exception>
            <remarks>
            <para>
            The value specified by <paramref name="value"/> is added to the end of the range represented by this instance.  If <paramref name="value"/>
            is positive, the new range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be longer than the current instance; if it is negative, the new range's
            <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be shorter than the current instance.
            </para>
            <para>
            You can use the <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToEnd(System.TimeSpan)"/> method to add more than one kind of time interval (days, hours, minutes, seconds, or milliseconds)
            in a single operation.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToEnd(System.TimeSpan)"/> method takes into account leap years and the number of days in a month when performing date arithmetic.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose
            value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.AddToStart(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that adds the value of the specified <see cref="T:System.TimeSpan"/> to the range in this instance.
            </summary>
            <param name="value">A positive or negative time interval.</param>
            <returns>An object whose value is the sum of the date, time, and range represented by this instance and the time interval represented
            by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting value's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> property is less than <see cref="F:System.DateTime.MinValue"/>,
            greater than <see cref="F:System.DateTime.MaxValue"/>, or greater than this value's <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> property.</exception>
            <remarks>
            <para>
            The value specified by <paramref name="value"/> is added to the start of the range represented by this instance.  If <paramref name="value"/>
            is positive, the new range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be shorter than the current instance; if it is negative, the new range's
            <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be longer than the current instance.
            </para>
            <para>
            You can use the <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToStart(System.TimeSpan)"/> method to add more than one kind of time interval (days, hours, minutes, seconds, or milliseconds)
            in a single operation.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.DateTimeRange.AddToStart(System.TimeSpan)"/> method takes into account leap years and the number of days in a month when performing date arithmetic.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose
            value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Contains(System.DateTime)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.DateTimeRange"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> to locate in the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</param>
            <returns><c>true</c> if <paramref name="value"/> is contained in the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/> values are inclusive - if <paramref name="value"/> is equal to <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> or <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/>,
            this method will return <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Enumerate(System.TimeSpan)">
            <summary>
            Returns an enumerable collection of <see cref="T:System.DateTime"/> values between <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/>.
            </summary>
            <param name="interval">The amount of time between each <see cref="T:System.DateTime"/> in the enumerable.</param>
            <returns>An enumerable collection of <see cref="T:System.DateTime"/> values between <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval"/> is zero.</exception>
            <remarks>
            <para>
            The <see cref="T:System.DateTime"/> values returned by this method are inclusive.  For example, enumerating over a <see cref="T:Microsoft.BI.Common.DateTimeRange"/>
            from 2000/01/01 03:00:00 to 2000/01/01 05:00:00 (2 hours) at a 1 hour interval will yield 3 times: 2000/01/01 03:00:00,
            2000/01/01 04:00:00, and 2000/01/01 05:00:00.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Equals(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:Microsoft.BI.Common.DateTimeRange"/> instance.
            </summary>
            <param name="value">The object to compare to this instance.</param>
            <returns><c>true</c> if the <paramref name="value"/> parameter equals the value of this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The current instance and <paramref name="value"/> are equal if their <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> properties
            are equal.
            </para>
            <para>
            This method implements the <see cref="T:System.IEquatable`1"/> interface, and performs slightly better than the <see cref="M:Microsoft.BI.Common.DateTimeRange.Equals(System.Object)"/>
            because the <paramref name="value"/> parameter does not have to be converted to a <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">The object to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="value"/> is an instance of <see cref="T:Microsoft.BI.Common.DateTimeRange"/> and equals the value of this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The current instance and <paramref name="value"/> are equal if their <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> properties
            are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Except(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that contains all values not found in the specified <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to remove from the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that contains only the values from the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> is a proper subset of the current range.</exception>
            <remarks>
            <para>
            Unlike normal set operations, if <paramref name="value"/> is a proper subset of the current range, this method will throw
            an <see cref="T:System.InvalidOperationException"/>, as this would split the range into two pieces.
            </para>
            <para>
            If the current instance and <paramref name="value"/> do not overlap, this method returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> starting
            at the current instance's start with range <see cref="F:System.TimeSpan.Zero"/>.
            </para>
            <para>
            The direction of the new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> is determined based on the direction of the current value.
            The direction of <paramref name="value"/> has no effect on the direction.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.GetRangeFromEnd(System.DateTime)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> using the current instance's <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> and the specified
            value for <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/>.
            </summary>
            <param name="value">The value to use for the new instance's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/>.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> from <paramref name="value"/> to the current instance's <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/>.</returns>
            <remarks>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose
            value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.GetRangeFromStart(System.DateTime)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> using the current instance's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and the specified
            value for <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/>.
            </summary>
            <param name="value">The value to use for the new instance's <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/>.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> from the current instance's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> to <paramref name="value"/>.</returns>
            <remarks>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose
            value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Intersect(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that contains the intersection of the current value and the specified
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to intersect with the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that contains the intersection of the current value and the specified
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> does not overlap with the current
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</exception>
            <remarks>
            <para>
            The direction of the new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> is determined based on the direction of the current value.
            The direction of <paramref name="value"/> has no effect on the direction.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.IsProperSubsetOf(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Determines whether the current range is a proper (strict) subset of a specified <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to compare to the current range.</param>
            <returns><c>true</c> if the current range is a proper subset of <paramref name="other"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If the current range is a proper subset of <paramref name="other"/>, <paramref name="other"/> must be larger than the current
            range.
            </para>
            <para>
            An empty range is a proper subset of any other range as long as the other range contains the range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/>.
            </para>
            <para>
            This method always returns <c>false</c> if the current range is larger than or the same size as <paramref name="other"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.IsProperSupersetOf(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Determines whether the current range is a proper (strict) superset of a specified <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to compare to the current range.</param>
            <returns><c>true</c> if the current range is a proper superset of <paramref name="other"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If the current range is a proper superset of <paramref name="other"/>, <paramref name="other"/> must be smaller than the current
            range.
            </para>
            <para>
            A range range is a proper superset of any other empty range as long as the current range contains the other range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/>.
            </para>
            <para>
            This method always returns <c>false</c> if the current range is smaller than or the same size as <paramref name="other"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.IsSubsetOf(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Determines whether the current range is a subset of a specified <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to compare to the current range.</param>
            <returns><c>true</c> if the current range is a subset of <paramref name="other"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If <paramref name="other"/> contains the same elements as the current range, the current range is still considered a subset
            of <paramref name="other"/>.
            </para>
            <para>
            This method always returns <c>false</c> if the current range contains any value not in <paramref name="other"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.IsSupersetOf(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Determines whether the current range is a superset of a specified <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to compare to the current range.</param>
            <returns><c>true</c> if the current range is a superset of <paramref name="other"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If <paramref name="other"/> contains the same elements as the current range, the current range is still considered a superset
            of <paramref name="other"/>.
            </para>
            <para>
            This method always returns <c>false</c> if the current range is smaller than <paramref name="other"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Overlaps(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Determines whether the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/> overlaps with another <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to compare to the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</param>
            <returns><c>true</c> if the current instance and <paramref name="value"/> overlap; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            Two <see cref="T:Microsoft.BI.Common.DateTimeRange"/> values are defined as overlapping if the <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and/or <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/>
            value of one instance is between the <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> value of the other instance.  The
            comparison is inclusive on the start of the range and exclusive on the end of the range. A <see cref="T:Microsoft.BI.Common.DateTimeRange"/>
            always overlaps itself.
            </para>
            <para>
            Overlap checking is direction-insensitive; it returns the same result whether or not either <see cref="T:Microsoft.BI.Common.DateTimeRange"/>
            is reversed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Slide(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that slides the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/> by the specified value.
            </summary>
            <param name="value">A positive or negative time interval.</param>
            <returns>An object whose value is offset by the time interval represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Microsoft.BI.Common.DateTimeRange"/> <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> is less than
            <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
            <remarks>
            <para>
            The value specified by <paramref name="value"/> is added to the start and end of the range represented by this instance.
            If <paramref name="value"/> is positive, the new range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> will be greater than
            than the current instance; if it is negative, the new range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> and <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> will be less than
            the current instance.
            </para>
            <para>
            If <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> is equal to <see cref="F:System.DateTime.MinValue"/>, it will not be adjusted by <see cref="M:Microsoft.BI.Common.DateTimeRange.Slide(System.TimeSpan)"/>.  If
            <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> is equal to <see cref="F:System.DateTime.MaxValue"/>, it will not be adjusted by <see cref="M:Microsoft.BI.Common.DateTimeRange.Slide(System.TimeSpan)"/>.  Otherwise,
            the <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> of the new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> will be the same as the <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> of the
            old <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.DateTimeRange.Slide(System.TimeSpan)"/> method takes into account leap years and the number of days in a month when performing date arithmetic.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose
            value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.SubtractFromEnd(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that subtracts the value of the specified <see cref="T:System.TimeSpan"/> from the range in this instance.
            </summary>
            <param name="value">A positive or negative time interval.</param>
            <returns>An object whose value is the difference of the date, time, and range represented by this instance and the time interval represented
            by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting value's <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> property is less than <see cref="F:System.DateTime.MinValue"/>,
            greater than <see cref="F:System.DateTime.MaxValue"/>, or less than this value's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> property.</exception>
            <remarks>
            <para>
            The value specified by <paramref name="value"/> is subtracted from the end of the range represented by this instance.  If <paramref name="value"/>
            is positive, the new range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be shorter than the current instance; if it is negative, the new range's
            <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be longer than the current instance.
            </para>
            <para>
            You can use the <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromEnd(System.TimeSpan)"/> method to add more than one kind of time interval (days, hours, minutes, seconds, or milliseconds)
            in a single operation.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromEnd(System.TimeSpan)"/> method takes into account leap years and the number of days in a month when performing date arithmetic.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose
            value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.SubtractFromStart(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that subtracts the value of the specified <see cref="T:System.TimeSpan"/> from the range in this instance.
            </summary>
            <param name="value">A positive or negative time interval.</param>
            <returns>An object whose value is the difference of the date, time, and range represented by this instance and the time interval represented
            by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting value's <see cref="P:Microsoft.BI.Common.DateTimeRange.Start"/> property is less than <see cref="F:System.DateTime.MinValue"/>,
            greater than <see cref="F:System.DateTime.MaxValue"/>, or greater than the current value's <see cref="P:Microsoft.BI.Common.DateTimeRange.End"/> property.</exception>
            <remarks>
            <para>
            The value specified by <paramref name="value"/> is subtracted from the start of the range represented by this instance.  If <paramref name="value"/>
            is positive, the new range's <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be longer than the current instance; if it is negative, the new range's
            <see cref="P:Microsoft.BI.Common.DateTimeRange.Interval"/> will be shorter than the current instance.  If the current instance is reversed, the above behavior is also reversed.
            </para>
            <para>
            You can use the <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromStart(System.TimeSpan)"/> method to add more than one kind of time interval (days, hours, minutes, seconds, or milliseconds)
            in a single operation.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.DateTimeRange.SubtractFromStart(System.TimeSpan)"/> method takes into account leap years and the number of days in a month when performing date arithmetic.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose
            value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.ToString">
            <summary>
            Converts the value of the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/> object to its equivalent string representation.
            </summary>
            <returns>A string representation of the value of the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/> object.</returns>
            <remarks>
            <para>
            The format of this string is not locked and should not be relied upon.  It may change at any time.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.Union(Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Returns a new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that contains the union of the current value and the specified
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.DateTimeRange"/> to union with the current <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> that contains the union of the current value and the specified
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> does not overlap with the current
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.</exception>
            <remarks>
            <para>
            The direction of the new <see cref="T:Microsoft.BI.Common.DateTimeRange"/> is determined based on the direction of the current value.
            The direction of <paramref name="value"/> has no effect on the direction.
            </para>
            <para>
            This method does not change the value of the <see cref="T:Microsoft.BI.Common.DateTimeRange"/>.  Instead, it returns a new
            <see cref="T:Microsoft.BI.Common.DateTimeRange"/> whose value is the result of this operation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.op_Equality(Microsoft.BI.Common.DateTimeRange,Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Determines whether two specified instances of <see cref="T:Microsoft.BI.Common.DateTimeRange"/> are equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="a"/> and <paramref name="b"/> represent the same date, time, and interval; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DateTimeRange.op_Inequality(Microsoft.BI.Common.DateTimeRange,Microsoft.BI.Common.DateTimeRange)">
            <summary>
            Determines whether two specified instances of <see cref="T:Microsoft.BI.Common.DateTimeRange"/> are not equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="a"/> and <paramref name="b"/> do not represent the same date, time, and interval; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DefaultSetter">
            <summary>
            class used to check for nulls in nullable types, and assign them default values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DefaultSetter.CheckForNullDefault``1(System.Object)">
            <summary>
            Checks if the input that is boxed is null or not.
            If null then returns the default of its type
            If not null then returns the input in its actual type
            </summary>
            <param name="input">Input that is boxed as object</param>
            <typeparam name="T">Actual type of the boxed input</typeparam>
            <returns>Input in its actual type or its default value if input is null</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DefaultSetter.CheckForNull``1(System.Object)">
            <summary>
            Check if the input that is boxed, if it is null or not
            If it is null then it checks if the value is special default set in this class's static constructor 
            If it is not null and not the special default value, it returns the input in its actual type
            </summary>
            <param name="input">Input that is boxed as object</param>
            <typeparam name="T">Actual type of the boxed input</typeparam>
            <returns>Input in its actual type or its default value if input is null</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DefaultSetter.IsEqualToSpecialNullValue``1(``0)">
            <summary>
            Check if the value of the type T is special null value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns>True if the value is special null value. False otherwise</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicAccessor`2">
            <summary>
            Class used for accesing and converting generic variables during runtime.
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicAccessor`2.Assign">
            <summary>
            Function "pointer" that we want to use to access generic value and assign them to strongly typed value, when we know
            that they are the same.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicAccessor`2.CreateAssigner">
            <summary>
            Function that builds simple assigning expression tree based on generic arguments.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicContractBase">
            <summary>
            The base class for a dynamic contract generated by a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicContractBase.Target">
            <summary>
            The target of the dynamic contract.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractBase.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/> class on the specified target.
            </summary>
            <param name="target">The target of the dynamic contract.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare to the current <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/>.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/> and its <see cref="P:Microsoft.BI.Common.Dynamic.DynamicContractBase.Target"/> is
            equal to the current <see cref="P:Microsoft.BI.Common.Dynamic.DynamicContractBase.Target"/> value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractBase.GetHashCode">
            <summary>
            Serves as a hash code for the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/>.
            </summary>
            <returns>A hash code for the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/>.</returns>
            <remarks>
            The hash code of a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/> is defined as the hash code of its <see cref="P:Microsoft.BI.Common.Dynamic.DynamicContractBase.Target"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represent the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/>.</returns>
            <remarks>
            The string representation of a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/> is defined as the string representatino of its
            <see cref="P:Microsoft.BI.Common.Dynamic.DynamicContractBase.Target"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractBase.GetCallSite(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractCallSite"/> for the member with the specified name.
            </summary>
            <param name="member">The name of the member.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractCallSite"/> for the specified member.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicContractCallSite">
            <summary>
            Represents a late-bound call site for a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicContractCallSite.Target">
            <summary>
            Gets the target of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractCallSite"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicContractCallSite.Member">
            <summary>
            Gets the name of the member of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractCallSite"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractCallSite.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractCallSite"/> class using the specified target and member name.
            </summary>
            <param name="target">The target of the call site.</param>
            <param name="member">The name of the member for the call site.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractCallSite.ResolveCall(System.Object[])">
            <summary>
            Replaces the <see cref="P:Microsoft.BI.Common.Dynamic.DynamicContractCallSite.Invoke"/> target with a call to the actual underlying method.
            </summary>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the method.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicContractCallSite.Invoke">
            <summary>
            Invokes the underlying method on the underlying target.
            </summary>
            <remarks>
            This function is "thunked" at runtime as it is called (late-binding).
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder">
            <summary>
            Class that is responsible for creating a dynamic type that extends <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/> and implements one or more interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder"/> class that will generate a dynamic contract type for
            the specified interface <see cref="T:System.Type"/>.
            </summary>
            <param name="targetType">The interface <see cref="T:System.Type"/> for which to generate the dynamic contract.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.BuildType">
            <summary>
            Builds the dynamic <see cref="T:System.Type"/> that facilitates interacting with an object that implements a weak contract of the specified
            interface.
            </summary>
            <returns>The generated dynamic <see cref="T:System.Type"/>.</returns>
            <remarks>
            The types generated by this method are cached at the app domain level.  If the same type has already been generated, it will not
            be regenerated; instead, the original generated type will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.BuildContractType(System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            Builds a dynamic type for interacting with the specified weak contract.
            </summary>
            <param name="module">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/> in which to generate the type.</param>
            <param name="name">The name of the type to generate.</param>
            <returns>The generated type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementConstructor">
            <summary>
            Implements a constructor on the generated type that calls <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractBase"/>'s constructor.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterface(System.Type)">
            <summary>
            Implements the methods of a single interface.
            </summary>
            <param name="interfaceType">The interface containing the methods to implement.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfaceMember(System.Reflection.MemberInfo)">
            <summary>
            Implements a single member of an interface.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> containing the member to implement.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="member"/> is not one of the expected member types.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfaceMethod(System.Reflection.MethodInfo)">
            <summary>
            Implements a method in an interface.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> containing information about the method.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.EmitMethod(System.String,System.Type[],System.Type,System.String,System.Boolean)">
            <summary>
            Generates the necessary IL code to call a method with the specified name, parameters, and return type.
            </summary>
            <param name="methodName">The name of the method in the generated type.</param>
            <param name="parameterTypes">The types of the parameters to the method.</param>
            <param name="returnType">The type returned by the method.</param>
            <param name="targetMethodName">The name of the method in the interface.</param>
            <param name="specialName"><c>true</c> if the method should be marked with <see cref="F:System.Reflection.MethodAttributes.SpecialName"/>.</param>
            <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder"/> that is associated with the generated method.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.EmitGetCallSite(System.String,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits the IL code to conditionally call <see cref="M:Microsoft.BI.Common.Dynamic.DynamicContractBase.GetCallSite(System.String)"/> if not already initialized.
            </summary>
            <param name="targetMethodName">The name of the method on the target object.</param>
            <param name="gen">The <see cref="T:System.Reflection.Emit.ILGenerator"/> with which to generate IL.</param>
            <returns>A <see cref="T:System.Reflection.Emit.FieldBuilder"/> instance containing the generated field.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfaceProperty(System.Reflection.PropertyInfo)">
            <summary>
            Implements a property in an interface.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the property.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfacePropertyGetter(System.Reflection.PropertyInfo,System.Reflection.Emit.PropertyBuilder,System.Type[])">
            <summary>
            Implements a property getter method.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the property.</param>
            <param name="propertyBuilder">The <see cref="T:System.Reflection.Emit.PropertyBuilder"/> to associate the generated method with.</param>
            <param name="parameterTypes">The parameter types of the property, for indexed properties.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfacePropertySetter(System.Reflection.PropertyInfo,System.Reflection.Emit.PropertyBuilder,System.Type[])">
            <summary>
            Implements a property setter method.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the property.</param>
            <param name="propertyBuilder">The <see cref="T:System.Reflection.Emit.PropertyBuilder"/> to associate the generated method with.</param>
            <param name="parameterTypes">The parameter types of the property, for indexed properties.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfaceEvent(System.Reflection.EventInfo)">
            <summary>
            Implements an event in an interface.
            </summary>
            <param name="eventInfo">The <see cref="T:System.Reflection.EventInfo"/> containing information about the event.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfaceEventAddMethod(System.Reflection.EventInfo,System.Reflection.Emit.EventBuilder,System.Type)">
            <summary>
            Implements an event adder method.
            </summary>
            <param name="eventInfo">The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the event.</param>
            <param name="eventBuilder">The <see cref="T:System.Reflection.Emit.PropertyBuilder"/> to associate the generated method with.</param>
            <param name="eventHandlerType">The type of the event handler.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.ImplementInterfaceEventRemoveMethod(System.Reflection.EventInfo,System.Reflection.Emit.EventBuilder,System.Type)">
            <summary>
            Implements an event remover method.
            </summary>
            <param name="eventInfo">The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the event.</param>
            <param name="eventBuilder">The <see cref="T:System.Reflection.Emit.PropertyBuilder"/> to associate the generated method with.</param>
            <param name="eventHandlerType">The type of the event handler.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.GetWrappedType(System.Type)">
            <summary>
            Replaces a generic type parameter in another assembly with the generic type parameter of the appropriate type in the
            current object's type definition.
            </summary>
            <param name="type">The type to check.</param>
            <returns>The wrapped type.</returns>
            <remarks>
            For generic types, the generic type parameter must match the original type's generic type parameter or else accessing
            the type's members will fail at runtime.  This method replaces generic type definitions from other assemblies with the
            generic type of the type that we are generating.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.GetWrappedTypes(System.Type[])">
            <summary>
            Replaces a generic type parameter in another assembly with the generic type parameter of the appropriate type in the
            current object's type definition.
            </summary>
            <param name="types">The types to check</param>
            <returns>The wrapped types.</returns>
            <remarks>
            For generic types, the generic type parameter must match the original type's generic type parameter or else accessing
            the type's members will fail at runtime.  This method replaces generic type definitions from other assemblies with the
            generic type of the type that we are generating.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.GetTypeName(System.Type)">
            <summary>
            Gets the name of the dynamic type to generate based on the target type.
            </summary>
            <param name="targetType">The target type.</param>
            <returns>The name of the dynamically-generated type.</returns>
            <remarks>
            <para>
            For non-generic types, the generated name is simply <c>&lt;&gt;__DynamicContracts.</c> prepended to the target type's full name.
            </para>
            <para>
            For generic types, the generated name is the same as for non-generic types, with the addition of a generic type suffix.  The
            generic type suffix includes the names of each type in the generic arguments of <paramref name="targetType"/>.  For reference
            types, the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder"/> will reuse an existing dynamic type, as the generated code is exactly
            the same for all reference types.  It will create a new dynamic type for each generic instance with different value type
            parameters.  This behavior mirrors the behavior of the C# JIT compiler.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.GetInterfaces(System.Type)">
            <summary>
            Returns an enumerable collection of interfaces that are implemented by the supplied interface.
            </summary>
            <param name="interfaceType">The interface to enumerate.</param>
            <returns>An enumerable collection of all the interfaces (including <paramref name="interfaceType"/>) that are implemented
            by <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.GetInterfacesRecursive(System.Collections.Generic.ICollection{System.Type},System.Type)">
            <summary>
            Returns an enumerable collection of interfaces that are implemented by the supplied interface.
            </summary>
            <param name="interfaces">The collection of current interfaces.</param>
            <param name="interfaceType">The interface to enumerate.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder.IsValueType(System.Type)">
            <summary>
            Returns whether the specified type represents a value type.  This method also returns whether a generic parameter originally
            represented a value type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns><c>true</c> if <paramref name="type"/> is a value type or if <paramref name="type"/> represents a generic type parameter for a
            value type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder._TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the object that the generated type will target.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder._TypeBuilder">
            <summary>
            The <see cref="T:System.Reflection.Emit.TypeBuilder"/> used to build the dynamic type.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder._GenericParameterBuilders">
            <summary>
            An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> instances that represent the generic arguments of a generic type.
            </summary>
            <remarks>
            This array will be <c>null</c> if <see cref="F:Microsoft.BI.Common.Dynamic.DynamicContractTypeBuilder._TargetType"/> is not a generic type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicDataRow">
            <summary>
            A dynamic wrapper around a <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicDataRow.Row">
            <summary>
            The underlying <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> class using the specified <see cref="T:System.Data.DataTable"/> as the row's schema.
            </summary>
            <param name="schema">The <see cref="T:System.Data.DataTable"/> to use for the row's schema.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="schema"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            Creating a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> via this constructor will create a row that has the same schema as <paramref name="schema"/>.
            Creating a row in this way does not add the underlying <see cref="T:System.Data.DataRow"/> to the data table.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> class from the specified <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="row">The <see cref="T:System.Data.DataRow"/> to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="row"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            The <paramref name="row"/> passed to this constructor is used directly in the created <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>; it is not copied.
            Therefore, changes to either the original <see cref="T:System.Data.DataRow"/> or the resulting <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> will be immediately
            visible in both references.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.GetDynamicMemberNames">
            <summary>
            Returns an enumeration of all columns in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.
            </summary>
            <returns>An enumeration of all columns in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation.</param>
            <param name="result">The result of the index operation.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="indexes"/> does not consist of a single index that is either an
            integer or a string.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index specified in <paramref name="indexes"/> is less than zero or greater
            than the number of columns in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The index specified in <paramref name="indexes"/> does not refer to the name of a
            column in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</exception>
            <remarks>
            <para>
            If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a
            run-time exception is thrown.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="result">The result of the get operation.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a
            run-time exception is thrown.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation.</param>
            <param name="value">The value to set to the object that has the specified index.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="indexes"/> does not consist of a single index that is either an
            integer or a string.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index specified in <paramref name="indexes"/> is less than zero or greater
            than the number of columns in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The index specified in <paramref name="indexes"/> does not refer to the name of a
            column in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> is not implicitly castable to the type of the column.</exception>
            <remarks>
            <para>
            If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a
            run-time exception is thrown.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="value">The value to set to the member.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> is not implicitly castable to the type of the column.</exception>
            <remarks>
            <para>
            If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a
            run-time exception is thrown.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.op_Explicit(Microsoft.BI.Common.Dynamic.DynamicDataRow)~System.Data.DataRow">
            <summary>
            Returns the underlying <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="instance">The <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> instance to cast.</param>
            <returns>The underlying <see cref="T:System.Data.DataRow"/> of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</returns>
            <remarks>
            <para>
            This allows <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> instances to be cast to <see cref="T:System.Data.DataRow"/> instances.  This returns the same
            instance as is used by the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>, meaning that changes in the former will appear in the latter, and
            vice versa.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.EnsureColumn(System.Object)">
            <summary>
            Ensures that the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> contains a column with the specified string or integer index.
            </summary>
            <param name="index">The string or integer index.</param>
            <returns>The <see cref="T:System.Data.DataColumn"/> at the specified index.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="index"/> is a string and does not exist in the
            <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is an integer and is out of range.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is not a string or integer.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.GetValue(System.Data.DataColumn)">
            <summary>
            Gets the value of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> at the specified <see cref="T:System.Data.DataColumn"/>.
            </summary>
            <param name="column">The column in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> to get.</param>
            <returns>The value of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> at the specified <see cref="T:System.Data.DataColumn"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRow.UpdateValue(System.Data.DataColumn,System.Object@)">
            <summary>
            Updates the return value from the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/> to the correct type based on the data type of the column.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> where the value came from.</param>
            <param name="value">The value that was stored in the column.</param>
            <remarks>
            <para>
            This method transforms <see cref="F:System.DBNull.Value"/> into either <c>null</c> or the empty value for the column type,
            depending on the value of the <see cref="P:System.Data.DataColumn.AllowDBNull"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicDataRowExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Data.DataRow"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicDataRowExtensions.AsDynamic(System.Data.DataRow)">
            <summary>
            Returns the <see cref="T:System.Data.DataRow"/> as a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.
            </summary>
            <param name="row">The <see cref="T:System.Data.DataRow"/> to return as a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</param>
            <returns><paramref name="row"/> as a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicDataRow"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicObjectExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Object"/> instances for interacting with them dynamically.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicObjectExtensions.AsDynamic``1(``0,System.Reflection.BindingFlags,System.Reflection.MemberFlags,Microsoft.BI.Common.Dynamic.MemberBindOptions)">
            <summary>
            Returns the object as a <c>dynamic</c> object.
            </summary>
            <typeparam name="T">The type of the object to return as <c>dynamic</c>.</typeparam>
            <param name="instance">The object to return as <c>dynamic</c>.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use when resolving members on the object.</param>
            <param name="members">The <see cref="T:System.Reflection.MemberFlags"/> to use when resolving members on the object.</param>
            <param name="bindOptions">The <see cref="T:Microsoft.BI.Common.Dynamic.MemberBindOptions"/> to use when binding members.</param>
            <returns>The object as a <c>dynamic</c> object.</returns>
            <remarks>
            <para>
            Returns a statically-typed object instance as a <c>dynamic</c> object.  Members will be accessed at runtime via
            reflection.
            </para>
            <para>
            <paramref name="flags"/> and <paramref name="members"/> are used to control which members are visible in the
            dynamic object.  The default behavior is that all publicly-visible fields, properties, and members can be
            accessed dynamically.  By providing different <see cref="T:System.Reflection.BindingFlags"/>, you can include private members and/or
            exclude public members.  By providing different <see cref="T:System.Reflection.MemberFlags"/>, you can change the members that are
            visible (for example, by excluding methods, you will only see public properties and fields).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicObjectExtensions.AsAn``1(System.Object)">
            <summary>
            Creates a wrapper object of type <typeparamref name="T" /> around the specified <paramref name="instance" /> object.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="instance">The object to be wrapped.</param>
            <returns>A wrapper around the specified object that allows it to be accessed as if it implemented <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The specified target type is not an interface.</exception>
            <remarks>
            <paramref name="instance"/> need not actually implement <typeparamref name="T"/>.  If it does not implement <typeparamref name="T"/>,
            then the wrapper type will make it possible to use <paramref name="instance"/> as if it implemented the interface.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject">
            <summary>
            A wrapper class around a standard "static" (non-dynamic) object that implements the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/>
            interface.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject.#ctor(System.Object,System.Reflection.BindingFlags,System.Reflection.MemberFlags,Microsoft.BI.Common.Dynamic.MemberBindOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject"/> class using the specified value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use when reflecting for members.</param>
            <param name="members">The <see cref="T:System.Reflection.MemberFlags"/> to use when reflecting for members.</param>
            <param name="bindOptions">The <see cref="T:Microsoft.BI.Common.Dynamic.MemberBindOptions"/> to use when binding members.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is a dynamic object.</exception>
            <remarks>
            <para>
            Creates a new <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject"/> that can be used to access members in the underlying object
            via the Dynamic Language Runtime through reflection.  You cannot create a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject"/>
            with a dynamic object; only object instances or values of static types are supported.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> implementation for converting <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> objects to their underlying types.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter"/> class.
            </summary>
            <param name="type">The concrete type of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter"/>.</param>
            <remarks>
            This method is called automatically by the .NET Framework when instantiating a <see cref="T:System.ComponentModel.TypeConverter"/> of this type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns><c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns><c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>An object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObjectTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>An object that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1">
            <summary>
            A wrapper class around a standard "static" (non-dynamic) object that implements the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/>
            interface.
            </summary>
            <typeparam name="T">The type of the object contained in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.</typeparam>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.DefaultBindingFlags">
            <summary>
            The default <see cref="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.BindingFlags"/> to use when not otherwise specified.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.DefaultMemberFlags">
            <summary>
            The default <see cref="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.MemberFlags"/> to use when not otherwise specified.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value">
            <summary>
            The gets the underlying object.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.#ctor(`0,System.Reflection.BindingFlags,System.Reflection.MemberFlags,Microsoft.BI.Common.Dynamic.MemberBindOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> class using the specified value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="flags">The <see cref="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.BindingFlags"/> to use when reflecting for members.</param>
            <param name="members">The <see cref="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.MemberFlags"/> to use when reflecting for members.</param>
            <param name="bindOptions">The <see cref="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.MemberBindOptions"/> to use when binding members.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is a dynamic object.</exception>
            <remarks>
            <para>
            Creates a new <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> that can be used to access members in the underlying object
            via the Dynamic Language Runtime through reflection.  You cannot create a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>
            with a dynamic object; only object instances or values of static types are supported.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.GetDynamicMemberNames">
            <summary>
            Returns an enumeration of all members in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.
            </summary>
            <returns>An enumeration of all members in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="result">The result of the get operation.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a
            run-time exception is thrown.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation.</param>
            <param name="result">The result of the get operation.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a
            run-time exception is thrown.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="value">The value to set to the member.</param>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> is not implicitly castable to the type of the column.</exception>
            <remarks>
            <para>
            If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a
            run-time exception is thrown.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.GetDynamicFieldsAndProperties">
            <summary>
            Returns an enumeration of all assignable members (properties and fields) in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.
            </summary>
            <returns>An enumeration of all members in the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.op_Equality(Microsoft.BI.Common.Dynamic.DynamicStaticObject{`0},Microsoft.BI.Common.Dynamic.DynamicStaticObject{`0})">
            <summary>
            Gets a value indicating whether two <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> objects have the same value.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="a"/> and <paramref name="b"/> have the same value; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            This method returns <c>true</c> in the following cases:
            <list type="bullet">
            <item><description>both <paramref name="a"/> and <paramref name="b"/> are <c>null</c></description></item>
            <item><description>both <paramref name="a"/> and <paramref name="b"/> are not <c>null</c> and their <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/>
            properties are equal</description></item>
            <item><description>exactly one parameter is <c>null</c> and the other parameter's <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> is also
            <c>null</c></description></item>
            </list>
            It is the logical inverse of the <c>!=</c> operator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.op_Inequality(Microsoft.BI.Common.Dynamic.DynamicStaticObject{`0},Microsoft.BI.Common.Dynamic.DynamicStaticObject{`0})">
            <summary>
            Gets a value indicating whether two <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> objects do not have the same value.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="a"/> and <paramref name="b"/> do not have the same value; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            This method returns <c>true</c> in the following cases:
            <list type="bullet">
            <item><description>exactly one parameter is <c>null</c> and the other parameter's <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> is not
            <c>null</c></description></item>
            <item><description>both <paramref name="a"/> and <paramref name="b"/> are not <c>null</c> and their <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/>
            properties are not equal</description></item>
            </list>
            It is the logical inverse of the <c>==</c> operator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.op_Explicit(`0)~Microsoft.BI.Common.Dynamic.DynamicStaticObject{`0}">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> object initialised to a specified value.
            </summary>
            <param name="value">A non-dynamic object.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> whose <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> property is initialized with the
            <paramref name="value"/> paramter.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.op_Implicit(Microsoft.BI.Common.Dynamic.DynamicStaticObject{`0})~`0">
            <summary>
            Returns the value of a specified <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> value.
            </summary>
            <param name="value">A <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> value.</param>
            <returns>The value of the <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> property for the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Equals(`0)">
            <summary>
            Indicates whether the current <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> object is equal to a specified value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns><c>true</c> if the <paramref name="other"/> parameter is equal to the current <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>
            instance's <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> property; otherwise, <c>false</c></returns>
            <remarks>
            <para>
            <paramref name="other"/> and <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> are compared using the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for
            the type.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Equals(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> object is equal to a specified object.
            </summary>
            <param name="other">An object.</param>
            <returns><c>true</c> if the <paramref name="other"/> parameter is equal to the current <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If <paramref name="other"/> is a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> with the same generic type, each instances <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/>
            property will be compared.  If <paramref name="other"/> is of the same type as the current instance's generic type, its value will
            be compared with the <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> property of the current instance.  Otherwise, this method will return <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.
            </summary>
            <returns>A hash code for the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.</returns>
            <remarks>
            <para>
            If the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> instance's <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> is <c>null</c>, this method returns 0; otherwise,
            it uses the hash code of the <see cref="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Value"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.BindingFlags">
            <summary>
            The binding flags used to get members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.MemberFlags">
            <summary>
            The member flags used to get members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.MemberBindOptions">
            <summary>
            The member bind options used when getting members.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.Converter">
            <summary>
            The <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> used to convert values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1.UnderlyingType">
            <summary>
            Gets the real <see cref="T:System.Type"/> of the underlying object wrapped by the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicStaticType">
            <summary>
            A wrapper around a standard "static" (non-dynamic) static type that implements the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/>
            interface.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticType.#ctor(System.Type,System.Reflection.BindingFlags,System.Reflection.MemberFlags,Microsoft.BI.Common.Dynamic.MemberBindOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticType"/> class using the specified value.
            </summary>
            <param name="type">The type to wrap.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use when reflecting for members.</param>
            <param name="members">The <see cref="T:System.Reflection.MemberFlags"/> to use when reflecting for members.</param>
            <param name="bindOptions">The <see cref="T:Microsoft.BI.Common.Dynamic.MemberBindOptions"/> to use when binding members.</param>
            <remarks>
            <para>
            Creates a new <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticType"/> that can be used to access members in the underlying type
            via the Dynamic Language Runtime through reflection.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicStaticType.UnderlyingType">
            <summary>
            Gets the <see cref="T:System.Type"/> wrapped by the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticType"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.DynamicStaticType`1">
            <summary>
            A wrapper around a standard "static" (non-dynamic) static type that implements the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/>
            interface.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.DynamicStaticType`1.#ctor(System.Reflection.BindingFlags,System.Reflection.MemberFlags,Microsoft.BI.Common.Dynamic.MemberBindOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticType`1"/> class using the specified value.
            </summary>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use when reflecting for members.</param>
            <param name="members">The <see cref="T:System.Reflection.MemberFlags"/> to use when reflecting for members.</param>
            <param name="bindOptions">The <see cref="T:Microsoft.BI.Common.Dynamic.MemberBindOptions"/> to use when binding members.</param>
            <remarks>
            <para>
            Creates a new <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticType`1"/> that can be used to access members in the underlying type
            via the Dynamic Language Runtime through reflection.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Dynamic.DynamicStaticType`1.UnderlyingType">
            <summary>
            Gets the <see cref="T:System.Type"/> wrapped by the <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticType`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.IDynamicMetaObjectProviderExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> instances for interacting with members via CSharp bindings.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IDynamicMetaObjectProviderExtensions.GetDynamicMemberNames(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            Returns an enumeration of all dynamic member names.
            </summary>
            <param name="instance">The <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> instance on which to provide member names.</param>
            <returns>The list of dynamic member names.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IDynamicMetaObjectProviderExtensions.GetMemberValue(System.Dynamic.IDynamicMetaObjectProvider,System.String)">
            <summary>
            Gets the value of the property or field with the specified name from the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/>.
            </summary>
            <param name="instance">The <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> instance in which to get the value.</param>
            <param name="memberName">The name of the field or property whose value to get.</param>
            <returns>The value of the <paramref name="memberName"/> property.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <c>null</c>, or <paramref name="memberName"/> is
            <c>null</c>.</exception>
            <exception cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException">A binding error was thrown when attempting to get the value of the member.</exception>
            <remarks>
            <para>
            If <paramref name="instance"/> does not contain a member with name <paramref name="memberName"/>, a
            <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException"/> will be thrown.
            </para>
            <para>
            If <paramref name="instance"/> does contain a member with name <paramref name="memberName"/>, but it is not readable
            as a field or property for some reason (it is a write-only property or is a method, for example), a
            <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException"/> will be thrown.
            </para>
            <para>
            If <paramref name="memberName"/> contains a dotted list of members ("A.B.C"), members will be resolved one member
            name at a time.  For example, if the requested member name is "A.B.C", this method will look for a member named "A" on
            <paramref name="instance"/>, then for a member named "B" on the result, and finally for a member named "C" on that result.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IDynamicMetaObjectProviderExtensions.HasMember(System.Dynamic.IDynamicMetaObjectProvider,System.String)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> has a member with the specified name.
            </summary>
            <param name="instance">The <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> instance in which to check for the member.</param>
            <param name="memberName">The name of the field or property to check for.</param>
            <returns><c>true</c> if the object contains a member with the specified name; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <c>null</c>, or <paramref name="memberName"/> is
            <c>null</c>.</exception>
            <remarks>
            <para>
            If <paramref name="memberName"/> contains a dotted list of members ("A.B.C"), members will be resolved one member
            name at a time.  For example, if the requested member name is "A.B.C", this method will look for a member named "A" on
            <paramref name="instance"/>, then for a member named "B" on the result, and finally for a member named "C" on that result.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IDynamicMetaObjectProviderExtensions.SetMemberValue(System.Dynamic.IDynamicMetaObjectProvider,System.String,System.Object)">
            <summary>
            Sets the value of the property or field with the specified name from the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/>.
            </summary>
            <param name="instance">The <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> instance in which to get the value.</param>
            <param name="memberName">The name of the field or property whose value to set.</param>
            <param name="value">The value to assign to <paramref name="memberName"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <c>null</c>, or <paramref name="memberName"/> is
            <c>null</c>.</exception>
            <exception cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException">A binding error was thrown when attempting to set the value of the member.</exception>
            <remarks>
            <para>
            If <paramref name="instance"/> does not contain a member with name <paramref name="memberName"/>, a
            <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException"/> will be thrown.
            </para>
            <para>
            If <paramref name="instance"/> does contain a member with name <paramref name="memberName"/>, but it is not writeable
            as a field or property for some reason (it is a read-only property or is a method, for example), a
            <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException"/> will be thrown.
            </para>
            <para>
            If <paramref name="memberName"/> contains a dotted list of members ("A.B.C"), members will be resolved one member
            name at a time.  For example, if the requested member name is "A.B.C", this method will look for a member named "A" on
            <paramref name="instance"/>, then for a member named "B" on the result, and finally set the value of a member named "C"
            on that result.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.IlGenExtensions">
            <summary>
                Class with few helper funtions that wrap around common emit blocks
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IlGenExtensions.EmitBoxStruct(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            This method will emit code to convert input local value fields into object[] arrray. This is needed in some generic accessors 
            (and overusing object arrays should be avoided)
            </summary>
            <param name="ilgen">Our current IlGenerator</param>
            <param name="valueToBox">Local value that we want to transform to object[] based on field content</param>
            <param name="objContainer">Local value that will be used to store object[]</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IlGenExtensions.EmitReturn(System.Reflection.Emit.ILGenerator,System.Boolean)">
             <summary>
             Emits two commands - one is loading local boolvalue into stack, and second is just return. 
             </summary>
            <param name="ilgen">Our current IlGenerator</param>
             <param name="toReturn">Boolean value to return</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IlGenExtensions.EmitReturn(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits two commands - one is loading local value into stack, and second is just return. There is also special case for 
            null - then the null is loaded into stack.
            </summary>
            <param name="ilgen">Our current IlGenerator</param>
            <param name="toReturn">local value that we want to return. This can be null.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Dynamic.IlGenExtensions.EmitStructInitWithObjArray(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Int32)">
            <summary>
            </summary>
            <param name="ilgen"></param>
            <param name="structToInit"></param>
            <param name="inputArgIndex"></param>
        </member>
        <member name="T:Microsoft.BI.Common.Dynamic.MemberBindOptions">
            <summary>
            Specifies optional behavior in a <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> when resolving properties or fields.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.MemberBindOptions.None">
            <summary>
            No optional behavior.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Dynamic.MemberBindOptions.CreateIfNull">
            <summary>
            If an underlying property or field is <c>null</c>, attempt to create a new instance of the member's type
            and assign the instance to the member before returning.
            </summary>
            <remarks>
            <para>
            In order for this functionality to work, the member's type must support a parameterless or default
            constructor.  If the type does not have a constructor of this type, the bind will fail.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.DynamicTypeCache">
            <summary>
            A cache of types generated from a dynamic assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DynamicTypeCache.Assembly">
            <summary>
            Gets the dynamic assembly associated with the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DynamicTypeCache.Module">
            <summary>
            Gets the module of the dynamic assembly associated with the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DynamicTypeCache.Types">
            <summary>
            Gets a dictionary containing the types in the cache.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DynamicTypeCache.Instance">
            <summary>
            Gets the current app domain's <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/> instance.
            </summary>
            <remarks>
            This is intentionally internal to BI.Common only.  Other consumers should create their own instances.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicTypeCache.#ctor(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/> class around a new dynamic assembly in the current app domain.
            </summary>
            <param name="name">The <see cref="T:System.Reflection.AssemblyName"/> of the dynamic assembly to create.</param>
            <param name="access">The access mode for the dynamic assembly to create.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicTypeCache.#ctor(System.Reflection.Emit.AssemblyBuilder)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/> class around the specified dynamic assembly.
            </summary>
            <param name="assembly">The dynamic assembly around which to create the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicTypeCache.#ctor(System.Reflection.Emit.AssemblyBuilder,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/> class around the specified dynamic assembly.
            </summary>
            <param name="assembly">The dynamic assembly around which to create the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/>.</param>
            <param name="fileName">The name of the file to which the dynamic assembly should be saved.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicTypeCache.GetOrCreate(System.String,System.Func{System.Reflection.Emit.ModuleBuilder,System.String,System.Type})">
            <summary>
            Gets a previously-created type, or generates a new type and returns it.
            </summary>
            <param name="name">The name of the type to create.</param>
            <param name="emitter">The function to call in order to create the type if it doesn't yet exist in the <see cref="T:Microsoft.BI.Common.DynamicTypeCache"/>.</param>
            <returns>The created type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="emitter"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.EmptyArray`1">
            <summary>
            Provides an immutable, empty array.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <remarks>
            The <see cref="T:Microsoft.BI.Common.EmptyArray`1"/> class provides a way to return an empty array without causing
            extra, unnecessary allocations.  Empty arrays are immutable, so it is safe to reuse the same instance
            anywhere.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.EmptyArray`1.Value">
            <summary>
            Gets the empty array instance.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.EnumerableComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> that compares <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects element-by-element.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.EnumerableComparer`1.Default">
            <summary>
            Gets the default <see cref="T:Microsoft.BI.Common.EnumerableComparer`1"/> for this type.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.EnumerableComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a new <see cref="T:Microsoft.BI.Common.EnumerableComparer`1"/> using a specified
            <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.
            </summary>
            <param name="elementComparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> for comparing elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementComparer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.EnumerableComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Create a new <see cref="T:Microsoft.BI.Common.EnumerableComparer`1"/> using a specified
            <see cref="T:System.Comparison`1"/> function to compare elements.
            </summary>
            <param name="elementComparison">The <see cref="T:System.Comparison`1"/> function for comparing elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementComparison"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.EnumerableComparer`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compares two <see cref="T:System.Collections.Generic.IEnumerable`1"/> data structures by enumerating through both
            collections and comparing their elements to determine if the <paramref name="left"/>
            is less than, equal to, or greater than the <paramref name="right"/>.
            </summary>
            <param name="left">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="right">Another <see cref="T:System.Collections.Generic.IEnumerable`1"/> that is to be compared to the <paramref name="left"/>.</param>
            <returns>An integer indicating the relative natural ordering of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.FieldDelimiter">
            <summary>
            Supported delimiters between fields in CSV files.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.FieldDelimiter.None">
            <summary>
            No field delimiter.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.FieldDelimiter.Tab">
            <summary>
            Tab (\t).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.FieldDelimiter.Comma">
            <summary>
            Comma (,).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.FieldDelimiter.Default">
            <summary>
            Default (synonym for <see cref="F:Microsoft.BI.Common.FieldDelimiter.Comma"/>).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.FieldDelimiter.Other">
            <summary>
            Indicates a non-standard delimiter.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.RecordDelimiter">
            <summary>
            Supported delimiters between records in CSV files.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RecordDelimiter.None">
            <summary>
            No record delimiter.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RecordDelimiter.Windows">
            <summary>
            Windows line delimiter (synonym for <see cref="F:Microsoft.BI.Common.RecordDelimiter.CRLF"/>).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RecordDelimiter.CRLF">
            <summary>
            Carriage return, line feed (\r\n).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RecordDelimiter.Unix">
            <summary>
            Unix line delimiter (synonym for <see cref="F:Microsoft.BI.Common.RecordDelimiter.LF"/>).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RecordDelimiter.LF">
            <summary>
            Line feed (\n).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RecordDelimiter.Default">
            <summary>
            Default line delimiter (synonym for <see cref="F:Microsoft.BI.Common.RecordDelimiter.CRLF"/>).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RecordDelimiter.Other">
            <summary>
            Indicates a non-standard line delimiter.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DataCompression">
            <summary>
            Supported compression modes on input and output files.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataCompression.None">
            <summary>
            Indicates no compression.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataCompression.GZIP">
            <summary>
            Indicates GZIP compression.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataCompression.XPRESS">
            <summary>
            Indicates XPRESS compression.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataCompression.RAR">
            <summary>
            Indicates RAR compression.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataCompression.Default">
            <summary>
            Indicates default compression (synonym for <see cref="F:Microsoft.BI.Common.DataCompression.None"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DataFormat">
            <summary>
            Supported data formats on input and output files.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.DTS">
            <summary>
            DTS format.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.MSN">
            <summary>
            MSN format.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.DAT">
            <summary>
            DAT format (synonym for <see cref="F:Microsoft.BI.Common.DataFormat.MSN"/>).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.CSV">
            <summary>
            Plain text format.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.KVP">
            <summary>
            Key-value pair format.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.SS">
            <summary>
            Structured stream format.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.TABLE">
            <summary>
            Data is available in a raw table.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.VIEW">
            <summary>
            Data is available via a view (synonym for <see cref="F:Microsoft.BI.Common.DataFormat.TABLE"/>).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DataFormat.Default">
            <summary>
            Default format (synonym for <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.EnumExtensions">
            <summary>
            Provides several helper extension methods on Microsoft.BI.Common enumerations.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.EnumExtensions.ToChar(Microsoft.BI.Common.FieldDelimiter)">
            <summary>
            Return the char representation of the <see cref="T:Microsoft.BI.Common.FieldDelimiter"/>.
            </summary>
            <param name="f">The <see cref="T:Microsoft.BI.Common.FieldDelimiter"/> enumeration value.</param>
            <returns>The char representation of the <see cref="T:Microsoft.BI.Common.FieldDelimiter"/>.</returns>
            <remarks>This should not be used with <see cref="F:Microsoft.BI.Common.FieldDelimiter.Other"/>, as the enum has no way to know how to represent this.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.EnumExtensions.GetExtension(Microsoft.BI.Common.DataCompression)">
            <summary>
            Return the filename extension of a <see cref="T:Microsoft.BI.Common.DataCompression"/> enumeration.
            </summary>
            <param name="c">The <see cref="T:Microsoft.BI.Common.DataCompression"/> enumeration value.</param>
            <returns>The filename extension of the <see cref="T:Microsoft.BI.Common.DataCompression"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.EnumExtensions.GetExtension(Microsoft.BI.Common.DataFormat)">
            <summary>
            Return the filename extension of a <see cref="T:Microsoft.BI.Common.DataFormat"/> enumeration.
            </summary>
            <param name="f">The <see cref="T:Microsoft.BI.Common.DataFormat"/> enumeration value.</param>
            <returns>The filename extension of the <see cref="T:Microsoft.BI.Common.DataFormat"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Enum`1">
            <summary>
            Provides strongly-typed generic access to <see cref="T:System.Enum"/> functions.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Enum"/>.</typeparam>
            <remarks>
            The C# language does not provide the ability to constrain a generic type to an enum type.
            Thus, it is possible to attempt to use this class with non-enum types that appear to be
            like enums.  In such cases, invoking any method on the class will result in a <see cref="T:System.ArgumentException"/>
            being thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.Compare(`0,`0)">
            <summary>
            Compares two enum values and returns a value indicating whether one is less than, equal to, or greater than the
            other.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            Unlike standard enum comparison (via <see cref="M:System.IComparable.CompareTo(System.Object)"/>), this method performs no boxing.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.Equals(`0,`0)">
            <summary>
            Determines whether two enum values are equal.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> and <paramref name="y"/> are equal; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            Unlike standard enum equality comparison (via <see cref="M:System.Object.Equals(System.Object,System.Object)"/>), this method performs no boxing.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.Format(`0,System.String)">
            <summary>
            Converts the specified value of a specified enumerated type to its equivalent string representation according
            to the specified format.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The output format to use.</param>
            <returns>A string representation of <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> parameter contains an invalid value.</exception>
            <remarks>
            The valid values for the <paramref name="format"/> paramter are "G", "g", "X", "x", "D", "d", "F", or "f".
            See <see cref="M:System.Enum.Format(System.Type,System.Object,System.String)"/> for more details.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.Format``1(``0,System.String)">
            <summary>
            Converts the specified value of a specified enumerated type to its equivalent string representation according
            to the specified format.
            </summary>
            <typeparam name="TUnderlying">The underlying type of the enum.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="format">The output format to use.</param>
            <returns>A string representation of <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>, -or-
            <typeparamref name="TUnderlying"/> is not the underlying type of <typeparamref name="T"/>.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> parameter contains an invalid value.</exception>
            <remarks>
            The valid values for the <paramref name="format"/> paramter are "G", "g", "X", "x", "D", "d", "F", or "f".
            See <see cref="M:System.Enum.Format(System.Type,System.Object,System.String)"/> for more details.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.GetHashCode(`0)">
            <summary>
            Gets a hash code for an enum value.
            </summary>
            <param name="value">The enum value for which to get a hash code.</param>
            <returns>A hash code of the enum value.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            Unlike standard enum hash code computation (via <see cref="M:System.Object.GetHashCode"/>), this method performs no boxing.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.GetName(`0)">
            <summary>
            Retrieves the name of the constant that has the specified value.
            </summary>
            <param name="value">The enumerated constant value.</param>
            <returns>A string containing the name of the enumerated constant in <typeparamref name="T"/> whose value
            is <paramref name="value"/>, or <c>null</c> if no such constant is found.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            If multiple enumeration members have the same underlying value, the <see cref="M:Microsoft.BI.Common.Enum`1.GetName(`0)"/> method guarantees
            that it will return the name of one of those enumeration members. However, it does not guarantee that it
            will always return the name of the same enumeration member. As a result, when multiple enumeration members
            have the same value, your application code should never depend on the method returning a particular
            member's name.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.GetName``1(``0)">
            <summary>
            Retrieves the name of the constant that has the specified value.
            </summary>
            <typeparam name="TUnderlying">The underlying type of the enum.</typeparam>
            <param name="value">The value of a particular enumerated constant.</param>
            <returns>A string containing the name of the enumerated constant in <typeparamref name="T"/> whose value
            is <paramref name="value"/>, or <c>null</c> if no such constant is found.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            If multiple enumeration members have the same underlying value, the <see cref="M:Microsoft.BI.Common.Enum`1.GetName``1(``0)"/>
            method guarantees that it will return the name of one of those enumeration members. However, it does not
            guarantee that it will always return the name of the same enumeration member. As a result, when multiple
            enumeration members have the same value, your application code should never depend on the method returning
            a particular member's name.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.GetNames">
            <summary>
            Retrieves an array of the names of the constants in the enumeration.
            </summary>
            <returns>A string array of the names of the constants in <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            The elements of the return value array are sorted by the binary values of the enumerated constants (that is,
            by their unsigned magnitude). If there are enumerated constants with same value, the order of their corresponding
            names is unspecified.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.GetUnderlyingType">
            <summary>
            Returns the underlying type of the specified enumeration.
            </summary>
            <returns>The underlying type of <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            The <see cref="T:System.Enum"/> structure enables values to be represented as named constants. The data type of the
            enumeration's values is known as its underlying type. For example, the underlying type of the <see cref="T:System.DayOfWeek"/>
            enumeration, which consists of constants that represent each day of the week (<see cref="F:System.DayOfWeek.Monday"/>,
            <see cref="F:System.DayOfWeek.Tuesday"/>, and so on), is <see cref="T:System.Int32"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.GetValues">
            <summary>
            Retrieves an array of the values in a specified enumeration.
            </summary>
            <returns>An array that contains the values in <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            <para>
            The elements of the array are sorted by the binary values of the enumeration constants (that is, by their
            unsigned magnitude).
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.Enum`1.GetValues"/> method returns an array that contains a value for each member of the
            <typeparamref name="T"/> enumeration. If multiple members have the same value, the returned array includes
            duplicate values. In this case, calling the <see cref="M:Microsoft.BI.Common.Enum`1.GetName(`0)"/> method with each value in the returned
            array does not restore the unique names assigned to members that have duplicate values. To retrieve all the
            names of enumeration members successfully, call the <see cref="M:Microsoft.BI.Common.Enum`1.GetNames"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <typeparam name="TUnderlying">The underlying type of the enum.</typeparam>
            <returns>An array that contains the values of the constants in <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>, -or-
            <typeparamref name="TUnderlying"/> is not the underlying type of <typeparamref name="T"/>.</exception>
            <remarks>
            <para>
            The elements of the array are sorted by the binary values of the enumeration constants (that is, by their
            unsigned magnitude).
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.Enum`1.GetValues"/> method returns an array that contains a value for each member of the
            <typeparamref name="T"/> enumeration. If multiple members have the same value, the returned array includes
            duplicate values. In this case, calling the <see cref="M:Microsoft.BI.Common.Enum`1.GetName(`0)"/> method with each value in the returned
            array does not restore the unique names assigned to members that have duplicate values. To retrieve all the
            names of enumeration members successfully, call the <see cref="M:Microsoft.BI.Common.Enum`1.GetNames"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.IsDefined(System.String)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            </summary>
            <param name="value">The name of a constant in <typeparamref name="T"/>.</param>
            <returns><c>true</c> if a constant in <typeparamref name="T"/> has a value equal to <paramref name="value"/>;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method is case-sensitive.
            </para>
            <para>
            If the constants in <typeparamref name="T"/> define a set of bit fields and <paramref name="value"/> contains
            the names of multiple bit fields, the <see cref="M:Microsoft.BI.Common.Enum`1.IsDefined(System.String)"/> method returns <c>false</c>.  In other
            words, for enumerations that define a set of bit fields, the method determines only whether a single bit field
            belongs to the enumeration.  To determine whether multiple bit fields are set in an enumeration type that is
            tagged with the <see cref="T:System.FlagsAttribute"/> attribute, you can call the <see cref="M:System.Enum.HasFlag(System.Enum)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.IsDefined(`0)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            </summary>
            <param name="value">The value of a constant in <typeparamref name="T"/>.</param>
            <returns><c>true</c> if a constant in <typeparamref name="T"/> has a value equal to <paramref name="value"/>;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            If the constants in <typeparamref name="T"/> define a set of bit fields and <paramref name="value"/> contains
            the values of multiple bit fields, the <see cref="M:Microsoft.BI.Common.Enum`1.IsDefined(`0)"/> method returns <c>false</c>.  In other words,
            for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs
            to the enumeration.  To determine whether multiple bit fields are set in an enumeration type that is tagged
            with the <see cref="T:System.FlagsAttribute"/> attribute, you can call the <see cref="M:System.Enum.HasFlag(System.Enum)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.IsDefined``1(``0)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            </summary>
            <typeparam name="TUnderlying">The underlying type of the enum.</typeparam>
            <param name="value">The value of a constant in <typeparamref name="T"/>.</param>
            <returns><c>true</c> if a constant in <typeparamref name="T"/> has a value equal to <paramref name="value"/>;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>, -or-
            <typeparamref name="TUnderlying"/> is not the underlying type of <typeparamref name="T"/>.</exception>
            <remarks>
            If the constants in <typeparamref name="T"/> define a set of bit fields and <paramref name="value"/> contains
            the underlying values of multiple bit fields, the <see cref="M:Microsoft.BI.Common.Enum`1.IsDefined``1(``0)"/> method returns
            <c>false</c>.  In other words, for enumerations that define a set of bit fields, the method determines only
            whether a single bit field belongs to the enumeration.  To determine whether multiple bit fields are set in an
            enumeration type that is tagged with the <see cref="T:System.FlagsAttribute"/> attribute, you can call the
            <see cref="M:System.Enum.HasFlag(System.Enum)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.Parse(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an
            equivalent enumerated object.
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An enumeration value of type <typeparamref name="T"/> whose value is represented by
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>, -or-
            <paramref name="value"/> is either an empty string or contains only white space, -or- <paramref name="value"/>
            is a name, but not one of the named constants defined for the enumeration.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is outside the range of the underlying type of
            <typeparamref name="T"/>.</exception>
            <remarks>
            <para>
            The <paramref name="value"/> parameter contains the string representation of an enumeration member's
            underlying value or named constant, or a list of named constants delimited by commas (,). One or more blank
            spaces can precede or follow each value, name, or comma in value. If value is a list, the return value is
            the value of the specified names combined with a bitwise <c>OR</c> operation.
            </para>
            <para>
            If value is a name that does not correspond to a named constant of <typeparamref name="T"/>, the method throws
            an <see cref="T:System.ArgumentException"/>. If value is the string representation of an integer that does not represent
            an underlying value of the <typeparamref name="T"/> enumeration, the method returns an enumeration member whose
            underlying value is value converted to an integral type. If this behavior is undesirable, call the
            <see cref="M:Microsoft.BI.Common.Enum`1.IsDefined(System.String)"/> method to ensure that a particular string representation of an integer is
            actually a member of <typeparamref name="T"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.ToEnum``1(``0)">
            <summary>
            Converts the specified value to an enumeration member.
            </summary>
            <typeparam name="TUnderlying">The underlying type of the enum.</typeparam>
            <param name="value">The value to convert to an enumeration member.</param>
            <returns>An instance of the enumeration set to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            The <see cref="M:Microsoft.BI.Common.Enum`1.ToEnum``1(``0)"/> method converts value to an enumeration member whose underlying value is
            <paramref name="value"/>.  Note that the conversion succeeds even if value is outside the bounds of
            <typeparamref name="T"/> members. To ensure that value is a valid underlying value of the
            <typeparamref name="T"/> enumeration, pass it to the <see cref="M:Microsoft.BI.Common.Enum`1.IsDefined(`0)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Enum`1.TryParse(System.String,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to
            an equivalent enumerated object. The return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">The string representaiton of the enumeration name or underlying value to convert.</param>
            <param name="result">When this method returns, <paramref name="result"/> contains an object of type 
            <typeparamref name="T"/> whose value is represented by <paramref name="value"/> if the parse operation
            succeeds.  If the parse operation fails, <paramref name="result"/> contains the default value of the
            underlying type of <typeparamref name="T"/>.  Note that this value need not be a member of the
            <typeparamref name="T"/> enumeration. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <paramref name="value"/> parameter was converted successfully; otherwise,
            <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
            <remarks>
            <para>
            <see cref="M:Microsoft.BI.Common.Enum`1.TryParse(System.String,`0@)"/> is identical to the <see cref="M:Microsoft.BI.Common.Enum`1.Parse(System.String)"/> method, except that instead of throwing an
            exception, it returns <c>false</c> if the conversion fails.  It eliminates the need for exception handling
            when parsing the string representation of an enumeration value. 
            </para>
            <para>
            The <paramref name="value"/> parameter contains the string representation of an enumeration member's
            underlying value or named constant, or a list of named constants delimited by commas (,). One or more blank
            spaces can precede or follow each value, name, or comma in value. If value is a list, the return value is
            the value of the specified names combined with a bitwise <c>OR</c> operation.
            </para>
            <para>
            If <paramref name="value"/> is a name that does not correspond to a named constant of <typeparamref name="T"/>,
            the method returns <c>false</c>.  If <paramref name="value"/> is the string representation of an integer that
            does not represent an underlying value of the <typeparamref name="T"/> enumeration, the method returns an
            enumeration member whose underlying value is value converted to an integral type.  If this behavior is
            undesirable, call the <see cref="M:Microsoft.BI.Common.Enum`1.IsDefined(System.String)"/> method to ensure that a particular string representation
            of an integer is actually a member of <typeparamref name="T"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.FastAccessor">
            <summary>
            A number of functions that allow the user to call a constructor or a method
            in dynamic way using the <see cref="T:System.Reflection.MethodBase"/> without incurring the price of reflection.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate">
            <summary>
            A delegate function that can be used to construct an object dynamically at runtime without using reflection.
            </summary>
            <param name="arguments">The arguments to pass to the object constructor.</param>
            <returns>A new instance of the object type associated with the delegate.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate`1">
            <summary>
            A delegate function that can be used to construct an object dynamically at runtime without using reflection.
            </summary>
            <typeparam name="T">The type of the object that will be created.</typeparam>
            <param name="arguments">The arguments to pass to the object constructor.</param>
            <returns>A new instance of an object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateCreateDelegate(System.Type,System.Type[])">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to construct an object dynamically at runtime without using reflection.
            </summary>
            <param name="returnType">The <see cref="T:System.Type"/> of the object to be created by the delegate.</param>
            <param name="parameterTypes">The <see cref="T:System.Type"/> of the parameters of the constructor.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to create an object dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateCreateDelegate(System.Reflection.ConstructorInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to construct an object dynamically at runtime without using reflection.
            </summary>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor to call.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to create an object dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateCreateDelegate``1(System.Type[])">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to construct an object dynamically at runtime without using reflection.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="parameterTypes">The <see cref="T:System.Type"/> of the parameters of the constructor.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to create an object dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateCreateDelegate``1(System.Reflection.ConstructorInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to construct an object dynamically at runtime without using reflection.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor to call.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicCreateDelegate"/> that can be used to create an object dynamically at runtime without using reflection.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate">
            <summary>
            A delegate function that can be used to get the value of an object's member dynamically at runtime without
            using reflection.
            </summary>
            <param name="target">The target of the get operation.</param>
            <returns>The value of the target's member.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate`2">
            <summary>
            A delegate function that can be used to get the value of an object's member dynamically at runtime without
            using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TReturn">The type of the member.</typeparam>
            <param name="target">The target of the get operation.</param>
            <returns>The value of the target's member.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate">
            <summary>
            A delegate function that can be used to set the value of an object's member dynamically at runtime without
            using reflection.
            </summary>
            <param name="target">The target of the set operation.</param>
            <param name="value">The value to assign to the target.</param>
        </member>
        <member name="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate`2">
            <summary>
            A delegate function that can be used to set the value of an object's member dynamically at runtime without
            using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TValue">The type of the member.</typeparam>
            <param name="target">The target of the set operation.</param>
            <param name="value">The value to assign to the target.</param>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateGetDelegate(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate"/> that can be used to get the value of an object's member dynamically at
            runtime without using reflection.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> of the object to get the value of.</param>
            <param name="memberName">The name of the member to get the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate"/> that can be used to get the value of an object's member dynamically
            at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateGetDelegate(System.Reflection.FieldInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate"/> that can be used to get the value of an object's field dynamically at
            runtime without using reflection.
            </summary>
            <param name="field">A <see cref="T:System.Reflection.FieldInfo"/> representing the field to get the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate"/> that can be used to get the value of an object's field dynamically
            at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateGetDelegate(System.Reflection.PropertyInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate"/> that can be used to get the value of an object's property dynamically at
            runtime without using reflection.
            </summary>
            <param name="property">A <see cref="T:System.Reflection.PropertyInfo"/> representing the property to get the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate"/> that can be used to get the value of an object's property dynamically
            at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateGetDelegate``2(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate`2"/> that can be used to get the value of an object's
            member dynamically at runtime without using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TReturn">The type of the member.</typeparam>
            <param name="memberName">The name of the member to get the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate`2"/> that can be used to get the value of an
            object's member dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateGetDelegate``2(System.Reflection.FieldInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate`2"/> that can be used to get the value of an object's
            field dynamically at runtime without using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TReturn">The type of the member.</typeparam>
            <param name="field">A <see cref="T:System.Reflection.FieldInfo"/> representing the field to get the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate`2"/> that can be used to get the value of an
            object's field dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateGetDelegate``2(System.Reflection.PropertyInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate`2"/> that can be used to get the value of an object's
            property dynamically at runtime without using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TReturn">The type of the member.</typeparam>
            <param name="property">A <see cref="T:System.Reflection.PropertyInfo"/> representing the property to get the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicGetDelegate`2"/> that can be used to get the value of an
            object's property dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateSetDelegate(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate"/> that can be used to set the value of an object's member dynamically at
            runtime without using reflection.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> of the object to set the value of.</param>
            <param name="memberName">The name of the member to set the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate"/> that can be used to set the value of an object's member dynamically
            at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateSetDelegate(System.Reflection.FieldInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate"/> that can be used to set the value of an object's field dynamically at
            runtime without using reflection.
            </summary>
            <param name="field">A <see cref="T:System.Reflection.FieldInfo"/> representing the field to set the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate"/> that can be used to set the value of an object's field dynamically
            at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateSetDelegate(System.Reflection.PropertyInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate"/> that can be used to set the value of an object's property dynamically at
            runtime without using reflection.
            </summary>
            <param name="property">A <see cref="T:System.Reflection.PropertyInfo"/> representing the property to set the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate"/> that can be used to set the value of an object's property dynamically
            at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateSetDelegate``2(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate`2"/> that can be used to set the value of an object's
            member dynamically at runtime without using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TValue">The type of the member.</typeparam>
            <param name="memberName">The name of the member to set the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate`2"/> that can be used to set the value of an
            object's member dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateSetDelegate``2(System.Reflection.FieldInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate`2"/> that can be used to set the value of an object's
            member dynamically at runtime without using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TValue">The type of the member.</typeparam>
            <param name="field">A <see cref="T:System.Reflection.FieldInfo"/> representing the field to set the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate`2"/> that can be used to set the value of an
            object's member dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.GenerateSetDelegate``2(System.Reflection.PropertyInfo)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate`2"/> that can be used to set the value of an object's
            member dynamically at runtime without using reflection.
            </summary>
            <typeparam name="TObject">The type of the object containing the member.</typeparam>
            <typeparam name="TValue">The type of the member.</typeparam>
            <param name="property">A <see cref="T:System.Reflection.PropertyInfo"/> representing the property to set the value of.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.FastAccessor.DynamicSetDelegate`2"/> that can be used to set the value of an
            object's member dynamically at runtime without using reflection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.CreateCreator(System.Type,System.Reflection.ConstructorInfo)">
            <summary>
            Allow the user to call a constructor using the ConstructorInfo without incurring the price of reflection.
            </summary>
            <param name="delegateType">The <see cref="T:System.Type"/> to be instantiated.</param>
            <param name="constructorInfo">The <see cref="T:System.Reflection.ConstructorInfo"/> that we want to instantiate.</param>
            <returns>A <see cref="T:System.Delegate"/> for constructing an object.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.Create(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Allow the user to call a method using the MethodInfo without incurring the price of reflection.
            </summary>
            <param name="delegateType">The <see cref="T:System.Type"/> to be instantiated.</param>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> that we want to call.</param>
            <returns>A <see cref="T:System.Delegate"/> for calling a method.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.FastAccessor.Create(System.Type,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Allow the user to call a method using the MethodInfo without incurring the price of reflection.
            </summary>
            <param name="delegateType">The <see cref="T:System.Type"/> to be instantiated.</param>
            <param name="target">The current instance of the <see cref="T:System.Type"/>.</param>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> that we want to call.</param>
            <returns>A <see cref="T:System.Delegate"/> for calling a method.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Hashing.Crc32Algorithm">
            <summary>
            Represents a CRC-32 algorithm implementation.
            </summary>
            <remarks>
            <para>
            Cyclic redundancy checks are a well-defined process for computing an approximation of the validity
            of data.  However, there are many 'parameters' to the computation.  This class encapsulates these
            parameters into a single unit that controls the behavior of a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </para>
            <para>
            The parameters of a CRC-32 hashing algorithm are as follows:
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Definition</term>
            </listheader>
            <item>
            <term>Width</term>
            <description>The number of bits in the algorithm (always 32 for CRC-32).</description>
            </item>
            <item>
            <term>Polynomial</term>
            <description>The polynomial representing the binary coefficients used in the polynomnial division
            of the CRC algorithm.  This polynomial is always expressed in its non-reflected form, even for
            algorithms that use reflected computation.</description>
            </item>
            <item>
            <term>Init</term>
            <description>The initial value of the register when the algorithm starts.</description>
            </item>
            <item>
            <term>Reflected</term>
            <description>Whether the algorithm should use reflected processing path (bit 0 is MSB) or the normal
            processing path (bit 0 is LSB).  This parameter corresponds to the <c>REFIN</c> and <c>REFOUT</c> parameters
            sometimes used to describe CRC algorithms.</description>
            </item>
            <item>
            <term>XorOut</term>
            <description>The value to XOR the final CRC result with before returning.</description>
            </item>
            </list>
            </para>
            </remarks>
            <seealso href="http://www.csm.ornl.gov/~dunigan/crc.html"/>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Crc32">
            <summary>
            The definition of the <c>CRC-32</c> (PKZIP) algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x04c11db7</description></item>
            <item><term>Init      </term><description>0xffffffff</description></item>
            <item><term>Reflected </term><description>true      </description></item>
            <item><term>XorOut    </term><description>0xffffffff</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Crc32BZIP2">
            <summary>
            The definition of the <c>CRC-32/BZIP2</c> algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x04c11db7</description></item>
            <item><term>Init      </term><description>0xffffffff</description></item>
            <item><term>Reflected </term><description>false     </description></item>
            <item><term>XorOut    </term><description>0xffffffff</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Crc32C">
            <summary>
            The definition of the <c>CRC-32/C</c> (Castagnoli, iSCSI) algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x1edc6f41</description></item>
            <item><term>Init      </term><description>0xffffffff</description></item>
            <item><term>Reflected </term><description>true      </description></item>
            <item><term>XorOut    </term><description>0xffffffff</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Crc32D">
            <summary>
            The definition of the <c>CRC-32/D</c> algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0xa833982b</description></item>
            <item><term>Init      </term><description>0xffffffff</description></item>
            <item><term>Reflected </term><description>true      </description></item>
            <item><term>XorOut    </term><description>0xffffffff</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Crc32MPEG2">
            <summary>
            The definition of the <c>CRC-32/MPEG-2</c> algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x04c11db7</description></item>
            <item><term>Init      </term><description>0xffffffff</description></item>
            <item><term>Reflected </term><description>false     </description></item>
            <item><term>XorOut    </term><description>0x00000000</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Crc32POSIX">
            <summary>
            The definition of the <c>CRC-32/POSIX</c> (CKSUM) algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x04c11db7</description></item>
            <item><term>Init      </term><description>0x00000000</description></item>
            <item><term>Reflected </term><description>false     </description></item>
            <item><term>XorOut    </term><description>0xffffffff</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Crc32Q">
            <summary>
            The definition of the <c>CRC-32/Q</c> algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x814141ab</description></item>
            <item><term>Init      </term><description>0x00000000</description></item>
            <item><term>Reflected </term><description>false     </description></item>
            <item><term>XorOut    </term><description>0x00000000</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.JAMCRC">
            <summary>
            The definition of the <c>JAMCRC</c> algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x04c11db7</description></item>
            <item><term>Init      </term><description>0xffffffff</description></item>
            <item><term>Reflected </term><description>true      </description></item>
            <item><term>XorOut    </term><description>0x00000000</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.Default">
            <summary>
            The default CRC-32 algorithm used if not otherwise specified.
            </summary>
            <remarks>
            The default CRC-32 algorithm is CRC-32.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Algorithm.XFER">
            <summary>
            The definition of the <c>XFER</c> algorithm.
            </summary>
            <remarks>
            The parameters of this algorithm are:
            <list type="table">
            <listheader><term>Parameter</term><term>Value</term></listheader>
            <item><term>Polynomial</term><description>0x000000af</description></item>
            <item><term>Init      </term><description>0x00000000</description></item>
            <item><term>Reflected </term><description>false     </description></item>
            <item><term>XorOut    </term><description>0x00000000</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Algorithm.Create(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Algorithm"/> using the specified polynomial, initial value, final XOR value,
            and a value indicating whether to reflect input data as it is processed.
            </summary>
            <param name="polynomial">The value of the "generator polynomial" for the CRC lookup table.</param>
            <param name="initial">The initial value of the CRC.</param>
            <param name="finalXor">The value to XOR when finalizing.</param>
            <param name="reflect">Whether the algorithm is reflected or not.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Hashing.Crc32Algorithm"/> using the specified configuration.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Algorithm.ReversePolynomial(System.UInt32)">
            <summary>
            Reverses the specified CRC-32 polynomial.
            </summary>
            <param name="polynomial">The polynomial to reverse.</param>
            <returns>The reversed polynomial.</returns>
            <remarks>
            The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Algorithm"/> expects polynomials to be in their "normal" (non-reversed) form.  If
            the polynomial you have is in its reversed form, you can call this function to get back its normal form.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Algorithm.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Hashing.Crc32Algorithm"/> with the specified parameters.
            </summary>
            <param name="polynomial">The polynomial of the algorithm.</param>
            <param name="initial">The initial register value of the algorithm.</param>
            <param name="finalXor">The final value to XOR with prior to returning.</param>
            <param name="reflect">Whether to reflect input prior to hashing and output prior to returning.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Algorithm.Update(System.Byte*,System.Int32,System.UInt32@)">
            <summary>
            When overridden in a derived class, updates the CRC by hashing the specified range of bytes.
            </summary>
            <param name="data">A pointer to the first byte of data to hash.</param>
            <param name="count">The number of bytes to hash.</param>
            <param name="digest">A reference to the CRC-32 digest.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Algorithm.Reflect(System.Byte)">
            <summary>
            Reflects the bits of a byte.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Algorithm.Reflect(System.UInt32)">
            <summary>
            Reflects the bits of an unsigned integer.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Hashing.Crc32Algorithm.NormalCrc32Algorithm">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Hashing.Crc32Algorithm"/> that performs hashing in the "normal" form (shifts to the left).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Hashing.Crc32Algorithm.ReflectedCrc32Algorithm">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Hashing.Crc32Algorithm"/> that performs hashing in the "reversed" form (shifts to the right).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Hashing.Crc32Digest">
            <summary>
            Contains the 32-bit hash value that is the result of a CRC hash function.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Hashing.Crc32Digest.DigestSize">
            <summary>
            Gets the size of a CRC-32 digest, in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Digest.Value">
            <summary>
            Gets the value of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> as an unsigned integer.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Digest.#ctor(System.UInt32)">
            <summary>
            Creates a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> with the specified value.
            </summary>
            <param name="value">The value to initialize the digest with.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Digest.GetBytes">
            <summary>
            Gets an array of 4 bytes containing the 32-bit hash value.
            </summary>
            <returns>An array of 4 bytes containing the 32-bit hash value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Digest.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> is equal to another object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> and is equal to the current
            <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Digest.Equals(Microsoft.BI.Common.Hashing.Crc32Digest)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> is equal to another <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/>.
            </summary>
            <param name="other">The other <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> value.</param>
            <returns><c>true</c> if the two values are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Digest.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/>.
            </summary>
            <returns>A hash code for the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Digest.ToString">
            <summary>
            Gets an 8-character hexadecimal string representation for the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/>.
            </summary>
            <returns>An 8-character hexadecimal string representation for the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Hashing.Crc32Hash">
            <summary>
            Provides an implementation of a 32-bit CRC (cyclic redundancy check) hashing algorithm.
            </summary>
            <remarks>
            The digests produced by <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> are compatible with the CRC-32-IEEE standard.
            </remarks>
            <content>
            Contains helper methods for <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> values.
            </content>
        </member>
        <member name="F:Microsoft.BI.Common.Hashing.Crc32Hash.DigestSize">
            <summary>
            The number of bytes in a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.Crc32Hash.Digest">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> for the data that has been hashed so far.
            </summary>
            <remarks>
            <para>
            This property creates a clone of the current <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> and calls <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Finalize"/>
            on it.  The original hash function will maintain its state (meaning it can continue to be updated).
            </para>
            <para>
            Cloning a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> is a relatively expensive operation, so use of this property
            should be avoided in tight loops or in other places where performance is a major concern.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.IO.Stream)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.IO.Stream,Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="algorithm"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.IO.Stream,System.Int32)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/> using the specified buffer size.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <param name="bufferSize">The size of the buffer used to read from the stream.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is negative or zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.IO.Stream,System.Int32,Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/> using the specified buffer size.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <param name="bufferSize">The size of the buffer used to read from the stream.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="algorithm"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is negative or zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.IO.Stream,System.Byte[])">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/> using the specified buffer.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <param name="buffer">The buffer used to read from the stream.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="buffer"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.IO.Stream,System.Byte[],Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/> using the specified buffer.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <param name="buffer">The buffer used to read from the stream.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>, <paramref name="buffer"/>, or
            <paramref name="algorithm"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified array of bytes.
            </summary>
            <param name="data">The array of bytes over which to compute the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Byte[],Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified array of bytes using the specifed CRC-32 algorithm.
            </summary>
            <param name="data">The array of bytes over which to compute the hash.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="algorithm"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified array of bytes.
            </summary>
            <param name="data">The array of bytes over which to compute the hash.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            or equal to the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Byte[],System.Int32,System.Int32,Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified region of the specified array of bytes.
            </summary>
            <param name="data">The array of bytes over which to compute the hash.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="algorithm"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            or equal to the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Void*,System.Int32)">
            <summary>
            Computes the hash value for the specified buffer.
            </summary>
            <param name="data">A pointer to the location at which to begin hashing.</param>
            <param name="count">The number of bytes to hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Void*,System.Int32,Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified buffer.
            </summary>
            <param name="data">A pointer to the location at which to begin hashing.</param>
            <param name="count">The number of bytes to hash.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="algorithm"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.String,System.Text.Encoding)">
            <summary>
            Computes the hash value for the specified string using the specified encoding.
            </summary>
            <param name="data">The string for which to compute the hash.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.String,System.Text.Encoding,Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified string using the specified encoding.
            </summary>
            <param name="data">The string for which to compute the hash.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/>, <paramref name="encoding"/>, or
            <paramref name="algorithm"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Computes the hash value for the specified region of a string using the specified encoding.
            </summary>
            <param name="data">The string for which to compute the hash.</param>
            <param name="offset">The offset into the string from which to begin using data.</param>
            <param name="count">The number of characters in the string to use as data.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            or equal to the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.String,System.Int32,System.Int32,System.Text.Encoding,Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified region of a string using the specified encoding.
            </summary>
            <param name="data">The string for which to compute the hash.</param>
            <param name="offset">The offset into the string from which to begin using data.</param>
            <param name="count">The number of characters in the string to use as data.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/>, <paramref name="encoding"/>, or
            <paramref name="algorithm"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            or equal to the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Char*,System.Int32,System.Text.Encoding)">
            <summary>
            Computes the hash value for the specified array of characters using the specified encoding.
            </summary>
            <param name="data">The address of a string for which to compute the hash.</param>
            <param name="count">The number of characters in the string to use as data.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.ComputeHash(System.Char*,System.Int32,System.Text.Encoding,Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Computes the hash value for the specified array of characters using the specified encoding.
            </summary>
            <param name="data">The address of a string for which to compute the hash.</param>
            <param name="count">The number of characters in the string to use as data.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>The computed CRC hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/>, <paramref name="encoding"/>, or
            <paramref name="algorithm"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Initialize">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> structure.
            </summary>
            <returns>A new <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> structure.</returns>
            <remarks>
            <para>
            This function returns a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> that is ready to be used.  Contrast to the default
            constructor on the type, which returns a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> that must be first initialized by
            calling <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Reset"/>.
            </para>
            <para>
            This function should be preferred over using the default constructor followed by calling
            <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Reset"/> for performance reasons.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Initialize(Microsoft.BI.Common.Hashing.Crc32Algorithm)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> structure using the specified CRC-32 algorithm.
            </summary>
            <param name="algorithm">The CRC-32 algorithm to use when computing the hash.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> structure.</returns>
            <remarks>
            <para>
            This function returns a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> that is ready to be used.  Contrast to the default
            constructor on the type, which returns a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> that must be first initialized by
            calling <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Reset"/>.
            </para>
            <para>
            This function should be preferred over using the default constructor followed by calling
            <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Reset"/> for performance reasons.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Reset">
            <summary>
            Resets the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
            <remarks>
            <para>
            Using the <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Reset"/> method allows the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> to be reused to compute
            another CRC hash value, even after the <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Finalize"/> method has been called.
            </para>
            <para>
            A <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> continues to use the same <see cref="T:Microsoft.BI.Common.Hashing.Crc32Algorithm"/> after being reset.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Byte[])">
            <summary>
            Adds the specified array of bytes to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
            <param name="data">The array of bytes to add to the state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the data in the specified region of the specified array of bytes to the state of the
            <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
            <param name="data">The array of bytes to add to the state.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Void*,System.Int32)">
            <summary>
            Adds the bytes pointed to by the specified pointer to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
            <param name="data">A pointer to the data to add to the state.</param>
            <param name="size">The number of bytes to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.String,System.Text.Encoding)">
            <summary>
            Adds the specified string encoded using the specified encoding to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
            <param name="data">The string to add to the state.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to encode the string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Adds a region of the specified string encoded using the specified encoding to the state of the
            <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
            <param name="data">The string to add to the state.</param>
            <param name="offset">The offset into the string from which to begin using data.</param>
            <param name="count">The number of characters to use as data.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to encode the string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Char*,System.Int32,System.Text.Encoding)">
            <summary>
            Adds the characters pointed to by the specified pointer to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
            <param name="data">A pointer to the characters to add to the state.</param>
            <param name="count">The number of characters to add.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to encode the characters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Finalize">
            <summary>
            Finalizes the hash computation and returns the resulting digest.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.Hashing.Crc32Digest"/> value containing the resulting CRC hash.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has not been initialized or has
            already been finalized.</exception>
            <remarks>
            Once a <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> has been finalized, it cannot be updated anymore until <see cref="M:Microsoft.BI.Common.Hashing.Crc32Hash.Reset"/>
            is called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Clone">
            <summary>
            Creates a copy of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> and its current state.
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/> and its internal state.</returns>
            <remarks>
            This method can be used to efficiently compute the hash of data with the same "prefix".  For example,
            when computing the CRC of strings that have a common prefix, you can compute the hash of the common
            prefix, clone the result, and then compute the hash of the remaining data.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.SByte)">
            <summary>
            Adds the specified <see cref="T:System.SByte"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Int16)">
            <summary>
            Adds the specified <see cref="T:System.Int16"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Int32)">
            <summary>
            Adds the specified <see cref="T:System.Int32"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Int64)">
            <summary>
            Adds the specified <see cref="T:System.Int64"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Byte)">
            <summary>
            Adds the specified <see cref="T:System.Byte"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.UInt16)">
            <summary>
            Adds the specified <see cref="T:System.UInt16"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.UInt32)">
            <summary>
            Adds the specified <see cref="T:System.UInt32"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.UInt64)">
            <summary>
            Adds the specified <see cref="T:System.UInt64"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Decimal)">
            <summary>
            Adds the specified <see cref="T:System.Decimal"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Single)">
            <summary>
            Adds the specified <see cref="T:System.Single"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Double)">
            <summary>
            Adds the specified <see cref="T:System.Double"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Boolean)">
            <summary>
            Adds the specified <see cref="T:System.Boolean"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Char)">
            <summary>
            Adds the specified <see cref="T:System.Char"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.Guid)">
            <summary>
            Adds the specified <see cref="T:System.Guid"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.DateTime)">
            <summary>
            Adds the specified <see cref="T:System.DateTime"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.Crc32Hash.Update(System.TimeSpan)">
            <summary>
            Adds the specified <see cref="T:System.TimeSpan"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.Crc32Hash"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Hashing.MD5Digest">
            <summary>
            Contains the 128-bit hash value that is the result of an MD5 hash function.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Hashing.MD5Digest.DigestSize">
            <summary>
            Gets the size of a MD5 digest, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Hashing.MD5Digest.Initial">
            <summary>
            The initial value of an <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> before any data has been added.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Digest.GetBytes">
            <summary>
            Gets an array of 16 bytes containing the 128-bit hash value.
            </summary>
            <returns>An array of 16 bytes containing the 128-bit hash value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Digest.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> is equal to another object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> and is equal to the current
            <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Digest.Equals(Microsoft.BI.Common.Hashing.MD5Digest)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> is equal to another <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/>.
            </summary>
            <param name="other">The other <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> value.</param>
            <returns><c>true</c> if the two values are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Digest.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Digest.ToString">
            <summary>
            Gets a 32-character hexadecimal string representation for the <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/>.
            </summary>
            <returns>A 32-character hexadecimal string representation for the <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/>.</returns>
            <remarks>
            The MD5 standard specifies that bytes are displayed in big-endian order.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Hashing.MD5Hash">
            <summary>
            Provides an implementation of the MD5 (Message Digest 5) 128-bit hashing algorithm.
            </summary>
            <remarks>
            The hash digest created by this structure is compatible with any MD5 hash function (on any platform) that
            computes MD5 hashes.
            </remarks>
            <content>
            Contains the MD5 transform algorithm, which is code generated.
            </content>
        </member>
        <member name="F:Microsoft.BI.Common.Hashing.MD5Hash.DigestSize">
            <summary>
            The number of bytes in a <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Hashing.MD5Hash.BlockSize">
            <summary>
            The number of bytes in the internal blocks of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Hashing.MD5Hash.Digest">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> for the data that has been hashed so far.
            </summary>
            <remarks>
            <para>
            This property creates a clone of the current <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> and calls <see cref="M:Microsoft.BI.Common.Hashing.MD5Hash.Finalize"/>
            on it.  The original hash function will maintain its state (meaning it can continue to be updated).
            </para>
            <para>
            Cloning a <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> is a relatively expensive operation, so use of this property
            should be avoided in tight loops or in other places where performance is a major concern.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.IO.Stream)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.IO.Stream,System.Int32)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/> using the specified buffer size.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <param name="bufferSize">The size of the buffer used to read from the stream.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is negative or zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.IO.Stream,System.Byte[])">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/> using the specified buffer.
            </summary>
            <param name="stream">The stream over which to compute the hash.</param>
            <param name="buffer">The buffer used to read from the stream.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="buffer"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified array of bytes.
            </summary>
            <param name="data">The array of bytes over which to compute the hash.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified array of bytes.
            </summary>
            <param name="data">The array of bytes over which to compute the hash.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            or equal to the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.Byte*,System.Int32)">
            <summary>
            Computes the hash value for the specified array of bytes.
            </summary>
            <param name="data">The address of an array of bytes for which to compute the hash.</param>
            <param name="count">The number of bytes to use as data.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.String,System.Text.Encoding)">
            <summary>
            Computes the hash value for the specified string using the specified encoding.
            </summary>
            <param name="data">The string for which to compute the hash.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Computes the hash value for the specified region of a string using the specified encoding.
            </summary>
            <param name="data">The string for which to compute the hash.</param>
            <param name="offset">The offset into the string from which to begin using data.</param>
            <param name="count">The number of characters in the string to use as data.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            or equal to the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.ComputeHash(System.Char*,System.Int32,System.Text.Encoding)">
            <summary>
            Computes the hash value for the specified array of characters using the specified encoding.
            </summary>
            <param name="data">The address of a string for which to compute the hash.</param>
            <param name="count">The number of characters in the string to use as data.</param>
            <param name="encoding">The encoding used to convert the string to bytes.</param>
            <returns>The computed MD5 hash.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Initialize">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> structure.
            </summary>
            <returns>A new <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> structure.</returns>
            <remarks>
            <para>
            This function returns a <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> that is ready to be used.  Contrast to the default
            constructor on the type, which returns a <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> that must be first initialized by
            calling <see cref="M:Microsoft.BI.Common.Hashing.MD5Hash.Reset"/>.
            </para>
            <para>
            This function should be preferred over using the default constructor followed by calling
            <see cref="M:Microsoft.BI.Common.Hashing.MD5Hash.Reset"/> due to efficiency reasons.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Reset">
            <summary>
            Resets the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
            <remarks>
            Using the <see cref="M:Microsoft.BI.Common.Hashing.MD5Hash.Reset"/> method allows the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> to be reused to compute
            another MD5 hash value, even after the <see cref="M:Microsoft.BI.Common.Hashing.MD5Hash.Finalize"/> method has been called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Byte[])">
            <summary>
            Adds the specified array of bytes to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
            <param name="data">The array of bytes to add to the state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the data in the specified region of the specified array of bytes to the state of the
            <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
            <param name="data">The array of bytes to add to the state.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Byte*,System.Int32)">
            <summary>
            Adds the bytes pointed to by the specified pointer to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
            <param name="data">A pointer to the bytes to add to the state.</param>
            <param name="size">The number of bytes to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.String,System.Text.Encoding)">
            <summary>
            Adds the specified string encoded using the specified encoding to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
            <param name="data">The string to add to the state.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to encode the string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Adds a region of the specified string encoded using the specified encoding to the state of the
            <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
            <param name="data">The string to add to the state.</param>
            <param name="offset">The offset into the string from which to begin using data.</param>
            <param name="count">The number of characters to use as data.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to encode the string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative or greater than
            the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/>
            is greater than the length of <paramref name="data"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Char*,System.Int32,System.Text.Encoding)">
            <summary>
            Adds the characters pointed to by the specified pointer to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
            <param name="data">A pointer to the characters to add to the state.</param>
            <param name="count">The number of characters to add.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to encode the characters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="encoding"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has not been initialized or has
            already been finalized.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Finalize">
            <summary>
            Finalizes the hash computation and returns the resulting digest.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.Hashing.MD5Digest"/> value containing the resulting MD5 hash.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has not been initialized or has
            already been finalized.</exception>
            <remarks>
            Once a <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> has been finalized, it cannot be updated anymore until <see cref="M:Microsoft.BI.Common.Hashing.MD5Hash.Reset"/>
            is called.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Clone">
            <summary>
            Creates a copy of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> and its current state.
            </summary>
            <returns>A copy of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/> and its internal state.</returns>
            <remarks>
            This method can be used to efficiently compute the hash of data with the same "prefix".  For example,
            when computing the MD5 hash of strings that have a common prefix, you can compute the hash of the
            common prefix, clone the result, and then compute the hash of the remaining data.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.SByte)">
            <summary>
            Adds the specified <see cref="T:System.SByte"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Int16)">
            <summary>
            Adds the specified <see cref="T:System.Int16"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Int32)">
            <summary>
            Adds the specified <see cref="T:System.Int32"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Int64)">
            <summary>
            Adds the specified <see cref="T:System.Int64"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Byte)">
            <summary>
            Adds the specified <see cref="T:System.Byte"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.UInt16)">
            <summary>
            Adds the specified <see cref="T:System.UInt16"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.UInt32)">
            <summary>
            Adds the specified <see cref="T:System.UInt32"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.UInt64)">
            <summary>
            Adds the specified <see cref="T:System.UInt64"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Decimal)">
            <summary>
            Adds the specified <see cref="T:System.Decimal"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Single)">
            <summary>
            Adds the specified <see cref="T:System.Single"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Double)">
            <summary>
            Adds the specified <see cref="T:System.Double"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Boolean)">
            <summary>
            Adds the specified <see cref="T:System.Boolean"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Char)">
            <summary>
            Adds the specified <see cref="T:System.Char"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.Guid)">
            <summary>
            Adds the specified <see cref="T:System.Guid"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.DateTime)">
            <summary>
            Adds the specified <see cref="T:System.DateTime"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Update(System.TimeSpan)">
            <summary>
            Adds the specified <see cref="T:System.TimeSpan"/> to the state of the <see cref="T:Microsoft.BI.Common.Hashing.MD5Hash"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Hashing.MD5Hash.Transform(System.UInt32*,System.Int32)">
            <summary>
            Performs one round of the MD5 transformation algorithm.
            </summary>
            <param name="block">A pointer to the first byte to transform.</param>
            <param name="count">The number of bytes to transform.</param>
            <remarks>
            This method has been manually inlined and unrolled for performance.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.HashUtils">
            <summary>
            Provides some hashing utilities.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.CommonPower2(System.UInt32)">
            <summary>
            Returns the lowest power of 2 greater than or equal to <paramref name="x"/>.
            </summary>
            <param name="x">The number to compute the lowest common power of.</param>
            <returns>The smallest power of 2 that is greater than or equal to <paramref name="x"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Combines two hash codes together.
            </summary>
            <param name="h1">The first hash code.</param>
            <param name="h2">The second hash code.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.CombineHashCodes(System.UInt32,System.UInt32)">
            <summary>
            Combines two hash codes together.
            </summary>
            <param name="h1">The first hash code.</param>
            <param name="h2">The second hash code.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.GetHashCode(System.Object[])">
            <summary>
            Gets the hash code of an array of objects.
            </summary>
            <param name="o">The objects to get the hash code of.</param>
            <returns>The object array's hash code, or 0 if <paramref name="o"/> is <c>null</c>.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.HashUtils.FNV_32_INIT">
            <summary>
            The initial hash value for Fowler-Noll-Vo hashes.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.FNV_1a(System.Byte*,System.UInt32)">
            <summary>
            Compute the Fowler-Noll-Vo hash of the specified bytes.
            </summary>
            <param name="data">The location of the bytes to hash.</param>
            <param name="length">The number of bytes to hash.</param>
            <returns>The hash of the bytes.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.FNV_1a(System.UInt32,System.Byte*,System.UInt32)">
            <summary>
            Compute the Fowler-Noll-Vo hash of the specified bytes.
            </summary>
            <param name="hash">The current hash value.</param>
            <param name="data">The buffer to compute the hash of.</param>
            <param name="length">The number of bytes to hash.</param>
            <returns>The hash of the bytes.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.FNV_1a(System.Byte[])">
            <summary>
            Compute the Fowler-Noll-Vo hash of the specified byte array.
            </summary>
            <param name="buffer">The buffer to compute the hash of.</param>
            <returns>The hash of the buffer.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.FNV_1a(System.UInt32,System.Byte[])">
            <summary>
            Compute the Fowler-Noll-Vo hash of the specified byte array.
            </summary>
            <param name="hash">The current hash value.</param>
            <param name="buffer">The buffer to compute the hash of.</param>
            <returns>The hash of the buffer.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.HashUtils.FNV_1a(System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Compute the Fowler-Noll-Vo hash of the specified byte array.
            </summary>
            <param name="hash">The current hash value.</param>
            <param name="buffer">The buffer to compute the hash of.</param>
            <param name="position">The position in <paramref name="buffer"/> at which to begin reading.</param>
            <param name="length">The number of bytes in <paramref name="buffer"/> to read.</param>
            <returns>The hash of the buffer.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ArchiveItem">
            <summary>
            The base class for an item in an archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItem.CanGetStream">
            <summary>
            When overridden in a derived class, gets a value indicating whether the <see cref="T:Microsoft.BI.Common.IO.ArchiveItem"/> supports accessing its data
            via <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            If this property returns <c>true</c>, <see cref="M:Microsoft.BI.Common.IO.ArchiveItem.GetStream"/> must return a readable <see cref="T:System.IO.Stream"/> when called.  If this
            property returns <c>false</c>, <see cref="M:Microsoft.BI.Common.IO.ArchiveItem.GetStream"/> should throw a <see cref="T:System.NotSupportedException"/> when called.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.ArchiveItem.GetStream"/>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItem.FileInfo">
            <summary>
            When overridden in a derived class, gets a <see cref="T:Microsoft.BI.Common.IO.ArchiveItemInfo"/> containing information about the item.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveItem.CopyTo(System.String)">
            <summary>
            When overridden in a derived class, copies the contents of the item to the specified destination.
            </summary>
            <param name="destination">The local location into which to copy the item.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveItem.CopyTo(System.IO.Stream)">
            <summary>
            Copies the contents of the current item to a stream.
            </summary>
            <param name="destination">The <see cref="T:System.IO.Stream"/> into which to copy the data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveItem.Extract">
            <summary>
            Extracts the contents of the item from the archive and writes it to disk.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveItem.GetDestinationPath">
            <summary>
            When overridden in a derived class, translates an archive path into a local filesystem path.
            </summary>
            <returns>The local filesystem path for the item.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveItem.GetStream">
            <summary>
            When overridden in a derived class, gets a <see cref="T:System.IO.Stream"/> containing the content of the item.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> containing the content of the item.</returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Microsoft.BI.Common.IO.ArchiveItem"/> does not support being read as a <see cref="T:System.IO.Stream"/>.</exception>
            <remarks>
            Not all archive item types will support this method.  Those that do not should return <c>false</c> when the <see cref="P:Microsoft.BI.Common.IO.ArchiveItem.CanGetStream"/>
            property is accessed and throw a <see cref="T:System.NotSupportedException"/> if this method is called.
            </remarks>
            <seealso cref="P:Microsoft.BI.Common.IO.ArchiveItem.CanGetStream"/>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ArchiveItemInfo">
            <summary>
            Represents information about a item in an archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.Attributes">
            <summary>
            Gets the set of <see cref="T:System.IO.FileAttributes"/> that apply to the item in the archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.CreationTime">
            <summary>
            Gets the the creation time for the item in local time.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.CreationTimeUtc">
            <summary>
            Gets the creation time for the item in universal time.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.Directory">
            <summary>
            Gets the directory name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.FullName">
            <summary>
            Gets the full name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.FileName">
            <summary>
            Gets the file name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.Extension">
            <summary>
            Gets the extension of the item.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.LastAccessTime">
            <summary>
            Gets the last access time of the item in local time.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.LastAccessTimeUtc">
            <summary>
            Gets the last access time of the item in universal time.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.LastWriteTime">
            <summary>
            Gets the last write time of the item in local time.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveItemInfo.LastWriteTimeUtc">
            <summary>
            Gets the last write time of the item in universal time.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveItemInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ArchiveItemInfo"/> class with the specified item name.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ArchiveReader`1">
            <summary>
            Abstract base class for implementations of <see cref="T:Microsoft.BI.Common.IO.IArchiveReader`1"/>.
            </summary>
            <typeparam name="T">The type of element in the archive.  Must be a subclass of <see cref="T:Microsoft.BI.Common.IO.ArchiveItem"/>.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.MoveNext">
            <summary>
            When overridden in a derived class, moves to the next item in the archive.
            </summary>
            <returns><c>true</c> if advancing to the next item was successful; <c>false</c> if the end of the archive was reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.Reset">
            <summary>
            When overridden in a derived class, resets the archive to the beginning.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveReader`1.Current">
            <summary>
            Gets the current <see cref="T:Microsoft.BI.Common.IO.ArchiveItem"/> in the archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveReader`1.BaseStream">
            <summary>
            Gets the underlying <see cref="T:System.IO.Stream"/> object containing the data of the archive.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ArchiveReader`1"/> class from the specified archive file.
            </summary>
            <param name="file">The path to the archive to read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ArchiveReader`1"/> class from the specified archive <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the archive data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading -or- <paramref name="stream"/>
            does not support seeking.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.ExtractAll">
            <summary>
            Extracts all items in the archive.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.Close">
            <summary>
            Closes the archive.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.ArchiveReader`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveReader`1.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.ArchiveReader`1"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose only
            unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ArchiveWriter">
            <summary>
            Abstract base class for implementations of <see cref="T:Microsoft.BI.Common.IO.IArchiveWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.AddFrom(System.String,System.String)">
            <summary>
            When overridden in a derived class, adds a file to the archive with the specified name.
            </summary>
            <param name="file">The path to the file to add.</param>
            <param name="name">The name to use for the file in the archive.</param>
            <remarks>
            This method adds a file to the archive using the specified file name instead of using the original file name.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.ArchiveWriter.Add(System.String)"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.AddFrom(System.IO.Stream,System.String)">
            <summary>
            When overridden in a derived class, adds the contents of a <see cref="T:System.IO.Stream"/> to the archive using the specified name.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the data to copy into the archive.</param>
            <param name="name">The name to use for the file in the archive.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.Add(System.String)">
            <summary>
            Adds a file to the archive.
            </summary>
            <param name="file">The path to the file to add.</param>
            <remarks>
            This method adds a file to the archive using <paramref name="file"/> as the name of the file in the archive.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.ArchiveWriter.AddFrom(System.String,System.String)"/>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ArchiveWriter.BaseStream">
            <summary>
            Gets the underlying <see cref="T:System.IO.Stream"/> object containing the data of the archive.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ArchiveWriter"/> class from the specified archive file.
            </summary>
            <param name="file">The path to the archive to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ArchiveWriter"/> class using the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> into which to write the archive data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing -or- <paramref name="stream"/>
            does not support seeking.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.ArchiveWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.ArchiveWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ArchiveWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.ArchiveWriter"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose only
            unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IArchiveReader`1">
            <summary>
            Describes a set of methods for reading archives, which are a collection of files.
            </summary>
            <typeparam name="T">The type of item in the archive; must be a subclass of <see cref="T:Microsoft.BI.Common.IO.ArchiveItem"/>.</typeparam>
            <remarks>
            An 'archive', in this sense, is a sequentially-accessed collection of files, often concatenated together with some form
            of metadata to indicate where they exist in the archive and information about their name, type, and other attributes.  Contrast
            to an 'image', which is a random-access collection of files.
            </remarks>
            <seealso cref="T:Microsoft.BI.Common.IO.IArchiveWriter"/>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IArchiveWriter">
            <summary>
            Describes a set of methods for writing archives, which are a collection of files.
            </summary>
            <remarks>
            An 'archive', in this sense, is a sequentially-accessed collection of files, often concatenated together with some form
            of metadata to indicate where they exist in the archive and information about their name, type, and other attributes.  Contrast
            to an 'image', which is a random-access collection of files.
            </remarks>
            <seealso cref="T:Microsoft.BI.Common.IO.IArchiveReader`1"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IArchiveWriter.Add(System.String)">
            <summary>
            Adds a file to the archive.
            </summary>
            <param name="file">The path to the file to add.</param>
            <remarks>
            This method adds a file to the archive using <paramref name="file"/> as the name of the file in the archive.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.IArchiveWriter.AddFrom(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IArchiveWriter.AddFrom(System.String,System.String)">
            <summary>
            Adds a file to the archive with the specified name.
            </summary>
            <param name="file">The path to the file to add.</param>
            <param name="name">The name to use for the file in the archive.</param>
            <remarks>
            This method adds a file to the archive using the specified file name instead of using the original file name.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.IArchiveWriter.Add(System.String)"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IArchiveWriter.AddFrom(System.IO.Stream,System.String)">
            <summary>
            Adds the contents of a <see cref="T:System.IO.Stream"/> to the archive using the specified name.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the data to copy into the archive.</param>
            <param name="name">The name to use for the file in the archive.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.TarArchiveItem">
            <summary>
            Base class for items in a tar archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveItem.Header">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> for the current archive item.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveItem.Reader">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> that created the <see cref="T:Microsoft.BI.Common.IO.TarArchiveItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveItem.BaseStream">
            <summary>
            Gets the <see cref="T:System.IO.Stream"/> containing the tar archive data.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveItem.FileInfo">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.ArchiveItemInfo"/> containing information about the item.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveItem.#ctor(Microsoft.BI.Common.IO.TarArchiveReader)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.TarArchiveItem"/> class.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> that created this item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveItem.GetDestinationPath">
            <summary>
            Gets the path on the local system corresponding to the archive path.
            </summary>
            <returns>The path on the local system corresponding to the archive path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveItem.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.TarArchiveItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveItem.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.TarArchiveItem"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveItem.ShouldWrite(System.String)">
            <summary>
            Returns whether the <see cref="T:Microsoft.BI.Common.IO.TarArchiveItem"/> should write to the specified path.
            </summary>
            <param name="destination">The path to check.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.BI.Common.IO.TarArchiveItem"/> should write to the specified path; otherwise, <c>false</c>.</returns>
            <remarks>
            This method takes into account thing such as existence of current files and the <see cref="P:Microsoft.BI.Common.IO.TarArchiveReader.Overwrite"/> flag.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IO.FileTarArchiveItem">
            <summary>
            Represents a file (<see cref="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.REGTYPE"/>) in a tar archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.FileTarArchiveItem.CanGetStream">
            <summary>
            Gets a value indicating whether <see cref="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream"/> is supported for the current instance.
            </summary>
            <remarks>
            This value is always <c>true</c> for <see cref="T:Microsoft.BI.Common.IO.FileTarArchiveItem"/> objects.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream"/>
        </member>
        <member name="F:Microsoft.BI.Common.IO.FileTarArchiveItem._Offset">
            <summary>
            The offset of the item in the original archive stream.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.FileTarArchiveItem._Stream">
            <summary>
            A cache of the stream returned by <see cref="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream"/>.
            </summary>
            <seealso cref="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.FileTarArchiveItem.#ctor(Microsoft.BI.Common.IO.TarArchiveReader)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.FileTarArchiveItem"/> class.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> containing this item.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> containing the contents of the archive file.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> containing the contents of the archive file.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream"/> has already been called once for this instance.</exception>
            <seealso cref="P:Microsoft.BI.Common.IO.FileTarArchiveItem.CanGetStream"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.FileTarArchiveItem.CopyTo(System.String)">
            <summary>
            Copies the contents of the file to the specified location.
            </summary>
            <param name="destination">The location to which to copy the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is <c>null</c>.</exception>
            <remarks><paramref name="destination"/> is adjusted according to the rules in the <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/>
            that created this object.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.FileTarArchiveItem.Dispose(System.Boolean)">
            <summary>
            Closes any stream opened by <see cref="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
            <seealso cref="M:Microsoft.BI.Common.IO.FileTarArchiveItem.GetStream"/>
        </member>
        <member name="T:Microsoft.BI.Common.IO.DirectoryTarArchiveItem">
            <summary>
            Represents a directory (<see cref="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.DIRTYPE"/>) in a tar archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DirectoryTarArchiveItem.CanGetStream">
            <summary>
            Gets a value indicating whether <see cref="M:Microsoft.BI.Common.IO.DirectoryTarArchiveItem.GetStream"/> is supported for the current instance.
            </summary>
            <remarks>
            This value is always <c>false</c> for <see cref="T:Microsoft.BI.Common.IO.DirectoryTarArchiveItem"/> objects.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.DirectoryTarArchiveItem.GetStream"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DirectoryTarArchiveItem.#ctor(Microsoft.BI.Common.IO.TarArchiveReader)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.DirectoryTarArchiveItem"/> class.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> containing this item.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DirectoryTarArchiveItem.CopyTo(System.String)">
            <summary>
            Creates a directory at the specified location.
            </summary>
            <param name="destination">The name of the directory to create.</param>
            <remarks><paramref name="destination"/> is adjusted according to the rules in the <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/>
            that created this object.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DirectoryTarArchiveItem.GetStream">
            <summary>
            Not supported.
            </summary>
            <returns>Not supported.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.SymlinkTarArchiveItem">
            <summary>
            Represents a directory (<see cref="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.SYMTYPE"/>) in a tar archive.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.SymlinkTarArchiveItem.CanGetStream">
            <summary>
            Gets a value indicating whether <see cref="M:Microsoft.BI.Common.IO.SymlinkTarArchiveItem.GetStream"/> is supported for the current instance.
            </summary>
            <remarks>
            This value is always <c>false</c> for <see cref="T:Microsoft.BI.Common.IO.SymlinkTarArchiveItem"/> objects.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.SymlinkTarArchiveItem.GetStream"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SymlinkTarArchiveItem.#ctor(Microsoft.BI.Common.IO.TarArchiveReader)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.SymlinkTarArchiveItem"/> class.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> containing this item.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SymlinkTarArchiveItem.CopyTo(System.String)">
            <summary>
            Creates a symlink at the specified location with a target matching the target specified in the archive.
            </summary>
            <param name="destination">The name of the symlink to create.</param>
            <remarks><paramref name="destination"/> is adjusted according to the rules in the <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/>
            that created this object.  The symlink target is not adjusted.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SymlinkTarArchiveItem.GetStream">
            <summary>
            Not supported.
            </summary>
            <returns>Not supported.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.TarArchiveReader">
            <summary>
            Provides access to the contents of a Tape ARchive (TAR) file.
            </summary>
            <remarks>
            Implements the POSIX.1-1988 ustar standard.  Doesn't handle any sort of tar extensions beyond the standard.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveReader.BaseDirectory">
            <summary>
            Gets or sets a value indicating the directory into which files extracted from the archive should be placed.
            </summary>
            <remarks>
            All files extracted from the archive will be placed into this folder.  Files in the archive that contain directory information
            will be created inside this directory with the directory structure specified in the archive.
            The default value is the current directory.  Setting this value to <c>null</c> will likewise use the current directory.
            </remarks>
            <seealso cref="P:Microsoft.BI.Common.IO.TarArchiveReader.PreserveAbsoluteFileNames"/>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveReader.Overwrite">
            <summary>
            Gets or sets a value indicating whether files extracted from the archive should overwrite files with the same name on
            the local filesystem.
            </summary>
            <remarks>
            If <c>true</c>, then files extracted from the archive will overwrite any files in the destination location with the same name.
            If <c>false</c>, any files that already exist in the destination will not be overwritten.
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveReader.PreserveAbsoluteFileNames">
            <summary>
            Gets or sets a value indicating whether to preserve absolute file names as is.
            </summary>
            <remarks>
            If <c>true</c>, absolute file names will be preserved on extraction.  WARNING - this can be very dangerous, as it can cause
            extraction to overwrite files in unexpected places on the system.  If <c>false</c>, all files that are extracted will be placed
            inside of <see cref="P:Microsoft.BI.Common.IO.TarArchiveReader.BaseDirectory"/>.
            The default value is <c>false</c>.
            </remarks>
            <seealso cref="P:Microsoft.BI.Common.IO.TarArchiveReader.BaseDirectory"/>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveReader.PreserveModificationTime">
            <summary>
            Gets or sets a value indicating whether to extract modification time for files extracted from the archive.
            </summary>
            <remarks>
            If <c>true</c>, the modification time of the file when extracted will be set to the time in the archive.  If <c>false</c>, the
            modification time will be when the file was extracted from the archive.
            The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarArchiveReader.CurrentHeader">
            <summary>
            The <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> of the current item.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarArchiveReader._CurrentOffset">
            <summary>
            The current offset in the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveReader.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> based on the specified file.
            </summary>
            <param name="file">The path to the TAR file to read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> based on the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the TAR data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveReader.MoveNext">
            <summary>
            Advances to the next item in the archive.
            </summary>
            <returns><c>true</c> if advancing to the next item was successful; <c>false</c> if the end of the archive was reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveReader.Reset">
            <summary>
            Resets the the reader to its initial state, allowing it's contents to be read again.
            </summary>
            <exception cref="T:System.NotSupportedException">The stream on which the <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/> is operating does not
            support seeking.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveReader.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.TarArchiveReader"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose only
            unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveReader.AdjustTarPath(System.String,System.Boolean)">
            <summary>
            Adjusts a path to ensure it is not an absolute path.
            </summary>
            <param name="path">The path to adjust.</param>
            <param name="includeBaseDirectory">Whether to prefix relative paths returned by this method with <see cref="P:Microsoft.BI.Common.IO.TarArchiveReader.BaseDirectory"/>.</param>
            <returns><paramref name="path"/> adjusted to remove the absolute portion, if present.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.TarArchiveWriter">
            <summary>
            Provides methods for writing a Tape ARchive (TAR) file.
            </summary>
            <remarks>
            Implements the POSIX.1-1988 ustar standard.  Doesn't handle any sort of tar extensions beyond the standard.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveWriter.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.IO.TarArchiveWriter"/> based on the specified file.
            </summary>
            <param name="file">The path to the TAR file to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.IO.TarArchiveWriter"/> based on the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> into which to write the TAR data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveWriter.AddFrom(System.String,System.String)">
            <summary>
            Adds a file to the archive with the specified name.
            </summary>
            <param name="file">The path to the file to add.</param>
            <param name="name">The name to use for the file in the archive.</param>
            <remarks>
            This method adds a file to the archive using the specified file name instead of using the original file name.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IO.ArchiveWriter.Add(System.String)"/>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveWriter.AddFrom(System.IO.Stream,System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="stream">The stream from which to read data.</param>
            <param name="name">The name to use for the file in the archive.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarArchiveWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.TarArchiveWriter"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose only
            unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.TAR_MODE">
            <summary>
            Contains values representing a UNIX mode (for representing file permissions).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TSUID">
            <summary>
            Set user id on execution.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TSGID">
            <summary>
            Set group id on execution.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TSVTX">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TUREAD">
            <summary>
            Read by owner.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TUWRITE">
            <summary>
            Write by owner.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TUEXEC">
            <summary>
            Execute or search by owner.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TGREAD">
            <summary>
            Read by group.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TGWRITE">
            <summary>
            Write by group.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TGEXEC">
            <summary>
            Execute or search by group.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TOREAD">
            <summary>
            Read by others.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TOWRITE">
            <summary>
            Write by others.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_MODE.TOEXEC">
            <summary>
            Execute or search by others.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.TAR_TYPEFLAG">
            <summary>
            Contains values representing the type of file contained in a TAR file.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.REGTYPE">
            <summary>
            Regular file.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.AREGTYPE">
            <summary>
            Regular file.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.LNKTYPE">
            <summary>
            Hard link.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.SYMTYPE">
            <summary>
            Symbolic link.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.CHRTYPE">
            <summary>
            Character device node.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.BLKTYPE">
            <summary>
            Block device node.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.DIRTYPE">
            <summary>
            Directory.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.FIFOTYPE">
            <summary>
            FIFO node.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TAR_TYPEFLAG.CONTTYPE">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.TarHeader">
            <summary>
            Represents a single 512-byte TAR header.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.name">
            <summary>
            The name of the file.
            </summary>
            <remarks>
            The file's path name is created using this field, or by using this field in connection with the <see cref="F:Microsoft.BI.Common.IO.TarHeader.prefix"/> field.
            If the <see cref="F:Microsoft.BI.Common.IO.TarHeader.prefix"/> field is included, the name of the file is 'prefix/name'.  This field is null-terminated unless
            every character is non-null. 
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.mode">
            <summary>
            The mode of the file.
            </summary>
            <remarks>
            Provides 9 bits for file permissions and 3 bits for SUID, SGID, and SVTX modes.  All values for this field are in octal.
            During a read operation, the designated mode bits are ignored if the user does not have equal (or higher) permissions or
            if the modes are not supported.  Numeric fields are terminated with a space and a null byte.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.uid">
            <summary>
            The user ID of the file.
            </summary>
            <remarks>
            Extracted from the corresponding archive fields unless a user with appropriate privileges restores the file.  In that case,
            the field value is extracted from the password and group files instead. Numeric fields are terminated with a space and a null
            byte.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.gid">
            <summary>
            The group ID of the file.
            </summary>
            <remarks>
            Extracted from the corresponding archive fields unless a user with appropriate privileges restores the file. In that case, the
            field value is extracted from the password and group files instead. Numeric fields are terminated with a space and a null byte.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.size">
            <summary>
            The size of the file.
            </summary>
            <remarks>
            Value is 0 when the typeflag field is set to LNKTYPE.  This field is terminated with a space only.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.mtime">
            <summary>
            The last modified time of the file.
            </summary>
            <remarks>
            Value is obtained from the modification-time field of the stat subroutine.  This field is terminated with a space only.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.cksum">
            <summary>
            The checksum of the header.
            </summary>
            <remarks>
            On calculation, the sum of all bytes in the header structure are treated as spaces.  Each unsigned byte is added to an unsigned
            integer (initialized to 0) with at least 17-bits precision. Numeric fields are terminated with a space and a null byte.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.typeflag">
            <summary>
            The type flag of the file.
            </summary>
            <remarks>
            Numeric fields are terminated with a space and a null byte.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.linkname">
            <summary>
            The name of the file to link to.
            </summary>
            <remarks>
            Does not use the prefix field to produce a path name.  If the path name or linkname value is too long, an error message is returned
            and any action on that file or directory is canceled.  This field is null-terminated unless every character is non-null.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.magic">
            <summary>
            The magic number of the tar file.
            </summary>
            <remarks>
            Contains the TMAGIC value, reflecting the extended tar archive format. In this case, the uname and gname fields will contain the
            ASCII representation for the file owner and the file group. If a file is restored by a user with the appropriate privileges, the uid
            and gid fields are extracted from the password and group files (instead of the corresponding archive fields). This field is
            null-terminated. TMAGIC is equal to the string "USTAR", null-terminated. 
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.version">
            <summary>
            The version of the tar command used to create the file.
            </summary>
            <remarks>
            Represents the version of the tar command used to archive the file. This field is terminated with a space only. 
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.uname">
            <summary>
            The user name of the file owner.
            </summary>
            <remarks>
            Contains the ASCII representation of the file owner.  This field is null-terminated.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.gname">
            <summary>
            The group name of the group owner.
            </summary>
            <remarks>
            Contains the ASCII representation of the file group.  This field is null-terminated.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.devmajor">
            <summary>
            The device major number.
            </summary>
            <remarks>
            Contains the device major number. Terminated with a space and a null byte.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.devminor">
            <summary>
            The device minor number.
            </summary>
            <remarks>
            Contains the device minor number.  Terminated with a space and a null byte.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.TarHeader.prefix">
            <summary>
            The file name prefix.
            </summary>
            <remarks>
            If this field is non-null, the file's path name is created using the prefix/name values together. Null-terminated unless
            every character is non-null.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.TarHeader.FileName">
            <summary>
            Gets or sets the filename of the header.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is longer than 255 characters.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> class for the specified file or directory.
            </summary>
            <param name="file">The file for which to create the <see cref="T:Microsoft.BI.Common.IO.TarHeader"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="file"/> cannot be found.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.#ctor">
            <summary>
            Creates a new, empty <see cref="T:Microsoft.BI.Common.IO.TarHeader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> from a byte array created by <see cref="M:Microsoft.BI.Common.IO.TarHeader.Serialize"/>.
            </summary>
            <param name="bytes">The byte array containing the serialized data.</param>
            <param name="validateChecksum">Whether to validate that the header's checksum matches its content.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.Serialize">
            <summary>
            Serializes the <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> into a byte array of length 512.
            </summary>
            <returns>The serialized header data.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.EncodeNumberAsAscii(System.Byte[],System.Int32,System.Int64,System.Int32,System.String)">
            <summary>
            Encodes a number as an ASCII representation of the digits of the number in octal and writes it to a byte array.
            </summary>
            <param name="dest">The byte array in which to write the number.</param>
            <param name="offset">The offset in <paramref name="dest"/> at which to start write the data.</param>
            <param name="num">The number to write.</param>
            <param name="fieldLength">The length of the field.</param>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.WriteString(System.Byte[],System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Writes a string to a byte array.
            </summary>
            <param name="dest">The byte array in which to write the string.</param>
            <param name="offset">The offset in <paramref name="dest"/> at which to start writing the data.</param>
            <param name="s">The string to write.</param>
            <param name="maxLength">The maximum length of the field.</param>
            <param name="fieldName">The name of the field.</param>
            <exception cref="T:System.ArgumentException">The string to write is longer than the maximum length of the field.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.Deserialize(System.Byte[])">
            <summary>
            Deserializes a byte array into a <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> object.
            </summary>
            <param name="header">The byte array containing the serialized header data.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> object loaded from the data in <paramref name="header"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="header"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="header"/> is not exactly 512 bytes long.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.Deserialize(System.Byte[],System.Boolean)">
            <summary>
            Deserializes a byte array into a <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> object.
            </summary>
            <param name="header">The byte array containing the serialized header data.</param>
            <param name="validateChecksum">Whether to validate the checksum of the header.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.IO.TarHeader"/> object loaded from the data in <paramref name="header"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.ComputeChecksum(System.Byte[])">
            <summary>
            Computes the checksum of the specified header block.
            </summary>
            <param name="header">The header block of which to compute the checksum.</param>
            <returns>The checksum of <paramref name="header"/>.</returns>
            <remarks>
            The algorithm is to sum all of the unsigned bytes in the header, using ' ' for the 8 header
            bytes.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.ReadString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a string from a byte array.
            </summary>
            <param name="source">The byte array containing the serialized data.</param>
            <param name="offset">The offset in <paramref name="source"/> at which to start reading.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The deserialized string.</returns>
            <remarks>
            The string returned by this method will go up to the end of the read data or up to the first
            null char, whichever is first.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.ReadUInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from a byte array.
            </summary>
            <param name="source">The byte array containing the serialized data.</param>
            <param name="offset">The offset in <paramref name="source"/> at which to start reading.</param>
            <returns>The deserialized value.</returns>
            <remarks>
            The data should be serialized as ASCII representations of octal digits.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.ReadInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an <see cref="T:System.Int32"/> from a byte array.
            </summary>
            <param name="source">The byte array containing the serialized data.</param>
            <param name="offset">The offset in <paramref name="source"/> at which to start reading.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The deserialized value.</returns>
            <remarks>
            The data should be serialized as ASCII representations of octal digits.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.ReadUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from a byte array.
            </summary>
            <param name="source">The byte array containing the serialized data.</param>
            <param name="offset">The offset in <paramref name="source"/> at which to start reading.</param>'
            <param name="length">The number of bytes to read.</param>
            <returns>The deserialized value.</returns>
            <remarks>
            The data should be serialized as ASCII representations of octal digits.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.TarHeader.IsNullBlock(System.Byte[])">
            <summary>
            Returns a value indicating whether the specified header block indicates a null block.
            </summary>
            <param name="header">The header block to check.</param>
            <returns>true if <paramref name="header"/> represents a null block; otherwise, false.</returns>
            <remarks>
            A "null block" is a header block consisting entirely of nulls (0).  Two null blocks in a row signal the end
            of a TAR file.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IO.BufferStream">
            <summary>
            The base class for a non-seekable buffer stream.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Microsoft.BI.Common.IO.BufferStream"/> is a <see cref="T:System.IO.Stream"/> implementation on top of sequences of buffers.  For
            readable streams, this sequence is an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence.
            It is intended to provide an integration layer between components with different paradigms.  For example, you
            can use a <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/> to interact with an enumerable sequence of buffers as if it were
            a stream.
            </para>
            <para>
            <see cref="T:Microsoft.BI.Common.IO.BufferStream"/> instances have no concept of position.  As such, they are not seekable, and any
            use of the <see cref="P:Microsoft.BI.Common.IO.BufferStream.Length"/> or <see cref="P:Microsoft.BI.Common.IO.BufferStream.Position"/> properties or the <see cref="M:Microsoft.BI.Common.IO.BufferStream.SetLength(System.Int64)"/> or
            <see cref="M:Microsoft.BI.Common.IO.BufferStream.Seek(System.Int64,System.IO.SeekOrigin)"/> methods will result in a <see cref="T:System.NotSupportedException"/>.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BufferStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <remarks>
            <see cref="T:Microsoft.BI.Common.IO.BufferStream"/> instances do not support seeking, so this property always
            returns <c>false</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BufferStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This property is not currently supported and always
            throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.IO.BufferStream"/> instances do not know their length, so use of this property
            is not supported.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BufferStream.Position">
            <summary>
            Gets or sets the current position in the stream.  This property is not currently supported and always
            throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.IO.BufferStream"/> instances do not know their position, so use of this property
            is not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BufferStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position of the stream to the given value.  This method is not currently supported and always
            throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to
            obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BufferStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.  This method is not supported and always throws a
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">The new length of the stream.</param>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.IO.CsvReader">
            <summary>
            Implements a <see cref="T:System.IO.Stream"/>-like interface for reading Comma-Separated (CSV) files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvReader.Delimiter">
            <summary>
            Gets or sets the delimiter between each field.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvReader.BaseStream">
            <summary>
            Gets the underlying stream on which the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvReader.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvReader.EndOfStream">
            <summary>
            Gets a value indicating whether the current position is at the end of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvReader.Parser">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.DelimitedTextParser"/> used when reading data.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.CsvReader.LineRead">
            <summary>
            Occurs when a line is read from the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.#ctor(System.String,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> class pointing to an existing CSV file at the specified path.
            </summary>
            <param name="path">The path of the CSV file to read.</param>
            <param name="schema">The schema to use when parsing the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when reading the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.#ctor(System.IO.Stream,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> class based on the specified stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="schema">The schema to use when parsing the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when reading the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.#ctor(System.IO.TextReader,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> class based on the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The input reader.</param>
            <param name="schema">The schema to use when parsing the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.#ctor(Microsoft.BI.Common.DelimitedTextParser,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> class based on the specified <see cref="T:Microsoft.BI.Common.DelimitedTextParser"/>.
            </summary>
            <param name="parser">The <see cref="T:Microsoft.BI.Common.DelimitedTextParser"/> to use when parsing data.</param>
            <param name="schema">The schema to use when parsing the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.ReadLine">
            <summary>
            Read and return a single line in the CSV file.
            </summary>
            <returns>The next line in the structured text file as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.ReadStructuredTextLineImpl(System.Collections.Generic.IList{System.String}@)">
            <summary>
            Read the next line from the underlying stream.
            </summary>
            <param name="tokens">The result of splitting the next line.</param>
            <returns>true if data was read; false if EOF was reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.CsvWriter">
            <summary>
            A class that provides an easy way to create and write data to CSV files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvWriter.Delimiter">
            <summary>
            Gets or sets the delimiter between each field.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvWriter.NewLine">
            <summary>
            Gets or sets the string used to indicate new lines.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvWriter.BaseStream">
            <summary>
            Gets the underlying stream on which the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvWriter.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.CsvWriter.Formatter">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> used when writing data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.#ctor(System.String,System.Data.DataTable,System.IO.FileMode,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> class pointing to a new or existing CSV file at the specified path.
            </summary>
            <param name="path">The path to the CSV file to create.</param>
            <param name="schema">The schema of the data to write.</param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> with which to open the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the file to write to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.#ctor(System.IO.Stream,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Initializes a new instances of the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> class based on the specified stream.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="schema">The schema of the data to write.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the file to write to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.#ctor(System.IO.TextWriter,System.Data.DataTable)">
            <summary>
            Initializes a new instances of the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> class based on the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The output writer.</param>
            <param name="schema">The schema of the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.#ctor(Microsoft.BI.Common.DelimitedTextFormatter,System.Data.DataTable)">
            <summary>
            Initializes a new instances of the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> class based on the specified <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/>.
            </summary>
            <param name="formatter">The <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> to use when parsing the data.</param>
            <param name="schema">The schema of the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.Write(System.String)">
            <summary>
            Writes a string to the underlying stream.
            </summary>
            <param name="data">The string to write to the file.</param>
            <remarks>This does not append a trailing newline automatically.  Use <see cref="P:Microsoft.BI.Common.IO.CsvWriter.NewLine"/> to get the newline
            string for this instance.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.WriteLine(System.String)">
            <summary>
            Writes a string to the underlying stream and appends <see cref="P:Microsoft.BI.Common.IO.CsvWriter.NewLine"/> automatically.
            </summary>
            <param name="data">The string to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.Flush">
            <summary>
            Clears all buffers and causes any buffered data to be written to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.DtsReader">
            <summary>
            A class that provides a simple method for reading DTS files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.Version">
            <summary>
            The version of the DTS file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.Schema">
            <summary>
            A <see cref="T:System.Data.DataTable"/> containing the schema of the DTS file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.BaseStream">
            <summary>
            The <see cref="T:System.IO.Stream"/> on top of the DTS file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.IsClosed">
            <summary>
            Returns whether the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/> is currently open or not.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.FieldCount">
            <summary>
            Returns the number of columns in the current schema.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.EndOfStream">
            <summary>
            Returns whether the current position is at the end of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.Position">
            <summary>
            Returns the current position of the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/> in <see cref="P:Microsoft.BI.Common.IO.DtsReader.BaseStream"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.Reader">
            <summary>
            A <see cref="T:System.IO.BinaryReader"/> on top of <see cref="P:Microsoft.BI.Common.IO.DtsReader.BaseStream"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.NullFlagBytes">
            <summary>
            The number of bytes required to store the null flag bitmask.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsReader.CurrentNullFlagMask">
            <summary>
            The current null flag bitmask.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/> class pointing to an existing DTS file at the
            specified path.
            </summary>
            <param name="path">The path of the DTS file to read.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/> class based on the specified stream.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.#ctor(System.IO.Stream,System.Data.DataTable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/> class based on the specified stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="schema">The schema of the DTS file to read.</param>
            <param name="readHeader">Whether the DTS file being read has a header.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="readHeader"/> is <c>false</c> and <paramref name="schema"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadAllLines">
            <summary>
            Returns an iterable collection of all the lines in the DTS file.
            </summary>
            <returns>An IEnumerable collection of object arrays representing the data in the DTS file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadFields">
            <summary>
            Read and return a single line in the DTS file.
            </summary>
            <returns>An object array consisting of the data in the row, or null if done reading.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.SkipLine">
            <summary>
            Skips a single line in the DTS file.
            </summary>
            <returns>true if there are more rows left to be read; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.GetValue(System.Int32)">
            <summary>
            Get the value of the object in the specified field of the current record.
            </summary>
            <param name="i">The index of the field to get.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.SkipValue(System.Int32)">
            <summary>
            Skips over the value in the specified field of the current record.
            </summary>
            <param name="i">The index of the field to skip.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadHeader">
            <summary>
            Reads the header.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadVersionInfo">
            <summary>
            Reads the DSV version from the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadSchemaFromDts">
            <summary>
            Reads the DTS schema from the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadColumn_SSIS2008">
            <summary>
            Reads a <see cref="T:System.Data.DataColumn"/> from a DTS schema in the SSIS 2008 format.
            </summary>
            <returns>The <see cref="T:System.Data.DataColumn"/> read from the schema.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadColumn_SSIS2012">
            <summary>
            Reads a <see cref="T:System.Data.DataColumn"/> from a DTS schema in the SSIS 2012 format.
            </summary>
            <returns>The <see cref="T:System.Data.DataColumn"/> read from the schema.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadNullFlags">
            <summary>
            Reads the null flag values for a row.
            </summary>
            <returns>true if the stream has not been completely read; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadBytes(System.Int32)">
            <summary>
            Reads a byte array from the underlying stream with the specified encoding.
            </summary>
            <param name="maxlen">The maximum number of bytes to read.</param>
            <returns>The bytes read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadNarrowString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a narrow string (non-unicode) from the underlying stream with the specified encoding.
            </summary>
            <param name="maxlen">The maximum number of bytes to read.</param>
            <param name="encoding">The encoding to use when converting the bytes to a string.</param>
            <returns>The bytes read encoded using the specified encoding.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.ReadWideString(System.Int32)">
            <summary>
            Reads a wide string (unicode) from the underlying stream.
            </summary>
            <param name="maxlen">The maximum number of bytes to read.</param>
            <returns>The bytes read encoded in Unicode.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.SkipBytes">
            <summary>
            Skip over the bytes in a byte array at the current position.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.SkipNarrowString">
            <summary>
            Skip over the bytes in a narrow string at the current position.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.SkipWideString">
            <summary>
            Skip over the bytes in a wide string at the given position.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.GetDataReader">
            <summary>
            Gets a <see cref="T:System.Data.IDataReader"/> suitable for loading a DataTable via <see cref="M:System.Data.DataTable.Load(System.Data.IDataReader)"/>.
            </summary>
            <returns>A <see cref="T:System.Data.IDataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsReader.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.DtsReader"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsDataReader.#ctor(Microsoft.BI.Common.IO.DtsReader)">
            <summary>
            Initializes a new instance of the DtsDataReader class based on the specified DtssvReader.
            </summary>
            <param name="reader">The DtsReader to use to get data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsDataReader.GetValues(System.Object[])">
            <summary>
            Fills the specified array with values from the current record.
            </summary>
            <param name="values">The array to fill.</param>
            <returns>The number of object filled.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsDataReader.NextResult">
            <summary>
            Determines whether there is additional data to be read.
            </summary>
            <returns>true if there is more data left in the stream to read; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsDataReader.Read">
            <summary>
            Reads the next array of objects into the internal buffer.
            </summary>
            <returns>true if data was read; false if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsDataReader.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.DtsDataReader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsDataReader.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.DtsDataReader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsDataReader.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.DtsDataReader"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.DtsVersion">
            <summary>
            The set of versions supported by <see cref="T:Microsoft.BI.Common.IO.DtsReader"/> and <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DtsVersion.SSIS2008">
            <summary>
            The DTS file format as written by SSIS 2008.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DtsVersion.SSIS2012">
            <summary>
            The DTS file format as written by SSIS 2012.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.DtsWriter">
            <summary>
            A class that provides an easy way to create and write data to DTS files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsWriter.Version">
            <summary>
            Gets the DSV file version.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsWriter.BaseStream">
            <summary>
            Gets the <see cref="T:System.IO.Stream"/> on which the <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsWriter.FieldCount">
            <summary>
            Gets the number of fields in the DTS file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsWriter.IsClosed">
            <summary>
            Gets a value indicating whether the underlying stream has been closed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsWriter.CurrentLine">
            <summary>
            Gets a value indicating the current line in the base stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.DtsWriter.Schema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> containing the schema of the DTS file.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.#ctor(System.String,System.Data.DataTable,Microsoft.BI.Common.IO.DtsVersion,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/> class pointing to a new DTS file at the specified path.
            </summary>
            <param name="path">The path to the DTS file to create.</param>
            <param name="schema">The schema of the data to write.</param>
            <param name="version">The format of the DTS file to create.</param>
            <param name="writeHeader">Whether or not to write the DTS header to the file.</param>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> refers to a file that already exists.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>, or <paramref name="schema"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="schema"/> has more than the maximum allowed number of columns (131071).</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.#ctor(System.String,System.Data.DataTable,System.IO.FileMode,Microsoft.BI.Common.IO.DtsVersion,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/> class pointing to a new or existing DTS file at the specified path.
            </summary>
            <param name="path">The path to the DTS file to create.</param>
            <param name="schema">The schema of the data to write.</param>
            <param name="mode">The mode with which to open the file.</param>
            <param name="version">The format of the DTS file to create.</param>
            <param name="writeHeader">Whether or not to write the DTS header to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>, or <paramref name="schema"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="schema"/> has more than the maximum allowed number of columns (131071).</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.#ctor(System.IO.Stream,System.Data.DataTable,Microsoft.BI.Common.IO.DtsVersion,System.Boolean)">
            <summary>
            Initializes a new instances of the <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/> class based on the specified stream.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="schema">The schema of the data to write.</param>
            <param name="version">The format of the DTS file to create.</param>
            <param name="writeHeader">Whether or not to write the DTS header to the stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, or <paramref name="schema"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="schema"/> has more than the maximum allowed number of columns (131071).</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteFields(System.Object[])">
            <summary>
            Writes an array of values to the underlying stream.
            </summary>
            <param name="values">The values to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteFields(System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes an array of values to the underlying stream.
            </summary>
            <param name="line">The values to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteAllLines(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Object}})">
            <summary>
            Write all lines in the enumerable to the underlying stream.
            </summary>
            <param name="lines">The IEnumerable of values to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteHeader">
            <summary>
            Write the header to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteVersionInfo">
            <summary>
            Writes the DTS version to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteSchemaToDTS">
            <summary>
            Writes the DTS' schema to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteColumn_SSIS2008(System.Data.DataColumn)">
            <summary>
            Writes a <see cref="T:System.Data.DataColumn"/> to the schema of a DTS file in the SSIS 2008 format.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> to write to the schema.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteColumn_SSIS2012(System.Data.DataColumn)">
            <summary>
            Writes a <see cref="T:System.Data.DataColumn"/> to the schema of a DTS file in the SSIS 2012 format.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> to write to the schema.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteNullFlags(System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes the null flag values for a row based on the null values in the specified object array.
            </summary>
            <param name="values">The values to be written to the row.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.GetDataSize(System.Data.DataColumn)">
            <summary>
            Get the size of a column based on its data type.
            </summary>
            <param name="column">The column.</param>
            <returns>The size, in bytes, of the data in this column.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.GetDataSize(Microsoft.BI.Common.Schema.ColumnInfo)">
            <summary>
            Get the size of a column based on its data type.
            </summary>
            <param name="info">A ColumnInfo object containing schema information about the column.</param>
            <returns>The size, in bytes, of the data in this column.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.IsNull(System.Object)">
            <summary>
            Returns whether the specified value represents a null value.
            </summary>
            <param name="value">The value to check.</param>
            <returns>Whether <paramref name="value"/> represents a null value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteNarrowString(System.String,System.Text.Encoding)">
            <summary>
            Writes a narrow string (non-unicode) to the DSV file with the specified encoding.
            </summary>
            <param name="text">The text to write.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.WriteWideString(System.String)">
            <summary>
            Writes a wide string (unicode) to the DSV file.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.UnpackDecimal(System.Decimal,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Byte@)">
            <summary>
            Unpack a decimal struct into its component pieces.
            </summary>
            <param name="dec">The decimal to unpack.</param>
            <param name="lo">The lo parameter.</param>
            <param name="mid">The mid parameter.</param>
            <param name="hi">The hi parameter.</param>
            <param name="isNegative">Whether the decimal represents a negative number.</param>
            <param name="scale">The scale of the decimal.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of a specific field in the current record.
            </summary>
            <param name="i">The index of the field to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.Flush">
            <summary>
            Clears all buffers and causes any buffered data to be written to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.Close">
            <summary>
            Closes the current <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/> and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.Dispose">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DtsWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources used by the <see cref="T:Microsoft.BI.Common.IO.DtsWriter"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.BaseDirectory">
            <summary>
            A base class that contains default implementations for interacting with directories on the local disk and network shares.
            </summary>
            <remarks>
            Implementers of <see cref="T:Microsoft.BI.Common.IO.IDirectory"/> can choose to implement this abstract class instead of the interface
            to get the implementation of certain methods for free.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.Copy(System.String,System.String)">
            <summary>
            Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.  This cannot be a file or an existing directory.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.  This cannot be a file.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove.  This directory must be writable and empty.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateDirectories(System.String)">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateDirectories(System.String,System.String)">
            <summary>
            Returns an enumerable collection of directory names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An enumerable collection of directory names entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateFiles(System.String)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateFiles(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateFileSystemEntries(System.String)">
            <summary>
            Returns an enumerable collection of file-system entries in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> refers to an existing directory; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory on the path.
            </summary>
            <param name="path">The path to the directory.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified directory.
            </summary>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An array of directory names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory,
            and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An array of file names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetFileSystemEntries(System.String)">
            <summary>
            Returns an enumerable collection of file-system entries in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An array of file-system entries in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last accessed.
            </summary>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last written to.
            </summary>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <c>null</c> if <paramref name="path"/> is the root directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.Move(System.String,System.String)">
            <summary>
            Moves a specified directory to a new location, providing the option to specify a new directory name.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceDirectoryName"/> and
            <paramref name="destDirectoryName"/> are the same directory.  You cannot use the
            <see cref="M:Microsoft.BI.Common.IO.BaseDirectory.Move(System.String,System.String)"/> method to overwrite an existing directory.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified directory to a new location, providing the option to specify a new directory name.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceDirectoryName"/> and
            <paramref name="destDirectoryName"/> are the same directory.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the directory on the specified path.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.BaseFile">
            <summary>
            A base class that contains default implementations for operations that can be performed on a file.
            </summary>
            <remarks>
            Implementers of <see cref="T:Microsoft.BI.Common.IO.IFile"/> can choose to implement this abstract class instead of the interface
            to get the implementation of certain methods for free.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file. If the specified file does not exist, this
            method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="lines">The lines to append to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file. If the specified
            file does not exist, this method creates a file, writes the specified lines to the file, and then
            closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="lines">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not
            exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, appends the specified string to the file using a specified encoding, and then closes the file.
            If the file does not exist, this method creates a file, writes the specified string to the file, then closes
            the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.  This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.  This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Create(System.String)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> contains the name of an existing file; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file.
            </summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last written to.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceFileName"/> and
            <paramref name="destFileName"/> are the same file.  You cannot use the
            <see cref="M:Microsoft.BI.Common.IO.BaseFile.Move(System.String,System.String)"/> method to overwrite an existing file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceFileName"/> and
            <paramref name="destFileName"/> are the same file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <returns>A <see cref="T:System.IO.Stream"/> opened in the specified mode and path, with read/write access
            and not shared.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.Stream"/> that provides access to the specified file, with the
            specified mode and access.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/>  value specifying the type of access other threads
            have to the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the specified path, having the specified mode with read, write,
            or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.Stream"/> on the specified path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.ReadLines(System.String)">
            <summary>
            Reads the lines of a file.
            </summary>
            <param name="path">The file to read.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            Read the lines of a file that has a specified encoding.
            </summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes
            the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file,
            and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the
            target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and
            then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="F:Microsoft.BI.Common.IO.BaseFile.DefaultEncoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding"/> that is used by default when not otherwise specified.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IDirectory">
            <summary>
            An interface that contains operations for interacting with directories.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.Copy(System.String,System.String)">
            <summary>
            Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.  This cannot be a file or an existing directory.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.  This cannot be a file.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove.  This directory must be writable and empty.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateDirectories(System.String)">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateDirectories(System.String,System.String)">
            <summary>
            Returns an enumerable collection of directory names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateFiles(System.String)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateFiles(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateFileSystemEntries(System.String)">
            <summary>
            Returns an enumerable collection of file-system entries in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> refers to an existing directory; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory on the path.
            </summary>
            <param name="path">The path to the directory.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An array of directory names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory,
            and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An array of file names in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetFileSystemEntries(System.String)">
            <summary>
            Returns an enumerable collection of file-system entries in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An array of file-system entries in the directory specified by <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified directory.
            </summary>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last accessed.
            </summary>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last written to.
            </summary>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <c>null</c> if <paramref name="path"/> is the root directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.Move(System.String,System.String)">
            <summary>
            Moves a specified directory to a new location, providing the option to specify a new directory name.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceDirectoryName"/> and
            <paramref name="destDirectoryName"/> are the same directory.  You cannot use the
            <see cref="M:Microsoft.BI.Common.IO.IDirectory.Move(System.String,System.String)"/> method to overwrite an existing directory.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified directory to a new location, providing the option to specify a new directory name.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceDirectoryName"/> and
            <paramref name="destDirectoryName"/> are the same directory.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the directory on the specified path.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IDirectoryJunction">
            <summary>
            An interface that provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectoryJunction.Create(System.String,System.String)">
            <summary>
            Creates a directory junction at the specified path pointing to the specified target.
            </summary>
            <param name="path">The directory junction to create.</param>
            <param name="target">The name of the directory junction target.  The target need not actually exist.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectoryJunction.Dereference(System.String)">
            <summary>
            Dereference a directory junction, returning an absolute file path.
            </summary>
            <param name="path">The directory junction to dereference.</param>
            <returns>The directory junction's target.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectoryJunction.Delete(System.String)">
            <summary>
            Delete a directory junction.
            </summary>
            <param name="path">The directory junction to delete.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDirectoryJunction.Exists(System.String)">
            <summary>
            Determines whether a directory junction exists.
            </summary>
            <param name="path">The directory junction to check.</param>
            <returns><c>true</c> if the specified path exists and is a directory junction; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IFile">
            <summary>
            An interface that contains operations that can be performed on a file.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file. If the specified file does not exist, this
            method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="lines">The lines to append to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file. If the specified
            file does not exist, this method creates a file, writes the specified lines to the file, and then
            closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="lines">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not
            exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, appends the specified string to the file using a specified encoding, and then closes the file.
            If the file does not exist, this method creates a file, writes the specified string to the file, then closes
            the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.  This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.  This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Create(System.String)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> contains the name of an existing file; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file.
            </summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last written to.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceFileName"/> and
            <paramref name="destFileName"/> are the same file.  You cannot use the
            <see cref="M:Microsoft.BI.Common.IO.IFile.Move(System.String,System.String)"/> method to overwrite an existing file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceFileName"/> and
            <paramref name="destFileName"/> are the same file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <returns>A <see cref="T:System.IO.Stream"/> opened in the specified mode and path, with read/write access
            and not shared.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.Stream"/> that provides access to the specified file, with the
            specified mode and access.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path, having the specified mode with read, write
            or read/write access and the specified sharing option.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads
            have to the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the specified path, having the specified mode with read, write
            or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.Stream"/> on the specified path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.ReadLines(System.String)">
            <summary>
            Reads the lines of a file.
            </summary>
            <param name="path">The file to read.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            Read the lines of a file that has a specified encoding.
            </summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes
            the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file,
            and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the
            target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and
            then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IFileSystem">
            <summary>
            An interface that provides access to files and directories on a filesystem.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IFileSystem.File">
            <summary>
            Provides methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.Stream"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IFileSystem.Directory">
            <summary>
            Exposes methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IFileSystem.Path">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. 
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IFileSystem.SymbolicLink">
            <summary>
            Provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IFileSystem.DirectoryJunction">
            <summary>
            Provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IPath">
            <summary>
            An interface for performing operations on <see cref="T:System.String"/> instances that contain file or directory path information.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IPath.AltDirectorySeparatorChar">
            <summary>
            A platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IPath.DirectorySeparatorChar">
            <summary>
            A platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IPath.ExtensionSeparatorChar">
            <summary>
            A platform-specific character used to separate a file name from its extension.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IPath.PathSeparatorChar">
            <summary>
            >A platform-specific separator character used to separate path strings in environment variables.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IPath.VolumeSeparatorChar">
            <summary>
            A platform-specific volume separator char.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify.</param>
            <param name="extension">The new extension (with or without a leading period). Specify <c>null</c> to remove an existing extension from <paramref name="path"/>.</param>
            <returns>The modified path information.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.EnumeratePathElements(System.String)">
            <summary>
            Returns an enumeration over each path element in a path.
            </summary>
            <param name="path">The path over which to enumerate.</param>
            <returns>An enumerable collection of path elements.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for <paramref name="path"/>, or <c>null</c> if <paramref name="path"/> denotes a root directory or
            is  <c>null</c>.  Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">THe path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period ".") or <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in <paramref name="path"/>.  If the last character of <paramref name="path"/> is a directory
            separator character, this method returns <see cref="F:System.String.Empty"/>  If <paramref name="path"/> is <c>null</c>, this method returns <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by <see cref="M:Microsoft.BI.Common.IO.IPath.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of <paramref name="path"/>, or <c>null</c> if <paramref name="path"/> is <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns><c>true</c> if the path's file name includes an extension; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> contains a root; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IPath.NormalizePath(System.String)">
            <summary>
            Returns a normalized version of a path.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ISymbolicLink">
            <summary>
            An interface that provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ISymbolicLink.Create(System.String,System.String)">
            <summary>
            Creates a symbolic link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ISymbolicLink.Dereference(System.String)">
            <summary>
            Dereference a symbolic link, returning its target.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns>The symbolic link's target.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ISymbolicLink.Delete(System.String)">
            <summary>
            Delete a symbolic link.
            </summary>
            <param name="path">The symbolic link to delete.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ISymbolicLink.Exists(System.String)">
            <summary>
            Determines whether a symbolic link exists.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>true</c> if the specified path exists and is a symbolic link; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NtfsDirectory">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IDirectory"/> implementation for interacting with directories on the local disk and network shares.
            </summary>
            <remarks>
            The name of this class is a bit of a misnomer; it interacts with files via the <c>System.IO</c> namespace, and is
            thus capable of performing operations on anything the standard .NET libraries are capable of interacting with.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsDirectory.FileSystem">
            <summary>
            The <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> used to perform any non-directory operations.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.#ctor(Microsoft.BI.Common.IO.IFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NtfsDirectory"/> class.
            </summary>
            <param name="fileSystem">The <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> to be used to perform any non-directory operations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileSystem"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.  This cannot be a file.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName"/> or <paramref name="destDirectoryName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="destDirectoryName"/> is a file.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file directory names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> refers to an existing directory; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory on the path.
            </summary>
            <param name="path">The path to the directory.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified directory.
            </summary>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last accessed.
            </summary>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last written to.
            </summary>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <c>null</c> if <paramref name="path"/> is the root directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified directory to a new location, providing the option to specify a new directory name.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceDirectoryName"/> and
            <paramref name="destDirectoryName"/> are the same directory.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the directory on the specified path.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NtfsDirectoryJunction">
            <summary>
            Provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectoryJunction.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NtfsDirectoryJunction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectoryJunction.Create(System.String,System.String)">
            <summary>
            Creates a directory junction at the specified path pointing to the specified target.
            </summary>
            <param name="path">The directory junction to create.</param>
            <param name="target">The name of the directory junction target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is null.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception creating the directory junction specified by
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectoryJunction.Dereference(System.String)">
            <summary>
            Dereference a directory junction, returning an absolute file path.
            </summary>
            <param name="path">The directory junction to dereference.</param>
            <returns>The directory junction's target.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectoryJunction.Delete(System.String)">
            <summary>
            Delete a directory junction.
            </summary>
            <param name="path">The directory junction to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method deletes the directory junction itself, not the junction's target.  To delete a junction's target, use
            <see cref="M:Microsoft.BI.Common.IO.NtfsDirectoryJunction.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                Directory.Delete(DirectoryJunction.Dereference(path));
                </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsDirectoryJunction.Exists(System.String)">
            <summary>
            Determines whether a directory junction exists.
            </summary>
            <param name="path">The directory junction to check.</param>
            <returns><c>true</c> if the specified path exists and is a directory junction; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method checks for the existence of the junction itself, not the junction's target.  To check the junction's target,
            use <see cref="M:Microsoft.BI.Common.IO.NtfsDirectoryJunction.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                if (Directory.Exists(DirectoryJunction.Dereference(path)))
                {
                    // some operation
                }
                </code>
            </example>
            <para>
            Note that there is no difference in the NTFS file system between a symbolic link and a directory junction as far
            as metadata is concerned; that is, both <see cref="M:System.IO.SymbolicLink.Exists(System.String)"/> and <see cref="M:System.IO.DirectoryJunction.Exists(System.String)"/>
            will return <c>true</c> for either a symbolic link or a directory junction.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NtfsFile">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IFile"/> implementation for interacting with files on the local disk and network shares.
            </summary>
            <remarks>
            The name of this class is a bit of a misnomer; it interacts with files via the <c>System.IO</c> namespace, and is
            thus capable of performing operations on anything the standard .NET libraries are capable of interacting with.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NtfsFile"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.  This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.Create(System.String)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> contains the name of an existing file; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file.
            </summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last written to.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceFileName"/> and
            <paramref name="destFileName"/> are the same file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/>  value specifying the type of access other threads
            have to the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the specified path, having the specified mode with read, write,
            or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NtfsFileSystem">
            <summary>
            Provides access to files and directories on a NTFS system.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsFileSystem.File">
            <summary>
            Provides methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.Stream"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsFileSystem.Directory">
            <summary>
            Exposes methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsFileSystem.Path">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. 
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsFileSystem.SymbolicLink">
            <summary>
            Provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsFileSystem.DirectoryJunction">
            <summary>
            Provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsFileSystem.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NtfsFileSystem"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NtfsPath">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NtfsPath"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsPath.AltDirectorySeparatorChar">
            <summary>
            A platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsPath.DirectorySeparatorChar">
            <summary>
            A platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsPath.ExtensionSeparatorChar">
            <summary>
            A platform-specific character used to separate a file name from its extension.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsPath.PathSeparatorChar">
            <summary>
            >A platform-specific separator character used to separate path strings in environment variables.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NtfsPath.VolumeSeparatorChar">
            <summary>
            A platform-specific volume separator char.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify.</param>
            <param name="extension">The new extension (with or without a leading period). Specify <c>null</c> to remove an existing extension from <paramref name="path"/>.</param>
            <returns>The modified path information.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.EnumeratePathElements(System.String)">
            <summary>
            Returns an enumeration over each path element in a path.
            </summary>
            <param name="path">The path over which to enumerate.</param>
            <returns>An enumerable collection of path elements.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for <paramref name="path"/>, or <c>null</c> if <paramref name="path"/> denotes a root directory or
            is  <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">THe path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period ".") or <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in <paramref name="path"/>.  If the last character of <paramref name="path"/> is a directory
            separator character, this method returns <see cref="F:System.String.Empty"/>  If <paramref name="path"/> is <c>null</c>, this method returns <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by <see cref="M:Microsoft.BI.Common.IO.NtfsPath.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of <paramref name="path"/>, or <c>null</c> if <paramref name="path"/> is <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns><c>true</c> if the path's file name includes an extension; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> contains a root; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsPath.NormalizePath(System.String)">
            <summary>
            Returns a normalized version of a path.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NtfsSymbolicLink">
            <summary>
            Provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsSymbolicLink.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NtfsSymbolicLink"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsSymbolicLink.Create(System.String,System.String)">
            <summary>
            Creates a symbolic link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception creating the link specified by
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsSymbolicLink.Dereference(System.String)">
            <summary>
            Dereference a symbolic link, returning its target.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns>The symbolic link's target.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsSymbolicLink.Delete(System.String)">
            <summary>
            Delete a symbolic link.
            </summary>
            <param name="path">The symbolic link to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method deletes the symbolic link itself, not the link's target.  To delete a link's target, use
            <see cref="M:Microsoft.BI.Common.IO.NtfsSymbolicLink.Dereference(System.String)"/>, like so:
            </para>
            <para>
            <example>
                <code>
                File.Delete(SymbolicLink.Dereference(path));
                </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NtfsSymbolicLink.Exists(System.String)">
            <summary>
            Determines whether a symbolic link exists.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>true</c> if the specified path exists and is a symbolic link; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method checks for the existence of the link itself, not the link's target.  To check the link's target,
            use <see cref="M:Microsoft.BI.Common.IO.NtfsSymbolicLink.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                if (File.Exists(SymbolicLink.Dereference(path)))
                {
                    // some operation
                }
                </code>
            </example>
            <para>
            Note that there is no difference in the NTFS file system between a symbolic link and a directory junction as far
            as metadata is concerned; that is, both <see cref="M:System.IO.SymbolicLink.Exists(System.String)"/> and <see cref="M:System.IO.DirectoryJunction.Exists(System.String)"/>
            will return <c>true</c> for either a symbolic link or a directory junction.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NullDirectory">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IDirectory"/> implementation that does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NullDirectory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Does nothing.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.CreateDirectory(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.Delete(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The name of the empty directory to remove.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an empty enumerable.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An empty enumerable.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an empty enumerable.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An empty enumerable.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an empty enumerable.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An empty enumerable.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.Exists(System.String)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.GetAttributes(System.String)">
            <summary>
            Returns <see cref="F:System.IO.FileAttributes.Normal"/>.
            </summary>
            <param name="path">The path to the file.</param>
            <returns><see cref="F:System.IO.FileAttributes.Normal"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns><see cref="P:System.DateTime.UtcNow"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.GetCurrentDirectory">
            <summary>
            Returns <c>null</c>.
            </summary>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns><see cref="P:System.DateTime.UtcNow"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns><see cref="P:System.DateTime.UtcNow"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.GetParent(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Does nothing.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NullDirectoryJunction">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IDirectoryJunction"/> implementation that does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectoryJunction.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NullDirectoryJunction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectoryJunction.Create(System.String,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The directory junction to create.</param>
            <param name="target">The name of the directory junction target.  The target need not actually exist.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectoryJunction.Dereference(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The directory junction to dereference.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectoryJunction.Delete(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The directory junction to delete.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullDirectoryJunction.Exists(System.String)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="path">The directory junction to check.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NullFile">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IFile"/> implementation that does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NullFile"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Does nothing.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.Create(System.String)">
            <summary>
            Returns a null <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="path">The name of the file.</param>
            <returns><see cref="F:System.IO.Stream.Null"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.Delete(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.Exists(System.String)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="path">The file to check.</param>
            <returns>Always <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.GetAttributes(System.String)">
            <summary>
            Returns <see cref="F:System.IO.FileAttributes.Normal"/>.
            </summary>
            <param name="path">The path to the file.</param>
            <returns><see cref="F:System.IO.FileAttributes.Normal"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns><see cref="P:System.DateTime.UtcNow"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns><see cref="P:System.DateTime.UtcNow"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns><see cref="P:System.DateTime.UtcNow"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.Move(System.String,System.String,System.Boolean)">
            <summary>
            Does nothing.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Returns <see cref="F:System.IO.Stream.Null"/>.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/>  value specifying the type of access other threads
            have to the file.</param>
            <returns><see cref="F:System.IO.Stream.Null"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NullFileSystem">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> interface that does nothing and ignores all method calls.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullFileSystem.File">
            <summary>
            Provides methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.Stream"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullFileSystem.Directory">
            <summary>
            Exposes methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullFileSystem.Path">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. 
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullFileSystem.SymbolicLink">
            <summary>
            Provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullFileSystem.DirectoryJunction">
            <summary>
            Provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullFileSystem.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NullFileSystem"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NullPath">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NullPath"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullPath.AltDirectorySeparatorChar">
            <summary>
            A platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullPath.DirectorySeparatorChar">
            <summary>
            A platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullPath.ExtensionSeparatorChar">
            <summary>
            A platform-specific character used to separate a file name from its extension.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullPath.PathSeparatorChar">
            <summary>
            >A platform-specific separator character used to separate path strings in environment variables.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.NullPath.VolumeSeparatorChar">
            <summary>
            A platform-specific volume separator char.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.ChangeExtension(System.String,System.String)">
            <summary>
            Returns <c>null.</c>
            </summary>
            <param name="path">The path information to modify.</param>
            <param name="extension">The new extension (with or without a leading period). Specify <c>null</c> to remove an existing extension from <paramref name="path"/>.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.Combine(System.String[])">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.EnumeratePathElements(System.String)">
            <summary>
            Returns an empty enumerable.
            </summary>
            <param name="path">The path over which to enumerate.</param>
            <returns>An enumerable collection of path elements.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.GetDirectoryName(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.GetExtension(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">THe path string from which to get the extension.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.GetFileName(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The path of the file.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.GetFullPath(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.GetPathRoot(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.HasExtension(System.String)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.IsPathRooted(System.String)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullPath.NormalizePath(System.String)">
            <summary>
            Returns the argument to the function.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.NullSymbolicLink">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.ISymbolicLink"/> implementation that does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullSymbolicLink.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.NullSymbolicLink"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullSymbolicLink.Create(System.String,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullSymbolicLink.Dereference(System.String)">
            <summary>
            Returns <c>null</c>.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns><c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullSymbolicLink.Delete(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The symbolic link to delete.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.NullSymbolicLink.Exists(System.String)">
            <summary>
            Returns <c>false</c>.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ShimDirectory">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IDirectory"/> implementation that supplies a mechanism for modifying input arguments and output return values
            before calling an inner filesystem.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimDirectory.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.ShimFileSystem"/> associated with this shim.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimDirectory.InnerDirectory">
            <summary>
            Gets the inner <see cref="T:Microsoft.BI.Common.IO.IDirectory"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.#ctor(Microsoft.BI.Common.IO.IDirectory,Microsoft.BI.Common.IO.ShimFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ShimDirectory"/> class.
            </summary>
            <param name="innerDirectory">The <see cref="T:Microsoft.BI.Common.IO.IDirectory"/> to use when resolving paths after pattern replacement.</param>
            <param name="filesystem">The inner filesystem.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destDirectoryName">The name of the destination directory.  This cannot be a file.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove. </param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of directory names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and
            optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the
            current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of file names in the directory specified by <paramref name="path"/> and that match
            the specified search pattern and option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> refers to an existing directory; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the directory on the path.
            </summary>
            <param name="path">The path to the directory.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified directory.
            </summary>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last accessed.
            </summary>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified directory was last written to.
            </summary>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified directory was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <c>null</c> if <paramref name="path"/> is the root directory.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified directory to a new location, providing the option to specify a new directory name.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destDirectoryName">The new path for the directory.</param>
            <param name="overwrite"><c>true</c> if the destination directory can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceDirectoryName"/> and
            <paramref name="destDirectoryName"/> are the same directory.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the directory on the specified path.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the directory was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ShimDirectoryJunction">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IDirectoryJunction"/> implementation that supplies a mechanism for modifying input arguments and output return values
            before calling an inner filesystem.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimDirectoryJunction.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.ShimFileSystem"/> associated with this shim.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimDirectoryJunction.InnerDirectoryJunction">
            <summary>
            Gets the inner <see cref="T:Microsoft.BI.Common.IO.IDirectoryJunction"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectoryJunction.#ctor(Microsoft.BI.Common.IO.IDirectoryJunction,Microsoft.BI.Common.IO.ShimFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ShimDirectoryJunction"/> class.
            </summary>
            <param name="innerDirectoryJunction">The <see cref="T:Microsoft.BI.Common.IO.IDirectoryJunction"/> to use when resolving paths after pattern replacement.</param>
            <param name="filesystem">The inner filesystem.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectoryJunction.Create(System.String,System.String)">
            <summary>
            Creates a directory junction at the specified path pointing to the specified target.
            </summary>
            <param name="path">The directory junction to create.</param>
            <param name="target">The name of the directory junction target.  The target need not actually exist.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectoryJunction.Delete(System.String)">
            <summary>
            Delete a directory junction.
            </summary>
            <param name="path">The directory junction to delete.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectoryJunction.Dereference(System.String)">
            <summary>
            Dereference a directory junction, returning an absolute file path.
            </summary>
            <param name="path">The directory junction to dereference.</param>
            <returns>The directory junction's target.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimDirectoryJunction.Exists(System.String)">
            <summary>
            Determines whether a directory junction exists.
            </summary>
            <param name="path">The directory junction to check.</param>
            <returns><c>true</c> if the specified path exists and is a directory junction; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ShimFile">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IFile"/> implementation that supplies a mechanism for modifying input arguments and output return values
            before calling an inner filesystem.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimFile.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.ShimFileSystem"/> associated with this resolver.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimFile.InnerFile">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.IFile"/> used to interact with files after batch replacement has been performed.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.#ctor(Microsoft.BI.Common.IO.IFile,Microsoft.BI.Common.IO.ShimFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ShimFile"/> class.
            </summary>
            <param name="innerFile">The <see cref="T:Microsoft.BI.Common.IO.IFile"/> to use when resolving paths after pattern replacement.</param>
            <param name="filesystem">The inner filesystem.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file.  This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.Create(System.String)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> contains the name of an existing file; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also returns <c>false</c> if <paramref name="path"/> is <c>null</c>, an invalid path, or a zero-length string.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file.
            </summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last accessed.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), the specified file was last written to.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file was last written to.
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <remarks>This method does not throw an exception if <paramref name="sourceFileName"/> and
            <paramref name="destFileName"/> are the same file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.Stream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if
            one does not exist, and determines whether the contents of existing files are retained or
            overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can
            be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/>  value specifying the type of access other threads
            have to the file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the specified path, having the specified mode with read, write,
            or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="attributes">A bitwise combination of the enuemration values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The path for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="path">The path for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last written to.
            </summary>
            <param name="path">The path for which to set the write date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write
            date and time of <paramref name="path"/>.  This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ShimFileSystem">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> implementation that allows the inputs and/or outputs of another <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/>
            to be modified before returning.
            </summary>
            <remarks>
            One of the most common modifications that needs to be performed by <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/> subclasses is manipulations
            of the paths on which they operate.  This class provides the <see cref="M:Microsoft.BI.Common.IO.ShimFileSystem.ResolvePath(System.String)"/> method, which is called by all
            Shim classes by default before processing.  This allows for a simple way to provide a uniform transformation to be applied
            to all paths before processing.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimFileSystem.Directory">
            <summary>
            Exposes methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimFileSystem.DirectoryJunction">
            <summary>
            Provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimFileSystem.File">
            <summary>
            Provides methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.Stream"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimFileSystem.Path">
            <summary>
            Performs operations on <see cref="T:System.String"/> instances that contain file or directory path information. 
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimFileSystem.SymbolicLink">
            <summary>
            Provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFileSystem.#ctor(Microsoft.BI.Common.IO.IFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ShimFileSystem"/> class that will act as a shim around the supplied <see cref="T:Microsoft.BI.Common.IO.IFileSystem"/>.
            </summary>
            <param name="filesystem">The filesystem to shim.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimFileSystem.ResolvePath(System.String)">
            <summary>
            Resolves the specified path, applying an instance-specific transformation to it.
            </summary>
            <param name="path">The path to resolve.</param>
            <returns>The resolved path.</returns>
            <remarks>
            <para>
            All <see cref="T:Microsoft.BI.Common.IO.ShimFileSystem"/> path calls will call <see cref="M:Microsoft.BI.Common.IO.ShimFileSystem.ResolvePath(System.String)"/> on any paths with which they operate.  Subclasses
            may override this method to make modifications to the paths that are passed to the underlying filesystem.  The default implementation
            simply returns the original path that was passed in.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ShimPath">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.IPath"/> implementation that supplies a mechanism for modifying input arguments and output return values
            before calling an inner filesystem.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimPath.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.ShimFileSystem"/> associated with this resolver.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimPath.InnerPath">
            <summary>
            Gets the inner <see cref="T:Microsoft.BI.Common.IO.IPath"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.#ctor(Microsoft.BI.Common.IO.IPath,Microsoft.BI.Common.IO.ShimFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ShimPath"/> class.
            </summary>
            <param name="innerPath">The <see cref="T:Microsoft.BI.Common.IO.IPath"/> to use when resolving paths after pattern replacement.</param>
            <param name="filesystem">The inner filesystem.</param>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimPath.AltDirectorySeparatorChar">
            <summary>
            A platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimPath.DirectorySeparatorChar">
            <summary>
            A platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimPath.ExtensionSeparatorChar">
            <summary>
            A platform-specific character used to separate a file name from its extension.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimPath.PathSeparatorChar">
            <summary>
            >A platform-specific separator character used to separate path strings in environment variables.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimPath.VolumeSeparatorChar">
            <summary>
            A platform-specific volume separator char.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify.</param>
            <param name="extension">The new extension (with or without a leading period). Specify <c>null</c> to remove an existing extension from <paramref name="path"/>.</param>
            <returns>The modified path information.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.EnumeratePathElements(System.String)">
            <summary>
            Returns an enumeration over each path element in a path.
            </summary>
            <param name="path">The path over which to enumerate.</param>
            <returns>An enumerable collection of path elements.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for <paramref name="path"/>, or <c>null</c> if <paramref name="path"/> denotes a root directory or
            is  <c>null</c>.  Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">THe path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period ".") or <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in <paramref name="path"/>.  If the last character of <paramref name="path"/> is a directory
            separator character, this method returns <see cref="F:System.String.Empty"/>  If <paramref name="path"/> is <c>null</c>, this method returns <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by <see cref="M:Microsoft.BI.Common.IO.ShimPath.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of <paramref name="path"/>, or <c>null</c> if <paramref name="path"/> is <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns><c>true</c> if the path's file name includes an extension; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> contains a root; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimPath.NormalizePath(System.String)">
            <summary>
            Returns a normalized version of a path.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ShimSymbolicLink">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IO.ISymbolicLink"/> implementation that supplies a mechanism for modifying input arguments and output return values
            before calling an inner filesystem.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimSymbolicLink.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.IO.ShimFileSystem"/> associated with this resolver.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ShimSymbolicLink.InnerSymbolicLink">
            <summary>
            Gets the inner <see cref="T:Microsoft.BI.Common.IO.IDirectoryJunction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimSymbolicLink.#ctor(Microsoft.BI.Common.IO.ISymbolicLink,Microsoft.BI.Common.IO.ShimFileSystem)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ShimDirectoryJunction"/> class.
            </summary>
            <param name="innerSymbolicLink">The <see cref="T:Microsoft.BI.Common.IO.ISymbolicLink"/> to use when resolving paths after pattern replacement.</param>
            <param name="filesystem">The inner filesystem.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimSymbolicLink.Create(System.String,System.String)">
            <summary>
            Creates a symbolic link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimSymbolicLink.Delete(System.String)">
            <summary>
            Delete a symbolic link.
            </summary>
            <param name="path">The symbolic link to delete.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimSymbolicLink.Dereference(System.String)">
            <summary>
            Dereference a symbolic link, returning its target.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns>The symbolic link's target.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ShimSymbolicLink.Exists(System.String)">
            <summary>
            Determines whether a symbolic link exists.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>true</c> if the specified path exists and is a symbolic link; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.Glob">
            <summary>
            Represents an immutable glob pattern.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.IO.Glob"/> class represents the .NET Framework's glob engine. It can be used to quickly parse large amounts of text to
            find specific character patterns.
            </para>
            <para>
            To use globs, you define the pattern that you want to identify in a text stream by using the glob patterns. Next, you can optionally
            instantiate a <see cref="T:Microsoft.BI.Common.IO.Glob"/> object. Finally, you call a method that determines whether the glob matches an input string.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Glob.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.Glob"/> class for the specified glob pattern.
            </summary>
            <param name="pattern">The glob pattern to match.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Glob.IsMatch(System.String)">
            <summary>
            Indicates whether the glob specified in the <see cref="T:Microsoft.BI.Common.IO.Glob"/> constructor finds a match in a specified input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns><c>true</c> if the glob finds a match; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.Glob.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the specified glob finds a match in the specified input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The glob pattern to match.</param>
            <returns><c>true</c> if the glob finds a match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IDataReader">
            <summary>
            An interface defining a class that can read strongly-typed objects from an underlying stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IDataReader.Schema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> describing the schema of the data produced by the <see cref="T:Microsoft.BI.Common.IO.IDataReader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDataReader.ReadAllLines">
            <summary>
            Gets an enumerable collection of object arrays containing the data in the stream.
            </summary>
            <returns>An enumerable collection of object arrays containing the data in the stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDataReader.ReadFields">
            <summary>
            Reads a single record from the underlying stream, returning the objects.
            </summary>
            <returns>An object array containing the objects in the next record of the stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDataReader.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IDataWriter">
            <summary>
            An interface defining a class that can write strongly-typed objects to an underlying stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.IDataWriter.Schema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> describing the schema of the data expected by the <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDataWriter.WriteAllLines(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Object}})">
            <summary>
            Writes an enumerable collection of object arrays to the stream.
            </summary>
            <param name="lines">An enumerable collection of object arrays to write to the stream.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDataWriter.WriteFields(System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes a single record to the underlying stream.
            </summary>
            <param name="line">The objects in the record to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDataWriter.Flush">
            <summary>
            Flushes data from any internal buffers to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IDataWriter.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.KvpReader">
            <summary>
            Implements a <see cref="T:System.IO.Stream"/>-like interface for reading Key-Value Pair (KVP) files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpReader.PairDelimiter">
            <summary>
            Gets or sets the delimiter between each key-value pair.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpReader.KeyValueDelimiter">
            <summary>
            Gets or sets the delimiter between the key and value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpReader.BaseStream">
            <summary>
            Gets the underlying stream on which the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpReader.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpReader.EndOfStream">
            <summary>
            Gets a value indicating whether the current position is at the end of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpReader.Parser">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.KeyValuePairTextParser"/> used when reading data.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.KvpReader.LineRead">
            <summary>
            Occurs when a line is read from the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpReader.#ctor(System.String,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.KvpReader"/> class pointing to an existing KVP file at the specified path.
            </summary>
            <param name="path">The path of the KVP file to read.</param>
            <param name="schema">The schema to use when parsing the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when reading the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpReader.#ctor(System.IO.Stream,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.KvpReader"/> class based on the specified stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="schema">The schema to use when parsing the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when reading the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpReader.#ctor(System.IO.TextReader,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.KvpReader"/> class based on the specified text reader.
            </summary>
            <param name="reader">The input reader.</param>
            <param name="schema">The schema to use when parsing the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpReader.ReadLine">
            <summary>
            Read and return a single line in the CSV file.
            </summary>
            <returns>The next line in the structured text file as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpReader.ReadStructuredTextLineImpl(System.Collections.Generic.IList{System.String}@)">
            <summary>
            Read the next line from the underlying stream.
            </summary>
            <param name="tokens">The result of splitting the next line.</param>
            <returns>true if data was read; false if EOF was reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpReader.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.KvpReader"/> and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.KvpReader"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.KvpWriter">
            <summary>
            A class that provides an easy way to create and write data to Key-Value Pair (KVP) files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpWriter.PairDelimiter">
            <summary>
            Gets or sets the delimiter between each key-value pair.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpWriter.KeyValueDelimiter">
            <summary>
            Gets or sets the delimiter between the key and value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpWriter.NewLine">
            <summary>
            Gets or sets the string used to indicate new lines.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpWriter.BaseStream">
            <summary>
            Gets the underlying stream on which the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpWriter.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.KvpWriter.Formatter">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.KeyValuePairTextFormatter"/> used when writing data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpWriter.#ctor(System.String,System.Data.DataTable,System.IO.FileMode,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> class pointing to a new or existing CSV file at the specified path.
            </summary>
            <param name="path">The path to the CSV file to create.</param>
            <param name="schema">The schema of the data to write.</param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> with which to open the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the file to write to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpWriter.#ctor(System.IO.Stream,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Initializes a new instances of the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> class based on the specified stream.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="schema">The schema of the data to write.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the file to write to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpWriter.Write(System.String)">
            <summary>
            Writes a string to the underlying stream.
            </summary>
            <param name="data">The string to write to the file.</param>
            <remarks>This does not append a trailing newline automatically.  Use <see cref="P:Microsoft.BI.Common.IO.KvpWriter.NewLine"/> to get the newline
            string for this instance.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpWriter.WriteLine(System.String)">
            <summary>
            Writes a string to the underlying stream and appends <see cref="P:Microsoft.BI.Common.IO.KvpWriter.NewLine"/> automatically.
            </summary>
            <param name="data">The string to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpWriter.Flush">
            <summary>
            Clears all buffers and causes any buffered data to be written to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpWriter.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/> and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.KvpWriter.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ReadableBufferStream">
            <summary>
            Provides a <see cref="T:System.IO.Stream"/> for an enumerable collection of byte array spans, supporting
            synchronous read operations.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/> transforms an enumerable sequence of <see cref="T:System.ArraySegment`1"/>
            values into a readable <see cref="T:System.IO.Stream"/> of bytes.
            </remarks>
            <seealso cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ReadableBufferStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ReadableBufferStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <remarks>
            <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/> instances do not support writing, so this property always
            returns <c>false</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.ReadableBufferStream.Current">
            <summary>
            Gets the current byte array span being operated on by the <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/> class using byte arrays from
            the specified object.
            </summary>
            <param name="enumerable">The enumerable collection of byte arrays to use as buffers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerable"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.#ctor(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/> class using byte array spans from
            the specified object.
            </summary>
            <param name="enumerable">The enumerable collection of spans to use as buffers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerable"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.Flush">
            <summary>
            Flushes data from the stream.
            </summary>
            <remarks>
            Since a <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/> is read-only, this is a no-op.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.MoveNext">
            <summary>
            Moves to the next buffer in the underlying enumerable, regardless of the current position in the
            buffer.
            </summary>
            <returns><c>true</c> if the stream successfully advanced to the next buffer; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
            <remarks>
            This method is automatically called when reading data from the stream in order to fill the requested
            number of bytes.  It may also be called explicitly by the consumer, in which case the current read
            buffer is invalidated and a new one is assigned from the underlying span enumerator.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/>.
            </summary>
            <param name="buffer">An array of bytes.  When this method returns, the buffer contains the specified byte
            array with values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/>
            - 1) replaced by the bytes read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the
            data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the stream.</param>
            <returns>The total number of bytes read into the buffer.  This can be less than the number of bytes requested
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is
            negative.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is
            larger than the buffer length.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if
            at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at the end of the stream.</returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.Reset">
            <summary>
            Resets the underlying enumerator.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
            <exception cref="T:System.NotSupportedException">The underlying enumerator does not support being reset.</exception>
            <remarks>
            <para>
            This method calls <see cref="M:System.Collections.IEnumerator.Reset"/> on the underlying enumerator, so it
            is only supported if the underlying enumerator also supports it.
            </para>
            <para>
            This has the effect of "rewinding" the stream back to the beginning (i.e. it is the same as calling
            <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> with an offset of 0 and an origin of <see cref="F:System.IO.SeekOrigin.Begin"/>).  This is
            the only supported way to seek within a <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/>, as the <see cref="M:Microsoft.BI.Common.IO.BufferStream.Seek(System.Int64,System.IO.SeekOrigin)"/>
            method and <see cref="P:Microsoft.BI.Common.IO.BufferStream.Position"/> property throw <see cref="T:System.NotSupportedException"/> when
            used.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream
            by the number of bytes written.  This method is not supported and always throws a
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="buffer">An array of bytes.  This method copies <paramref name="count"/> bytes from
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying
            bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ReadableBufferStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/>, and optionally releases
            the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to
            release unmanaged resources only.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ReadableBufferStream.ByteArrayEnumeratorAdaptor">
            <summary>
            Exposes an enumerator of byte array spans from an enumerator of byte arrays.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ReadableBufferStream.DisposedEnumerator">
            <summary>
            An enumerator that throws an <see cref="T:System.ObjectDisposedException"/> on any method call or property access
            (except for <see cref="M:Microsoft.BI.Common.IO.ReadableBufferStream.DisposedEnumerator.Dispose"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ResettableStringReader">
            <summary>
            An <see cref="T:System.IO.TextReader" /> implementation that allows the underlying string to be changed without needing to create a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.#ctor">
            <summary>
            Initializes a new instances of the <see cref="T:Microsoft.BI.Common.IO.ResettableStringReader"/> with an empty string.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.#ctor(System.String)">
            <summary>
            Initializes a new instances of the <see cref="T:Microsoft.BI.Common.IO.ResettableStringReader"/> with the specified string.
            </summary>
            <param name="text">The string to be read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.Reset(System.String)">
            <summary>
            Resets the buffer with the specified string and moves the position to the beginning of the buffer.
            </summary>
            <param name="text">The string to be assigned to the buffer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.ReadLine">
            <summary>
            Reads a line of characters from the text reader and returns the data as a string.
            </summary>
            <returns>The next line from the reader, or <c>null</c> if all characters have been read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.ReadToEnd">
            <summary>
            Reads all characters from the current position to the end of the text reader and returns them as one string.
            </summary>
            <returns>A string that contains all characters from the current position to the end of the text reader.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.Read">
            <summary>
            Reads the next character from the text reader and advances the character position by one character.
            </summary>
            <returns>The next character from the text reader, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.Peek">
            <summary>
            Peeks the next character from the text reader.
            </summary>
            <returns>The next character from the text reader, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.
            </summary>
            <param name="buffer">When this method returns, this parameter contains the specified character array with the values between index and (index + count -1) replaced by the characters read from the current source.</param>
            <param name="index">The position in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read. The number will be less than or equal to count, depending on whether all input characters have been read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ResettableStringReader.GetRemainingString">
            <summary>
            Gets the string from the current position until the end.
            </summary>
            <returns>A string if there are charecters remaining in the buffer from the current position, otherwise returns <c>null</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.SimpleCsvReaderWithMetadata">
            <summary>
            A <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> subclass that makes available the line length and column count of each row it reads.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SimpleCsvReaderWithMetadata.#ctor(System.IO.Stream,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.CsvReader"/> class based on the specified stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="schema">The schema to use when parsing the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when reading the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SimpleCsvReaderWithMetadata.GetLineLength">
            <summary>
            Gets the line length (number of characters) in the current text line.
            </summary>
            <returns>The line length (number of characters) in the current text line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SimpleCsvReaderWithMetadata.GetColumnCount">
            <summary>
            Gets the number of tokens in the current text line.
            </summary>
            <returns>The number of tokens in the current text line.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2">
            <summary>
            Abstract class definition defining a <see cref="T:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1"/> over a streamset
            where each item in the range can optionally be offset by some value.
            </summary>
            <typeparam name="T">The type of the iterable items in the streamset.</typeparam>
            <typeparam name="O">The type of the offset to each iterable item.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2.ItemParser">
            <summary>
            The function that will be used to parse each range item from the streamset.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2.OffsetParser">
            <summary>
            The function that will be used to parse the offset from the streamset.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2.ApplyOffsetPositive">
            <summary>
            The function that will be used to apply the offset to <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeStart"/>
            and <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeEnd"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2.ApplyOffsetNegative">
            <summary>
            The function that will be used to apply the offset to <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeStart"/>
            and <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeEnd"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2.Parser">
            <summary>
            Parses a string of the form (V1)-O1...(V2)-O1 and sets <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeStart"/>
            and <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeEnd"/> to the result of parsing V1 and V2 as <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2"/> class using the specified streamset pattern
            and range.
            </summary>
            <param name="pattern">The streamset pattern on which the enumerator operates.</param>
            <param name="range">The range of this streamset.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{System.String},System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2"/> class using the specified streamset enumerator
            and range.
            </summary>
            <param name="enumerator">A collection of streamsets on which the enumerator operates.</param>
            <param name="range">The range of this streamset.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1">
            <summary>
            Abstract class defintion defining an <see cref="T:System.Collections.Generic.IEnumerator`1"/> over a streamset.
            </summary>
            <typeparam name="T">The type of the iterable items in the streamset.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Name">
            <summary>
            The name of the streamset element.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.HasMinValue">
            <summary>
            Whether the streamset parameter has a minimum value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.MinValue">
            <summary>
            When overridden in a derived class, specifies the minimum value of T allowed
            to in streamset ranges.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.HasMaxValue">
            <summary>
            Whether the streamset parameter has a maximum value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.MaxValue">
            <summary>
            When overridden in a derived class, specifies the maximum value of T allowed
            to in streamset ranges.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeStart">
            <summary>
            The start of the enumeration range.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeEnd">
            <summary>
            The end of the enumeration range.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Pattern">
            <summary>
            The streamset pattern.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Range">
            <summary>
            The streamset range.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Enumerator">
            <summary>
            The enumerator over the range from start to end.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.InnerEnumerator">
            <summary>
            The inner enumerator, allowing <see cref="T:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1"/> instances to be nested.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Parser">
            <summary>
            The function that will be used to parse the value from the streamset.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.EnumeratorFactory">
            <summary>
            The function that will be used to create the enumerator from <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeStart"/> to <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeEnd"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1"/> class using the specified streamset pattern
            and range.
            </summary>
            <param name="pattern">The streamset pattern on which the enumerator operates.</param>
            <param name="range">The range of this streamset.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{System.String},System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1"/> class using the specified streamset pattern
            and range.
            </summary>
            <param name="enumerator">A collection of streamsets on which the enumerator operates.</param>
            <param name="range">The range of this streamset.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Format(System.String)">
            <summary>
            When overridden in a derived class, formats the supplied pattern with the current value of the enumerator.
            </summary>
            <param name="pattern">The pattern to format.</param>
            <returns>The resulting formatted pattern.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.CheckPattern(System.String)">
            <summary>
            When overridden in a derived class, performs checking on the pattern to ensure it is valid.
            </summary>
            <param name="pattern">The pattern to check.</param>
            <exception cref="T:System.FormatException">When <paramref name="pattern"/> is invalid.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.ParseRange">
            <summary>
            Parses a string of the form V1...V2 and sets <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeStart"/> and <see cref="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.RangeEnd"/> to the result
            of parsing V1 and V2 as <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Dispose">
            <summary>
            Disposes of all managed resources used by the <see cref="T:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes of all managed resources used by the <see cref="T:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="P:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed
            the end of the collection.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.BaseStreamSetEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.DateTimeEnumerator">
            <summary>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for enumerating a range of dates based on a specified interval.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval">
            <summary>
            The size of each enumeration step.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval.Second">
            <summary>
            Represents an interval of one second.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval.Minute">
            <summary>
            Represents an interval of one minute.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval.Hour">
            <summary>
            Represents an interval of one hour.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval.Day">
            <summary>
            Represents an interval of one day.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval.Week">
            <summary>
            Represents an interval of one week (7 days).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval.Month">
            <summary>
            Represents an interval of one month.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval.Year">
            <summary>
            Represents an interval of one year.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DateTimeEnumerator.#ctor(System.DateTime,System.DateTime,Microsoft.BI.Common.IO.DateTimeEnumerator.Interval)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.DateTimeEnumerator"/> class.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> representing the inclusive start for the enumerator.</param>
            <param name="end">The <see cref="T:System.DateTime"/> representing the inclusive end for the enumerator.</param>
            <param name="interval">The <see cref="T:Microsoft.BI.Common.IO.DateTimeEnumerator.Interval"/> that indicates how big each step of enumeration is.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.DateTimeEnumerator.#ctor(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.DateTimeEnumerator"/> class.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> representing the inclusive start for the enumerator.</param>
            <param name="end">The <see cref="T:System.DateTime"/> representing the inclusive end for the enumerator.</param>
            <param name="interval">A <see cref="T:System.TimeSpan"/> that indicates how big each step of enumeration is.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StreamSet">
            <summary>
            Performs operations on streamsets.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StreamSet.EnumerateStreamSet(System.String)">
            <summary>
            Performs expansion on the specified streamset using the parameters provided in the streamset url.
            </summary>
            <param name="streamset">The streamset to perform expansion on, including parameters.</param>
            <returns>The expanded streamset.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StreamSet.ExpandStreamSet(System.String,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Performs expansion on the specified streamset using the given date and optionally, partition.
            </summary>
            <param name="streamset">The streamset to perform expansion upon.</param>
            <param name="date">The date to use when replacing the streamset's date parameters.</param>
            <param name="hour">The hour to use when replacing the streamset's hour parameter.</param>
            <param name="partition">The partition number to use when replacing the streamset's partition parameter.</param>
            <returns>The expanded streamset.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StreamSetEnumerator_date">
            <summary>
            A <see cref="T:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2"/> implementation for handling the 'date=' argument
            in a streamset.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StreamSetEnumerator_datetime">
            <summary>
            A <see cref="T:Microsoft.BI.Common.IO.BaseOffsetStreamSetEnumerator`2"/> implementation for handling the 'datetime=' argument
            in a streamset.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StreamSetEnumerator_hour">
            <summary>
            A <see cref="T:BaseStreamSetEnumerator&lt;int&gt;"/> implementation for handling the 'hour=' argument
            in a streamset.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StreamSetEnumerator_serialnum">
            <summary>
            A <see cref="T:BaseStreamSetEnumerator&lt;int&gt;"/> implementation for handling the 'serialnum=' argument
            in a streamset.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StructuredTextBase">
            <summary>
            Common abstract base class for reading and writing structured text files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.FieldCount">
            <summary>
            Gets the number of fields in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.Schema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> containing the schema.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.BaseStream">
            <summary>
            Gets the underlying stream on which the <see cref="T:Microsoft.BI.Common.IO.StructuredTextBase"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.DataTypeFormatter">
            <summary>
            Gets the <see cref="P:Microsoft.BI.Common.IO.StructuredTextBase.DataTypeFormatter"/> used to provide supported type-based formatting.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.DataTypeFormatProvider">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.IO.StructuredTextBase.DataTypeFormatProvider"/> used to provide supported type-based formatting.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.StructuredTextBase.InternalFieldCount">
            <summary>
            Subclasses of StructuredTextBase can use these fields directly for maximum performance.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.ConversionErrorMode">
            <summary>
            Controls the behavior of the CSV transformation with respect to handling value conversion failures.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.NullValueMode">
            <summary>
            Controls the behavior of the CSV transformation with respect to handling null values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.NullValueErrorMode">
            <summary>
            Controls the behavior of CSV transformations with respect to handling null values in columns that explicitly disallow it.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.DataOverflowMode">
            <summary>
            Controls the behavior of CSV transformations with respect to handling variable-length columns that exceed their alotted size.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.MissingColumnsMode">
            <summary>
            Controls the behavior of CSV tranformations with respect to handling missing columns in the input.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextBase.ExtraColumnsMode">
            <summary>
            Controls the behavior of CSV transformations with respect to handling extra columns in the input.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextBase.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.IO.StructuredTextBase"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.StructuredTextBase"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.StructuredTextBase"/> object.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextBase.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instances of the CsvIO class.
            </summary>
            <param name="schema">The schema of the data to write.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.CsvQuotationMode">
            <summary>
            Determines how CsvReader and CsvWriter interpret delimited-text lines with respect to quotation.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.Error">
            <summary>
            Throw an exception if any field contains the delimiter, quotation, or newline character.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.Escape">
            <summary>
            Escape the delimiter, quotation, and newline character by replacing them with a single space.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.Remove">
            <summary>
            Remove the delimiter, quotation, and newline character entirely.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.Simple">
            <summary>
            Do not perform any quotation.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.RFC4180">
            <summary>
            Escape field that contain the delimiter, quotation, or newline characters by quoting the field.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.QuoteAlways">
            <summary>
            Enclose every field in double quotes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.KeyValuePair">
            <summary>
            Values are stored in &amp;Key=Value pairs.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.IO.CsvQuotationMode.None">
            <summary>
            Synonym for Simple.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StructuredTextReader">
            <summary>
            Implements a <see cref="T:System.IO.Stream"/>-like interface for reading structured text files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.EndOfStream">
            <summary>
            Gets a value indicating whether the current position is at the end of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.ConversionErrorMode">
            <summary>
            Controls the behavior of the <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> with respect to handling value conversion failures.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.SetConversionErrorMode(Microsoft.BI.Common.Schema.ConversionErrorMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/> event.
            </summary>
            <param name="value">The conversion error mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileExtractor.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.NullValueMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> with respect to handling null values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.NullValueErrorMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> with respect to handling null values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.SetNullValueErrorMode(Microsoft.BI.Common.Schema.NullValueErrorMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/> event.
            </summary>
            <param name="value">The null error mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileExtractor.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.DataOverflowMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> with respect to handling overflow values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.SetDataOverflowMode(Microsoft.BI.Common.Schema.DataOverflowMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/> event.
            </summary>
            <param name="value">The overflow error mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileExtractor.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumnsMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> with respect to handling missing columns in the input.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.SetMissingColumnsMode(Microsoft.BI.Common.Schema.MissingColumnsMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns"/> event.
            </summary>
            <param name="value">The missing columns mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileExtractor.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumnsMode">
            <summary>
            Controls the behavior of the <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> with respect to handling extra columns in the input.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.SetExtraColumnsMode(Microsoft.BI.Common.Schema.ExtraColumnsMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns"/> event.
            </summary>
            <param name="value">The extra columns mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileExtractor.</remarks>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.LineRead">
            <summary>
            Occurs after a line has been read.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.LineSplit">
            <summary>
            Occurs after a line has been split.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.FieldParsed">
            <summary>
            Occurs after each field in a line has been parsed.
            </summary>
            <remarks>Subscribing to this event can slow down parsing significantly.</remarks>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.LineParsed">
            <summary>
            Occurs after all the items in a line have been parsed.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns">
            <summary>
            Occurs when a split line has fewer than the expected number of columns.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns">
            <summary>
            Occurs when a split line has more than the expected number of columns.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError">
            <summary>
            Occurs when there is a conversion error when parsing an item in a line.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError">
            <summary>
            Occurs when there is an overflow error when parsing items in a line.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError">
            <summary>
            Occurs when a null value is encountered in a column that does not allow nulls when parsing a line.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> class.
            </summary>
            <param name="schema">The schema to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnLineSplit(Microsoft.BI.Common.StructuredTextSplitLineEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineSplit"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnMissingColumns(Microsoft.BI.Common.StructuredTextSplitLineEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnExtraColumns(Microsoft.BI.Common.StructuredTextSplitLineEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnLineParsed(Microsoft.BI.Common.StructuredTextLineParsedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineParsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextLineParsedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnParseConversionError(Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnParseOverflowError(Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnParseIllegalNullError(Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.OnFieldParsed(Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.FieldParsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.ReadAllLines">
            <summary>
            Returns an iterable collection of all the lines in the structured text file.
            </summary>
            <returns>An enumerable collection of object arrays representing the data in the structured text file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.ReadLine">
            <summary>
            Read and return a single line in the structured text file.
            </summary>
            <returns>The next line in the structured text file as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.ReadStructuredTextLine(System.Collections.Generic.IList{System.String}@)">
            <summary>
            Read the next line from the underlying stream.
            </summary>
            <param name="tokens">The result of splitting the next line.</param>
            <returns>true if data was read; false if EOF was reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.ReadStructuredTextLineImpl(System.Collections.Generic.IList{System.String}@)">
            <summary>
            Read the next line from the underlying stream.
            </summary>
            <param name="tokens">The result of splitting the next line.</param>
            <returns>true if data was read; false if EOF was reached.</returns>
            <remarks>This should raise the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineRead"/> event.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.ReadFields">
            <summary>
            Read a single line and parse out the fields into an object array.
            </summary>
            <returns>An object array consisting of the data in the row, or null if done reading.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.AddSchema(System.Data.DataTable)">
            <summary>
            Allows the <see cref="T:Microsoft.BI.Common.IO.StructuredTextBase"/> to parse rows with a different schema than the primary schema
            and map the values to the original schema.
            </summary>
            <param name="schema">A <see cref="T:System.Data.DataTable"/> containing the additional schema to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.ComputeColumnMapping(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Compute column mappings between two schemas.
            </summary>
            <param name="input">The schema to map from.</param>
            <param name="output">The schema to map to.</param>
            <returns>An integer array containing indexes in the input table to the output table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose both managed and unamnaged resources; <c>false</c> to dispose only
            unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.GetDataReader">
            <summary>
            Gets a <see cref="T:System.Data.IDataReader"/> suitable for loading a <see cref="T:System.Data.DataTable"/> via
            <see cref="M:System.Data.DataTable.Load(System.Data.IDataReader)"/> and its overloads.
            </summary>
            <returns>A <see cref="T:System.Data.IDataReader"/> that can be used to load the data from the <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.#ctor(Microsoft.BI.Common.IO.StructuredTextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader"/> class based
            on the specified <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> to use to get data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> that describes the column metadata of the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that describes the column metadata.
            </returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. </exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <returns>
            The index of the named field.
            </returns>
            <param name="name">The name of the field to find. </param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <returns>
            The <see cref="T:System.Object"/> which will contain the field value upon return.
            </returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. </exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <returns>
            true if the specified field is set to null; otherwise, false.
            </returns>
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. </exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.GetValues(System.Object[])">
            <summary>
            Fills the specified array with values from the current record.
            </summary>
            <param name="values">The array to fill.</param>
            <returns>The number of object filled.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.NextResult">
            <summary>
            Determines whether there is additional data to be read.
            </summary>
            <returns>true if there is more data left in the stream to read; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextReader.StructuredTextDataReader.Read">
            <summary>
            Reads the next array of objects into the internal buffer.
            </summary>
            <returns>true if data was read; false if the end of the stream has been reached.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IO.StructuredTextWriter">
            <summary>
            Implements a <see cref="T:System.IO.Stream"/>-like interface for writing structured text files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.CurrentLine">
            <summary>
            Gets the current line number of the stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.NewLine">
            <summary>
            Gets or sets the string used to indicate new lines.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.ConversionErrorMode">
            <summary>
            Controls the behavior of the <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> with respect to handling value conversion failures.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.SetConversionErrorMode(Microsoft.BI.Common.Schema.ConversionErrorMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/> event.
            </summary>
            <param name="value">The conversion error mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileOutputter.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.NullValueMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> with respect to handling null values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.SetNullValueMode(Microsoft.BI.Common.Schema.NullValueMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/> event.
            </summary>
            <param name="value">The null error mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileOutputter.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.NullValueErrorMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> with respect to handling null values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.SetNullValueErrorMode(Microsoft.BI.Common.Schema.NullValueErrorMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/> event.
            </summary>
            <param name="value">The null error mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileOutputter.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.DataOverflowMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> with respect to handling overflow values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.SetDataOverflowMode(Microsoft.BI.Common.Schema.DataOverflowMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/> event.
            </summary>
            <param name="value">The data overflow mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileOutputter.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumnsMode">
            <summary>
            Controls the behavior of <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> with respect to handling missing columns in the input.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.SetMissingColumnsMode(Microsoft.BI.Common.Schema.MissingColumnsMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns"/> event.
            </summary>
            <param name="value">The missing columns mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileOutputter.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumnsMode">
            <summary>
            Controls the behavior of the <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> with respect to handling extra columns in the input.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.SetExtraColumnsMode(Microsoft.BI.Common.Schema.ExtraColumnsMode)">
            <summary>
            Applies the correct handler to the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns"/> event.
            </summary>
            <param name="value">The extra columns mode.</param>
            <remarks>Provided for backwards-compatibility with CSVFileOutputter.</remarks>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsJoining">
            <summary>
            Occurs after the fields in a line have been joined together.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsFormatted">
            <summary>
            Occurs after all the items in a line have been formatted.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns">
            <summary>
            Occurs when a split line has fewer than the expected number of columns.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns">
            <summary>
            Occurs when a split line has more than the expected number of columns.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError">
            <summary>
            Occurs when there is a conversion error when formatting an item in a line.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError">
            <summary>
            Occurs when there is an overflow error when formatting items in a line.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError">
            <summary>
            Occurs when a null value is encountered in a column that does not allow nulls when formatting a line.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldFormatted">
            <summary>
            Occurs after each item in a row has been formatted.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.#ctor(System.Data.DataTable)">
            <summary>
            Instantiates a new instance of the <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> class.
            </summary>
            <param name="schema">The schema to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnFieldsJoining(Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsJoining"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnMissingColumns(Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnExtraColumns(Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnFieldsFormatted(Microsoft.BI.Common.StructuredTextFieldsFormattedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsFormatted"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsFormattedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnFormatConversionError(Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnFormatOverflowError(Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnFormatIllegalNullError(Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.OnFieldFormatted(Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldFormatted"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
            <returns>A boolean value indicating whether or not to keep the line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.WriteAllLines(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Object}})">
            <summary>
            Write all lines in the enumerable to the underlying stream.
            </summary>
            <param name="lines">An enumerable collection containing the values to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.WriteFields(System.Object[])">
            <summary>
            Writes an array of values to the underlying stream.
            </summary>
            <param name="line">The values to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.WriteFields(System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes an array of values to the underlying stream.
            </summary>
            <param name="line">The values to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.Write(System.String)">
            <summary>
            Writes a string to the underlying stream.
            </summary>
            <param name="data">The string to write to the file.</param>
            <remarks>This does not append a trailing newline automatically.  Use <see cref="P:Microsoft.BI.Common.IO.StructuredTextWriter.NewLine"/> to get the newline
            string for this instance.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.WriteLine(System.String)">
            <summary>
            Writes a string to the underlying stream and appends <see cref="P:Microsoft.BI.Common.IO.StructuredTextWriter.NewLine"/> automatically.
            </summary>
            <param name="data">The string to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.IsNull(System.Object)">
            <summary>
            Gets a value indicating whether the specified value represents <c>null</c> or not.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if <paramref name="value"/> represents <c>null</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.HandleConversionError_Ignore(System.Object,Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/> event that ignores the formatting failure entirely.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.Flush">
            <summary>
            Flushes all buffers and writes all pending data to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.StructuredTextWriter.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose both managed and unamnaged resources; <c>false</c> to dispose only
            unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.SubStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> implementation that returns a portion of another stream.
            </summary>
            <remarks>
            <para>
            Allows reading of a portion of another stream as if it were a full stream.
            </para>
            <para>
            It is impossible to open multiple <see cref="T:Microsoft.BI.Common.IO.SubStream"/> instances on top of the same <see cref="T:System.IO.Stream"/>.  Attempting
            to do so will result in a <see cref="T:System.InvalidOperationException"/>.
            </para>
            <para>
            Currently, resizing a <see cref="T:Microsoft.BI.Common.IO.SubStream"/> is disallowed.   However, future implementation will allow passing an
            allowResize flag, whereafter the stream will be resizeable by using <see cref="M:Microsoft.BI.Common.IO.SubStream.Seek(System.Int64,System.IO.SeekOrigin)"/> to seek outside the bounds of the
            stream or setting <see cref="P:Microsoft.BI.Common.IO.SubStream.Position"/> to a negative number of a number greater than <see cref="P:Microsoft.BI.Common.IO.SubStream.Length"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.SubStream.BaseStream">
            <summary>
            Gets the <see cref="T:System.IO.Stream"/> atop of which this stream is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.SubStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.SubStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.SubStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.SubStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IO.SubStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.SubStream"/> class using the specified base stream.
            </summary>
            <param name="baseStream">The base stream from which to create the <see cref="T:Microsoft.BI.Common.IO.SubStream"/>.</param>
            <remarks>This returns a <see cref="T:Microsoft.BI.Common.IO.SubStream"/> on the entire base stream.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.IO.SubStream"/> class using the specified base stream, stream offset, and length.
            </summary>
            <param name="baseStream">The base stream from which to create the <see cref="T:Microsoft.BI.Common.IO.SubStream"/>.</param>
            <param name="offset">The offset in <paramref name="baseStream"/> from which to begin the <see cref="T:Microsoft.BI.Common.IO.SubStream"/>.</param>
            <param name="length">The number of bytes from <paramref name="baseStream"/> to include in the <see cref="T:Microsoft.BI.Common.IO.SubStream"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseStream"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is less than zero -or- <paramref name="offset"/>
            is greater than the length of <paramref name="baseStream"/> -or- <paramref name="length"/> is less than zero -or-
            <paramref name="offset"/> + <paramref name="length"/> is greater than the length of <paramref name="baseStream"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="baseStream"/> already has an open <see cref="T:Microsoft.BI.Common.IO.SubStream"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array.  When this method returns, the buffer contains the specified byte array with the values between
            <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the
            current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from
            the current stream.</param>
            <param name="count">The maximum number of bytes to read from the current stream.</param>
            <returns>The total number of bytes read into the buffer.  This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The new position is less than zero -or- the new position is greater than the stream
            length.</exception>
            <exception cref="T:System.ArgumentException">The value of the <paramref name="origin"/> parameter is unknown.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>This method is not currently implemented, though there is no reason why it could not be.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within the stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes.  This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the
            current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying data to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.SubStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.IO.SubStream"/>.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
            <remarks>
            This does not close the base stream.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.IO.SubStream._Streams">
            <summary>
            This dictionary contains a mapping of all <see cref="T:System.IO.Stream"/> objects that have open <see cref="T:Microsoft.BI.Common.IO.SubStream"/> objects on them.
            This is used to prevent opening multiple <see cref="T:Microsoft.BI.Common.IO.SubStream"/> objects on the same base stream.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.WritableBufferStream">
            <summary>
            Provides a <see cref="T:System.IO.Stream"/> for an observable sequence of byte array spans, supporting synchronous
            and asynchronous write operations.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/> transforms calls to the <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Write(System.Byte[],System.Int32,System.Int32)"/> and <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Flush"/>
            method into an observable sequence of <see cref="T:System.ArraySegment`1"/> values containing buffers of data to be
            flushed.
            </remarks>
            <seealso cref="T:Microsoft.BI.Common.IO.ReadableBufferStream"/>
        </member>
        <member name="P:Microsoft.BI.Common.IO.WritableBufferStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <remarks>
            <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/> instances do not support reading, so this property always
            returns <c>false</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.IO.WritableBufferStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/> with the default buffer size.
            </summary>
            <remarks>
            A new <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/> has no subscriber.  Use the <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Subscribe(System.IObserver{System.ArraySegment{System.Byte}})"/> method to
            add a subscription to the buffers created by the stream.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/> with the specified buffer size.
            </summary>
            <param name="bufferSize">The maximum size of the buffers produced by the
            <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is less than 1.</exception>
            <remarks>
            A new <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/> has no subscriber.  Use the <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Subscribe(System.IObserver{System.ArraySegment{System.Byte}})"/> method to
            add a subscription to the buffers created by the stream.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.Flush">
            <summary>
            Flushes the current buffer to the subscriber and clears it.
            </summary>
            <remarks>
            <para>
            The buffer that is passed to the observer is only valid for the range of bytes between
            <see cref="P:System.ArraySegment`1.Offset"/> and (<see cref="P:System.ArraySegment`1.Offset"/> + <see cref="P:System.ArraySegment`1.Count"/>).
            The value of the bytes outside this range is undefined and should not be used by the consumer.
            </para>
            <para>
            This method will push a new <see cref="T:System.ArraySegment`1"/> to the underlying observer every time it is
            called, even if the buffer is empty.  In the event the buffer is empty, the <see cref="P:System.ArraySegment`1.Count"/>
            property will have value 0, indicating that no bytes should be read from the buffer.  The only time this
            will happen is if <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Flush"/> is called explicitly by the consumer; <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Write(System.Byte[],System.Int32,System.Int32)"/> will
            never flush an empty buffer.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.Subscribe(System.IObserver{System.ArraySegment{System.Byte}})">
            <summary>
            Notifies the <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/> that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>A reference to an interface that allows observers to stop receiving notifications before the
            provider has finished sending them.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">There is already a subscription to the
            <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/>.</exception>
            <remarks>
            They value of the <see cref="P:System.ArraySegment`1.Array"/> property for <see cref="T:System.ArraySegment`1"/> values
            sent to the subscriber may be reused across multiple calls to <see cref="M:System.IObserver`1.OnNext(`0)"/>.  If an
            observer wishes to maintain the buffers for longer than a single call to <see cref="M:System.IObserver`1.OnNext(`0)"/>,
            it must copy the data into another buffer to ensure correctness.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream
            by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying
            bytes to the current stream </param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is
            negative.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is
            larger than the buffer length.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
            <remarks>
            <para>
            As data is written to the stream, it will periodically flush buffers to all subscribed observers.  These
            flushes will occur whenever the internal buffer fills completely.  The size of this internal buffer is
            specified in the constructor.
            </para>
            <para>
            Buffers may also be explicitly flushed to all subscribed observers by using the <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Flush"/>
            method.  This will clear the internal buffer, meaning the next call to <see cref="M:Microsoft.BI.Common.IO.WritableBufferStream.Write(System.Byte[],System.Int32,System.Int32)"/> will start
            from an empty buffer.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/>.  This method is not supported and always throws
            a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing
            the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the stream.</param>
            <returns>The total number of bytes read into the buffer.</returns>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/>, and optionally releases
            the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to
            release unmanaged resources only.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.WritableBufferStream.Subscription">
            <summary>
            A subscription to a <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.WritableBufferStream.Subscription.Dispose">
            <summary>
            Unsubscribes an observer from the <see cref="T:Microsoft.BI.Common.IO.WritableBufferStream"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.WritableBufferStream.NopObserver">
            <summary>
            An <see cref="T:System.IObserver`1"/> that does nothing.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ColumnCountMismatchException">
            <summary>
            Exception thrown when the column count in a stream does not match the count specified by the schema.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ColumnCountMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ColumnCountMismatchException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ColumnCountMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ColumnCountMismatchException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ColumnCountMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ColumnCountMismatchException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes this error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ColumnCountMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ColumnCountMismatchException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.MissingColumnException">
            <summary>
            Exception thrown when the column count in a stream is less than the count specified by the schema.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MissingColumnException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ColumnCountMismatchException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MissingColumnException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.MissingColumnException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MissingColumnException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.MissingColumnException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes this error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.MissingColumnException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.MissingColumnException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.ExtraColumnException">
            <summary>
            Exception thrown when the column count in a stream is greater than the count specified by the schema.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ExtraColumnException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ExtraColumnException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ExtraColumnException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ExtraColumnException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ExtraColumnException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ExtraColumnException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes this error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.ExtraColumnException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.ExtraColumnException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IO.IllegalNullValueException">
            <summary>
            Exception thrown when a null value is found in a column that explicitly disallows it.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IllegalNullValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.IllegalNullValueException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IllegalNullValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.IllegalNullValueException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IllegalNullValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.IllegalNullValueException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes this error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IO.IllegalNullValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IO.IllegalNullValueException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.BI.Common.ObjArrayDataReader">
            <summary>
            Implements a <see cref="T:System.IO.Stream"/>-like interface for reading object array from a list.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ObjArrayDataReader._data">
            <summary>
            Gets or sets the list of object arrays.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ObjArrayDataReader.Schema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> representing the expected schema of the line.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ObjArrayDataReader.#ctor(System.Data.DataTable,System.Collections.Generic.IList{System.Object[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.ObjArrayDataReader"/> class based on the specified stream.
            </summary>
            <param name="schema">The schema to use when parsing the file.</param>
            <param name="data">The list of object[] that reader will provide.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ObjArrayDataReader.ReadAllLines">
            <summary>
            Returns an iterable collection of all the object arrays in the List.
            </summary>
            <returns>An enumerable collection of object arrays representing the data in the List.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ObjArrayDataReader.ReadFields">
            <summary>
            Read a single line and parse out the fields into an object array.
            </summary>
            <returns>An object array consisting of the data in the row, or null if done reading.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ObjArrayDataReader.Close">
            <summary>
            Closes the <see cref="T:Microsoft.BI.Common.ObjArrayDataReader"/> and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ObjArrayDataReader.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.BI.Common.ObjArrayDataReader"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.KVPParsing">
            <summary>
            Provides methods for extracting data from key-value pair (KVP) strings.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.KVPParsing.KVPExtract(System.String,System.String,System.Char,System.Char,System.Int32,System.StringComparison)">
            <summary>
            Parses a KVP string, returning the value associated with the specified key.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="key">The key to get.</param>
            <param name="keyValueSeparator">The delimiter between name-value pairs.</param>
            <param name="groupSeparator">The delimiter between name and value.</param>
            <param name="startIndex">The index to start searching at.</param>
            <param name="comparer">The <see cref="T:System.StringComparison"/> to use when looking for
            <paramref name="key"/> in <paramref name="s"/>.</param>
            <returns>The value of the key, or null if not found.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.DuplicateMode">
            <summary>
            Enumeration describing the behavior of <see cref="T:System.Collections.Generic.Dictionary`2"/>-based IEnumerable extension methods
            with regards to encountering duplicates in the input IEnumerable.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DuplicateMode.Error">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DuplicateMode.Replace">
            <summary>
            Replace the original value with the new one.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DuplicateMode.Ignore">
            <summary>
            Ignore the duplicate value.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.IEnumerableExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the occurence within the entire
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.  Item equality is determined using the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the elements in the enumerable.
            </summary>
            <typeparam name="T">The type of the elements in the enumerable.</typeparam>
            <param name="enumerable">The enumerable collection to search.</param>
            <param name="value">The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.  The value can be
            <c>null</c> for reference types.</param>
            <returns>The zero-based index of the first occurence of <paramref name="value"/> within the enumerable
            collection; otherwise, -1.</returns>
            <remarks>
            <para>
            The enumerable is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is the number
            of elements in the enumerable.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the occurence within the
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.  Item equality is determined using the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the enumerable.</typeparam>
            <param name="collection">The enumerable collection to search.</param>
            <param name="value">The object to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.  The value can be
            <c>null</c> for reference types.</param> 
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items in the
            collection.</param>
            <returns>The zero-based index of the first occurence of <paramref name="value"/> within the enumerable;
            otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            The enumerable is searched forward starting at the first element and ending at the last element.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n is the number
            of elements in the enumerable.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Map``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on all items in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the enumerable.</typeparam>
            <param name="enumerable">The enumerable to enumerate.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to perform.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Map``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified action on all items in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by incorporating
            the element's index.
            </summary>
            <typeparam name="T">The type of the enumerable.</typeparam>
            <param name="enumerable">The enumerable to enumerate.</param>
            <param name="action">The <see cref="T:System.Action`2"/> to perform; the second parameter of the action
            represents the index of the source element.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Observe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="onNext">The <see cref="T:System.Action`1"/> to call for each item.</param>
            <returns>The original enumerable.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Observe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="onNext">The <see cref="T:System.Action`1"/> to call for each item.</param>
            <param name="onError">The <see cref="T:System.Action`1"/> to call for an error.</param>
            <returns>The original stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> or <paramRef name="onError"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Observe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="onNext">The <see cref="T:System.Action`1"/> to call for each item.</param>
            <param name="onCompleted">The <see cref="T:System.Action"/> to call when the stream completes.</param>
            <returns>The original stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> or <paramRef name="onCompleted"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Observe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="onNext">The <see cref="T:System.Action`1"/> to call for each item.</param>
            <param name="onError">The <see cref="T:System.Action`1"/> to call for an error.</param>
            <param name="onCompleted">The <see cref="T:System.Action"/> to call when the stream completes.</param>
            <returns>The original stream.</returns>
            <exception cref="T:System.ArgumentNullException">Any of <paramref name="onNext"/>, <paramref name="onError"/>, or <paramRef name="onCompleted"/>
            are <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Observe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="observer">The <see cref="T:System.IObserver`1"/> instance with which to obesrve the stream.</param>
            <returns>The original stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Observe``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.IObserver{``0}})">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="observers">The <see cref="T:System.IObserver`1"/> instances with which to obesrve the stream.</param>
            <returns>The original stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observers"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.Observe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0}[])">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="observers">The <see cref="T:System.IObserver`1"/> instances with which to obesrve the stream.</param>
            <returns>The original stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observers"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.ObserveInternal``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Observes an enumerable without modifying it.
            </summary>
            <param name="source">The enumerable to observe.</param>
            <param name="onNext">The <see cref="T:System.Action`1"/> to call for each item.</param>
            <param name="onError">The <see cref="T:System.Action`1"/> to call for an error.</param>
            <param name="onCompleted">The <see cref="T:System.Action"/> to call when the stream completes.</param>
            <returns>The original stream.</returns>
            <exception cref="T:System.ArgumentNullException">Any of <paramref name="onNext"/>, <paramref name="onError"/>, or <paramRef name="onCompleted"/>
            are <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumerableExtensions.ZipOrDefault``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
            <typeparam name="TSecond">The tyep of the elements of the second input sequence.</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
            <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains merged elements of two input sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/>, <paramref name="second"/>, or <paramref name="resultSelector"/>
            is <c>null</c>.</exception>
            <remarks>
            <para>
            This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that
            is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling
            its <c>GetEnumerator</c> method directly or by using <c>foreach</c> in Visual C# or <c>For Each</c> in Visual Basic.
            </para>
            <para>
            The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do
            not have the same number of elements, the method merges sequences until it reaches the end of both of them, adding default values for the
            elements in the shorter sequence. For example, if one sequence has three elements and the other one has four, the result sequence will have
            four elements, one of which will contain a default value for the item in the shorter sequence.
            </para>
            <para>
            The default value for reference and nullable types is <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IEnumeratorExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IEnumerator`1"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IEnumeratorExtensions.Enumerate``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Enumerates the <see cref="T:System.Collections.Generic.IEnumerator`1"/>, returning the remaining elements.
            </summary>
            <typeparam name="T">The type of the elements in the enumerator.</typeparam>
            <param name="instance">The enumerator to enumerate.</param>
            <returns>An enumerable collection of the elements in the enumerator.</returns>
            <remarks>
            <para>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> is enumerated from its current position.  It is not automatically
            reset after completing.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Linq.Recursive">
            <summary>
            Provides methods for recursively enumerating over objects and collections.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.Recurse``1(``0,System.Func{``0,``0})">
            <summary>
            Recursively traverses all of the elements in an object.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="item">The object to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <returns>An enumerable collection of the elements in the object.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.Recurse``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Recursively traverses all of the elements in an object.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="item">The object to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <returns>An enumerable collection of the elements in the object.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.RecurseWhile``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Recursively traverses all of the elements in a object while a predicate is <c>true</c>.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="item">The object to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <param name="predicate">The predicate that determines when to stop recursing.</param>
            <returns>An enumerable collection of the elements in the item.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.RecurseWhile``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Recursively traverses all of the elements in a object while a predicate is <c>true</c>.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="item">The object to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <param name="predicate">The predicate that determines when to stop recursing.</param>
            <returns>An enumerable collection of the elements in the item.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.Recurse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Recursively traverses all of the elements in an enumerable sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="enumerable">The enumerable sequence to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <returns>An enumerable collection of the elements in the sequence.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.Recurse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Recursively traverses all of the elements in an enumerable sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="enumerable">The enumerable sequence to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <returns>An enumerable collection of the elements in the sequence.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.RecurseWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Recursively traverses all of the elements in an enumerable sequence while a predicate is <c>true</c>.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="enumerable">The enumerable sequence to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <param name="predicate">The predicate that determines when to stop recursing.</param>
            <returns>An enumerable collection of the elements in the enumerable sequence.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Linq.Recursive.RecurseWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Recursively traverses all of the elements in an enumerable sequence while a predicate is <c>true</c>.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="enumerable">The enumerable sequence to traverse.</param>
            <param name="selector">The function to select elements recursively.</param>
            <param name="predicate">The predicate that determines when to stop recursing.</param>
            <returns>An enumerable collection of the elements in the enumerable sequence.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.SingleEnumerable`1">
            <summary>
            Represents an object as a single-item enumerable.
            </summary>
            <typeparam name="T">The type of the item in the enumerable.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.SingleEnumerable`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.SingleEnumerable`1"/> structure.
            </summary>
            <param name="value">The value that will be returned when enumerating.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SingleEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that will yield the single item.
            </summary>
            <returns>An enumerator that will yield the single item.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.SingleEnumerator`1">
            <summary>
            An enumerator that yields a single item and stops.
            </summary>
            <typeparam name="T">The type of the item to enumerate.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.SingleEnumerator`1.Current">
            <summary>
            Gets the value of the current element in the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SingleEnumerator`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.SingleEnumerator`1"/> structure.
            </summary>
            <param name="value">The item that will be yielded.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SingleEnumerator`1.MoveNext">
            <summary>
            Moves to the next item in the enumeration.
            </summary>
            <returns><c>true</c> if <see cref="M:Microsoft.BI.Common.SingleEnumerator`1.MoveNext"/> has not yet been called, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.SingleEnumerator`1.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.BasePatternMatchList">
            <summary>
            Abstract base class for pattern match lists handling common members.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.BasePatternMatchList.RecordCount">
            <summary>
            Gets a value representing the number of records stored in the match list.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.BasePatternMatchList.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.BasePatternMatchList"/> class.
            </summary>
            <param name="throwOnDiscard">A flag that indicates whether to throw when an entry is discarded.</param>
        </member>
        <member name="M:Microsoft.BI.Common.BasePatternMatchList.IsMatch(System.String)">
            <summary>
            Check the list to see if the specified value matches any entry.
            </summary>
            <param name="value">The value to check against the list.</param>
            <returns><c>true</c> if the value matched the list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.BasePatternMatchList.IsMatch(System.String,System.String@)">
            <summary>
            Check the list to see if the specified value matches any entry.
            </summary>
            <param name="value">The value to check against the list.</param>
            <param name="patternMatched">The pattern that was matched.</param>
            <returns><c>true</c> if the value matched the list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.BasePatternMatchList.AddEntry(System.String)">
            <summary>
            Adds an entry to the pattern match list.
            </summary>
            <param name="value">The pattern to be added to the list.</param>
        </member>
        <member name="M:Microsoft.BI.Common.BasePatternMatchList.DiscardEntry(System.String,System.String)">
            <summary>
            Discard an entry that could not be added to the list.
            </summary>
            <param name="entry">The entry to be discarded.</param>
            <param name="reason">The reason for discarding the entry.</param>
        </member>
        <member name="P:Microsoft.BI.Common.BasePatternMatchList.DiscardedEntries">
            <summary>
            Entries that could not be added to the list and were discarded.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DiscardedEntry">
            <summary>
            An entry which was discarded from an <see cref="T:Microsoft.BI.Common.BasePatternMatchList"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DiscardedEntry.Entry">
            <summary>
            The discarded entry.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.DiscardedEntry.Reason">
            <summary>
            The reason why the entry was discarded.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DiscardedEntry.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DiscardedEntry"/> struct.
            </summary>
            <param name="entry">The entry that was discarded.</param>
            <param name="reason">The reason why the entry was discarded.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DiscardedEntry.op_Equality(Microsoft.BI.Common.DiscardedEntry,Microsoft.BI.Common.DiscardedEntry)">
            <summary>
            Returns whether two <see cref="T:Microsoft.BI.Common.DiscardedEntry"/> values are the same.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns><c>true</c> if the values are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DiscardedEntry.op_Inequality(Microsoft.BI.Common.DiscardedEntry,Microsoft.BI.Common.DiscardedEntry)">
            <summary>
            Returns whether two <see cref="T:Microsoft.BI.Common.DiscardedEntry"/> values are different.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns><c>true</c> if the values are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DiscardedEntry.Equals(System.Object)">
            <summary>
            Returns the specified <see cref="T:Microsoft.BI.Common.DiscardedEntry"/> value is the same as the current instance.
            </summary>
            <param name="obj">The other value.</param>
            <returns><c>true</c> if the values are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DiscardedEntry.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Microsoft.BI.Common.DiscardedEntry"/>.
            </summary>
            <returns>The hash code for the <see cref="T:Microsoft.BI.Common.DiscardedEntry"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DiscardedEntry.ToString">
            <summary>
            Gets a string representation for the <see cref="T:Microsoft.BI.Common.DiscardedEntry"/>.
            </summary>
            <returns>A string representation for the <see cref="T:Microsoft.BI.Common.DiscardedEntry"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IpIpMatchList">
            <summary>
            A list of IP ranges which can be queried to see if an IP matches the list.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IpIpMatchList.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IpIpMatchList"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IpIpMatchList.AddEntry(System.String)">
            <summary>
            Add an entry to the <see cref="T:Microsoft.BI.Common.IpIpMatchList"/>.
            </summary>
            <param name="value">The entry to be added to the <see cref="T:Microsoft.BI.Common.IpIpMatchList"/>. It should be in the format 'IpStart|IpEnd' (without quotation).</param>
        </member>
        <member name="T:Microsoft.BI.Common.IpMatchList">
            <summary>
            A list of IP ranges which can be queried to see if an IP matches the list.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IpMatchList.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.IpMatchList"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IpMatchList.IsMatch(System.String,System.String@)">
            <summary>
            Check if the given IP matches and entry in the <see cref="T:Microsoft.BI.Common.IpMatchList"/>.
            </summary>
            <param name="value">The IP to check against the <see cref="T:Microsoft.BI.Common.IpMatchList"/>.</param>
            <param name="patternMatched">Not used for <see cref="T:Microsoft.BI.Common.IpMatchList"/>. Will always be null.</param>
            <returns>true if the IP matches an entry in the <see cref="T:Microsoft.BI.Common.IpMatchList"/>, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IpMatchList.AddEntry(Microsoft.BI.Common.IpMatchList.IpMatchListEntry)">
            <summary>
            Adds an <see cref="T:Microsoft.BI.Common.IpMatchList.IpMatchListEntry"/> to the match list.
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IpMatchList.TryParseIPAddress(System.String,Microsoft.BI.Common.Net.IPAddress@)">
            <summary>
            Parses a string as an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="ip">When this method returns, contains the parsed IP address.</param>
            <returns><c>true</c> if the parse was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            This method differs from <see cref="M:Microsoft.BI.Common.Net.IPAddress.TryParse(System.String,Microsoft.BI.Common.Net.IPAddress@)"/> in that it also supports IPv4 addresses
            expressed as an unsigned integer.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IpMatchList.IpMatchEntryList">
            <summary>
            A simple, add-only, searchable list for use by <see cref="T:Microsoft.BI.Common.IpMatchList"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.ListIdLookup">
            <summary>
            Represents a class that can perform lookups based on a range of values.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdLookup.ListIdStorageSchema">
            <summary>
            Contains the schema of a <see cref="T:Microsoft.BI.Common.ListIdLookup"/> mapfile.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ListIdLookup.RecordCount">
            <summary>
            Gets the number of rows in the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ListIdLookup.Schema">
            <summary>
            Gets the schema of the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.#ctor(System.UInt64,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.ListIdLookup"/> object with an MRU of size <paramref name="mruSize"/> and <see cref="T:Microsoft.BI.Common.Bitmap"/> of size <paramref name="bitmapSize"/>.
            </summary>
            <param name="mruSize">The size of the MRU to create.</param>
            <param name="bitmapSize">The size of the bitmap.</param>
            <param name="listIdPriorities">A dictionary containing the list id priorities.</param>
            <param name="throwOnBadEntry">Whether to throw an exception when a bad entry is found.  If <c>false</c>, entry will
            be discarded; if <c>true</c>, an exception will be thrown.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.IsMatch(System.String,Microsoft.BI.Common.Bitmap@)">
            <summary>
            Function to check if a value matches any entries in the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
            <param name="stringToMatch">The value to check for a match.</param>
            <param name="listIdBitmap">A bitmap indicating which lists were matched.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.IsMatch(System.String,Microsoft.BI.Common.Bitmap@,System.String@)">
            <summary>
            Function to check if a value matches any entries in the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
            <param name="stringToMatch">The value to check for a match.</param>
            <param name="listIdBitmap">A bitmap indicating which lists were matched.</param>
            <param name="patternMatched">The pattern that was matched.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Insert a row into the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
            <param name="reader">The reader from which rows of data to be inserted.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.Add(Microsoft.BI.Common.ListIdLookupItem)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/> to the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            Insert a row into the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
            <param name="row">The row of data to be inserted.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookup.InsertRow(System.String[])">
            <summary>
            Insert a row into the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
            <param name="row">The row of data to be inserted.</param>
        </member>
        <member name="P:Microsoft.BI.Common.ListIdLookup.DiscardedEntries">
            <summary>
            Gets an enumerable collection of <see cref="T:Microsoft.BI.Common.DiscardedEntry"/> objects that represent the values that were discarded while
            reading data into the <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.ListIdLookupItem">
            <summary>
            Contains a single item from a <see cref="T:Microsoft.BI.Common.ListIdLookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ListIdLookupItem.Pattern">
            <summary>
            Gets the pattern of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ListIdLookupItem.ListId">
            <summary>
            Gets the ID of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ListIdLookupItem.MatchAlgorithmId">
            <summary>
            Gets the match algorithm ID of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookupItem.#ctor(System.String,System.Int32,Microsoft.BI.Common.ListIdMatchAlgorithm)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/> structure.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="listId">The ID of the item.</param>
            <param name="matchAlgorithmId">The algorithm ID of the item.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookupItem.#ctor(System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/> structure parsed from the specified row.
            </summary>
            <param name="row">The row from which to parse items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="row"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="row"/> does not contain enough items.</exception>
            <exception cref="T:System.InvalidInputException"><paramref name="row"/> cannot be interpreted as a <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookupItem.#ctor(System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/> structure using objects from the specified row.
            </summary>
            <param name="row">The array of objects from which to get values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="row"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="row"/> does not contain enough items.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="row"/> cannot be interpreted as a <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookupItem.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/>.
            </summary>
            <returns>A string representation of the <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ListIdLookupItem.GetSchema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> containing the schema of a <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/> value.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> containing the schema of a <see cref="T:Microsoft.BI.Common.ListIdLookupItem"/> value.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ListIdMatchAlgorithm">
            <summary>
            Contains values indicating the values of the various supported ListId match algorithms.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.Unspecified">
            <summary>
            Unknown match ID.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.IABValid">
            <summary>
            Algorithm that matches an IABValid.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.IABCrawler">
            <summary>
            Algorithm that matches an IABCrawler.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.Exact">
            <summary>
            Algorithm that matches strings based on an exact match.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.Contains">
            <summary>
            Algorithm that matches strings based on whether one string contains another.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.RegEx">
            <summary>
            Algorithm that matches based on a regular expression.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.IPRange">
            <summary>
            Algorithm that matches an IP address against a range of IP addresses.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.PubIdPropURI">
            <summary>
            Algorithm that matches both PublisherId and PropertyURI.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ListIdMatchAlgorithm.IpIp">
            <summary>
            Algorithm that matches an IP address against a list of IP ranges.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MRU`2.Item(`0)">
            <summary>
            Index operator, gets or sets the value stored for key. If key does not exist
            in the MRU when attempting to get, then the default value for value's type
            is returned.
            </summary>
            <param name="key">The key to get the value of.</param>
            <returns>The value stored at <paramref name="key"/>, or the default for the type if the key does not exist.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.MRU`2.Keys">
            <summary>
            Returns a collection of keys contained in the MRU.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MRU`2.MaxLength">
            <summary>
            Maximum number of items the MRU will contain. Once the MRU contains
            this many items, any additional adds will cause the last item to be
            discarded.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MRU`2.Count">
            <summary>
            Count of the number of items currently in the MRU. The number will
            increment until it reaches MaxLength.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.ConsoleLogger">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> implementation that logs to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ConsoleLogger.#ctor(Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.ConsoleLogger"/> class.
            </summary>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ConsoleLogger.#ctor(Microsoft.BI.Common.Logging.LogLevels,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.ConsoleLogger"/> class.
            </summary>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="bufferSize">The size of the buffer before the logs are written to the console.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.DebugLogger">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> interface that logs to <see cref="T:System.Diagnostics.Debug"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.DebugLogger.#ctor(Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.DebugLogger"/> class.
            </summary>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.DebugLogger.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the specified formatted log message to the log.
            </summary>
            <param name="level">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.FileLogger">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> implementation that logs to a file.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.FileLogger.#ctor(System.String,Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.FileLogger"/> class.
            </summary>
            <param name="path">The file to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.FileLogger.#ctor(System.String,Microsoft.BI.Common.Logging.LogLevels,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.FileLogger"/> class.
            </summary>
            <param name="path">The file to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="bufferSize">The size of the buffer before the logs are written to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.FileLogger.#ctor(Microsoft.BI.Common.IO.IFileSystem,System.String,Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.FileLogger"/> class.
            </summary>
            <param name="filesystem">The filesystem to use when writing to the file.</param>
            <param name="path">The file to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filesystem"/> is <c>null</c>, -or- <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.FileLogger.#ctor(Microsoft.BI.Common.IO.IFileSystem,System.String,Microsoft.BI.Common.Logging.LogLevels,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.FileLogger"/> class.
            </summary>
            <param name="filesystem">The filesystem to use when writing to the file.</param>
            <param name="path">The file to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="bufferSize">The size of the buffer before the logs are written to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filesystem"/> is <c>null</c>, -or- <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.ILogger`1">
            <summary>
            Contains methods related to logging messages based on a log level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.ILogger`1.LogLevels">
            <summary>
            Gets a <see cref="P:Microsoft.BI.Common.Logging.ILogger`1.LogLevels"/> value indicating which log levels are enabled for the <see cref="T:Microsoft.BI.Common.Logging.ILogger`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger`1.Fatal(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger`1.Error(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger`1.Warn(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger`1.Info(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger`1.Debug(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.Logger`1">
            <summary>
            Provides a base class for implementations of the <see cref="T:Microsoft.BI.Common.Logging.ILogger`1"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.Logger`1.LogLevels">
            <summary>
            Gets a <see cref="P:Microsoft.BI.Common.Logging.Logger`1.LogLevels"/> value indicating which log levels are enabled for the <see cref="T:Microsoft.BI.Common.Logging.ILogger`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.#ctor(Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.Logger`1"/> class.
            </summary>
            <param name="logLevels">The <see cref="P:Microsoft.BI.Common.Logging.Logger`1.LogLevels"/> that this instance should log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,`0)">
            <summary>
            When overridden in a derived class, appends the specified log message to the log.
            </summary>
            <param name="level">The <see cref="P:Microsoft.BI.Common.Logging.Logger`1.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="message">A message to log.</param>
            <remarks>
            <paramref name="level"/> has already been checked against the <see cref="P:Microsoft.BI.Common.Logging.Logger`1.LogLevels"/> value of the current instance.
            Implementers do not need to do the filtering themselves.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Fatal(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="message">The object to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Error(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="message">The object to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Warn(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="message">The object to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Info(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="message">The object to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Debug(`0)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="message">The object to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Dispose">
            <summary>
            Disposes all resources used by the <see cref="T:Microsoft.BI.Common.Logging.Logger`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger`1.Dispose(System.Boolean)">
            <summary>
            Disposes all resources used by the <see cref="T:Microsoft.BI.Common.Logging.Logger`1"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose both managed and unmanaged resources; <c>false</c> to dispose
            unmanaged resources only.</param>
            <remarks>
            Subclasses that contain <see cref="T:System.IDisposable"/> members should override this method in order to dispose them.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.MemoryLogger`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger`1"/> implementation that logs to in-memory collections.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger`1.FatalMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger`1.ErrorMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger`1.WarnMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger`1.InfoMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger`1.DebugMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MemoryLogger`1.#ctor(Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.BI.Common.Logging.MemoryLogger`1"/> class
            with an <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:Microsoft.BI.Common.Logging.LoggedObject`1" />
            for each of the <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/>.
            </summary>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MemoryLogger`1.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,`0)">
            <summary>
            Adds an object to the appropriate <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="level">The level from <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this object will be logged under.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when this object will be logged.</param>
            <param name="message">The object to be logged of type <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MemoryLogger`1.Clear">
            <summary>
            Clears all message buffers.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.LoggedObject`1">
            <summary>
            A simple structure that encapsulates a <see cref="T:System.DateTime"/> and
            an object of type <typeparamref name="T"/> that is logged.
            </summary>
            <typeparam name="T">The type of objects logged.</typeparam>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LoggedObject`1.Time">
            <summary>
            The <see cref="T:System.DateTime"/> when this object was logged.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LoggedObject`1.Message">
            <summary>
            The object that was logged of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.LoggedObject`1.#ctor(System.DateTime,`0)">
            <summary>
            Create a new instance of the struct <see cref="T:Microsoft.BI.Common.Logging.LoggedObject`1"/>.
            </summary>
            <param name="time">The <see cref="T:System.DateTime"/> when this object will be logged.</param>
            <param name="message">The object to be logged of type <typeparamref name="T"/>.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.ILogger">
            <summary>
            Contains methods related to logging String messages based on a log level.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Fatal(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Fatal(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Fatal(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Error(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Error(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Error(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Error(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Warn(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Warn(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Warn(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Info(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Info(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Info(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Info(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Debug(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Debug(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Debug(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.LogFormatterCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.BI.Common.Logging.ILogFormatter"/> objects that can be queried to find the correct
            log formatter for a type.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.LogFormatterCollection.Find(System.Type)">
            <summary>
            Finds the appropriate <see cref="T:Microsoft.BI.Common.Logging.ILogFormatter"/> for the specified type.
            </summary>
            <param name="type">The type for which to find the <see cref="T:Microsoft.BI.Common.Logging.ILogFormatter"/>.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.Logging.ILogFormatter"/> to use when formatting objects of this type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.LogFormatterCollection.FindAndFormat(System.Object)">
            <summary>
            Finds the appropriate <see cref="T:Microsoft.BI.Common.Logging.ILogFormatter"/> for a message and formats it.
            </summary>
            <param name="message">The message to format.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.LogFormatterCollection.TryFind(System.Type,Microsoft.BI.Common.Logging.ILogFormatter@,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Recursively tries to find a matching formatter in the dictionary.
            </summary>
            <param name="type">The type to search for.</param>
            <param name="result">When this method returns, this will contain the search result if successful.</param>
            <param name="alreadyChecked">A collection of types that have already been checked.</param>
            <returns><c>true</c> if a match was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.ILogFormatter">
            <summary>
            Contains methods for formatting objects into strings for logging.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ILogFormatter.Format(System.Object)">
            <summary>
            Formats an object as a string.
            </summary>
            <param name="message">The object to format.</param>
            <returns>The string representation of <paramref name="message"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.ObjectLogFormatter">
            <summary>
            Contains the default implementation for <see cref="T:Microsoft.BI.Common.Logging.ILogFormatter"/>, which is to simply call <see cref="M:System.Object.ToString"/>
            on the message.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.ObjectLogFormatter.Format(System.Object)">
            <summary>
            Formats an object as a string.
            </summary>
            <param name="message">The object to format.</param>
            <returns>The string representation of <paramref name="message"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.Logger">
            <summary>
            Provides a base class for implementations of the <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.Logger.LogLevels">
            <summary>
            Gets a <see cref="P:Microsoft.BI.Common.Logging.Logger.LogLevels"/> value indicating which log levels are enabled for the <see cref="T:Microsoft.BI.Common.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.Logger.LogFormatters">
            <summary>
            Gets the mapping of <see cref="T:System.Type"/> to <see cref="T:Microsoft.BI.Common.Logging.ILogFormatter"/> objects that perform formatting of non-string log messages.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            When overridden in a derived class, appends the specified formatted log message to the log.
            </summary>
            <param name="level">The <see cref="P:Microsoft.BI.Common.Logging.Logger.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <remarks>
            <paramref name="level"/> has already been checked against the <see cref="P:Microsoft.BI.Common.Logging.Logger.LogLevels"/> value of the current instance.
            Implementers do not need to do the filtering themselves.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.#ctor(Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.Logger"/> class.
            </summary>
            <param name="logLevels">The <see cref="P:Microsoft.BI.Common.Logging.Logger.LogLevels"/> that this instance should log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Fatal(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Fatal(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Fatal(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Error(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Error(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Error(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Error(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Warn(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Warn(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Warn(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Warn(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Info(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Info(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Info(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Info(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Debug(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Debug(System.String)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Debug(System.String,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Debug(System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.FormatDefaultMessage(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Returns the default style for a log message that is fully formatted.
            </summary>
            <param name="level">The <see cref="P:Microsoft.BI.Common.Logging.Logger.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The string to log by default.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Dispose">
            <summary>
            Disposes all resources used by the <see cref="T:Microsoft.BI.Common.Logging.Logger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes all resources used by the <see cref="T:Microsoft.BI.Common.Logging.Logger"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose both managed and unmanaged resources; <c>false</c> to dispose
            unmanaged resources only.</param>
            <remarks>
            Subclasses that contain <see cref="T:System.IDisposable"/> members should override this method in order to dispose them.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.Logger.EscapeForStringFormat(System.String)">
            <summary>
            Prepare a string to be passed to <see cref="M:System.String.Format(System.String,System.Object)"/> by escaping the necessary character sequences.
            </summary>
            <param name="message">The message to escape.</param>
            <returns>The escaped message.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.LoggingConstants">
            <summary>
            Contains internal constants used for logging.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LoggingConstants.DateTimeFormat">
            <summary>
            The <see cref="T:System.DateTime"/> format used in log outputs.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.LogLevels">
            <summary>
            Contains values that represent the verbosity of log messages.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LogLevels.None">
            <summary>
            No specified verbosity.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LogLevels.Fatal">
            <summary>
            A fatal message.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LogLevels.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LogLevels.Warn">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LogLevels.Info">
            <summary>
            An info message.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LogLevels.Debug">
            <summary>
            A debug message.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.LogLevels.All">
            <summary>
            All verbosity levels.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.MemoryLogger">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> implementation that logs to in-memory collections.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger.FatalMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger.ErrorMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger.WarnMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger.InfoMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MemoryLogger.DebugMessages">
            <summary>
            Gets the collection of messages with <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MemoryLogger.#ctor(Microsoft.BI.Common.Logging.LogLevels)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.MemoryLogger"/> class.
            </summary>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MemoryLogger.Clear">
            <summary>
            Clears all message buffers.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MemoryLogger.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the specified formatted log message to the log.
            </summary>
            <param name="level">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.MultiLogger">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> implementation that logs to a collection of <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers">
            <summary>
            Gets the collection of <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> objects to which data is logged.
            </summary>
            <exception cref="T:System.ArgumentNullException">Calling <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> with an <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> that is <c>null</c>.</exception>
            <remarks>
            This collection does not allow <c>null</c> values.  Attempting to add a <c>null</c> value to the collection will throw an
            <see cref="T:System.ArgumentNullException"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.#ctor(System.Collections.Generic.IEnumerable{Microsoft.BI.Common.Logging.ILogger})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.MultiLogger"/> class.
            </summary>
            <param name="loggers">The <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> instances that should be logged to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="loggers"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="loggers"/> contains one or more values that are <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.#ctor(Microsoft.BI.Common.Logging.ILogger[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.MultiLogger"/> class.
            </summary>
            <param name="loggers">The <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> instances that should be logged to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="loggers"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="loggers"/> contains one or more values that are <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Fatal(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Fatal"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Error(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Error"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Warn(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Warn"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Info(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Info"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Debug(System.Object)">
            <summary>
            Logs a message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="message">The object containing the message to log.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the <see cref="F:Microsoft.BI.Common.Logging.LogLevels.Debug"/> level.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Microsoft.BI.Common.Logging.MultiLogger.Loggers"/> contains one or more <c>null</c> values.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the specified formatted log message to the log.
            </summary>
            <param name="level">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.MultiLogger.Dispose(System.Boolean)">
            <summary>
            Disposes all inner loggers used by the <see cref="T:Microsoft.BI.Common.Logging.MultiLogger"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose both managed and unmanaged resources; <c>false</c> to dispose
            unmanaged resources only.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.NullLogger">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> implementation that ignores all messages.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.NullLogger.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.NullLogger"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.NullLogger.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the specified formatted log message to the log.
            </summary>
            <param name="level">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Logging.StreamLogger">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Logging.ILogger"/> implementation that logs to a <see cref="T:System.IO.Stream"/> with an <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/>.
            </summary>
            <remarks>
            Users can optionally buffer the messages written to the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>.
            If messages are buffered, they are only flushed when the buffer is filled or when
            the next message to be written cannot fit in the buffer. Lines are fully written, though
            <see cref="M:Microsoft.BI.Common.Logging.StreamLogger.Flush"/> is not thread-safe.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.StreamLogger.AutoFlush">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> will flush its buffer to the underlying stream after every write.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.StreamLogger.BaseStream">
            <summary>
            Gets the underlying <see cref="T:System.IO.Stream"/> for this <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.StreamLogger.BufferSize">
            <summary>
            Gets the number of characters the buffer can fit before flushing,
            if <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.AutoFlush"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding">
            <summary>
            Gets the <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> in which the output is written.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Logging.StreamLogger.NewLine">
            <summary>
            Gets the new line character used by this <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.String,Microsoft.BI.Common.Logging.LogLevels,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="streamName">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <remarks>
            Default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> is UTF8.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.String,Microsoft.BI.Common.Logging.LogLevels,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="streamName">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="bufferSize">The size of the buffer before writing to the log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <remarks>
            Default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> is UTF8 and the default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.BufferSize"/> is 1024.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="bufferSize"/> cannot be negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.String,Microsoft.BI.Common.Logging.LogLevels,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="streamName">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> for messages written to the log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <remarks>
            Default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.BufferSize"/> is 1024.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.String,Microsoft.BI.Common.Logging.LogLevels,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="streamName">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> for messages written to the log.</param>
            <param name="bufferSize">The size of the buffer before writing to the log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="bufferSize"/> cannot be negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.IO.Stream,Microsoft.BI.Common.Logging.LogLevels,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="stream">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <remarks>
            Default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> is UTF8 and default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.BufferSize"/> is 1024.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.IO.Stream,Microsoft.BI.Common.Logging.LogLevels,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="stream">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="bufferSize">The size of the buffer before writing to the log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <remarks>
            Default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> is UTF8.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="bufferSize"/> cannot be negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.IO.Stream,Microsoft.BI.Common.Logging.LogLevels,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="stream">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> for messages written to the log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <remarks>
            Default <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.BufferSize"/> is 1024.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.#ctor(System.IO.Stream,Microsoft.BI.Common.Logging.LogLevels,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/> class.
            </summary>
            <param name="stream">The stream to which to write the data.</param>
            <param name="logLevels">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> that this instance should log.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Logging.StreamLogger.Encoding"/> for messages written to the log.</param>
            <param name="bufferSize">The size of the buffer before writing to the log.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>
            object is disposed; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="bufferSize"/> cannot be negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.Append(Microsoft.BI.Common.Logging.LogLevels,System.DateTime,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Formats the message and adds a new line character before appending it to the log.
            </summary>
            <param name="level">The <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> of the message.</param>
            <param name="time">The <see cref="T:System.DateTime"/> when the log occurred.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <remarks>
            <paramref name="level"/> has already been checked against the <see cref="T:Microsoft.BI.Common.Logging.LogLevels"/> value of the current instance.
            Implementers do not need to do the filtering themselves.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.Flush">
            <summary>
            Flushes the current buffer, if any, to the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Logging.StreamLogger.Dispose(System.Boolean)">
            <summary>
            Disposes of the underlying stream used by the <see cref="T:Microsoft.BI.Common.Logging.StreamLogger"/>.
            </summary>
            <param name="disposing">Whether to dispose of managed resources.</param>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.StreamLogger._Writer">
            <summary>
            Underlying <see cref="T:System.IO.StreamWriter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.StreamLogger._CharsInBuffer">
            <summary>
            The number of characters already written to the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.StreamLogger.DEFAULT_BUFFER_SIZE">
            <summary>
            Default internal buffer size for <see cref="T:System.IO.StreamWriter"/> is 1024.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.StreamLogger.MINIMUM_BUFFER_SIZE">
            <summary>
            The minimum internal buffer size for <see cref="T:System.IO.StreamWriter"/> is 128.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Logging.StreamLogger.DEFAULT_ENCODING">
            <summary>
            Default UTF8 Encoding with no preamble/identifier written.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.CoreLookup">
            <summary>
            Base class that defines common code for hash-based <see cref="T:Microsoft.BI.Common.Lookup"/> classes.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CoreLookup.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CoreLookup.Schema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> representing the lookup schema.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CoreLookup.DataCompression">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.CoreLookup.DataCompression"/> of the underlying file read by the <see cref="T:Microsoft.BI.Common.CoreLookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CoreLookup.DataFormat">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.CoreLookup.DataFormat"/> of the underlying file read by the <see cref="T:Microsoft.BI.Common.CoreLookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CoreLookup.IsKey">
            <summary>
            Map of whether a given index is a key.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CoreLookup.Keys">
            <summary>
            Gets or sets an array of strings that indicate the names of the primary key columns of the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.CoreLookup.Values">
            <summary>
            Gets the list of non-primary key columns of the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.CoreLookup.Load(System.String)">
            <summary>
            When overridden in a derived class, loads the data stored in the specified file path into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CoreLookup.Load(System.IO.Stream)">
            <summary>
            When overridden in a derived class, loads the data stored in the specified stream into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CoreLookup.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            When overridden in a derived class, loads the data stored in the specified stream into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="reader">The reader to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.CoreLookup.SetPrimaryKeyFromSchema">
            <summary>
            Sets the lookup's primary key based on the content of the schema.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.DynamicLookupBase`2">
            <summary>
            Default implementation for dynamically generated lookups.
            </summary>
            <typeparam name="TKey">The type of the keys in the lookup.</typeparam>
            <typeparam name="TValue">The type of the values in the lookup.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DynamicLookupBase`2"/> class.
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.CheckKeyCount(System.Object[])">
            <summary>
            Ensure the specified key matches what the <see cref="T:Microsoft.BI.Common.DynamicLookupBase`2"/> is expecting.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.TryQuery``1(``0@,System.Object[])">
            <summary>
            Bad version of TryQuery has been used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.TryQuery``2(``0@,``1@,System.Object[])">
            <summary>
            Bad version of TryQuery has been used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.TryQuery``3(``0@,``1@,``2@,System.Object[])">
            <summary>
            Bad version of TryQuery has been used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.TryQuery``4(``0@,``1@,``2@,``3@,System.Object[])">
            <summary>
            Bad version of TryQuery has been used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.TryQuery``5(``0@,``1@,``2@,``3@,``4@,System.Object[])">
            <summary>
            Bad version of TryQuery has been used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBase`2.TryQuery``6(``0@,``1@,``2@,``3@,``4@,``5@,System.Object[])">
            <summary>
            Bad version of TryQuery has been used
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.BI.Common.DynamicLookupBuilder">
            <summary>
            Generates an implementation of <see cref="T:Microsoft.BI.Common.ILookup"/> using strongly-typed backing objects for storage.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBuilder.BuildLookupOfTKeyTValue(System.Data.DataTable)">
            <summary>
            Builds a class that implements <see cref="T:Microsoft.BI.Common.ILookup"/> and using a dynamically-generated <see cref="T:Microsoft.BI.Common.ILookup`2"/>
            to avoid unnecessary boxing.
            </summary>
            <param name="schema">The schema of the lookup to generate.</param>
            <returns>The generated lookup class.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBuilder.BuildLookupOfTKeyTValue(System.Data.DataTable,System.Collections.Generic.IDictionary{System.Tuple{System.Int32,System.String},System.Type},System.Collections.Generic.IDictionary{System.Tuple{System.Int32,System.String},System.Type},System.Boolean[])">
            <summary>
            Builds a class that implements <see cref="T:Microsoft.BI.Common.ILookup"/> and using a dynamically-generated <see cref="T:Microsoft.BI.Common.ILookup`2"/>
            to avoid unnecessary boxing.
            </summary>
            <param name="schema">The schema of the lookup to generate.</param>
            <param name="keyTupleSchema">The schema of the keys in the lookup.</param>
            <param name="valueTupleSchema">The schema of the values in the lookup.</param>
            <param name="keyCaseSensitivity">Whether or not each key column is case-sensitive.</param>
            <returns>The generated lookup class.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBuilder.BuildLookupOfTKeyTValue(System.Data.DataTable,System.Type,System.Type,System.Collections.Generic.List{System.Tuple{System.Int32,System.String}})">
            <summary>
            Builds a class that implements <see cref="T:Microsoft.BI.Common.ILookup"/> and using a dynamically-generated <see cref="T:Microsoft.BI.Common.ILookup`2"/>
            to avoid unnecessary boxing.
            </summary>
            <param name="schema">The schema of the lookup to generate.</param>
            <param name="keyType">The type of the keys in the lookup.</param>
            <param name="valueType">The type of the values in the lookup.</param>
            <param name="valueTupleSchema">The list of ordinals of the value columns and their names</param>
            <returns>The generated lookup class.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupBuilder.BuildTryQueryObjectArray(System.Type,System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            Builds the TryQuery(object[] args) method.
            </summary>
            <param name="keyType">The key type.</param>
            <param name="typeBuilder">The type builder.</param>
            <param name="baseTryQuery1Param">The TryQuery method of the base class.</param>
        </member>
        <member name="T:Microsoft.BI.Common.DynamicLookupFactory">
            <summary>
            Helper class for creating lookups matching a few common patterns.
            </summary>
            <remarks>
            Lookup instances created via this factory are dynamicaly generated based on their schema.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DynamicLookupFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupFactory.CreateLookup(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup"/> based on the specified DSV table.
            </summary>
            <param name="dsv">The path to the DSV to load.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupFactory.CreateLookup(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup"/> based on the specified DSV table.
            </summary>
            <param name="dsvs">An enumerable collection of DSV files.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupFactory.CreateLookup(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup"/> based on the specified schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in <paramref name="schema"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupTupleBuilder.BuildDynamicKeyTupleType(System.String,System.Collections.Generic.IDictionary{System.Tuple{System.Int32,System.String},System.Type},System.Boolean[])">
            <summary>
            Builds a dynamic key tuple type based on the supplied (index, type) pairs.
            </summary>
            <param name="lookupName">The unique identifier of the lookup associated with this tuple.</param>
            <param name="inputs">A mapping from index to type in the object[] params constructor.</param>
            <param name="isCaseSensitive"></param>
            <returns>The generated type.</returns>
            <exception cref="T:System.ArgumentException">There already exists a generated type with name <paramref name="lookupName"/>, but
            its schema does not match the schema specified by <paramref name="inputs"/>.</exception>
            <remarks>
            Additional interface methods will be implemented in order to support using the generated type as a
            key in an <see cref="T:Microsoft.BI.Common.ILookup`2"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupTupleBuilder.BuildDynamicValueTupleType(System.String,System.Collections.Generic.IDictionary{System.Tuple{System.Int32,System.String},System.Type})">
            <summary>
            Builds a dynamic type based on the supplied (index, type) pairs.
            </summary>
            <param name="lookupName">The unique identifier of the lookup associated with this tuple.</param>
            <param name="inputs">A mapping from index to type in the object[] params constructor.</param>
            <returns>The generated type.</returns>
            <exception cref="T:System.ArgumentException">There already exists a generated type with name <paramref name="lookupName"/>, but
            its schema does not match the schema specified by <paramref name="inputs"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupTupleBuilder.BuildTupleConstructorArray(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.Dictionary{System.Int32,System.Reflection.Emit.FieldBuilder},System.Boolean)">
            <summary>
            Builds a constructor that accepts object[].
            </summary>
            <param name="type">The type builder.</param>
            <param name="fields">The fields of current type.</param>
            <param name="specialValueNullChecking">Whether to enable the <c>CheckForNull</c> call for null values that uses different defaults.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupTupleBuilder.BuildEqualsMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.MethodBuilder)">
            <summary>
            Builds the Equals(object other) method.
            </summary>
            <param name="type">The type builder.</param>
            <param name="strongEqualsMethod">The Equals(T other) method.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupTupleBuilder.BuildEqualsOfT(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.Dictionary{System.Int32,System.Reflection.Emit.FieldBuilder},System.Boolean[])">
            <summary>
            Emits the Equals(T other) method.
            </summary>
            <param name="type">The type builder.</param>
            <param name="fields">The fields of current type.</param>
            <param name="isCaseSensitive">Whether each column should be treated as case sensitive if it is a string.</param>
            <returns>The constructed method.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupTupleBuilder.BuildGetHashCode(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.Dictionary{System.Int32,System.Reflection.Emit.FieldBuilder},System.Boolean[])">
            <summary>
            Emits the GetHashCode() method.
            </summary>
            <param name="type">The type builder.</param>
            <param name="fields">The fields of current Type.</param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Microsoft.BI.Common.DynamicLookupTupleBuilder.EmitToString(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.Dictionary{System.Int32,System.Reflection.Emit.FieldBuilder})">
            <summary>
            Emits the <c>ToString</c> method.
            </summary>
            <param name="type">The type builder.</param>
            <param name="fields">The fields of current type.</param>
        </member>
        <member name="T:Microsoft.BI.Common.DataNotLoadedException">
            <summary>
            The exception that is thrown when attempting to perform an operation when data has not yet been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DataNotLoadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DataNotLoadedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.BI.Common.SchemaMismatchException">
            <summary>
            The exception that is thrown when there is a schema mismatch between the provided schema and the actual data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SchemaMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.SchemaMismatchException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.BI.Common.LookupLoadException">
            <summary>
            The exception that is thrown by a <see cref="T:Microsoft.BI.Common.Lookup"/> when data could not be loaded for any reason.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.LookupLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.LookupLoadException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.BI.Common.ILookup">
            <summary>
            An interface describing a class that can perform lookups on keys in order to find matching values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ILookup.Keys">
            <summary>
            Gets or sets an array of strings that indicate the names of the primary key columns of the <see cref="T:Microsoft.BI.Common.ILookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ILookup.DataFormat">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.ILookup.DataFormat"/> of the underlying file read by the <see cref="T:Microsoft.BI.Common.ILookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ILookup.DataCompression">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.ILookup.DataCompression"/> of the underlying file read by the <see cref="T:Microsoft.BI.Common.ILookup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.Load(System.String)">
            <summary>
            Loads the data stored in the specified file path into the <see cref="T:Microsoft.BI.Common.ILookup"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.Load(System.IO.Stream)">
            <summary>
            Loads the data stored in the specified stream into the <see cref="T:Microsoft.BI.Common.ILookup"/>.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.Query(System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>An object array containing the result of the lookup, or null if the specified key was not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery(System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery``1(``0@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery``2(``0@,``1@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery``3(``0@,``1@,``2@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery``4(``0@,``1@,``2@,``3@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery``5(``0@,``1@,``2@,``3@,``4@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <typeparam name="T5">The type of the fifth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="value5">The value in which to store the fifth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery``6(``0@,``1@,``2@,``3@,``4@,``5@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <typeparam name="T5">The type of the fifth value to return.</typeparam>
            <typeparam name="T6">The type of the sixth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="value5">The value in which to store the fifth non-key returned by the lookup.</param>
            <param name="value6">The value in which to store the sixth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup.TryQuery(System.Object[]@,System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="result">The object array in which to store the result of the lookup.</param>
            <param name="values">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ILookupEntry">
            <summary>
            Interface for entries in a lookup table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ILookupEntry.Items">
            <summary>
            Gets an array of the items in the lookup entry.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.CopyTo``1(``0@)">
            <summary>
            Copies the first value in the lookup entry to the specified variable.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <param name="value1">When this method returns, this variable will contain the entry's first value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.CopyTo``2(``0@,``1@)">
            <summary>
            Copies the first and second values in the lookup entry to the specified variable.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="value1">When this method returns, this variable will contain the entry's first value.</param>
            <param name="value2">When this method returns, this variable will contain the entry's second value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.CopyTo``3(``0@,``1@,``2@)">
            <summary>
            Copies the first, second, and third values in the lookup entry to the specified variable.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="value1">When this method returns, this variable will contain the entry's first value.</param>
            <param name="value2">When this method returns, this variable will contain the entry's second value.</param>
            <param name="value3">When this method returns, this variable will contain the entry's third  value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.CopyTo``4(``0@,``1@,``2@,``3@)">
            <summary>
            Copies the first, second, third, and fourth values in the lookup entry to the specified variable.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="value1">When this method returns, this variable will contain the entry's first value.</param>
            <param name="value2">When this method returns, this variable will contain the entry's second value.</param>
            <param name="value3">When this method returns, this variable will contain the entry's third value.</param>
            <param name="value4">When this method returns, this variable will contain the entry's fourth value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.CopyTo``5(``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Copies the first, second, third, fourth, and fifth values in the lookup entry to the specified variable.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fourth value.</typeparam>
            <param name="value1">When this method returns, this variable will contain the entry's first value.</param>
            <param name="value2">When this method returns, this variable will contain the entry's second value.</param>
            <param name="value3">When this method returns, this variable will contain the entry's third value.</param>
            <param name="value4">When this method returns, this variable will contain the entry's fourth value.</param>
            <param name="value5">When this method returns, this variable will contain the entry's fifth value.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.MatchesKey(System.Object[])">
            <summary>
            Returns a value indicating whether the specified key matches the key values in the lookup entry.
            </summary>
            <param name="key">The key values to check.</param>
            <returns><c>true</c> if <paramref name="key"/> contains objects whose type and value exactly match those of
            the lookup entry; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.MatchesKey(Microsoft.BI.Common.ILookupEntry)">
            <summary>
            Returns a value indicating whether the specified key matches the eky values in the lookup entry.
            </summary>
            <param name="key">An <see cref="T:Microsoft.BI.Common.ILookupEntry"/> with which to compare keys.</param>
            <returns><c>true</c> if <paramref name="key"/>'s values exactly match those of the lookup entry; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupEntry.GetHash">
            <summary>
            Gets a hash code for the current instance.
            </summary>
            <returns>A hash code for the instance.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ILookupFactory">
            <summary>
            Describes an interface for a factory that creates <see cref="T:Microsoft.BI.Common.ILookup"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupFactory.CreateLookup(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.ILookup"/> from the schema in the specified DSV file with the specified table name.
            </summary>
            <param name="dsv">The path to a DSV file containing the lookup schema.</param>
            <param name="tableName">The name of the table in the DSV.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.ILookup"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupFactory.CreateLookup(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.ILookup"/> from the schema in the specified DSV files with the specified table name.
            </summary>
            <param name="dsvs">The path to one or more DSV files containing the lookup schema.</param>
            <param name="tableName">The name of the table in the DSV.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.ILookup"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupFactory.CreateLookup(System.Data.DataTable)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.ILookup"/> from the specified schema.
            </summary>
            <param name="schema">A <see cref="T:System.Data.DataTable"/> containing the schema of the lookup.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.ILookup"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupFactory.CreateLookup``2(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.ILookup`2"/> from the schema in the specified DSV file with the specified table name.
            </summary>
            <param name="dsv">The path to a DSV file containing the lookup schema.</param>
            <param name="tableName">The name of the table in the DSV.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.ILookup`2"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupFactory.CreateLookup``2(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.ILookup`2"/> from the schema in the specified DSV files with the specified table name.
            </summary>
            <param name="dsvs">The path to one or more DSV files containing the lookup schema.</param>
            <param name="tableName">The name of the table in the DSV.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.ILookup`2"/> instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookupFactory.CreateLookup``2(System.Data.DataTable)">
            <summary>
            Creates an <see cref="T:Microsoft.BI.Common.ILookup`2"/> from the specified schema.
            </summary>
            <param name="schema">A <see cref="T:System.Data.DataTable"/> containing the schema of the lookup.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.ILookup`2"/> instance.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.ILookup`2">
            <summary>
            An interface defining a lookup between a key and value.
            </summary>
            <typeparam name="TKey">The type of the key in the lookup.</typeparam>
            <typeparam name="TValue">The type of the value in the lookup.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value into the <see cref="T:Microsoft.BI.Common.ILookup`2"/>.
            </summary>
            <param name="key">The key of the data to add.</param>
            <param name="value">The value of the data to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup`2.Load(System.String)">
            <summary>
            Loads the data stored in the specified file path into the <see cref="T:Microsoft.BI.Common.ILookup`2"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup`2.Load(System.IO.Stream)">
            <summary>
            Loads the data stored in the specified stream into the <see cref="T:Microsoft.BI.Common.ILookup`2"/>.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup`2.TryQuery(`0)">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The key for which to search.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ILookup`2.TryQuery(`0,`1@)">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The key for which to search for a value.</param>
            <param name="value">The value found for the given key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IMasterLookup">
            <summary>
            An interface describing a class that can perform lookups on keys in order to find matching values.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IMasterLookup.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.IMasterLookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IMasterLookup.Schema">
            <summary>
            Gets the schema of the <see cref="T:Microsoft.BI.Common.IMasterLookup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IMasterLookup.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Loads the data stored in the specified stream into the <see cref="T:Microsoft.BI.Common.IMasterLookup"/>.
            </summary>
            <param name="reader">The reader to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IMasterLookup.Add(System.Object[])">
            <summary>
            Adds the data from an object array into the <see cref="T:Microsoft.BI.Common.IMasterLookup"/>.
            </summary>
            <param name="data">The objects to be loaded into the lookup.</param>
            <remarks>
            Data added in this way may not be queryable until <see cref="M:Microsoft.BI.Common.IMasterLookup.Commit"/> is called.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.IMasterLookup.Commit"/>
        </member>
        <member name="M:Microsoft.BI.Common.IMasterLookup.Commit">
            <summary>
            Commits the current read buffer to the <see cref="T:Microsoft.BI.Common.IMasterLookup"/>, allowing them to be queried.
            </summary>
            <seealso cref="M:Microsoft.BI.Common.IMasterLookup.Add(System.Object[])"/>
        </member>
        <member name="T:Microsoft.BI.Common.Lookup">
            <summary>
            Allows fast querying of data by primary key.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Lookup.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Lookup.Keys">
            <summary>
            Gets or sets an array of strings that indicate the names of the primary key columns of the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Lookup.IsLoaded">
            <summary>
            Gets whether the <see cref="T:Microsoft.BI.Common.Lookup"/> has been loaded or not.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.#ctor">
            <summary>
            Creates a new lookup instance with an empty schema.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.#ctor(System.String,System.String)">
            <summary>
            Creates a new lookup instance, reading its schema from the specified DSV table.
            </summary>
            <param name="dsvFile">The DSV containing the schema definition.</param>
            <param name="tableName">The name of the schema table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new lookup instance, reading its schema from the specified DSV tables.
            </summary>
            <param name="dsvFiles">The set of DSVs containing the schema definition.</param>
            <param name="tableName">The name of the schema table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.#ctor(System.Data.DataTable)">
            <summary>
            Create a new lookup instance using the specifed schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="schema"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Clear">
            <summary>
            Clears any previously-loaded data and resets the <see cref="T:Microsoft.BI.Common.Lookup"/> to its initial state.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.LoadSchema(System.String,System.String)">
            <summary>
            Load the lookup schema from a DSV file.
            </summary>
            <param name="dsvFile">The DSV file containing the schema.</param>
            <param name="tableName">The name of the table in the dsvFile.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.LoadSchema(System.Data.DataTable)">
            <summary>
            Load the lookup schema from the specified DataTable.
            </summary>
            <param name="schema">The DataTable containing the schema to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Load(System.String)">
            <summary>
            Load the data stored in the specified file path into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Load(System.IO.Stream)">
            <summary>
            Load the data stored in the specified stream into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load the data stored in the specified files into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="paths">An enumerable collection of strings containing the set of files to load.</param>
            <remarks>It is generally faster to use this method to load a set of files all at once
            rather than to individually call <see cref="M:Microsoft.BI.Common.Lookup.Load(System.String)"/> on each file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Load(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Load the data stored in the specified streams into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="streams">An enumerable collection of <see cref="T:System.IO.Stream"/> objects to load.</param>
            <remarks>It is generally faster to use this method to load a set of files all at once
            rather than to individually call <see cref="M:Microsoft.BI.Common.Lookup.Load(System.IO.Stream)"/> on each file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Loads data from the specified <see cref="T:Microsoft.BI.Common.IO.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> from which
            to load data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            Adds the data from an object array into the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <param name="row">The objects to be loaded into the lookup.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            Commits the current read buffer to the <see cref="T:Microsoft.BI.Common.IMasterLookup"/>, allowing them to be queried.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.InternalLoad(System.IO.Stream)">
            <summary>
            Loads data into the internal buffer of the <see cref="T:Microsoft.BI.Common.Lookup"/> but does not perform any hashing.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.InternalLoad(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Loads data into the internal buffer of the <see cref="T:Microsoft.BI.Common.Lookup"/> but does not perform any hashing.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.AddOrUpdate">
            <summary>
            Checks if key already exists in <see cref="F:Microsoft.BI.Common.Lookup.Data"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.CreateHashTable">
            <summary>
            Creates a hash table out of the contents of <see cref="F:Microsoft.BI.Common.Lookup.Data"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.EnsureHashSize(System.UInt32)">
            <summary>
            Ensure that the internal hash table is large enough to contain <paramref name="size"/> items.
            </summary>
            <param name="size">The number of items to ensure.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.EnsureHashSizeAndDidSizeIncrease(System.UInt32)">
            <summary>
            Ensure that the internal hash table is large enough to contain <paramref name="size"/> items.
            </summary>
            <param name="size">The number of items to ensure.</param>
            <returns><c>true</c> if HashSize is adjusted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.GetHash(System.Object[],System.Boolean[],System.UInt32)">
            <summary>
            Computes the hash of the specified set of keys.
            </summary>
            <param name="keys">The keys to compute the hash of.</param>
            <param name="keyMask">A boolean array indicating the keys.</param>
            <param name="hash">The current hash value.</param>
            <returns>The hash of the keys.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.ConvertToKeyType(System.Object,System.Int32)">
            <summary>
            Converts the specified value to the type of the column at the given index.
            </summary>
            <param name="o">The object to convert.</param>
            <param name="i">The key index of the column this object belongs to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.HashLookup(System.Object[]@,System.Object[])">
            <summary>
            Look up a value based on the hash of its key values.
            </summary>
            <param name="result">If the lookup succeeds, this will contain the complete row in the <see cref="T:Microsoft.BI.Common.Lookup"/>
            that matched <paramref name="key"/>; otherwise, it will contain null.</param>
            <param name="key">The set of key values to look up with.</param>
            <returns>true if a matching row was found; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.ProbeHash(System.Object[],System.Boolean[],System.UInt32@,System.UInt32@)">
            <summary>
            Probes the hash for an item matching the specified delta and key.
            </summary>
            <param name="row">The row containing the key to probe for.</param>
            <param name="mask">The mask to use when comparing rows.</param>
            <param name="hash">The final hash, after probing.</param>
            <param name="hashPosition">The final hash position, after probing.</param>
            <returns>true if a matching row was found; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.CompareArrays(System.Object[],System.Object[],System.Boolean[])">
            <summary>
            Compares two object arrays of the same length to see if they contain the same values.
            </summary>
            <param name="r1">The first object array (key).</param>
            <param name="r2">The second object array (object array).</param>
            <param name="mask">A mask containing which items from <paramref name="r1"/> to compare.</param>
            <returns>true if the keys in <paramref name="r1"/> and <paramref name="r2"/> are all equal; otherwise,
            false.</returns>
            <remarks>If the length of <paramref name="r1"/> and <paramref name="r2"/> are not equal, the behavior
            of this method is undefined.  Similarly, if <paramref name="mask"/> is provided and of different length
            than <paramref name="r1"/> or <paramref name="r2"/>, the behavior is also undefined.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.NextHash(System.UInt32@,System.UInt32)">
            <summary>
            Gets the next hash value in the event that the current hash position is already filled.
            </summary>
            <param name="hashPosition">The current hash position.</param>
            <param name="probeCount">The number of times probed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.SetHashFilled(System.UInt32)">
            <summary>
            Marks a hash value as being filled.
            </summary>
            <param name="position">The position to mark.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.IsHashFilled(System.UInt32)">
            <summary>
            Returns whether the hash is filled at the given position.
            </summary>
            <param name="position">The position to check.</param>
            <returns>true if the hash is filled at this value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Query(System.Object[])">
            <summary>
            Perform a lookup on the specified key.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>An object array containing the result of the lookup, or null if the specified key was not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.InternalQuery(System.Object[])">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>A DataRow containing the result of the lookup, or null if the specified key was not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery(System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery``1(``0@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery``2(``0@,``1@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery``3(``0@,``1@,``2@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery``4(``0@,``1@,``2@,``3@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery``5(``0@,``1@,``2@,``3@,``4@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <typeparam name="T5">The type of the fifth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="value5">The value in which to store the fifth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery``6(``0@,``1@,``2@,``3@,``4@,``5@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <typeparam name="T4">The type of the fourth value to return.</typeparam>
            <typeparam name="T5">The type of the fifth value to return.</typeparam>
            <typeparam name="T6">The type of the sixth value to return.</typeparam>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="value4">The value in which to store the fourth non-key returned by the lookup.</param>
            <param name="value5">The value in which to store the fifth non-key returned by the lookup.</param>
            <param name="value6">The value in which to store the sixth non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.TryQuery(System.Object[]@,System.Object[])">
            <summary>
            Try to look up the specified key.
            </summary>
            <param name="result">The object array in which to store the result of the lookup.</param>
            <param name="values">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Select">
            <summary>
            Returns all rows in the Lookup.
            </summary>
            <returns>An array of object arrays containing the entire contents of the Lookup.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.CheckKeyCount(System.Object[])">
            <summary>
            Ensure the specified key matches what the Lookup is expecting.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.CheckValueCount(System.Int32)">
            <summary>
            Ensure the Lookup provides at least as many requested values.
            </summary>
            <param name="count">The actual number of values.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Dispose">
            <summary>
            Disposes all instance resources.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.Dispose(System.Boolean)">
            <summary>
            Disposes of all instance resources.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup.ToString">
            <summary>
            Returns the list of files in the <see cref="T:Microsoft.BI.Common.Lookup"/>.
            </summary>
            <returns>A string containing the list of the files in the <see cref="T:Microsoft.BI.Common.Lookup"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Lookup.UInt32KVP">
            <summary>
            Simple struct for containing a (Hash,Index) KVP.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.LookupFactory">
            <summary>
            Helper class for creating lookups matching a few common patterns.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.LoadHourlyMultiLookup(Microsoft.BI.Common.MultiLookup{System.DateTime}@,System.String,System.DateTime,System.Int32)">
            <summary>
            Loads data into a <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> from an hourly mapfile.
            </summary>
            <param name="lookup">The <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> into which to load
            the data.</param>
            <param name="fileNamePattern">A format string describing the location of the files to load.</param>
            <param name="delta">The <see cref="T:System.DateTime"/> from which to start loading.</param>
            <param name="batchCount">The number of 1-hour batches to run.</param>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.LoadDailyMultiLookup(Microsoft.BI.Common.MultiLookup{System.DateTime}@,System.String,System.DateTime,System.Int32)">
            <summary>
            Loads data into a <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> from a daily mapfile.
            </summary>
            <param name="lookup">The <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> into which to load
            the data.</param>
            <param name="fileNamePattern">A format string describing the location of the files to load.</param>
            <param name="delta">The <see cref="T:System.DateTime"/> from which to start loading.</param>
            <param name="batchCount">The number of 1-hour batches to run.</param>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.LoadHourlyDeltaLookup(Microsoft.BI.Common.Lookup@,System.String,System.String,System.DateTime,System.Int32)">
            <summary>
            Loads data into a <see cref="T:Microsoft.BI.Common.Lookup"/> according to the delta lookup pattern.
            </summary>
            <param name="lookup">The <see cref="T:Microsoft.BI.Common.Lookup"/> into which to load data.</param>
            <param name="baseFileName">The name of the first (base) lookup file.</param>
            <param name="deltaFileNamePattern">The pattern of subsequent (delta) lookup files.</param>
            <param name="delta">The delta at which to start loading.</param>
            <param name="batchCount">The number of 1-hour batches to run.</param>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.LoadHourlyMultiDeltaLookup(Microsoft.BI.Common.MultiLookup{System.DateTime}@,System.String,System.String,System.DateTime,System.Int32)">
            <summary>
            Loads data into a <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> according to the delta
            lookup pattern.
            </summary>
            <param name="lookup">The <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> into which to load
            the data.</param>
            <param name="baseFileNamePattern">The pattern of the base lookup files.</param>
            <param name="deltaFileNamePattern">The pattern of the delta lookup files.</param>
            <param name="delta">The delta at which to start loading.</param>
            <param name="batchCount">The number of 1-hour batches to run.</param>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.CreateLookup(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup"/> based on the specified DSV table.
            </summary>
            <param name="dsv">The path to the DSV to load.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.CreateLookup(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup"/> based on the specified DSV table.
            </summary>
            <param name="dsvs">An enumerable collection of DSV files.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.CreateLookup(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup"/> based on the specified schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup"/> with the schema specified in <paramref name="schema"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.CreateLookup``2(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup`2"/> based on the specified DSV table.
            </summary>
            <param name="dsv">The path to the DSV to load.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup`2"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.CreateLookup``2(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup`2"/> based on the specified DSV table.
            </summary>
            <param name="dsvs">An enumerable collection of DSV files.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup`2"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.LookupFactory.CreateLookup``2(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Lookup`2"/> based on the specified schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Lookup`2"/> with the schema specified in <paramref name="schema"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Lookup`2">
            <summary>
            Allows fast querying of data by primary key. Strongly typed for faster performance.
            </summary>
            <typeparam name="TKey">The data type used as a key into the lookup.</typeparam>
            <typeparam name="TValue">The data type of the result of the lookup.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Lookup`2.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Lookup`2.IsLoaded">
            <summary>
            Gets whether the <see cref="T:Microsoft.BI.Common.Lookup`2"/> has been loaded or not.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Lookup`2.KeyCreator">
            <summary>
            Delegate method for creating keys from object[]
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Lookup`2.ValueCreator">
            <summary>
            Delegate method for creating values from object[]
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.#ctor(System.String,System.String)">
            <summary>
            Creates a new lookup instance, reading its schema from the specified DSV table.
            </summary>
            <param name="dsvFile">The DSV containing the schema definition.</param>
            <param name="tableName">The name of the schema table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new lookup instance, reading its schema from the specified DSV tables.
            </summary>
            <param name="dsvFiles">The set of DSVs containing the schema definition.</param>
            <param name="tableName">The name of the schema table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.#ctor(System.Data.DataTable)">
            <summary>
            Create a new lookup instance using the specifed schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="schema"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Clear">
            <summary>
            Clears any previously-loaded data and resets the <see cref="T:Microsoft.BI.Common.Lookup`2"/> to its initial state.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.LoadSchema(System.Data.DataTable)">
            <summary>
            Load the lookup schema from the specified DataTable.
            </summary>
            <param name="schema">The DataTable containing the schema to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Load(System.String)">
            <summary>
            Load the data stored in the specified file path into the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Load(System.IO.Stream)">
            <summary>
            Load the data stored in the specified stream into the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load the data stored in the specified files into the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
            <param name="paths">An enumerable collection of strings containing the set of files to load.</param>
            <remarks>It is generally faster to use this method to load a set of files all at once
            rather than to individually call <see cref="M:Microsoft.BI.Common.Lookup`2.Load(System.String)"/> on each file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Load(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Load the data stored in the specified streams into the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
            <param name="streams">An enumerable collection of <see cref="T:System.IO.Stream"/> objects to load.</param>
            <remarks>It is generally faster to use this method to load a set of files all at once
            rather than to individually call <see cref="M:Microsoft.BI.Common.Lookup`2.Load(System.IO.Stream)"/> on each file.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Loads data from the specified <see cref="T:Microsoft.BI.Common.IO.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> from which
            to load data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value into the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
            <param name="key">The key of the data to add.</param>
            <param name="value">The value of the data to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            Adds the data from an object array into the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
            <param name="row">The objects to be loaded into the lookup.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            Commits the current read buffer to the <see cref="T:Microsoft.BI.Common.Lookup`2"/>, allowing them to be queried.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.InternalLoad(System.IO.Stream)">
            <summary>
            Loads data into the internal buffer of the <see cref="T:Microsoft.BI.Common.Lookup`2"/> but does not perform any hashing.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.InternalLoad(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Loads data into the internal buffer of the <see cref="T:Microsoft.BI.Common.Lookup`2"/> but does not perform any hashing.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> to load data from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.AddOrUpdate">
            <summary>
            Checks if key already exists in <see cref="F:Microsoft.BI.Common.Lookup`2.KeyData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.CreateHashTable">
            <summary>
            Creates a hash table out of the contents of <see cref="F:Microsoft.BI.Common.Lookup`2.KeyData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.EnsureHashSize(System.UInt32)">
            <summary>
            Ensure that the internal hash table is large enough to contain <paramref name="size"/> items.
            </summary>
            <param name="size">The number of items to ensure.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.EnsureHashSizeAndDidSizeIncrease(System.UInt32)">
            <summary>
            Ensure that the internal hash table is large enough to contain <paramref name="size"/> items.
            </summary>
            <param name="size">The number of items to ensure.</param>
            <returns><c>true</c> if HashSize is adjusted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.ProbeHash(`0,System.Boolean[],System.UInt32@)">
            <summary>
            Probes the hash for an item matching the specified delta and key.
            </summary>
            <param name="key">The key to probe for.</param>
            <param name="mask">The mask to use when comparing rows.</param>
            <param name="hashPosition">The final hash position, after probing.</param>
            <returns><c>true</c> if a matching row was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.NextHash(System.UInt32@,System.UInt32)">
            <summary>
            Gets the next hash value in the event that the current hash position is already filled.
            </summary>
            <param name="hashPosition">The current hash position.</param>
            <param name="probeCount">The number of times probed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.SetHashFilled(System.UInt32)">
            <summary>
            Marks a hash value as being filled.
            </summary>
            <param name="position">The position to mark.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.IsHashFilled(System.UInt32)">
            <summary>
            Returns whether the hash is filled at the given position.
            </summary>
            <param name="position">The position to check.</param>
            <returns><c>true</c> if the hash is filled at this value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.IsHashFilled(System.UInt32[],System.UInt32)">
            <summary>
            Returns whether the hash is filled at the given position.
            </summary>
            <param name="filled">The current set of filled positions.</param>
            <param name="position">The position to check.</param>
            <returns><c>true</c> if the hash is filled at this value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.TryInternalQuery(`0,`1@)">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The set of objects to use as the lookup key.</param>
            <param name="value">When this method returns, contains the value stored at the specified key.</param>
            <returns><c>true</c> if the query was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.TryQuery(`0)">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The key for which to search.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.TryQuery(`0,`1@)">
            <summary>
            Performs a lookup on the specified key.
            </summary>
            <param name="key">The key for which to search for a value.</param>
            <param name="value">The value found for the given key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Dispose">
            <summary>
            Disposes all instance resources.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.Dispose(System.Boolean)">
            <summary>
            Disposes of all instance resources.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Lookup`2.ToString">
            <summary>
            Returns the list of files in the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.
            </summary>
            <returns>A string containing the list of the files in the <see cref="T:Microsoft.BI.Common.Lookup`2"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.MultiLookup`1">
            <summary>
            Allows fast querying of data across multiple <see cref="T:Microsoft.BI.Common.Lookup"/> objects by lookup key and primary key.
            </summary>
            <typeparam name="T">The type of the lookup index key.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.Lookups">
            <summary>
            The collection of <see cref="T:Microsoft.BI.Common.Lookup"/> objects stored in this <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.Schema">
            <summary>
            Gets or sets the schema of the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.DataCompression">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.MultiLookup`1.DataCompression"/> of files read by the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.DataFormat">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.MultiLookup`1.DataFormat"/> of files read by the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.Keys">
            <summary>
            Gets or sets an array of strings that indicate the names of the primary key columns of the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.Values">
            <summary>
            Gets the list of non-primary key columns of the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.MultiLookup`1.Item(`0)">
            <summary>
            Gets or sets the value of the lookup with the specified key.
            </summary>
            <param name="key">The key of the lookup to get or set.</param>
            <returns>The value of the lookup at the specified key.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> with an empty schema.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> with a schema loaded from the specified DSV with the
            specified name.
            </summary>
            <param name="dsvFile">The DSV file to read the schema from.</param>
            <param name="tableName">The name of the table to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.MultiLookup`1"/> with the specified schema.
            </summary>
            <param name="schema">The schema to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.LoadSchema(System.String,System.String)">
            <summary>
            Load the lookup schema from a DSV file.
            </summary>
            <param name="dsvFile">The DSV file containing the schema.</param>
            <param name="tableName">The name of the table in the dsvFile.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.LoadSchema(System.Data.DataTable)">
            <summary>
            Load the lookup schema from the specified <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="schema">The DataTable containing the schema to use.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.SetPrimaryKey">
            <summary>
            Validate and set the primary key of the internal Data DataTable.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.Load(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.String}})">
            <summary>
            Load the data stored in the specified file path into the Lookup object.
            </summary>
            <param name="items">An enumerable collection of lookup keys and the location to load them from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.Query(`0,System.Object[])">
            <summary>
            Perform a lookup on the specified key.
            </summary>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>An object array containing the result of the lookup, or null if the specified key was not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.TryQuery(`0,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.TryQuery``1(`0,``0@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.TryQuery``2(`0,``0@,``1@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.TryQuery``3(`0,``0@,``1@,``2@,System.Object[])">
            <summary>
            Try to look up on the specified key.
            </summary>
            <typeparam name="T1">The type of the first value to return.</typeparam>
            <typeparam name="T2">The type of the second value to return.</typeparam>
            <typeparam name="T3">The type of the third value to return.</typeparam>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <param name="value1">The value in which to store the first non-key returned by the lookup.</param>
            <param name="value2">The value in which to store the second non-key returned by the lookup.</param>
            <param name="value3">The value in which to store the third non-key returned by the lookup.</param>
            <param name="key">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.TryQuery(`0,System.Object[]@,System.Object[])">
            <summary>
            Try to look up the specified key.
            </summary>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <param name="result">The object array in which to store the result of the lookup.</param>
            <param name="values">The set of objects to use as the lookup key.</param>
            <returns>true if the lookup succeeded; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.Select(`0)">
            <summary>
            Returns all rows in the Lookup.
            </summary>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <returns>An array of object arrays containing the entire contents of the Lookup.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.Select(`0,System.String)">
            <summary>
            Find all rows that match the specified filter string.
            </summary>
            <param name="lookupKey">The key of the lookup in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</param>
            <param name="filter">The string to use as a filter.</param>
            <returns>An array of rows matching the filter statement.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.MultiLookup`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lookups in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.
            </summary>
            <returns>An enumerator that iterates through the lookups in the <see cref="T:Microsoft.BI.Common.MultiLookup`1"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.NullLookup">
            <summary>
            An <see cref="T:Microsoft.BI.Common.ILookup"/> implementation that does nothing.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.NullLookup.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.NullLookup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.NullLookup.Schema">
            <summary>
            Returns an empty <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.NullLookup.Keys">
            <summary>
            Returns an empty string array (when getting), or does nothing (when setting).
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.NullLookup.DataFormat">
            <summary>
            Gets the default <see cref="P:Microsoft.BI.Common.NullLookup.DataFormat"/> (when getting), or does nothing (when setting).
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.NullLookup.DataCompression">
            <summary>
            Gets the default <see cref="P:Microsoft.BI.Common.NullLookup.DataCompression"/> (when getting), or does nothing (when setting).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.Load(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path of the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.Load(System.IO.Stream)">
            <summary>
            Does nothing.
            </summary>
            <param name="stream">The stream to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Does nothing.
            </summary>
            <param name="reader">The reader to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="row">The row to read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.Query(System.Object[])">
            <summary>
            Returns an empty object array.
            </summary>
            <param name="key">The keys to look up.</param>
            <returns>An empty object array.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery(System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery``1(``0@,System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <param name="value1">The first value of the lookup.</param>
            <param name="key">The keys to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery``2(``0@,``1@,System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <param name="value1">The first value of the lookup.</param>
            <param name="value2">The second value of the lookup.</param>
            <param name="key">The keys to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery``3(``0@,``1@,``2@,System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <param name="value1">The first value of the lookup.</param>
            <param name="value2">The second value of the lookup.</param>
            <param name="value3">The third value of the lookup.</param>
            <param name="key">The keys to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery``4(``0@,``1@,``2@,``3@,System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the fourth result.</typeparam>
            <param name="value1">The first value of the lookup.</param>
            <param name="value2">The second value of the lookup.</param>
            <param name="value3">The third value of the lookup.</param>
            <param name="value4">The fourth value of the lookup.</param>
            <param name="key">The keys to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery``5(``0@,``1@,``2@,``3@,``4@,System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the fourth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <param name="value1">The first value of the lookup.</param>
            <param name="value2">The second value of the lookup.</param>
            <param name="value3">The third value of the lookup.</param>
            <param name="value4">The fourth value of the lookup.</param>
            <param name="value5">The fifth value of the lookup.</param>
            <param name="key">The keys to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery``6(``0@,``1@,``2@,``3@,``4@,``5@,System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the fourth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <param name="value1">The first value of the lookup.</param>
            <param name="value2">The second value of the lookup.</param>
            <param name="value3">The third value of the lookup.</param>
            <param name="value4">The fourth value of the lookup.</param>
            <param name="value5">The fifth value of the lookup.</param>
            <param name="value6">The sixth value of the lookup.</param>
            <param name="key">The keys to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup.TryQuery(System.Object[]@,System.Object[])">
            <summary>
            Returns a lookup failure.
            </summary>
            <param name="result">The object array containing the result of the lookup.</param>
            <param name="values">The keys to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.NullLookupFactory">
            <summary>
            An <see cref="T:Microsoft.BI.Common.ILookupFactory"/> implementation for creating <see cref="T:Microsoft.BI.Common.NullLookup"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookupFactory.CreateLookup(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.NullLookup"/> based on the specified DSV table.
            </summary>
            <param name="dsv">The path to the DSV to load.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.NullLookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookupFactory.CreateLookup(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.NullLookup"/> based on the specified DSV table.
            </summary>
            <param name="dsvs">An enumerable collection of DSV files.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.NullLookup"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookupFactory.CreateLookup(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.NullLookup"/> based on the specified schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.NullLookup"/> with the schema specified in <paramref name="schema"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookupFactory.CreateLookup``2(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.NullLookup`2"/> based on the specified DSV table.
            </summary>
            <param name="dsv">The path to the DSV to load.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.NullLookup`2"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookupFactory.CreateLookup``2(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.NullLookup`2"/> based on the specified DSV table.
            </summary>
            <param name="dsvs">An enumerable collection of DSV files.</param>
            <param name="tableName">The name of the DSV table.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.NullLookup`2"/> with the schema specified in the table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookupFactory.CreateLookup``2(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.NullLookup`2"/> based on the specified schema.
            </summary>
            <param name="schema">The schema of the lookup.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.NullLookup`2"/> with the schema specified in <paramref name="schema"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.NullLookup`2">
            <summary>
            An <see cref="T:Microsoft.BI.Common.ILookup`2"/> implementation that does nothing.
            </summary>
            <typeparam name="TKey">The type used as the key for the lookup.</typeparam>
            <typeparam name="TValue">The type used as the result value for the lookup.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.NullLookup`2.RecordCount">
            <summary>
            Gets the number of records in the <see cref="T:Microsoft.BI.Common.NullLookup`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.NullLookup`2.Schema">
            <summary>
            Gets the schema of the <see cref="T:Microsoft.BI.Common.NullLookup`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.Add(`0,`1)">
            <summary>
            Does nothing.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.Load(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="path">The path of the file to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.Load(System.IO.Stream)">
            <summary>
            Does nothing.
            </summary>
            <param name="stream">The stream to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.Load(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Does nothing.
            </summary>
            <param name="reader">The reader to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.Microsoft#BI#Common#IMasterLookup#Add(System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="row">The row to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.Microsoft#BI#Common#IMasterLookup#Commit">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.TryQuery(`0)">
            <summary>
            Returns a lookup failure.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.NullLookup`2.TryQuery(`0,`1@)">
            <summary>
            Returns a lookup failure.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The resulting value of the lookup. Will always be the default value.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Net.IPAddress">
            <summary>
            Provides an Internet Protocol (IP) address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.AddressFamily">
            <summary>
            Gets the address family of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet1">
            <summary>
            Gets the first hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet2">
            <summary>
            Gets the second hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet3">
            <summary>
            Gets the third hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet4">
            <summary>
            Gets the fourth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet5">
            <summary>
            Gets the fifth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet6">
            <summary>
            Gets the sixth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet7">
            <summary>
            Gets the seventh hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.Hextet8">
            <summary>
            Gets the eigth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.IsBroadcast">
            <summary>
            Gets whether the address is a broadcast address.
            </summary>
            <remarks>
            The broadcast address for IPv4 is <c>255.255.255.255</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.IsIPv4MappedToIPv6">
            <summary>
            Gets whether the IP address is an IPv4-mapped IPv6 address.
            </summary>
            <remarks>
            Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires
            the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped
            IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The
            IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6
            address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order
            96 bits hold the fixed prefix <c>0:0:0:0:0:FFFF</c>. The IPv4-mapped IPv6 address format is specified in
            RFC 4291. For more information, <seealso href="www.ietf.org/rfc/rfc4291.txt"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.IsLinkLocal">
            <summary>
            Gets whether the address is a link local address.
            </summary>
            <remarks>
            A link local address is an IPv6 address with a prefix of <c>0xfe80::/10</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.IsLoopback">
            <summary>
            Gets whether the address is a loopback address.
            </summary>
            <remarks>
            The loopback address for IPv4 is any address where the first octet is 127.  The loopback address for
            IPv6 is <c>::1</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.IsSiteLocal">
            <summary>
            Gets whether the address is a site local address.
            </summary>
            <remarks>
            A site local address is an IPv6 address with a prefix of <c>0xfec0::/10</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPAddress.IsTeredo">
            <summary>
            Gets whether the address is a Teredo address.
            </summary>
            <remarks>
            A teredo address is an IPv6 address with a prefix of <c>2001::/32</c>.  Teredo addresses can be returned
            through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure from the specified string.
            </summary>
            <param name="ip">The string from which to parse the address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IP address.</exception>
            <remarks>
            <paramref name="ip"/> can be any valid IPv4 or IPv6 address.  It may not include a port specification
            (:80), scope id (%12), or address prefix (/10).  If <paramref name="ip"/> is an IPv4 address,
            the resulting <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> will contain an IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure with the specified hextets.
            </summary>
            <param name="a">The value of the first hextet.</param>
            <param name="b">The value of the second hextet.</param>
            <param name="c">The value of the third hextet.</param>
            <param name="d">The value of the fourth hextet.</param>
            <param name="e">The value of the fifth hextet.</param>
            <param name="f">The value of the sixth hextet.</param>
            <param name="g">The value of the seventh hextet.</param>
            <param name="h">The value of the eighth hextet.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure where the specified octets of
            an IPv4 address will be used in an IPv4-mapped IPv6 address.
            </summary>
            <param name="a">The value of the first octet.</param>
            <param name="b">The value of the second octet.</param>
            <param name="c">The value of the third octet.</param>
            <param name="d">The value of the fourth octet.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure from the specified <see cref="T:System.Byte"/>
            array.
            </summary>
            <param name="bytes">The byte array value of the IP address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="bytes"/> is not either 4 or 16 bytes long.</exception>
            <remarks>
            If <paramref name="bytes"/> is 4 bytes long, the resulting <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> will be an
            IPv4-mapped IPv6 address.  If it is 16 bytes long, it will be an IPv6 address.  Otherwise, an
            <see cref="T:System.ArgumentException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure with the specified lower and
            upper byte values.
            </summary>
            <param name="lowerBytes">The value of the lower 8 bytes of the address.</param>
            <param name="upperBytes">The value of the upper 8 bytes of the address.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.#ctor(Microsoft.BI.Common.Net.IPv6Address)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure using the specified
            <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value as the underyling address.
            </summary>
            <param name="address">The underlying address.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.Equals(System.Object)">
            <summary>
            Gets a value that indicates whether the IP address is equal to another IP address.
            </summary>
            <param name="obj">The object with which to equate.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> value and has the same
            value as the current instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.Equals(Microsoft.BI.Common.Net.IPAddress)">
            <summary>
            Returns whether the IP address is equal to another IP address.
            </summary>
            <param name="other">The other IP address.</param>
            <returns><c>true</c> if the two IP addresses have the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.GetAddressBytes">
            <summary>
            Provides a copy of the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> as an array of bytes.
            </summary>
            <returns>A <see cref="T:System.Byte"/> array.</returns>
            <remarks>
            If the IP address is an IPv4-mapped IPv6 address, the resulting array will be 4 bytes long.
            Otherwise, the array will be 16 bytes long.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.GetHashCode">
            <summary>
            Gets a hash code for the IP address.
            </summary>
            <returns>A hash code for the IP address.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.ToString">
            <summary>
            Converts an IP address to its standard notation.
            </summary>
            <returns>A string that contains the IP address in IPv6 colon-hexidecimal notation or IPv4 dotted-quad
            notation, depending on the ip address type.</returns>
            <remarks>
            <para>
            The resulting string will have all hexadecimal characters in lower case.
            </para>
            <para>
            If the IP address contains one or more hextets with value 0, the longest adjacent set of 0 hextets will
            be replaced with the <c>::</c> compression indicator.  If two ranges have the same number of 0 values,
            the leftmost one will be replaced.
            </para>
            <para>
            If the IP address is an IPv4-mapped IPv6 address, the resulting string will be in dotted-quad notation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.Parse(System.String)">
            <summary>
            Converts an IP address string to an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> value.
            </summary>
            <param name="ip">A string that contains an IP address in dotted-quad notation for IPv4 or in 
            colon-hexadecimal notation for IPv6.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IP address.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.TryParse(System.String,Microsoft.BI.Common.Net.IPAddress@)">
            <summary>
            Converts an IP address string to an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> value.
            </summary>
            <param name="ip">A string that contains an IP address in dotted-quad notation for IPv4 or in
            colon-hexadecimal notation for IPv6.</param>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> value if successful;
            otherwise, contains the default value for an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.</param>
            <returns><c>true</c> if <paramref name="ip"/> is a valid IP address; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_Equality(Microsoft.BI.Common.Net.IPAddress,Microsoft.BI.Common.Net.IPAddress)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values are equal.
            </summary>
            <param name="ip1">The first value to compare.</param>
            <param name="ip2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="ip1"/> and <paramref name="ip2"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_Inequality(Microsoft.BI.Common.Net.IPAddress,Microsoft.BI.Common.Net.IPAddress)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values have different values.
            </summary>
            <param name="ip1">The first value to compare.</param>
            <param name="ip2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="ip1"/> and <paramref name="ip2"/> are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_BitwiseAnd(Microsoft.BI.Common.Net.IPAddress,Microsoft.BI.Common.Net.IPAddress)">
            <summary>
            Returns the bitwise-and of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to and.</param>
            <param name="ip2">The second value to and.</param>
            <returns>The result of the bitwise-and of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_BitwiseOr(Microsoft.BI.Common.Net.IPAddress,Microsoft.BI.Common.Net.IPAddress)">
            <summary>
            Returns the bitwise-or of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to or.</param>
            <param name="ip2">The second value to or.</param>
            <returns>The result of the bitwise-or of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_ExclusiveOr(Microsoft.BI.Common.Net.IPAddress,Microsoft.BI.Common.Net.IPAddress)">
            <summary>
            Returns the bitwise-xor of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to xor.</param>
            <param name="ip2">The second value to xor.</param>
            <returns>The result of the bitwise-xor of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_Explicit(Microsoft.BI.Common.Net.IPAddress)~Microsoft.BI.Common.Net.IPv4Address">
            <summary>
            Defines an explicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> to an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.</returns>
            <remarks>
            This conversion is a narrowing conversion that returns the lowest 4 bytes of the IP address, regardless
            of its type.  If the IP address is an IPv4-mapped IPv6 address, the conversion will return the equivalent
            address represented in IPv4.  If it is a normal IPv6 address, a new IPv4 address consisting of the lowest
            4 bytes of the original address is created.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_Explicit(Microsoft.BI.Common.Net.IPAddress)~Microsoft.BI.Common.Net.IPv6Address">
            <summary>
            Defines an explicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> to an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.</returns>
            <remarks>
            This conversion is essentially an identity conversion that returns an equivalent representation as an
            <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_Implicit(Microsoft.BI.Common.Net.IPAddress)~System.Net.IPAddress">
            <summary>
            Defines an implicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> to a BCL <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>A BCL <see cref="T:System.Net.IPAddress"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.</returns>
            <remarks>
            This conversion is essentially an identity conversion that returns an equivalent representation as a BCL
            <see cref="T:System.Net.IPAddress"/> for use when interoperating with libraries expecting the BCL type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddress.op_Implicit(System.Net.IPAddress)~Microsoft.BI.Common.Net.IPAddress">
            <summary>
            Defines an implicit conversion of a BCL <see cref="T:System.Net.IPAddress"/> to an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> that represents the converted BCL <see cref="T:System.Net.IPAddress"/>.</returns>
            <remarks>
            This conversion is essentially an identity conversion that returns an equivalent representation of a BCL
            <see cref="T:System.Net.IPAddress"/> for use when interoperating with libraries returning the BCL type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Net.IPAddressParser">
            <summary>
            Contains methods for parsing IPv4 and IPv6 addresses.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.ParseIPAddress(System.String)">
            <summary>
            Parses an IP address.
            </summary>
            <param name="ip">The IP address to parse.</param>
            <returns>The parsed IP address.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IP address.</exception>
            <remarks>
            This method parses an IP address in dotted-quad or colon-hexadecimal notation into an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure.
            The type of the underlying address depends on the format of the <paramref name="ip"/> column.  All (valid) dotted-quad
            addresses (X.Y.Z.Q) become IPv4-mapped IPv6 addresses.  All IPv4-mapped IPv6 addresses (::ffff.X.Y.Z.Q) remain IPv4-mapped
            IPv6 addresses.  All other colon-hexadecimal addresses become IPv6 addresses.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.TryParseIPAddress(System.String,Microsoft.BI.Common.Net.IPAddress@)">
            <summary>
            Parses an IP address.
            </summary>
            <param name="ip">The IP address to parse.</param>
            <param name="result">When this method returns, contains the parsed <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> value if successful, or
            the default value for an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> if unsuccesful.</param>
            <returns><c>true</c> if <paramref name="ip"/> was parsed successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            This method parses an IP address in dotted-quad or colon-hexadecimal notation into an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure.
            The type of the underlying address depends on the format of the <paramref name="ip"/> column.  All (valid) dotted-quad
            addresses (X.Y.Z.Q) become IPv4-mapped IPv6 addresses.  All IPv4-mapped IPv6 addresses (::ffff.X.Y.Z.Q) remain IPv4-mapped
            IPv6 addresses.  All other colon-hexadecimal addresses become IPv6 addresses.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.ParseIPv4Address(System.String)">
            <summary>
            Parses an IPv4 address.
            </summary>
            <param name="ip">The IP address to parse.</param>
            <returns>The parsed IPv4 address.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IP address.</exception>
            <remarks>
            This method parses an IP address in dotted-quad notation into an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> structure.  All (valid)
            dotted-quad addresses (X.Y.Z.Q) become IPv4 addresses.  This method will throw a <see cref="T:System.FormatException"/> if
            <paramref name="ip"/> represents an IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.TryParseIPv4Address(System.String,Microsoft.BI.Common.Net.IPv4Address@)">
            <summary>
            Parses an IPv4 address.
            </summary>
            <param name="ip">The IP address to parse.</param>
            <param name="result">When this method returns, contains the parsed <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> value if successful, or
            the default value for an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> if unsuccesful.</param>
            <returns><c>true</c> if <paramref name="ip"/> was parsed successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            This method parses an IP address in dotted-quad notation into an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> structure.  All (valid)
            dotted-quad addresses (X.Y.Z.Q) become IPv4 addresses.  This method will return false if <paramref name="ip"/>
            represents an IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.ParseIPv6Address(System.String)">
            <summary>
            Parses an IPv6 address.
            </summary>
            <param name="ip">The IP address to parse.</param>
            <returns>The parsed IPv6 address.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IP address.</exception>
            <remarks>
            This method parses an IP address in dotted-quad or colon-hexadecimal notation into an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>
            structure.  All (valid) dotted-quad addresses (X.Y.Z.Q) become IPv4-mapped IPv6 addresses.  All IPv4-mapped
            IPv6 addresses (::ffff.X.Y.Z.Q) remain IPv4-mapped IPv6 addresses.  All other colon-hexadecimal addresses become
            IPv6 addresses.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.TryParseIPv6Address(System.String,Microsoft.BI.Common.Net.IPv6Address@)">
            <summary>
            Parses an IPv6 address.
            </summary>
            <param name="ip">The IP address to parse.</param>
            <param name="result">When this method returns, contains the parsed <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value if successful, or
            the default value for an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> if unsuccesful.</param>
            <returns><c>true</c> if <paramref name="ip"/> was parsed successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            This method parses an IP address in dotted-quad or colon-hexadecimal notation into an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>
            structure.  All (valid) dotted-quad addresses (X.Y.Z.Q) become IPv4-mapped IPv6 addresses.  All IPv4-mapped
            IPv6 addresses (::ffff.X.Y.Z.Q) remain IPv4-mapped IPv6 addresses.  All other colon-hexadecimal addresses become
            IPv6 addresses.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.TryParse(System.Char*@,System.Byte*,System.Boolean@)">
            <summary>
            Parses an array of characters as an IP address.
            </summary>
            <param name="text">A pointer to the first character of an IP address.</param>
            <param name="address">A pointer to the first byte of an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure that will contain
            the parse result.</param>
            <param name="isIpV6">When this method returns, indicates whether the parsed IP address was IPv4 or IPv6.</param>
            <returns><c>true</c> if the parse was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.TryParseIPv4(System.Char*@,System.Byte*)">
            <summary>
            Parses an array of characters as an IPv4 address.
            </summary>
            <param name="text">A pointer to the first character of an IPv4 address.</param>
            <param name="address">A pointer to the first byte of an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure that will contain
            the parse result.</param>
            <returns><c>true</c> if the parse was succesful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.TryParseIPv6(System.Char*@,System.Byte*)">
            <summary>
            Parses an array of characters as an IPv6 address.
            </summary>
            <param name="text">A pointer to the first character of an IPv6 address.</param>
            <param name="address">A pointer to the first byte of an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> structure that will contain
            the parse result.</param>
            <returns><c>true</c> if the parse was succesful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.ParseInteger(System.Char*@)">
            <summary>
            Parses an array of characters as an integer value specified using decimal characters.
            </summary>
            <param name="text">A pointer to the first character in the integer value.</param>
            <returns>The resulting integer.</returns>
            <remarks>
            This method is faster than <c>NumberParser.ParseByte</c>, but less powerful.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.ParseHex(System.Char*@)">
            <summary>
            Parses an array of characters as an integer value specified using hexadecimal values (without a '0x' prefix).
            </summary>
            <param name="text">A pointer to the first character in the integer value.</param>
            <returns>The resulting integer.</returns>
            <remarks>
            This method is faster than <c>HexParser.ParseInt16</c>, but less powerful.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPAddressParser.strchr(System.Char*,System.Char,System.Int32)">
            <summary>
            Finds the first character with value <paramref name="value"/> at or after the specified character.
            </summary>
            <param name="text">A pointer to the character at which to start looking.</param>
            <param name="value">The character value to look for.</param>
            <param name="count">The maximum number of characters to examine.</param>
            <returns>A pointer to the character, if found; otherwise, <c>null</c>.</returns>
            <remarks>
            The character array pointed to by <paramref name="text"/> must be null-terminated.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Net.IPEndpoint">
            <summary>
            Provides an IP endpoint, which consists of an IP address and port.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> structure contains the host and local or remote port information needed by an
            application to connect to a service on a host. By combining the host's IP address and port number of a
            service, the <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> structure forms a connection point to a service.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPEndpoint.Address">
            <summary>
            Gets the IP address of the endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPEndpoint.AddressFamily">
            <summary>
            Gets the IP address family.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPEndpoint.Port">
            <summary>
            Gets the port number of the endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPEndpoint.#ctor(Microsoft.BI.Common.Net.IPAddress,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> structure with the specified IP address and
            port number.
            </summary>
            <param name="address">An <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.</param>
            <param name="port">The port number associated with <paramref name="address"/>, or 0 to specify any
            available port.  <paramref name="port"/> is in host order.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPEndpoint.Equals(System.Object)">
            <summary>
            Gets a value that indicates whether the endpoint is equal to another endpoint.
            </summary>
            <param name="obj">The object with which to equate.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> value and has the same
            value as the current instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPEndpoint.Equals(Microsoft.BI.Common.Net.IPEndpoint)">
            <summary>
            Returns whether the endpoint is equal to another endpoint.
            </summary>
            <param name="other">The other endpoint.</param>
            <returns><c>true</c> if the two endpoints have the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPEndpoint.GetHashCode">
            <summary>
            Gets a hash code for the endpoint.
            </summary>
            <returns>A hash code for the endpoint.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPEndpoint.ToString">
            <summary>
            Converts an endpoint to its standard notation.
            </summary>
            <returns>A string that contains the endpoint in IPv6 colon-hexidecimal notation or IPv4 dotted-quad
            notation, depending on the ip address type, plus the port.</returns>
            <remarks>
            <para>
            The IP address and port will be separated by a <c>':'</c> character.
            </para>
            <para>
            If the address family of <see cref="P:Microsoft.BI.Common.Net.IPEndpoint.Address"/> is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>,
            the address will be surrounded with <c>'['</c> and <c>']'</c> as a clear disambiguator between the hextets
            of the address and the port.
            </para>
            <para>
            The exact format of the IP address depends on its value.  See <see cref="M:Microsoft.BI.Common.Net.IPAddress.ToString"/> for more
            details.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPEndpoint.Parse(System.String)">
            <summary>
            Converts an endpoint string to an <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> value.
            </summary>
            <param name="s">A string that contains an IP address in dotted-quad notation for IPv4 or in 
            colon-hexadecimal notation for IPv6 plus an optional port.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not a valid IP endpoint.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPEndpoint.TryParse(System.String,Microsoft.BI.Common.Net.IPEndpoint@)">
            <summary>
            Converts an IP endpoint string to an <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> value.
            </summary>
            <param name="s">A string that contains an IP address in dotted-quad notation for IPv4 or in
            colon-hexadecimal notation for IPv6.</param>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/> value if successful;
            otherwise, contains the default value for an <see cref="T:Microsoft.BI.Common.Net.IPEndpoint"/>.</param>
            <returns><c>true</c> if <paramref name="s"/> is a valid endpoint; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Net.IPv4Address">
            <summary>
            Provides an Internet Protocol V4 (IPv4) address.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Net.IPv4Address.Any">
            <summary>
            Provides an IP address that indicates that the server must listen for client activity on all network
            interfaces.  This field is read-only.
            </summary>
            <remarks>
            <para>
            The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> method uses the <see cref="F:Microsoft.BI.Common.Net.IPv4Address.Any"/> field to indicate that a <see cref="T:System.Net.Sockets.Socket"/>
            instance must listen for client activity on all network interfaces.
            </para>
            <para>
            The <see cref="F:Microsoft.BI.Common.Net.IPv4Address.Any"/> field is equivalent to <c>0.0.0.0</c> in dotted-quad notation.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Net.IPv4Address.Broadcast">
            <summary>
            Provides the IP broadcast address.  This field is read-only.
            </summary>
            <remarks>
            The <see cref="F:Microsoft.BI.Common.Net.IPv4Address.Broadcast"/> field is equivalent to <c>255.255.255.255</c> in dotted-quad notation.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Net.IPv4Address.Loopback">
            <summary>
            Provides the IP loopback interface.  This field is read-only.
            </summary>
            <remarks>
            The <see cref="F:Microsoft.BI.Common.Net.IPv4Address.Loopback"/> field is equivalent to <c>127.0.0.1</c> in dotted-quad notation.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Net.IPv4Address.None">
            <summary>
            Provides an IP address that indicates that no network interface should be used.  This field is read-only.
            </summary>
            <remarks>
            <para>
            The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> method uses the <see cref="F:Microsoft.BI.Common.Net.IPv4Address.None"/> field to indicate that a <see cref="T:System.Net.Sockets.Socket"/>
            instance must not listen for for client activity.
            </para>
            <para>
            The <see cref="F:Microsoft.BI.Common.Net.IPv4Address.None"/> field is equivalent to <c>255.255.255.255</c> in dotted-quad notation.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.AddressFamily">
            <summary>
            Gets the address family of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.IsBroadcast">
            <summary>
            Gets whether the address is a broadcast address.
            </summary>
            <remarks>
            The broadcast address for IPv4 is <c>255.255.255.255</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.IsLinkLocal">
            <summary>
            Gets whether the address is a link local address.
            </summary>
            <remarks>
            IPv4 addresses cannot be link local.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.IsLoopback">
            <summary>
            Gets whether the address is a loopback address.
            </summary>
            <remarks>
            This property's value is <c>true</c> for any IP address of the form <c>127.X.Y.X</c> (where X, Y, and Z
            are in the range 0-255), not just <see cref="F:Microsoft.BI.Common.Net.IPv4Address.Loopback"/>.
            </remarks>
            <seealso cref="F:Microsoft.BI.Common.Net.IPv4Address.Loopback"/>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.IsMulticast">
            <summary>
            Gets whether the address is a multicast address.
            </summary>
            <remarks>
            IPv4 addresses cannot be multicast; instead, see <see cref="P:Microsoft.BI.Common.Net.IPv4Address.IsBroadcast"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.IsSiteLocal">
            <summary>
            Gets whether the address is a site local address.
            </summary>
            <remarks>
            IPv4 addresses cannot be site local.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.IsTeredo">
            <summary>
            Gets whether the address is a Teredo address.
            </summary>
            <remarks>
            IPv4 addresses cannot be Teredo.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.Octet1">
            <summary>
            Gets the first octet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.Octet2">
            <summary>
            Gets the second octet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.Octet3">
            <summary>
            Gets the third octet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv4Address.Octet4">
            <summary>
            Gets the fourth octet of the IP address.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> structure from the specified string.
            </summary>
            <param name="ip">The string from which to parse the address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IPv4 address.</exception>
            <remarks>
            <paramref name="ip"/> can be any valid IPv4.  It may not include a port specification
            (:80), scope id (%12), or address prefix (/10).  It also may not be an IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> structure with the specified hextets.
            </summary>
            <param name="a">The value of the first octet.</param>
            <param name="b">The value of the second octet.</param>
            <param name="c">The value of the third octet.</param>
            <param name="d">The value of the fourth octet.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> structure from the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="bytes">The byte array value of the IP address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="bytes"/> is not 4 bytes long.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.#ctor(System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> structure with the specified byte value.
            </summary>
            <param name="value">The value of the bytes of the address.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.FromBytes(System.Void*)">
            <summary>
            Reads an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> from the specified address.
            </summary>
            <remarks>
            This method performs no argument checking - it is the responsibility of the caller to do so as necessary.
            The address is expected to be stored as a big-endian value (e.g. the result of the <see cref="M:Microsoft.BI.Common.Net.IPv4Address.GetAddressBytes"/>
            method).
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.Equals(System.Object)">
            <summary>
            Gets a value that indicates whether the IP address is equal to another IP address.
            </summary>
            <param name="obj">The object with which to equate.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> value and has the same
            value as the current instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.Equals(Microsoft.BI.Common.Net.IPv4Address)">
            <summary>
            Returns whether the IP address is equal to another IP address.
            </summary>
            <param name="other">The other IP address.</param>
            <returns><c>true</c> if the two IP addresses have the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.GetAddressBytes">
            <summary>
            Provides a copy of the <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> as an array of bytes.
            </summary>
            <returns>A <see cref="T:System.Byte"/> array.</returns>
            <remarks>
            The array returned by this method is always 4 bytes long.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.GetHashCode">
            <summary>
            Gets a hash code for the IP address.
            </summary>
            <returns>A hash code for the IP address.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.ToString">
            <summary>
            Converts an IP address to its standard notation.
            </summary>
            <returns>A string that contains the IP address in IPv4 dotted-quad notation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.Parse(System.String)">
            <summary>
            Converts an IP address string to an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> value.
            </summary>
            <param name="ip">A string that contains an IP address in dotted-quad notation.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IPv4 address.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.TryParse(System.String,Microsoft.BI.Common.Net.IPv4Address@)">
            <summary>
            Converts an IP address string to an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> value.
            </summary>
            <param name="ip">A string that contains an IP address in dotted-quad notation.</param>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> value if successful;
            otherwise, contains the default value for an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/>.</param>
            <returns><c>true</c> if <paramref name="ip"/> is a valid IPv4 address; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_Equality(Microsoft.BI.Common.Net.IPv4Address,Microsoft.BI.Common.Net.IPv4Address)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values are equal.
            </summary>
            <param name="ip1">The first value to compare.</param>
            <param name="ip2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="ip1"/> and <paramref name="ip2"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_Inequality(Microsoft.BI.Common.Net.IPv4Address,Microsoft.BI.Common.Net.IPv4Address)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values have different values.
            </summary>
            <param name="ip1">The first value to compare.</param>
            <param name="ip2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="ip1"/> and <paramref name="ip2"/> are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_BitwiseAnd(Microsoft.BI.Common.Net.IPv4Address,Microsoft.BI.Common.Net.IPv4Address)">
            <summary>
            Returns the bitwise-and of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to and.</param>
            <param name="ip2">The second value to and.</param>
            <returns>The result of the bitwise-and of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_BitwiseOr(Microsoft.BI.Common.Net.IPv4Address,Microsoft.BI.Common.Net.IPv4Address)">
            <summary>
            Returns the bitwise-or of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to or.</param>
            <param name="ip2">The second value to or.</param>
            <returns>The result of the bitwise-or of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_ExclusiveOr(Microsoft.BI.Common.Net.IPv4Address,Microsoft.BI.Common.Net.IPv4Address)">
            <summary>
            Returns the bitwise-xor of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to xor.</param>
            <param name="ip2">The second value to xor.</param>
            <returns>The result of the bitwise-xor of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_Implicit(Microsoft.BI.Common.Net.IPv4Address)~Microsoft.BI.Common.Net.IPv6Address">
            <summary>
            Defines an implicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> to an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/>.</returns>
            <remarks>
            This conversion is a widening conversion that returns an equivalent representation as an
            <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_Implicit(Microsoft.BI.Common.Net.IPv4Address)~Microsoft.BI.Common.Net.IPAddress">
            <summary>
            Defines an implicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> to an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/>.</returns>
            <remarks>
            This conversion is a widening conversion that returns an equivalent representation as an
            <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv4Address.op_Implicit(Microsoft.BI.Common.Net.IPv4Address)~System.Net.IPAddress">
            <summary>
            Defines an implicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> to a BCL <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>A BCL <see cref="T:System.Net.IPAddress"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/>.</returns>
            <remarks>
            This conversion is a widening conversion that returns an equivalent representation as a BCL
            <see cref="T:System.Net.IPAddress"/> for use when interoperating with libraries expecting the BCL type.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Net.IPv6Address">
            <summary>
            Provides an Internet Protocol V6 (IPv6) address.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Net.IPv6Address.Any">
            <summary>
            Provides an IP address that indicates that the server must listen for client activity on all network
            interfaces.  This field is read-only.
            </summary>
            <remarks>
            <para>
            The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> method uses the <see cref="F:Microsoft.BI.Common.Net.IPv6Address.Any"/> field to indicate that a <see cref="T:System.Net.Sockets.Socket"/>
            instance must listen for client activity on all network interfaces.
            </para>
            <para>
            The <see cref="F:Microsoft.BI.Common.Net.IPv6Address.Any"/> field is equivalent to <c>0:0:0:0:0:0:0:0</c> in colon-hexadecimal notation, or
            <c>::</c> in compact notation.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Net.IPv6Address.Loopback">
            <summary>
            Provides the IP loopback interface.  This field is read-only.
            </summary>
            <remarks>
            The <see cref="F:Microsoft.BI.Common.Net.IPv6Address.Loopback"/> field is equivalent to <c>0:0:0:0:0:0:0:1</c> in colon-hexadecimal notation, or
            <c>::1</c> in compact notation.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Net.IPv6Address.None">
            <summary>
            Provides an IP address that indicates that no network interface should be used.  This field is read-only.
            </summary>
            <remarks>
            <para>
            The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> method uses the <see cref="F:Microsoft.BI.Common.Net.IPv6Address.None"/> field to indicate that a <see cref="T:System.Net.Sockets.Socket"/>
            instance must not listen for for client activity.
            </para>
            <para>
            The <see cref="F:Microsoft.BI.Common.Net.IPv6Address.None"/> field is equivalent to <c>0:0:0:0:0:0:0:0</c> in colon-hexadecimal notation, or
            <c>::0</c> in compact notation.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.AddressFamily">
            <summary>
            Gets the address family of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet1">
            <summary>
            Gets the first hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet2">
            <summary>
            Gets the second hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet3">
            <summary>
            Gets the third hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet4">
            <summary>
            Gets the fourth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet5">
            <summary>
            Gets the fifth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet6">
            <summary>
            Gets the sixth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet7">
            <summary>
            Gets the seventh hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.Hextet8">
            <summary>
            Gets the eighth hextet of the IP address.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.IsBroadcast">
            <summary>
            Gets whether the address is a broadcast address.
            </summary>
            <remarks>
            IPv6 addresses do not support broadcasting; instead, see <see cref="P:Microsoft.BI.Common.Net.IPv6Address.IsMulticast"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.IsIPv4MappedToIPv6">
            <summary>
            Gets whether the IP address is an IPv4-mapped IPv6 address.
            </summary>
            <remarks>
            Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires
            the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped
            IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The
            IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6
            address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order
            96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC
            4291. For more information, <seealso href="www.ietf.org/rfc/rfc4291.txt"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.IsLinkLocal">
            <summary>
            Gets whether the address is a link local address.
            </summary>
            <remarks>
            A link local address is an IPv6 address with a prefix of <c>0xfe80::/10</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.IsLoopback">
            <summary>
            Gets whether the address is a loopback address.
            </summary>
            <remarks>
            The loopback address for IPv6 is <c>::1</c>.
            </remarks>
            <seealso cref="F:Microsoft.BI.Common.Net.IPv6Address.Loopback"/>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.IsMulticast">
            <summary>
            Gets whether the address is a multicast global address.
            </summary>
            <remarks>
            A multicast global address is an IPv6 address with a prefix of <c>0xff00::/8</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.IsSiteLocal">
            <summary>
            Gets whether the address is a site local address.
            </summary>
            <remarks>
            A site local address is an IPv6 address with a prefix of <c>0xfec0::/10</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Net.IPv6Address.IsTeredo">
            <summary>
            Gets whether the address is a Teredo address.
            </summary>
            <remarks>
            A teredo address is an IPv6 address with a prefix of <c>2001::/32</c>.  Teredo addresses can be returned
            through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> structure from the specified string.
            </summary>
            <param name="ip">The string from which to parse the address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IP address.</exception>
            <remarks>
            <paramref name="ip"/> can be any valid IPv4 or IPv6 address.  It may not include a port specification
            (:80), scope id (%12), or address prefix (/10).  If <paramref name="ip"/> is an IPv4 address,
            the resulting <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> will be an IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> structure with the specified hextets.
            </summary>
            <param name="a">The value of the first hextet.</param>
            <param name="b">The value of the second hextet.</param>
            <param name="c">The value of the third hextet.</param>
            <param name="d">The value of the fourth hextet.</param>
            <param name="e">The value of the fifth hextet.</param>
            <param name="f">The value of the sixth hextet.</param>
            <param name="g">The value of the seventh hextet.</param>
            <param name="h">The value of the eighth hextet.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> structure where the specified octets of
            an IPv4 address will be used in an IPv4-mapped IPv6 address.
            </summary>
            <param name="a">The value of the first octet.</param>
            <param name="b">The value of the second octet.</param>
            <param name="c">The value of the third octet.</param>
            <param name="d">The value of the fourth octet.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> structure from the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="bytes">The byte array value of the IP address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="bytes"/> is not 16 bytes long.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> structure with the specified lower and
            upper byte values.
            </summary>
            <param name="lowerBytes">The value of the lower 8 bytes of the address.</param>
            <param name="upperBytes">The value of the upper 8 bytes of the address.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.FromBytes(System.Void*)">
            <summary>
            Reads an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> from the specified address.
            </summary>
            <remarks>
            This method performs no argument checking - it is the responsibility of the caller to do so as necessary.
            The address is expected to be stored as a big-endian value (e.g. the result of the <see cref="M:Microsoft.BI.Common.Net.IPv6Address.GetAddressBytes"/>
            method).
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.Equals(System.Object)">
            <summary>
            Gets a value that indicates whether the IP address is equal to another IP address.
            </summary>
            <param name="obj">The object with which to equate.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value and has the same
            value as the current instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.Equals(Microsoft.BI.Common.Net.IPv6Address)">
            <summary>
            Returns whether the IP address is equal to another IP address.
            </summary>
            <param name="other">The other IP address.</param>
            <returns><c>true</c> if the two IP addresses have the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.GetAddressBytes">
            <summary>
            Provides a copy of the <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> as an array of bytes.
            </summary>
            <returns>A <see cref="T:System.Byte"/> array.</returns>
            <remarks>
            The array returned by this method is always 16 bytes long, even if the underlying IP address is an
            IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.GetHashCode">
            <summary>
            Gets a hash code for the IP address.
            </summary>
            <returns>A hash code for the IP address.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.ToString">
            <summary>
            Converts an IP address to its standard notation.
            </summary>
            <returns>A string that contains the IP address in IPv6 colon-hexadecimal notation.</returns>
            <remarks>
            <para>
            The resulting string will have all hexadecimal characters in lower case.
            </para>
            <para>
            If the IP address contains one or more hextets with value 0, the longest adjacent set of 0 hextets will
            be replaced with the <c>::</c> compression indicator.  If two ranges have the same number of 0 values,
            the leftmost one will be replaced.
            </para>
            <para>
            If the IP address is an IPv4-mapped IPv6 address, the resulting string will be an IPv4 address prefixed
            by <c>::ffff:</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.Parse(System.String)">
            <summary>
            Converts an IP address string to an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value.
            </summary>
            <param name="ip">A string that contains an IP address in dotted-quad notation for IPv4 or in 
            colon-hexadecimal notation for IPv6.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ip"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="ip"/> is not a valid IP address.</exception>
            <remarks>
            This method also supports parsing IPv4 addresses into an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value.  In such
            cases, the resulting <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value will contain an IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.TryParse(System.String,Microsoft.BI.Common.Net.IPv6Address@)">
            <summary>
            Converts an IP address string to an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value.
            </summary>
            <param name="ip">A string that contains an IP address in dotted-quad notation for IPv4 or in 
            colon-hexadecimal notation for IPv6.</param>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value if successful;
            otherwise, contains the default value for an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.</param>
            <returns><c>true</c> if <paramref name="ip"/> is a valid IP address; otherwise, <c>false</c>.</returns>
            <remarks>
            This method also supports parsing IPv4 addresses into an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value.  In such
            cases, the resulting <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> value will contain an IPv4-mapped IPv6 address.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_Equality(Microsoft.BI.Common.Net.IPv6Address,Microsoft.BI.Common.Net.IPv6Address)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values are equal.
            </summary>
            <param name="ip1">The first value to compare.</param>
            <param name="ip2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="ip1"/> and <paramref name="ip2"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_Inequality(Microsoft.BI.Common.Net.IPv6Address,Microsoft.BI.Common.Net.IPv6Address)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values have different values.
            </summary>
            <param name="ip1">The first value to compare.</param>
            <param name="ip2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="ip1"/> and <paramref name="ip2"/> are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_BitwiseAnd(Microsoft.BI.Common.Net.IPv6Address,Microsoft.BI.Common.Net.IPv6Address)">
            <summary>
            Returns the bitwise-and of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to and.</param>
            <param name="ip2">The second value to and.</param>
            <returns>The result of the bitwise-and of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_BitwiseOr(Microsoft.BI.Common.Net.IPv6Address,Microsoft.BI.Common.Net.IPv6Address)">
            <summary>
            Returns the bitwise-or of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to or.</param>
            <param name="ip2">The second value to or.</param>
            <returns>The result of the bitwise-or of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_ExclusiveOr(Microsoft.BI.Common.Net.IPv6Address,Microsoft.BI.Common.Net.IPv6Address)">
            <summary>
            Returns the bitwise-xor of two <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> values.
            </summary>
            <param name="ip1">The first value to xor.</param>
            <param name="ip2">The second value to xor.</param>
            <returns>The result of the bitwise-xor of <paramref name="ip1"/> and <paramref name="ip2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_Explicit(Microsoft.BI.Common.Net.IPv6Address)~Microsoft.BI.Common.Net.IPv4Address">
            <summary>
            Defines an explicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> to an <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPv4Address"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.</returns>
            <remarks>
            This conversion is a narrowing conversion that returns the lowest 4 bytes of the IP address, regardless
            of its type.  If the IP address is an IPv4-mapped IPv6 address, the conversion will return the equivalent
            address represented in IPv4.  If it is a normal IPv6 address, a new IPv4 address consisting of the lowest
            4 bytes of the original address is created.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_Implicit(Microsoft.BI.Common.Net.IPv6Address)~Microsoft.BI.Common.Net.IPAddress">
            <summary>
            Defines an implicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> to an <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:Microsoft.BI.Common.Net.IPAddress"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.</returns>
            <remarks>
            This conversion is essentially an identity conversion that returns an equivalent representation as an
            <see cref="T:Microsoft.BI.Common.Net.IPAddress"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.op_Implicit(Microsoft.BI.Common.Net.IPv6Address)~System.Net.IPAddress">
            <summary>
            Defines an implicit conversion of an <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/> to a BCL <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="address">The address to convert.</param>
            <returns>A BCL <see cref="T:System.Net.IPAddress"/> that represents the converted <see cref="T:Microsoft.BI.Common.Net.IPv6Address"/>.</returns>
            <remarks>
            This conversion is essentially an identity conversion that returns an equivalent representation as a BCL
            <see cref="T:System.Net.IPAddress"/> for use when interoperating with libraries expecting the BCL type.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.FindLongestAdjacentZeroRange(System.Int32@,System.Int32@)">
            <summary>
            Finds the longest range of adjacent zeros.
            </summary>
            <param name="zeroStart">When this method returns, contains the hextet index of the start of the
            longest range of adjacent zeroes.  If no hextet had value 0, this parameter will be negative.</param>
            <param name="zeroRangeEnd">When this method returns, contains the hextet index of the end of the
            longest range of adjacent zeroes.  If no hextet had value 0, this parameter will be negative.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.FormatMappedIPv4Address">
            <summary>
            Formats the IP address as an IPv4-mapped IPv6 address.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.FormatCompressedIPAddress(System.Int32,System.Int32)">
            <summary>
            Formats the IP address as a compressed IPv6 address.
            </summary>
            <param name="zeroRangeStart">The start of the longest range of adjacent zeros.</param>
            <param name="zeroRangeEnd">The end of the longest range of adjacent zeros.</param>
            <remarks>
            The values of <paramref name="zeroRangeStart"/> and <paramref name="zeroRangeEnd"/> can be obtained
            by using the <see cref="M:Microsoft.BI.Common.Net.IPv6Address.FindLongestAdjacentZeroRange(System.Int32@,System.Int32@)"/> method. This method should only be used if
            there was at least one hextet with value of 0.  If not, use <see cref="M:Microsoft.BI.Common.Net.IPv6Address.FormatUncompressedIPAddress"/>
            instead.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Net.IPv6Address.FormatUncompressedIPAddress">
            <summary>
            Formats the IP address as an uncompressed IPv6 address.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.ArrayPool`1">
            <summary>
            A pool of array segments.
            </summary>
            <typeparam name="T">The type of elements in the arrays.</typeparam>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> is an implementation of <see cref="T:Microsoft.BI.Common.IObjectPool`1"/> for <see cref="T:System.ArraySegment`1"/>
            values.  It is intended to be used in situations where a consumer needs to create a large number of small arrays of a particular
            size with variable lifetimes.
            </para>
            <para>
            The CLR's object model imposes a 16-byte (for x86) or 28-byte (for x64) overhead on each and every array instance, in addition to the
            actual data itself.  When dealing with huge numbers of small arrays, the cost of this overhead can be exceedingly expensive.  Furthermore,
            a large number of arrays puts pressure on the GC, as each array needs to be examined for eligiblity to be collected.  The
            <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> addresses both of these problems by allocating larger "array pages" from which smaller array segments
            can be returned.  In this way, thousands of small array segments can be created from just a few physical arrays in memory.
            </para>
            <para>
            Each instance of an <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> creates array segments of a sepecified size.  This obviates the need for solving
            difficult problems such as allocation, internal and external fragmentation, and compaction.  However, this does make it unsuitable as
            a generic, arbitrarily-sized array allocation solution.  In such cases, depending on the number of arrays that are expected of a given
            size, it may still be possible to use a separate <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> for each distinct size; however, other solutions may
            also be required.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> is fully thread-safe.  Multiple threads may concurrently be calling <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/> and
            <see cref="M:Microsoft.BI.Common.ArrayPool`1.Free(System.ArraySegment{`0})"/> without risk to the internal data structures of the pool.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage">
            <summary>
            An <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> is a thread-safe class used to use and re-use arrays from an existing pre-allocated buffer.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.ArrayPage.Array">
            <summary>
            Gets the underlying array used by the <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.ArrayPage.Capacity">
            <summary>
            Gets the number of arrays this <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> holds.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.ArrayPage.Allocated">
            <summary>
            Gets many <see cref="T:System.ArraySegment`1"/> structs have been already allocated.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.ArrayPage.TotalSize">
            <summary>
            Gets the total number of elements this <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> can hold.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.ArrayPage.AllocationPercent">
            <summary>
            Gets a percentage indicating how full this <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> is.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArrayPool`1.ArrayPage._Available">
            <summary>
            The count of the current number of available arrays from thie <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> containing a specified number of arrays of some specified size.
            </summary>
            <param name="size">The size of the arrays on the page..</param>
            <param name="count">The number of arrays on the page.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.#ctor">
            <summary>
            Creates a blank <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.GetBlankPage">
            <summary>
            Obtains a blank <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> for use.
            </summary>
            <remarks>
            A blank page is useless for storing any information.
            It should not be used as a normal <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/>
            instance. Instead the constructor should be used.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.TryAcquire(System.ArraySegment{`0}@)">
            <summary>
            Attempt to get a new array from the <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/>.
            </summary>
            <param name="array">The new array if successful; otherwise default.</param>
            <returns>true if successfully acquired an array; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.FreeAsync(System.ArraySegment{`0})">
            <summary>
            Asynchronously clears the <see cref="T:System.ArraySegment`1"/> before freeing it for use.
            </summary>
            <param name="array">The <see cref="T:System.ArraySegment`1"/> to free; must be part of
            this <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.Free(System.ArraySegment{`0})">
            <summary>
            Clears the <see cref="T:System.ArraySegment`1"/> before freeing it for use.
            </summary>
            <param name="array">The <see cref="T:System.ArraySegment`1"/> to free; must be part of
            this <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.FreeHelper(System.ArraySegment{`0})">
            <summary>
            Performs the logic of freeing an offset.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.TryUpdateHead(System.Int32)">
            <summary>
            Updates the reference to the current "head" offset range.
            </summary>
            <param name="possibleCurrentIndex">The value a thread "thinks" is the current head.</param>
            <returns>true if the update was successful; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.CountLeadingZeros(System.UInt64)">
            <summary>
            Counts the trailing number of zeroes starting from the GSB.
            eg. CLZ(~0) = 0.
            </summary>
            <remarks>
            Note that if <paramref name="x"/> == 0, then the output is 65.
            </remarks>
            <param name="x">The 64 bits to process.</param>
            <returns>The number of leading zeroes, or in other words, the index of the first non-zero bit, starting from the GSB.</returns>
        </member>
        <member name="F:Microsoft.BI.Common.ArrayPool`1.ArrayPage.SET_BITS_TABLE">
            <summary>
            <see cref="F:Microsoft.BI.Common.ArrayPool`1.ArrayPage.SET_BITS_TABLE"/>[n] = 2^n - 1
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.ArrayPool`1.ArrayPage.CLZ_SHORT_TABLE">
            <summary>
            A lookup table used for easily looking up where the first bit is located
            in a 16-bit sequence starting from the GSB.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ArrayPage.#cctor">
            <summary>
            Static constructor for the <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> class
            that initializes the <see cref="F:Microsoft.BI.Common.ArrayPool`1.ArrayPage.SET_BITS_TABLE"/> and the <see cref="F:Microsoft.BI.Common.ArrayPool`1.ArrayPage.CLZ_SHORT_TABLE"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.ArraySize">
            <summary>
            Gets the size of every array segment returned by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.Allocated">
            <summary>
            Gets the number of array segments that have been allocated by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.AllocatedSize">
            <summary>
            Gets the total number of elements across all of the segments allocated by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.
            </summary>
            <remarks>
            This measures the total size of the allocated segments returned by <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/>.  Contrast with <see cref="P:Microsoft.BI.Common.ArrayPool`1.TotalSize"/>,
            which returns the total size of the underyling storage arrays (and ultimately, the amount of memory being used by the
            <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.
            </remarks>
            <seealso cref="P:Microsoft.BI.Common.ArrayPool`1.TotalSize"/>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.AllocationPercent">
            <summary>
            Gets the amount of array segments allocated as a percentage of the total available segments.
            </summary>
            <remarks>
            This number may change drastically as the size of the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> expands to accomodate additional
            capacity requirements.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.Available">
            <summary>
            Get the number of array segments that are currently available for allocation by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.
            </summary>
            <remarks>
            When <see cref="P:Microsoft.BI.Common.ArrayPool`1.Available"/> goes to <c>0</c>, the next call to <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/> will result in the creation of another
            array page, providing more available segments for subsequent calls.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.Capacity">
            <summary>
            Gets the number of array segments that can currently be stored in the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.
            </summary>
            <remarks>
            The capacity of an <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> will expand over time to fit the needs of the consuming application.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.ArrayPool`1.TotalSize">
            <summary>
            Gets the total number of elements across all of the arrays allocated by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.
            </summary>
            <remarks>
            This measures the total size of the underlying arrays, not the array segments returned by <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/>.  Contrast with
            <see cref="P:Microsoft.BI.Common.ArrayPool`1.AllocatedSize"/>, which returns the total size of allocated segments returned by <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/>.
            </remarks>
            <seealso cref="P:Microsoft.BI.Common.ArrayPool`1.AllocatedSize"/>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> class for creating arrays of the specified size.
            </summary>
            <param name="arraySize">The size of the array segments to create.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.Get">
            <summary>
            Gets an array segment from the pool.
            </summary>
            <returns>An array segment from the pool.</returns>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> stores array data in "pages".  Each page corresponds to a single, physical
            array of type <typeparamref name="T"/>, each of which may contain multiple segments.
            </para>
            <para>
            When getting a new segment, all existing pages are checked for free segments.  If any are found, then one of them
            will be returned.  The algorithm for which page's segment is returned is undefined.  If no free segments are available,
            then the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> creates a new page and returns a segment from it.
            </para>
            <para>
            The size of the underlying arrays created by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/> scale as more and more segments
            are requested to both minimize the overhead of requesting very few segments or very many segments of the specified size.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/> method is fully thread-safe.  If multiple threads are simultaneously getting and freeing segments,
            it is possible for a page to be created when not strictly necessary; however, there will never be a case that a segment
            in use can be returned by <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/> before being fully processed by <see cref="M:Microsoft.BI.Common.ArrayPool`1.Free(System.ArraySegment{`0})"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.FreeAsync(System.ArraySegment{`0})">
            <summary>
            Returns an array segment to the pool asynchronously.
            </summary>
            <param name="item">The array segment to return to the pool.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="item"/> points to an array that was not created
            by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.</exception>
            <remarks>
            <para>
            Returning a segement to the pool will create a free slot in the associated page of the pool.  Once the slot
            has been freed, the page will be marked as having a free slot and becomes eligible for being chosen when
            <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/> is called.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.ArrayPool`1.FreeAsync(System.ArraySegment{`0})"/> method is fully thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.Free(System.ArraySegment{`0})">
            <summary>
            Returns an array segment to the pool.
            </summary>
            <param name="item">The array segment to return to the pool.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="item"/> points to an array that was not created
            by the <see cref="T:Microsoft.BI.Common.ArrayPool`1"/>.</exception>
            <remarks>
            <para>
            Returning a segement to the pool will create a free slot in the associated page of the pool.  Once the slot
            has been freed, the page will be marked as having a free slot and becomes eligible for being chosen when
            <see cref="M:Microsoft.BI.Common.ArrayPool`1.Get"/> is called.
            </para>
            <para>
            The <see cref="M:Microsoft.BI.Common.ArrayPool`1.Free(System.ArraySegment{`0})"/> method is fully thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.TryUpdateHead(Microsoft.BI.Common.ArrayPool{`0}.ArrayPage)">
            <summary>
            Attempts to update the current head page either by taking one from the free list
            or by creating a new one if there are no more free pages.
            </summary>
            <param name="possibleCurrentHead">What this thread thinks is the current page the pool is drawing from.</param>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.CreateNewPage">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> for the pool.
            </summary>
            <returns>A new <see cref="T:Microsoft.BI.Common.ArrayPool`1.ArrayPage"/> that is bigger than the last up to a maximum.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ArrayPool`1.ValidateState">
            <summary>
            Validates the current state of the Pool.
            </summary>
            <returns><c>true</c> if valid; otherwise <c>false</c></returns>
        </member>
        <member name="T:Microsoft.BI.Common.ConcurrentObjectPool`1">
            <summary>
            A generic implementation of a thread-safe object pool with a predefined size limit.
            </summary>
            <typeparam name="T">The type of the objects in the pool.</typeparam>
            <remarks>
            <para>
            The object pooling pattern provides a mechanism by which a limited set of objects are reused
            over the course of a longer-running process rather that creating and destroying them as they
            are needed.  This pattern can be useful in a number of performance-bound situations,
            especially when objects are either expensive to create or destroy, or the number of objects
            being created puts noticeable pressure on the garbage collector, such as the rapid creation
            of large numbers of short lived objects within a tight loop.
            </para>
            <para>
            This object pool implementation is focused on recycling frequently-used objects to avoid GC
            pressure.  It has a fixed size that does not change over the course of the pool's lifetime.
            If an item is requested from a pool that is empty, a new item will be created using the
            supplied factory; if too many items are returned to the pool, any extras will be ignored
            (and subsequently collected).  Thus, it is important to choose a reasonable capacity such
            that requests can be satisfied by the pool without creating new objects, but without using
            too much memory to store all the pooled items.
            </para>
            <para>
            It is expected that items withdrawn from the pool are returned in a relatively short amount
            of time.  If an object is expected to have a long lifetime, it generally shouldn't be pooled.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> does not require that calls to
            <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/> and <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Free(`0)"/> be balanced; however, it will perform best if they
            are.  It is also not a requirement that the object returned from <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/> is
            returned using <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Free(`0)"/>; any instance of the same class is sufficient.
            </para>
            <para>
            This class is fully thread-safe and can be used safely by multiple threads without
            synchronization.  Like many concurrent data structures, achieving this thread safety has a
            cost, so if you know that your pool will only ever be accessed by a single thread, using
            the <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> will be slightly more performant.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ConcurrentObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> class.
            </summary>
            <param name="factory">The function to call when creating a new item in the pool.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is <c>null</c>.</exception>
            <remarks>
            The capacity of the <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> created by this
            constructor is equal to two times the number of processors.  The created
            <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> is empty.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ConcurrentObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> class with the
            specified capacity.
            </summary>
            <param name="factory">The function to call when creating a new item in the pool.</param>
            <param name="capacity">The number of items in the pool.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <remarks>
            <para>
            The created <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> is empty.
            </para>
            <para>
            The worst-case complexity of getting items from the pool and returning items to the pool
            is O(<i>n</i>), where <i>n</i> is the capacity of the pool.  As such, it is important to
            keep the capacity relatively small to ensure good performance.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ConcurrentObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> class with the
            specified capacity that will pre-allocate the specified number of items.
            </summary>
            <param name="factory">The function to call when creating a new item in the pool.</param>
            <param name="capacity">The number of items in the pool.</param>
            <param name="preAllocate">The number of items to pre-allocate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> or <paramref name="preAllocate"/>
            is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="preAllocate"/> is greater than
            <paramref name="capacity"/>.</exception>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> created by this constructor will call the
            supplied <paramref name="factory"/> multiple times in order to satisfy the requested
            initial pre-allocated size.  Pre-allocation can increase initial startup time, but may
            decrease access time when calling <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/>.
            </para>
            <para>
            The worst-case complexity of getting items from the pool and returning items to the pool
            is O(<i>n</i>), where <i>n</i> is the capacity of the pool.  As such, it is important to
            keep the capacity relatively small to ensure good performance.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get">
            <summary>
            Gets an item from the pool.
            </summary>
            <returns>An item from the pool.</returns>
            <remarks>
            <para>
            This method returns the next, non-allocated item.  If the next item has not yet been
            created, the factory function supplied to the constructor will be invoked to create it.
            </para>
            <para>
            If the pool has already allocated all of the items that it contains without having any
            returned, this method will invoke the factory function supplied to the constructor in
            order to create a new instance.  Assuming balanced calls to <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/> and
            <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Free(`0)"/>, this will result in one of the allocated items being collected by
            the garbage collector after being returned.
            </para>
            <para>
            The complexity of getting an item from the pool varies depending on the number of items
            currently allocated and the number of threads contending for items in the pool.  The
            worst-case complexity for getting items from the pool is O(<i>n</i>), where <i>n</i> is
            the capacity of the pool.  The average-case complexity is amoritized to O(1).  In general,
            the more items that have been returned from the pool, the more expensive it is to get
            another item.  Thus, it is important to keep the capacity of the pool relatively small.
            </para>
            <para>
            When multiple threads are contending for access to the pool, it is possible for the pool's
            factory function to be called even when there are free items in the pool.  The frequency
            of this occurence is directly proportionate to the level of contention and how close to
            full the pool is.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Free(`0)">
            <summary>
            Returns an item to the pool.
            </summary>
            <param name="item">The item to return to the pool.</param>
            <remarks>
            <para>
            This method returns an item to the pool.  The item being returned need not have been
            created by calling <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/>, though in most cases it should be.  The same item
            should not be returned to the pool more than once; doing so will result in undefined
            behavior.
            </para>
            <para>
            If <paramref name="item"/> is <c>null</c>, no exception is thrown.  Instead, this is
            treated as an unbalanced <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/>/<see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Free(`0)"/> pairing, so a future call
            to <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/> will result in an invocation of the factory function of the
            <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/>.
            </para>
            <para>
            If the pool is currently empty, attempts to return an item to the pool will be ignored.
            </para>
            <para>
            A consumer of an <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> must not retain a reference
            to an item retrieved from the pool, nor may they continue to perform operations on the
            object after calling <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Free(`0)"/>.  Violating these constraints will result in
            undefined behavior.
            </para>
            <para>
            The complexity of returning an item to the pool varies depending on the number of items
            currently allocated and the number of threads contending for items in the pool.  The
            worst-case complexity for returning items from the pool is O(<i>n</i>), where <i>n</i> is
            the capacity of the pool.  The average-case complexity is amoritized to O(1).  In general,
            the more items that have been returned from the pool, the more expensive it is to return
            another item.  Thus, it is important to keep the capacity of the pool relatively small.
            </para>
            <para>
            When multiple threads are contending for access to the pool, it is possible for multiple
            items to end up occupying the same storage slot, which effectively behaves as an
            imbalanced <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/>/<see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Free(`0)"/> pairing.  The frequency of this occurence
            is directly proportionate to the level of contention (but, unlike <see cref="M:Microsoft.BI.Common.ConcurrentObjectPool`1.Get"/>, not
            affected by how full the pool is).
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.IObjectPool`1">
            <summary>
            Describes an interface for an object pool.
            </summary>
            <typeparam name="T">The type of items in the pool.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.IObjectPool`1.Get">
            <summary>
            Gets an item from the pool.
            </summary>
            <returns>An item from the pool.</returns>
            <remarks>
            <para>
            If the pool has any available items, the pool should return one of them.  If no item
            is available, the pool can either create a new item or block.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.IObjectPool`1.Free(`0)">
            <summary>
            Returns an item to the pool.
            </summary>
            <param name="item">The item to return to the pool.</param>
            <remarks>
            <para>
            Returning an item to the pool makes it available for consumption by another consumer.
            The original consumer should not maintain a reference to the item after it has been
            returned to the pool.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.ObjectPool`1">
            <summary>
            A generic implementation of an object pool with a predefined size limit.
            </summary>
            <typeparam name="T">The type of the objects in the pool.</typeparam>
            <remarks>
            <para>
            The object pooling pattern provides a mechanism by which a limited set of objects are reused
            over the course of a longer-running process rather that creating and destroying them as they
            are needed.  This pattern can be useful in a number of performance-bound situations,
            especially when objects are either expensive to create or destroy, or the number of objects
            being created puts noticeable pressure on the garbage collector, such as the rapid creation
            of large numbers of short lived objects within a tight loop.
            </para>
            <para>
            This object pool implementation is focused on recycling frequently-used objects to avoid GC
            pressure.  It has a fixed size that does not change over the course of the pool's lifetime.
            If an item is requested from a pool that is empty, a new item will be created using the
            supplied factory; if too many items are returned to the pool, any extras will be ignored
            (and subsequently collected).  Thus, it is important to choose a reasonable capacity such
            that requests can be satisfied by the pool without creating new objects, but without using
            too much memory to store all the pooled items.
            </para>
            <para>
            It is expected that items withdrawn from the pool are returned in a relatively short amount
            of time.  If an object is expected to have a long lifetime, it generally shouldn't be pooled.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> does not require that calls to <see cref="M:Microsoft.BI.Common.ObjectPool`1.Get"/> and
            <see cref="M:Microsoft.BI.Common.ObjectPool`1.Free(`0)"/> be balanced; however, it will perform best if they are.  It is also not a
            requirement that the object returned from <see cref="M:Microsoft.BI.Common.ObjectPool`1.Get"/> is returned using
            <see cref="M:Microsoft.BI.Common.ObjectPool`1.Free(`0)"/>; any instance of the same class is sufficient.
            </para>
            <para>
            This particular <see cref="T:Microsoft.BI.Common.IObjectPool`1"/> implementation is not thread safe.  For a
            thread-safe implementation, see <see cref="T:Microsoft.BI.Common.ConcurrentObjectPool`1"/> or use your own
            synchronization.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> class.
            </summary>
            <param name="factory">The function to call when creating a new item in the pool.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is <c>null</c>.</exception>
            <remarks>
            The capacity of the <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> created by this constructor is
            equal to two times the number of processors.  The created <see cref="T:Microsoft.BI.Common.ObjectPool`1"/>
            is empty.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> class with the specified
            capacity.
            </summary>
            <param name="factory">The function to call when creating a new item in the pool.</param>
            <param name="capacity">The number of items in the pool.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <remarks>
            The created <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> is empty.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> class with the specified
            capacity that will pre-allocate the specified number of items.
            </summary>
            <param name="factory">The function to call when creating a new item in the pool.</param>
            <param name="capacity">The number of items in the pool.</param>
            <param name="preAllocate">The number of items to pre-allocate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> or <paramref name="preAllocate"/>
            is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="preAllocate"/> is greater than
            <paramref name="capacity"/>.</exception>
            <remarks>
            The <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> created by this constructor will call the supplied
            <paramref name="factory"/> multiple times in order to satisfy the requested initial
            pre-allocated size.  Pre-allocation can increase initial startup time, but may decrease
            access time when calling <see cref="M:Microsoft.BI.Common.ObjectPool`1.Get"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ObjectPool`1.Get">
            <summary>
            Gets an item from the pool.
            </summary>
            <returns>An item from the pool.</returns>
            <remarks>
            <para>
            This method returns the next, non-allocated item.  If the next item has not yet been
            created, the factory function supplied to the constructor will be invoked to create it.
            </para>
            <para>
            If the pool has already allocated all of the items that it contains without having any
            returned, this method will invoke the factory function supplied to the constructor in
            order to create a new instance.  Assuming balanced calls to <see cref="M:Microsoft.BI.Common.ObjectPool`1.Get"/> and
            <see cref="M:Microsoft.BI.Common.ObjectPool`1.Free(`0)"/>, this will result in one of the allocated items being collected by
            the garbage collector after being returned.
            </para>
            <para>
            Getting an item from the pool is an O(1) operation unless the factory function needs
            to be called, in which case the complexity is equal to the complexity of the factory
            function.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.ObjectPool`1.Free(`0)">
            <summary>
            Returns an item to the pool.
            </summary>
            <param name="item">The item to return to the pool.</param>
            <remarks>
            <para>
            This method returns an item to the pool.  The item being returned need not have been
            created by calling <see cref="M:Microsoft.BI.Common.ObjectPool`1.Get"/>, though in most cases it should be.  The same item
            should not be returned to the pool more than once; doing so will result in undefined
            behavior.
            </para>
            <para>
            If <paramref name="item"/> is <c>null</c>, no exception is thrown.  Instead, this is
            treated as an unbalanced <see cref="M:Microsoft.BI.Common.ObjectPool`1.Get"/>/<see cref="M:Microsoft.BI.Common.ObjectPool`1.Free(`0)"/> pairing, so a future call
            to <see cref="M:Microsoft.BI.Common.ObjectPool`1.Get"/> will result in an invocation of the factory function of the
            <see cref="T:Microsoft.BI.Common.ObjectPool`1"/>.
            </para>
            <para>
            If the pool is currently empty, attempts to return an item to the pool will be ignored.
            </para>
            <para>
            A consumer of an <see cref="T:Microsoft.BI.Common.ObjectPool`1"/> must not retain a reference to an item
            retrieved from the pool, nor may they continue to perform operations on the object after
            calling <see cref="M:Microsoft.BI.Common.ObjectPool`1.Free(`0)"/>.  Violating these constraints will result in undefined
            behavior.
            </para>
            <para>
            Returning an item to the pool is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Option">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Option"/> class for performing an arbitrary callback action upon encountering an option.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Option.Flags">
            <summary>
            An array of flags that identify the possible ways to invoke this option.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Option.Description">
            <summary>
            A string describing the usage of this option; displayed with the help message.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Option.MetaVariable">
            <summary>
            The string used to represent the value in the usage description.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Option.Parse">
            <summary>
            The Action that is performed upon encountering this option.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Option.Value">
            <summary>
            After parsing is complete, this contains the result of parsing the specified command line arguments.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Option.ExpectedArgCount">
            <summary>
            The number of arguments expected by this <see cref="T:Microsoft.BI.Common.Option"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Option.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Option"/> class.
            </summary>
            <param name="flags">A list of accepted option flags.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Option.#ctor(System.String[],System.Action{System.String[]},System.Int32,System.String,System.Object,System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Option"/> class.
            </summary>
            <param name="flags">A list of accepted option flags.</param>
            <param name="parser">The action that is performed upon seeing this option.</param>
            <param name="argcount">The number of arguments this <see cref="T:Microsoft.BI.Common.Option"/> expects.</param>
            <param name="description">A brief description of what this <see cref="T:Microsoft.BI.Common.Option"/> does.</param>
            <param name="target">The object in which to store the result, or null to use <see cref="P:Microsoft.BI.Common.Option.Value"/>.</param>
            <param name="destination">The name of a writeable field or property in <paramref name="target"/> in which the
            value should be stored.</param>
            <param name="defaultValue">The default value of this <see cref="T:Microsoft.BI.Common.Option"/>.</param>
            <param name="metaVariable">The value to display in the usage string as an example.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Option.CheckArgumentCount(System.String[])">
            <summary>
            Checks that the number of arguments received matches what the Option requires.
            </summary>
            <param name="args">The arguments received.</param>
            <exception cref="T:System.ArgumentException">Thrown if the argument count does not match what the Option expects.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.SwitchOption">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Option"/> class for setting a switch (boolean) value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.SwitchOption.Value">
            <summary>
            After parsing is complete, if this switch was seen, Value will be true.  Otherwise, it will be false.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SwitchOption.#ctor(System.String[],System.Object,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.SwitchOption"/> class.
            </summary>
            <param name="flags">The list of accepted option flags.</param>
            <param name="target">The object in which to store the result, or null to use <see cref="P:Microsoft.BI.Common.SwitchOption.Value"/>.</param>
            <param name="destination">The name of a writeable field or property in <paramref name="target"/> in which the
            value should be stored.</param>
            <param name="description">A brief description of what this argument does.</param>
            <param name="defaultValue">The default value for this argument.</param>
        </member>
        <member name="T:Microsoft.BI.Common.SetOption`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Option"/> class for setting a strongly-typed variable.
            </summary>
            <typeparam name="T">The type of the value to set.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.SetOption`1.Value">
            <summary>
            After parsing is complete, this contains the result of parsing the specified command line arguments.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SetOption`1.#ctor(System.String[],System.Object,System.String,System.String,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.SetOption`1"/> class.
            </summary>
            <param name="flags">The list of accepted option flags.</param>
            <param name="target">The object in which to store the result, or null to use <see cref="P:Microsoft.BI.Common.SetOption`1.Value"/>.</param>
            <param name="destination">The name of a writeable field or property in <paramref name="target"/> in which the
            value should be stored.</param>
            <param name="description">A brief description of what this argument does.</param>
            <param name="defaultValue">The default value for this argument.</param>
            <param name="metaVariable">The value to display in the usage string as an example.</param>
        </member>
        <member name="T:Microsoft.BI.Common.AppendOption`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Option"/> class for appending multiple items to a list.
            </summary>
            <typeparam name="T">The type of each list item.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.AppendOption`1.ItemSeparator">
            <summary>
            The character that separates each item in the list.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.AppendOption`1.Value">
            <summary>
            After parsing is complete, this contains the list of items seen on the command line.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.AppendOption`1.#ctor(System.String[],System.Char,System.Object,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.AppendOption`1"/> class.
            </summary>
            <param name="flags">The list of accepted option flags.</param>
            <param name="separator">The character to use to split items in the item list.</param>
            <param name="target">The object in which to store the result, or null to use <see cref="P:Microsoft.BI.Common.AppendOption`1.Value"/>.</param>
            <param name="destination">The name of a writeable field or property in <paramref name="target"/> in which the
            value should be stored.</param>
            <param name="description">A brief description of what the argument does.</param>
            <param name="metaVariable">The value to display in the usage string as an example.</param>
        </member>
        <member name="T:Microsoft.BI.Common.EnumOption`1">
            <summary>
            An <see cref="T:Microsoft.BI.Common.Option"/> class for parsing enumerations.
            </summary>
            <typeparam name="T">The enumeration type of this EnumOption.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.EnumOption`1.Value">
            <summary>
            After parsing is complete, this contains the result of parsing the specified command line arguments.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.EnumOption`1.#ctor(System.String[],System.Object,System.String,System.String,`0,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.EnumOption`1"/> class.
            </summary>
            <param name="flags">The list of accepted option flags.</param>
            <param name="target">The object in which to store the result, or null to use <see cref="P:Microsoft.BI.Common.EnumOption`1.Value"/>.</param>
            <param name="destination">The name of a writeable field or property in <paramref name="target"/> in which the
            value should be stored.</param>
            <param name="description">A brief description of what this argument does.</param>
            <param name="defaultValue">The default value for this argument.</param>
            <param name="metaVariable">The value to display in the usage string as an example.</param>
        </member>
        <member name="T:Microsoft.BI.Common.OptionParser">
            <summary>
            A class designed to be a flexible way to parse command line arguments.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.OptionParser.Name">
            <summary>
            The name of the executable using this <see cref="T:Microsoft.BI.Common.OptionParser"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.OptionParser.Usage">
            <summary>
            The string to display for the usage portion of the <see cref="M:Microsoft.BI.Common.OptionParser.GetUsage"/> return block.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.OptionParser.Description">
            <summary>
            A string describing the overall functionality of the executable.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.OptionParser.Trailer">
            <summary>
            A string that follows the list of options.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.OptionParser.UseDefaultHelp">
            <summary>
            Controls whether the parser includes a default help option.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.OptionParser.Arguments">
            <summary>
            After parsing, this contains the set of arguments that were found in the command line.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.OptionParser.Options">
            <summary>
            After parsing, this contains Options with their Value fields populated.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.OptionParser.ValueSeparators">
            <summary>
            List of characters that can separate an option flag from its value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.OptionParser.ParameterIndicators">
            <summary>
            List of strings that serve as indicators that an argument is a parameter.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.OptionParser.EndOptions">
            <summary>
            Gets a string that indicates that no more options should be parsed, even if they start
            with one of the strings in <see cref="F:Microsoft.BI.Common.OptionParser.ParameterIndicators"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.OptionParser.AllowUnknownOptions">
            <summary>
            Gets or sets a value indicating whether to allow unknown options.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.OptionParser.Formatter">
            <summary>
            An <see cref="T:Microsoft.BI.Common.IOptionParserFormatter"/>, used to display help via GetUsage().
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OptionParser class.
            </summary>
            <param name="name">The name of the executable this OptionParser represents.</param>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.AddOption(Microsoft.BI.Common.Option)">
            <summary>
            Add an <see cref="T:Microsoft.BI.Common.Option"/> to the list of accepted options.
            </summary>
            <param name="option">The Option to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.RemoveOption(System.String)">
            <summary>
            Remove an <see cref="T:Microsoft.BI.Common.Option"/> from the list of accepted options.
            </summary>
            <param name="key">Any of the option's flags.</param>
            <returns><c>true</c> if the item is successfully removed; otherwise <c>false</c>.  This method also returns <c>false</c> if the <see cref="T:Microsoft.BI.Common.Option"/>
            was not found.</returns>
            <remarks>This removes all of the option's flags as well as the option itself, not just the flag specified.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.RemoveOption(Microsoft.BI.Common.Option)">
            <summary>
            Remove an <see cref="T:Microsoft.BI.Common.Option"/> from the list of accepted options.
            </summary>
            <param name="option">The option to remove.</param>
            <returns><c>true</c> if the item is successfully removed; otherwise, <c>false</c>.  This method also returns <c>false</c> if the <see cref="T:Microsoft.BI.Common.Option"/>
            was not found.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.GetUsage">
            <summary>
            Gets a string including usage information about the OptionParser.
            </summary>
            <returns>Usage information for the parser.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.ParseArgs(System.String[])">
            <summary>
            Parse a series of command line args and populate Arguments and Option.Value for all Options.
            </summary>
            <param name="args">The command line args to parse.</param>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.SplitArguments(System.String)">
            <summary>
            Parse a command line string and returns an array of arguments split according to standard command-line
            parsing rules.
            </summary>
            <param name="commandline">The argument string to split.</param>
            <returns>The result of parsing the string as an argument string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.NormalizeArguments(System.String[])">
            <summary>
            Flatten a set of arguments, normalizing them into a single argument array.
            </summary>
            <param name="args">The set of arguments to flatten.</param>
            <returns>The arguments in <paramref name="args"/> after being normalized.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.OptionParser.SplitArg(System.String,System.String@,System.String@)">
            <summary>
            Splits a --key[=value] pair into key, value pairs.
            </summary>
            <param name="arg">The argument to split.</param>
            <param name="okey">When this method returns, this parameter contains the key of the key-value pair.</param>
            <param name="ovalue">When this method returns, if the key has a value, this parameter contains the value.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IOptionParserFormatter">
            <summary>
            Represents a formatter for an <see cref="T:Microsoft.BI.Common.OptionParser"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IOptionParserFormatter.Format">
            <summary>
            Formats the description, arguments, options, etc. of an <see cref="T:Microsoft.BI.Common.OptionParser"/>.
            </summary>
            <returns>A string containing the formatted help message for an <see cref="T:Microsoft.BI.Common.OptionParser"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.DefaultOptionParserFormatter">
            <summary>
            An IOptionParserFormatter that applies automatic adjustment to all text
            (usage, description, option help, and trailer) in order to fit the text
            to a configurable window width.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DefaultOptionParserFormatter.Width">
            <summary>
            Gets or sets the maximum width of lines output by this outputter.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DefaultOptionParserFormatter.OptionIndent">
            <summary>
            Gets or sets the number of characters to indent option flags.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DefaultOptionParserFormatter.OptionDescriptionindent">
            <summary>
            Gets or sets the number of characters to indent option descriptions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.#ctor(Microsoft.BI.Common.OptionParser)">
            <summary>
            Instantiates a new instance of the DefaultOptionParserFormatter with the default
            width (80).
            </summary>
            <param name="parser">The OptionParser to provide formatting to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.FormatUsage(System.String)">
            <summary>
            Formats a usage message.
            </summary>
            <param name="usage">The usage message to format.</param>
            <returns>The formatted usage message string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.FormatDescription(System.String)">
            <summary>
            Formats a description message.
            </summary>
            <param name="description">The description message to format.</param>
            <returns>The formatted description string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.FormatOption(Microsoft.BI.Common.Option)">
            <summary>
            Formats an option.
            </summary>
            <param name="option">The <see cref="T:Microsoft.BI.Common.Option"/> to format.</param>
            <returns>The formatted <see cref="T:Microsoft.BI.Common.Option"/> string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.FormatTrailer(System.String)">
            <summary>
            Formats a trailer message.
            </summary>
            <param name="trailer">The trailer message to format.</param>
            <returns>The formatted trailer message string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.WrapString(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps a string to the specified width and indents by the specified number of characters.
            </summary>
            <param name="s">The string to format.</param>
            <param name="width">The maximum width of a single line.</param>
            <param name="firstIndent">The indent of the first line.</param>
            <param name="indent">The indent of all subsequent lines.</param>
            <returns>The formatted string.</returns>
            <remarks>
            Splits on whitespace whenver possible.  If a single word is longer than width characters,
            then it will be split at width characters and continued on the next line.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.GetNextLine(System.String,System.Int32,System.String@,System.String@)">
            <summary>
            Gets the next line from a string.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="width">The maximum width of the next line.</param>
            <param name="nextLine">After parsing, contains the next line.</param>
            <param name="remainder">After parsing, contains the rest of the input string after removing nextLine.</param>
            <returns>true if there is more data left to read in s, false otherwise.</returns>
            <remarks>
            <para>
            Splits strings under the following conditions:
            <list type="bullet">
            <item><description>
            At the first newline character encountered before <paramref name="width"/> characters have been read.
            </description></item>
            <item><description>
            At the last whitespace character encountered before <paramref name="width"/> characters have been read.
            </description></item>
            <item><description>
            At <paramref name="width"/> characters if there are no whitespace characters in the first <paramref name="width"/>
            characters of <paramref name="s"/>.
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.DefaultOptionParserFormatter.FindFurthestWhiteSpace(System.String,System.Int32,System.Int32)">
            <summary>
            Finds the index of the furthest whitespace character.
            </summary>
            <param name="s">The string to search.</param>
            <param name="startIndex">Where to begin searching in the string.</param>
            <param name="maxIndex">The maximum allowed index in the string.</param>
            <returns>The index of the last whitespace character found before maxIndex, or -1 if no whitespace was found.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.RawOptionParserFormatter">
            <summary>
            An IOptionParserFormatter that assumes all text (usage, description, option help,
            and trailer) has been preformatted.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RawOptionParserFormatter.#ctor(Microsoft.BI.Common.OptionParser)">
            <summary>
            Instantiates a new RawOptionParserFormatter instance.
            </summary>
            <param name="parser">The parser to provide formatting to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.RawOptionParserFormatter.Format">
            <summary>
            Perform usage formatting on the attached parser.
            </summary>
            <returns>The attached OptionParser's usage, as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RawOptionParserFormatter.FormatUsage(System.String)">
            <summary>
            Formats a usage message.
            </summary>
            <param name="usage">The usage message to format.</param>
            <returns>The formatted usage message string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RawOptionParserFormatter.FormatDescription(System.String)">
            <summary>
            Formats a description message.
            </summary>
            <param name="description">The description message to format.</param>
            <returns>The formatted description string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RawOptionParserFormatter.FormatTrailer(System.String)">
            <summary>
            Formats a trailer message.
            </summary>
            <param name="trailer">The trailer message to format.</param>
            <returns>The formatted trailer message string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RawOptionParserFormatter.FormatOption(Microsoft.BI.Common.Option)">
            <summary>
            Formats an option.
            </summary>
            <param name="option">The <see cref="T:Microsoft.BI.Common.Option"/> to format.</param>
            <returns>The formatted <see cref="T:Microsoft.BI.Common.Option"/> string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Pair">
            <summary>
            Provides static methods for creating pair objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Pair.Create``2(``0,``1)">
            <summary>
            Creates a new pair.
            </summary>
            <typeparam name="T1">The type of the first component of the pair.</typeparam>
            <typeparam name="T2">The type of the second component of the pair.</typeparam>
            <param name="item1">The value of the first component of the pair.</param>
            <param name="item2">The value of the second component of the pair.</param>
            <returns>A pair whose value is <paramref name="item1"/>, <paramref name="item2"/>.</returns>
            <remarks>
            <see cref="M:Microsoft.BI.Common.Pair.Create``2(``0,``1)"/> is a helper method that you can use to instantiate a pair object without having to
            explicitly specify the types of its components.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Pair`2">
            <summary>
            Represents a pair, which is a value type that contains two values.
            </summary>
            <typeparam name="T1">The type of the pair's first component.</typeparam>
            <typeparam name="T2">The type of the pair's second component.</typeparam>
            <remarks>
            <para>
            A pair is a data structure that has two components. It is similar to a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            structure, but instead represents an arbitrary pairing of two values.
            </para>
            <para>
            You can instantiate a <see cref="T:Microsoft.BI.Common.Pair`2"/> object by calling either the <see cref="T:Microsoft.BI.Common.Pair`2"/>
            constructor or the static <see cref="M:Microsoft.BI.Common.Pair.Create``2(``0,``1)"/> method. You can retrieve the values of the pair's components by
            using the read-only <see cref="P:Microsoft.BI.Common.Pair`2.Item1"/> and <see cref="P:Microsoft.BI.Common.Pair`2.Item2"/> instance properties.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Pair`2.Item1">
            <summary>
            Gets the value of the current pair's first component.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Pair`2.Item2">
            <summary>
            Gets the value of the current pair's second component.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.#ctor(`0,`1)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Pair`2"/> structure.
            </summary>
            <param name="item1">The value of the pair's first component.</param>
            <param name="item2">The value of the pair's second component.</param>
            <remarks>
            You can also use the static <see cref="M:Microsoft.BI.Common.Pair.Create``2(``0,``1)"/> method to instantiate a pair without having to explicitly
            specify the types of its components.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.Pair.Create``2(``0,``1)"/>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Microsoft.BI.Common.Pair`2"/> object is equal to a
            specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following
            conditions:
            <list type="bullet">
              <item><description>It is a <see cref="T:Microsoft.BI.Common.Pair`2"/> object.</description></item>
              <item><description>Its two components are of the same type as the current instance.</description></item>
              <item><description>Its two components are equal to those of the current instance.  Equality is determined
              by the default object equality comparer for each component.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.Equals(Microsoft.BI.Common.Pair{`0,`1})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Microsoft.BI.Common.Pair`2"/> object is equal to a
            specified <see cref="T:Microsoft.BI.Common.Pair`2"/>.
            </summary>
            <param name="other">The pair to compare with this instance.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; otherwise, <c>false</c>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if its two components
            are equal to those of the current instance.  Equality is determined by the default object equality comparer
            for each component.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.BI.Common.Pair`2"/> object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:Microsoft.BI.Common.Pair`2"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:Microsoft.BI.Common.Pair`2"/> object.</returns>
            <remarks>
            The string returned by this method takes the form (Item1, Item2), where Item1 and Item2 represent the values
            of the <see cref="P:Microsoft.BI.Common.Pair`2.Item1"/> and <see cref="P:Microsoft.BI.Common.Pair`2.Item2"/> properties. If either property value is <c>null</c>, it is
            represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.op_Implicit(Microsoft.BI.Common.Pair{`0,`1})~System.Tuple{`0,`1}">
            <summary>
            Converts a <see cref="T:Microsoft.BI.Common.Pair`2"/> to a <see cref="T:System.Tuple`2"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.Pair`2"/> to convert.</param>
            <returns>The resulting <see cref="T:System.Tuple`2"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.op_Explicit(System.Tuple{`0,`1})~Microsoft.BI.Common.Pair{`0,`1}">
            <summary>
            Converts a <see cref="T:System.Tuple`2"/> to a <see cref="T:Microsoft.BI.Common.Pair`2"/>.
            </summary>
            <param name="value">The <see cref="T:System.Tuple`2"/> to convert.</param>
            <returns>The resulting <see cref="T:Microsoft.BI.Common.Pair`2"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.op_Implicit(Microsoft.BI.Common.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            Converts a <see cref="T:Microsoft.BI.Common.Pair`2"/> to a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.Pair`2"/> to convert.</param>
            <returns>The resulting <see cref="T:System.Collections.Generic.KeyValuePair`2"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~Microsoft.BI.Common.Pair{`0,`1}">
            <summary>
            Converts a <see cref="T:System.Tuple`2"/> to a <see cref="T:Microsoft.BI.Common.Pair`2"/>.
            </summary>
            <param name="value">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to convert.</param>
            <returns>The resulting <see cref="T:Microsoft.BI.Common.Pair`2"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Microsoft.BI.Common.Pair`2"/> object is equal to a
            specified object based on a specified comparison method.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Pair`2"/> instance is cast to an <see cref="T:System.Collections.IStructuralEquatable"/> interface.
            </para>
            <para>
            The <see cref="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)"/> implementation is called only if <paramref name="other"/> is not
            <c>null</c>, and if it can be successfully cast to a <see cref="T:Microsoft.BI.Common.Pair`2"/> object whose components
            are of the same types as the current instance. The <see cref="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)"/> method first
            passes the <see cref="P:Microsoft.BI.Common.Pair`2.Item1"/> values of the <see cref="T:Microsoft.BI.Common.Pair`2"/> objects to be compared to the
            <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation. If this method call returns <c>true</c>, the method is
            called again and passed the <see cref="P:Microsoft.BI.Common.Pair`2.Item2"/> values of the two <see cref="T:Microsoft.BI.Common.Pair`2"/> objects.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current <see cref="T:Microsoft.BI.Common.Pair`2"/> object to a specified object and returns an integer
            that indicates whether the current object is before, after, or in the same position as the specified object
            in the sort order.
            </summary>
            <param name="obj">An object to compare with the current instance.</param>
            <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj"/>
            in the sort order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <c>null.</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:Microsoft.BI.Common.Pair`2"/>.</exception>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Pair`2"/> instance is cast to an <see cref="T:System.IComparable"/> interface.
            </para>
            <para>
            This method provides the <see cref="M:System.IComparable.CompareTo(System.Object)"/> implementation for the
            <see cref="T:Microsoft.BI.Common.Pair`2"/> class. Although the method can be called directly, it is most commonly called
            by the default overloads of collection sorting methods, such as <see cref="M:System.Array.Sort(System.Array)"/> and
            <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/>, to order the members of a collection.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method is intended for use in sorting operations. It should not be used
            when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two
            objects are equal, call the <see cref="M:Microsoft.BI.Common.Pair`2.Equals(System.Object)"/> method.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method uses the default object comparer to compare each component.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.System#IComparable{Microsoft#BI#Common#Pair{T1,T2}}#CompareTo(Microsoft.BI.Common.Pair{`0,`1})">
            <summary>
            Compares the current <see cref="T:Microsoft.BI.Common.Pair`2"/> object to a specified pair and returns an integer
            that indicates whether the current object is before, after, or in the same position as the specified pair
            in the sort order.
            </summary>
            <param name="other">A pair to compare with the current instance.</param>
            <returns>A signed integer that indicates the relative position of this instance and <paramref name="other"/>
            in the sort order.</returns>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Pair`2"/> instance is cast to an <see cref="T:System.IComparable`1"/> interface.
            </para>
            <para>
            This method provides the <see cref="M:System.IComparable`1.CompareTo(`0)"/> implementation for the
            <see cref="T:Microsoft.BI.Common.Pair`2"/> class. Although the method can be called directly, it is most commonly called
            by the default overloads of collection sorting methods, such as <see cref="M:System.Collections.Generic.List`1.Sort"/> and
            <see cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)"/>, to order the members of a collection.
            </para>
            <para>
            The <see cref="M:System.IComparable`1.CompareTo(`0)"/> method is intended for use in sorting operations. It should
            not be used when the primary purpose of a comparison is to determine whether two objects are equal. To
            determine whether two objects are equal, call the <see cref="M:Microsoft.BI.Common.Pair`2.Equals(Microsoft.BI.Common.Pair{`0,`1})"/> method.
            </para>
            <para>
            The <see cref="M:System.IComparable`1.CompareTo(`0)"/> method uses the default comparer for each component type to
            compare the <see cref="T:Microsoft.BI.Common.Pair`2"/>'s elements.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares the current <see cref="T:Microsoft.BI.Common.Pair`2"/>
            </summary>
            <param name="obj">An object to compare to the current instance.</param>
            <param name="comparer">An object that provides custom rules for comparison.</param>
            <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj"/>
            in the sort order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <c>null.</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:Microsoft.BI.Common.Pair`2"/>.</exception>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Pair`2"/> instance is cast to an <see cref="T:System.Collections.IStructuralComparable"/> interface.
            </para>
            <para>
            Although the method can be called directly, it is most commonly called by collection sorting methods that
            include <see cref="T:System.Collections.IComparer"/> parameters to order the members of a collection. for example it is called
            by the <see cref="M:System.Array.Sort(System.Array,System.Collections.IComparer)"/> method and the <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> method
            of a <see cref="T:System.Collections.SortedList"/> object that is instantiated by using the <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)"/>
            constructor.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method is intended for use in sorting operations. It should not be used
            when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two
            objects are equal, call the <see cref="M:Microsoft.BI.Common.Pair`2.Equals(System.Object)"/> method.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method uses the default object comparer to compare each component.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Pair`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
            <summary>
            Calculates the hash code for the current <see cref="T:Microsoft.BI.Common.Pair`2"/> object by using a specified
            computation method.
            </summary>
            <param name="comparer">An object whose <see cref="M:Microsoft.BI.Common.Pair`2.GetHashCode"/> method calculates the hash code of the
            current <see cref="T:Microsoft.BI.Common.Pair`2"/>.</param>
            <returns>A 32-bit signed integer hash code.</returns>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Pair`2"/> instance is cast to an <see cref="T:System.Collections.IStructuralComparable"/> interface.
            </para>
            <para>
            This method simply wraps a call to the <paramref name="comparer"/> object's
            <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> implementation.
            </para>
            <para>
            The algorithm used to compute the hash code should return the same hash code for two
            <see cref="T:Microsoft.BI.Common.Pair`2"/> objects that are considered to be equal.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.CodeLocation">
            <summary>
            Represents a location within a code file.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Parsing.CodeLocation.Empty">
            <summary>
            A static <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> representing an empty location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.CodeLocation.StartLine">
            <summary>
            The line number of the start of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.CodeLocation.StartColumn">
            <summary>
            The column number of the start of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.CodeLocation.EndLine">
            <summary>
            THe line number of the end of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.CodeLocation.EndColumn">
            <summary>
            The column number of the end of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.CodeLocation.StartIndex">
            <summary>
            The absolute offset index of the start of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.CodeLocation.EndIndex">
            <summary>
            The absolute offset index of the end of the location.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Parsing.CodeLocation.Buffer">
            <summary>
            Pointer to the lex buffer.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.#ctor(Microsoft.BI.Common.Parsing.ICodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> class based off the specified <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/>.
            </summary>
            <param name="location">A <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/> from which to get the location.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,QUT.GplexBuffers.ScanBuff)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> class with the specified location.
            </summary>
            <param name="startLine">The start line of the location.</param>
            <param name="startColumn">The start column of the location.</param>
            <param name="endLine">The end line of the location.</param>
            <param name="endColumn">The end column of the location.</param>
            <param name="startIndex">The absolute offset of the start of the location.</param>
            <param name="endIndex">The absolute offset of the end of the location.</param>
            <param name="buffer">A <see cref="T:QUT.GplexBuffers.ScanBuff"/> on top of the location data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.Merge(Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Merge this <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> with another one.
            </summary>
            <param name="last">The <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> to merge with.</param>
            <returns>A location from the start of this location to the end of <paramref name="last"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.SubLocation(System.Int32)">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> from the beginning or end of the current instance.
            </summary>
            <param name="count">The number of columns to include.  If positive, the range starts at <see cref="P:Microsoft.BI.Common.Parsing.CodeLocation.StartColumn"/>; if
            negative, the range ends at <see cref="P:Microsoft.BI.Common.Parsing.CodeLocation.EndColumn"/>.</param>
            <returns>A new <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> instance representing that range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="count"/> is less than 0 and greater than
            <see cref="P:Microsoft.BI.Common.Parsing.CodeLocation.EndColumn"/> * -1.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.Equals(System.Object)">
            <summary>
            Gets whether the current <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> is equal to another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>true if the locations are equal; otherwise, false.  Always returns false if <paramref name="obj"/>
            is not a <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> or <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.GetHashCode">
            <summary>
            Get the hash code of the current instance.
            </summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.ToString">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> formatted as a string.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> formatted as a string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.CodeLocation.EmptyCodeLocation">
            <summary>
            Special nested <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> that represents an empty code location.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.CodeLocation.EmptyCodeLocation.SubLocation(System.Int32)">
            <summary>
            Returns the empty code instance.
            </summary>
            <param name="count">The number of columns to include.</param>
            <returns>The original instance.</returns>
            <remarks>This allows code objects to use the empty location and still call <see cref="M:Microsoft.BI.Common.Parsing.CodeLocation.EmptyCodeLocation.SubLocation(System.Int32)"/>
            with negative values on it without throwing exceptions (since EndColumn is always 0).</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.ICodeLocation">
            <summary>
            An interface describing a location within a code file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ICodeLocation.StartLine">
            <summary>
            The line number of the start of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ICodeLocation.StartColumn">
            <summary>
            The column number of the start of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ICodeLocation.EndLine">
            <summary>
            THe line number of the end of the location.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ICodeLocation.EndColumn">
            <summary>
            The column number of the end of the location.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.LexUtils">
            <summary>
            Contains helper functions for performing lexing of code streams.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.LexUtils.TrimLeft(System.String,System.Int32)">
            <summary>
            Trims the specified number of characters from the left of a string.
            </summary>
            <param name="s">The string to trim.</param>
            <param name="left">The number of characters to trim.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.LexUtils.TrimRight(System.String,System.Int32)">
            <summary>
            Trims the specified number of characters from the right of a string.
            </summary>
            <param name="s">The string to trim.</param>
            <param name="right">The number of characters to trim.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.LexUtils.TrimBoth(System.String,System.Int32,System.Int32)">
            <summary>
            Trims the specified number of characters from either end of a string.
            </summary>
            <param name="s">The string to trim.</param>
            <param name="left">The number of characters to trim from the left.</param>
            <param name="right">The number of characters to trim from the right.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.ParseError">
            <summary>
            Base class for all exceptions thrown when parsing code into a CodeDom tree with an <see cref="T:Microsoft.BI.Common.CodeDom.Compiler.ICodeParser"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ParseError.Location">
            <summary>
            Gets the location of the error.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ParseError.ErrorLocation">
            <summary>
            Gets the location to mark in the error.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ParseError.FileName">
            <summary>
            Gets the name of the file in which the error occured.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ParseError.IsWarning">
            <summary>
            Gets whether the error is a warning or an error.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.ParseError.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/> class.
            </summary>
            <param name="message">The message to associate with this error.</param>
            <param name="isWarning">Whether the error represents a warning or an error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.ParseError.#ctor(System.String,Microsoft.BI.Common.Parsing.ICodeLocation,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/> class.
            </summary>
            <param name="message">The message to associate with this error.</param>
            <param name="errorLocation">An <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/> instance representing the location of the error.</param>
            <param name="isWarning">Whether the error represents a warning or an error.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.ParseError.#ctor(System.String,Microsoft.BI.Common.Parsing.ICodeLocation,Microsoft.BI.Common.Parsing.ICodeLocation,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/> class.
            </summary>
            <param name="message">The message to associate with this error.</param>
            <param name="location">An <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/> representing the full span of the statement or expression containing the error.</param>
            <param name="errorLocation">An <see cref="T:Microsoft.BI.Common.Parsing.ICodeLocation"/> instance representing the location of the error within <paramref name="location"/>.</param>
            <param name="isWarning">Whether the error represents a warning or an error.</param>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ParseError.Message">
            <summary>
            Gets a message that describes the current <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.ParseError.ToString">
            <summary>
            Gets a message that describes the location and value of the current <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/>.
            </summary>
            <returns>A message that describes the location and value of the current <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.ParseError.CompareTo(Microsoft.BI.Common.Parsing.ParseError)">
            <summary>
            Compares the current <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/> with another <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/>.
            </summary>
            <param name="other">The other <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/> to compare to.</param>
            <returns>Less than 0 if this object is less than <paramref name="other"/>; 0 if this object has the same value as <paramref name="other"/>;
            greater than 0 if this object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.Token`1">
            <summary>
            Represents a single token in a parse tree.
            </summary>
            <typeparam name="T">The lex token type for the token.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.Token`1.Whitespace">
            <summary>
            Gets or sets a value representing the white space before the token.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.Token`1.Text">
            <summary>
            Gets or sets the text value of the token.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.Token`1.Location">
            <summary>
            Gets or sets a <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> value indicating the location of the token in the original stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.Token`1.ID">
            <summary>
            Gets a unique identifier for the token.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.Token`1.Previous">
            <summary>
            Gets or sets the token prior to this one.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.Token`1.Next">
            <summary>
            Gets or sets the token after this one.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.Token`1.LexToken">
            <summary>
            Gets the lex token of this token.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.Token`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.Token`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.Token`1.#ctor(System.String,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.Token`1"/> class.
            </summary>
            <param name="text">The text this token represents.</param>
            <param name="position">A <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object containing the token's location.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.Token`1.#ctor(`0,System.String,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.Token`1"/> class.
            </summary>
            <param name="token">The lex token this token represents.</param>
            <param name="text">The text this token represents.</param>
            <param name="position">A <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object containing the token's location.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.Token`1.Clone">
            <summary>
            Returns a clone of the token.
            </summary>
            <returns>A clone of the current token.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.Token`1.ToString">
            <summary>
            Returns the text value of the token.
            </summary>
            <returns>The text value of the token.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.Token`1.GetHashCode">
            <summary>
            Gets a hash code for the token.
            </summary>
            <returns>A hash code for the token.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.Token`1.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the token is equal to another token.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns><c>true</c> if this instance and <paramref name="obj"/> represent the same value; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.LiteralToken`1">
            <summary>
            Represents a single literal token in a parse tree.
            </summary>
            <typeparam name="T">The lex token type for the token.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.LiteralToken`1.Value">
            <summary>
            Gets the literal value this token represents.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.LiteralToken`1.#ctor(System.Object,System.String,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.LiteralToken`1"/> class.
            </summary>
            <param name="value">The literal value this token represents.</param>
            <param name="text">The text this token represents.</param>
            <param name="position">A <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object containing the token's location.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.PunctuationToken`1">
            <summary>
            Represents a single punctuation token in a parse tree.
            </summary>
            <typeparam name="T">The lex token type for the token.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.PunctuationToken`1.#ctor(`0,System.String,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.PunctuationToken`1"/> class.
            </summary>
            <param name="token">The punctuation value this token represents.</param>
            <param name="text">The text this token represents.</param>
            <param name="position">A <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object containing the token's location.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.ReservedToken`1">
            <summary>
            Represents a single reserved token in a parse tree.
            </summary>
            <typeparam name="T">The lex token type for the token.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.ReservedToken`1.#ctor(`0,System.String,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.ReservedToken`1"/> class.
            </summary>
            <param name="token">The keyword this token represents.</param>
            <param name="reserved">The text this token represents.</param>
            <param name="position">A <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object containing the token's location.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.IdentifierToken`1">
            <summary>
            Represents a single identifier token in a parse tree.
            </summary>
            <typeparam name="T">The lex token type for the token.</typeparam>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.IdentifierToken`1.#ctor(System.String,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.IdentifierToken`1"/> class.
            </summary>
            <param name="identifier">The identifier this token represents.</param>
            <param name="position">A <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object containing the token's location.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Parsing.ErrorToken`2">
            <summary>
            Represents a single error token in a parse tree.
            </summary>
            <typeparam name="T">The lex token type for the token.</typeparam>
            <typeparam name="E">The type of the error in the token.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.Parsing.ErrorToken`2.Error">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.Parsing.ParseError"/> this token represents.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Parsing.ErrorToken`2.#ctor(`1,System.String,Microsoft.BI.Common.Parsing.CodeLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Parsing.ErrorToken`2"/> class.
            </summary>
            <param name="error">The error this token represents.</param>
            <param name="text">The text this token represents.</param>
            <param name="position">A <see cref="T:Microsoft.BI.Common.Parsing.CodeLocation"/> object containing the token's location.</param>
        </member>
        <member name="T:Microsoft.BI.Common.ProcessExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Diagnostics.Process"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ProcessExtensions.IsDebuggerAttached(System.Diagnostics.Process)">
            <summary>
            Gets a value indicating whether there is currently a remote debugger attached to the process.
            </summary>
            <param name="process">The process to query.</param>
            <returns><c>true</c> if there is a remote debugger attached to the process; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            "Remote", in this case, does not imply that the debugger necessarily resides on a different computer; instead,
            it indicates that the debugger resides in a separate and parallel process.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.PseudoType">
            <summary>
            Base pseudo-type implementation that other pseudo-types can inherit and override accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PseudoType"/> class with the specified namespace and
            type name.
            </summary>
            <param name="namespace">The namespace of the <see cref="T:Microsoft.BI.Common.PseudoType"/>.</param>
            <param name="name">The name of the <see cref="T:Microsoft.BI.Common.PseudoType"/>.</param>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.FullName">
            <summary>
            Gets the fully-qualified name of the <see cref="T:Microsoft.BI.Common.PseudoType"/>, including the namespace.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.GUID">
            <summary>
            Gets the <see cref="P:Microsoft.BI.Common.PseudoType.GUID"/> associated with the <see cref="T:Microsoft.BI.Common.PseudoType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.Name">
            <summary>
            Gets the name of the <see cref="T:Microsoft.BI.Common.PseudoType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.Namespace">
            <summary>
            Gets the namespace of the <see cref="T:Microsoft.BI.Common.PseudoType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.Assembly">
            <exclude/>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.AssemblyQualifiedName">
            <exclude/>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.BaseType">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetAttributeFlagsImpl">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetConstructors(System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetElementType">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetEvent(System.String,System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetEvents(System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetField(System.String,System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetFields(System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetInterface(System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetInterfaces">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetMembers(System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetMethods(System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetNestedType(System.String,System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetNestedTypes(System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetProperties(System.Reflection.BindingFlags)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.HasElementTypeImpl">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.IsArrayImpl">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.IsByRefImpl">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.IsCOMObjectImpl">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.IsPointerImpl">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.IsPrimitiveImpl">
            <exclude/>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.Module">
            <exclude/>
        </member>
        <member name="P:Microsoft.BI.Common.PseudoType.UnderlyingSystemType">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetCustomAttributes(System.Type,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.GetCustomAttributes(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.PseudoType.IsDefined(System.Type,System.Boolean)">
            <exclude/>
        </member>
        <member name="T:Microsoft.BI.Common.QueryString">
            <summary>
            Class representing a URL query string.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.QueryString.QueryStart">
            <summary>
            The character indicating the start of the query string.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.QueryString.ItemSeparator">
            <summary>
            The character that separates each key-value pair.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.QueryString.KeyValueSeparator">
            <summary>
            The character that separates keys from values.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.QueryString"/> class.
            </summary>
            <param name="queryStart">The query start character.</param>
            <param name="itemSeparator">The item separator character.</param>
            <param name="keyValueSeparator">The key-value separator.</param>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.#ctor(System.String,System.Char,System.Char,System.Char)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.QueryString"/> class based on the specified string.
            </summary>
            <param name="queryString">The string to parse.</param>
            <param name="queryStart">The query start character.</param>
            <param name="itemSeparator">The item separator character.</param>
            <param name="keyValueSeparator">The key-value separator.</param>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Char,System.Char,System.Char)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.QueryString"/> class with the specified contents.
            </summary>
            <param name="items">A dictionary containing the initial values.</param>
            <param name="queryStart">The query start character.</param>
            <param name="itemSeparator">The item separator character.</param>
            <param name="keyValueSeparator">The key-value separator.</param>
        </member>
        <member name="P:Microsoft.BI.Common.QueryString.Item(System.String)">
            <summary>
            Modified version of the indexer which returns null when the specified key is not found.
            </summary>
            <param name="key">The key to get the value of.</param>
            <returns>The value, or null if the key is not in the query string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.ToString">
            <summary>
            Returns the <see cref="T:Microsoft.BI.Common.QueryString"/> formatted as a string.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.QueryString"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.Clone">
            <summary>
            Returns a shallow copy of the <see cref="T:Microsoft.BI.Common.QueryString"/> instance.
            </summary>
            <returns>A shallow copy of the current query string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.FromString(System.String,System.Char,System.Char,System.Char)">
            <summary>
            Parses a query string into a dictionary of key-value pairs.
            </summary>
            <param name="queryString">The string to parse.</param>
            <param name="queryStart">The query start character.</param>
            <param name="itemSeparator">The item separator character.</param>
            <param name="keyValueSeparator">The key-value separator.</param>
            <returns>The parsed query string.</returns>
            <remarks>The query string must contain <paramref name="queryStart"/> for this method to return a non-empty
            dictionary.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.ToString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Char,System.Char,System.Char,System.Func{System.String,System.String})">
            <summary>
            Formats the specified dictionary as a query string.
            </summary>
            <param name="qs">The dictionary containing the key-value pairs.</param>
            <param name="queryStart">The query start character.</param>
            <param name="itemSeparator">The item separator character.</param>
            <param name="keyValueSeparator">The key-value separator.</param>
            <param name="escapeMethod">The function to apply to perform escaping.</param>
            <returns><paramref name="qs"/> formatted as a query string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.QueryString.ToStringEscaped(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Char,System.Char,System.Char,System.Func{System.String,System.String})">
            <summary>
            Formats the specified dictionary as a query string with escaping.
            </summary>
            <param name="qs">The dictionary containing the key-value pairs.</param>
            <param name="queryStart">The query start character.</param>
            <param name="itemSeparator">The item separator character.</param>
            <param name="keyValueSeparator">The key-value separator.</param>
            <param name="escapeMethod">The function to apply to perform escaping.</param>
            <returns><paramref name="qs"/> formatted as a query string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.RandomExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Random"/> instances for generating random data.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextSByte(System.Random)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.SByte"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A nonnegative, random <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextSByte(System.Random,System.SByte)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.SByte"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A nonnegative, random <see cref="T:System.SByte"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextSByte(System.Random,System.SByte,System.SByte)">
            <summary>
            Returns a random <see cref="T:System.SByte"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.SByte"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt16(System.Random)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Int16"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A nonnegative, random <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt16(System.Random,System.Int16)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Int16"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A nonnegative, random <see cref="T:System.Int16"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt16(System.Random,System.Int16,System.Int16)">
            <summary>
            Returns a random <see cref="T:System.Int16"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.Int16"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt32(System.Random)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Int32"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A nonnegative, random <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt32(System.Random,System.Int32)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Int32"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A nonnegative, random <see cref="T:System.Int32"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt32(System.Random,System.Int32,System.Int32)">
            <summary>
            Returns a random <see cref="T:System.Int32"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.Int32"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt64(System.Random)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Int64"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A nonnegative, random <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt64(System.Random,System.Int64)">
            <summary>
            Returns a nonnegative random <see cref="T:System.Int64"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to 0.</param>
            <returns>A nonnegative, random <see cref="T:System.Int64"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextInt64(System.Random,System.Int64,System.Int64)">
            <summary>
            Returns a random <see cref="T:System.Int64"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.Int64"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextByte(System.Random)">
            <summary>
            Returns a random <see cref="T:System.Byte"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextByte(System.Random,System.Byte)">
            <summary>
            Returns a random <see cref="T:System.Byte"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A random <see cref="T:System.Byte"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextByte(System.Random,System.Byte,System.Byte)">
            <summary>
            Returns a random <see cref="T:System.Byte"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.Byte"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt16(System.Random)">
            <summary>
            Returns a random <see cref="T:System.UInt16"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt16(System.Random,System.UInt16)">
            <summary>
            Returns a random <see cref="T:System.UInt16"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A random <see cref="T:System.UInt16"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt16(System.Random,System.UInt16,System.UInt16)">
            <summary>
            Returns a random <see cref="T:System.UInt16"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.UInt16"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt32(System.Random)">
            <summary>
            Returns a random <see cref="T:System.UInt32"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt32(System.Random,System.UInt32)">
            <summary>
            Returns a random <see cref="T:System.UInt32"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A random <see cref="T:System.UInt32"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt32(System.Random,System.UInt32,System.UInt32)">
            <summary>
            Returns a random <see cref="T:System.UInt32"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.UInt32"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt64(System.Random)">
            <summary>
            Returns a random <see cref="T:System.UInt64"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt64(System.Random,System.UInt64)">
            <summary>
            Returns a random <see cref="T:System.UInt64"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to 0.</param>
            <returns>A random <see cref="T:System.UInt64"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextUInt64(System.Random,System.UInt64,System.UInt64)">
            <summary>
            Returns a random <see cref="T:System.UInt64"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.UInt64"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextString(System.Random,System.Int32)">
            <summary>
            Returns a random string of the specified length.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="length">The length of the string to generate.</param>
            <returns>A random string of the given length.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextString(System.Random,System.Int32,System.Int32)">
            <summary>
            Returns a random string with random length between the specified sizes.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minLength">The minimum length of the string to generate.</param>
            <param name="maxLength">The maximum length of the string to generate.</param>
            <returns>A random string between the given lengths in size.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDecimal(System.Random)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Decimal"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A nonnegative, random <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDecimal(System.Random,System.Decimal)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Decimal"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A nonnegative, random <see cref="T:System.Decimal"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDecimal(System.Random,System.Decimal,System.Decimal)">
            <summary>
            Returns a random <see cref="T:System.Decimal"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.Decimal"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextSingle(System.Random)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Single"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A nonnegative, random <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextSingle(System.Random,System.Single)">
            <summary>
            Returns a nonnegative, random <see cref="T:System.Single"/> less than the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.</param>
            <returns>A nonnegative, random <see cref="T:System.Single"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextSingle(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random <see cref="T:System.Single"/> greater than or equal to the specified minimum and less than
            the specified maximum.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.Single"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextGuid(System.Random)">
            <summary>
            Return a random <see cref="T:System.Guid"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextBoolean(System.Random)">
            <summary>
            Return a random <see cref="T:System.Boolean"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            Return a random <see cref="T:System.DateTime"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDateTime(System.Random,System.DateTime)">
            <summary>
            Return a random <see cref="T:System.DateTime"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random date to be generated.</param>
            <returns>A random <see cref="T:System.DateTime"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            Return a random <see cref="T:System.DateTime"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random date to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random date to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.DateTime"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextTimeSpan(System.Random)">
            <summary>
            Return a random <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextTimeSpan(System.Random,System.TimeSpan)">
            <summary>
            Return a random <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random span to be generated.</param>
            <returns>A random <see cref="T:System.TimeSpan"/> less than to <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextTimeSpan(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
            Return a random <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random span to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random span to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.TimeSpan"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDateTimeOffset(System.Random)">
            <summary>
            Return a random <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDateTimeOffset(System.Random,System.DateTime)">
            <summary>
            Return a random <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="maxValue">The exclusive upper bound of the random date to be generated.</param>
            <returns>A random <see cref="T:System.DateTimeOffset"/> less than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextDateTimeOffset(System.Random,System.DateTime,System.DateTime)">
            <summary>
            Return a random <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random date to be generated.</param>
            <param name="maxValue">The exclusive upper bound of the random date to be generated.
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>A random <see cref="T:System.DateTimeOffset"/> greater than or equal to <paramref name="minValue"/> and less
            than <paramref name="maxValue"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            Returns a random enumeration value.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="r"> The <see cref="T:System.Random"/> instance.</param>
            <returns>A random enum value.</returns>
            <exception cref="T:System.ArgumentException">The supplied type parameter is not an enumeration.</exception>
            <remarks>The value provided to <typeparamref name="T"/> must be an enum.  This is not particularly efficient for
            repeated operations, as the values are computed every single iteration.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.RandomObjectGenerator">
            <summary>
            Provides methods for creating and filling objects with arbitrary structure with pseudo-random values.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> class provides the mechanism by which to create and fill out the fields and properties
            of user-defined objects of relatively arbitrary structure.  This class makes extensive use of reflection and the Dynamic Language
            Runtime (DLR) for creating objects and assigning values.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> supports two methods of random generation - completely random data based on an object's
            type, and user-specified generation through "generators", which are simply <see cref="T:System.Action`1"/> objects that operate on
            <c>dynamic</c> objects.  Unless otherwise specified, objects are filled by generating pseudo-random values for C# builtin types
            and by generating pseudo-random object instances for user-defined types.
            </para>
            <para>
            When filling an object, the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> will only assign to a given field or property one time.  A generator
            passed to <see cref="M:Microsoft.BI.Common.RandomObjectGenerator.Generate``1(System.Action{System.Object})"/> or <see cref="M:Microsoft.BI.Common.RandomObjectGenerator.Fill(System.Object,System.Action{System.Object})"/> has the highest priority, followed by generators added via
            <see cref="M:Microsoft.BI.Common.RandomObjectGenerator.AddGenerator``1(System.Action{System.Object})"/> (or by adding directly to <see cref="P:Microsoft.BI.Common.RandomObjectGenerator.GeneratorsByType"/>, and finally followed by pseudo-random data.
            If a generator only sets certain members of the object, the remaining members will be populated with pseudo-random data based on
            the member's type.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> is capable of automatically handling any builtin C# type as well as any class that has
            a default (0 parameter) constructor.  For types that do not have a default constructor, the object may be created via user-supplied
            generator, or it will automatically be filled with <c>null</c> otherwise.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.RandomObjectGenerator.GeneratorsByType">
            <summary>
            Gets a collection of generators keyed by type.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Microsoft.BI.Common.RandomObjectGenerator.GeneratorsByType"/> dictionary contains type-specific generators, allowing specific types to be generated
            in certain ways.  The type must be an exact match - the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> will not match a derived object
            to a generator that was added with one of it's parent classes.  Similarly, it will not match any interface definitions that
            it happens to implement.  (TODO - actually, it would be cool if it did this.)
            </para>
            <para>
            The <see cref="P:Microsoft.BI.Common.RandomObjectGenerator.GeneratorsByType"/> dictionary is a <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/>, meaning that it supports
            the concept of "scopes", or individual groups of keys that can be manipulated together.  This allows, for example, a set of
            generators to be added at the same time via <see cref="M:Microsoft.BI.Common.ScopedDictionary`2.Push"/>, some objects to be generated,
            and then for all the generators to be removed at the same time via <see cref="M:Microsoft.BI.Common.ScopedDictionary`2.Pop"/>.
            See <see cref="T:Microsoft.BI.Common.ScopedDictionary`2"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.RandomObjectGenerator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RandomObjectGenerator.AddGenerator``1(System.Action{System.Object})">
            <summary>
            Adds a type-based generator to the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> instance's set of generators.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> with which the generator is associated.</typeparam>
            <param name="generator">The action to be performed when filling an object of this type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            When matching an object to a type-based generator, the type must be an exact match - the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/>
            will not match a derived object to a generator that was added with one of it's parent classes.  Similarly, it will not match
            any interface definitions that it happens to implement.  (TODO - actually, it would be cool if it did this.)
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.RandomObjectGenerator.Generate``1(System.Action{System.Object})">
            <summary>
            Generates an object of the specified type and fills its fields and properties.
            </summary>
            <typeparam name="T">The type of the object to generate.</typeparam>
            <param name="generator">An optional additional <see cref="T:System.Action`1"/> to apply to the object being generated.</param>
            <returns>A newly-generated <typeparamref name="T"/> with filled fields and properties.</returns>
            <remarks>
            <para>
            <typeparamref name="T"/> must have a default constructor in order to use this method.  To fill an object without a default
            constructor, create the object outside of the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> and use <see cref="M:Microsoft.BI.Common.RandomObjectGenerator.Fill(System.Object,System.Action{System.Object})"/> instead.
            </para>
            <para>
            If supplied, <paramref name="generator"/> has higher priority than the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> instance's normal
            generators and default random data generation.  Any members set in this generator will not be modified by the
            <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> instance's normal behavior.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.RandomObjectGenerator.Fill(System.Object,System.Action{System.Object})"/>
        </member>
        <member name="M:Microsoft.BI.Common.RandomObjectGenerator.Fill(System.Object,System.Action{System.Object})">
            <summary>
            Fills the fields and properties of an existing object.
            </summary>
            <param name="target">The object whose fields and properties are to be filled.</param>
            <param name="generator">An optional additional <see cref="T:System.Action`1"/> to apply to the object being generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            If supplied, <paramref name="generator"/> has higher priority than the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> instance's normal
            generators and default random data generation.  Any members set in this generator will not be modified by the
            <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/> instance's normal behavior.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.RandomObjectGenerator.Generate``1(System.Action{System.Object})"/>
        </member>
        <member name="M:Microsoft.BI.Common.RandomObjectGenerator.GetGenerator``1">
            <summary>
            Gets a function which, when called, will generate a new object of the specified type using this <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/>.
            </summary>
            <typeparam name="T">The type of the object to be generated.</typeparam>
            <returns>A function which, when called, will generate a new object of the specified type using this
            <see cref="T:Microsoft.BI.Common.RandomObjectGenerator"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RandomObjectGenerator.GenerateRandomValue(System.Type)">
            <summary>
            Generates a random value of the specified type.
            </summary>
            <param name="t">The type of value to generate.</param>
            <returns>A random value of the specified type.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.RandomObjectGenerator.SetOnceDynamicObject">
            <summary>
            A <see cref="T:Microsoft.BI.Common.Dynamic.DynamicStaticObject`1"/> subclass that only allows each member to be set one time.  Additional attempts
            to set the same member will be ignored.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RandomObjectGenerator.SetOnceDynamicObject.IsSet">
            <summary>
            Collection of the members that have already been set.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.RandomObjectGenerator.SetOnceDynamicObject.Prefix">
            <summary>
            The name prefix of the <see cref="T:Microsoft.BI.Common.RandomObjectGenerator.SetOnceDynamicObject"/>, used to determine what the "fully-qualified" name of the
            object is.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.ReferenceEqualityComparer`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interface that compares objects by reference,
            ignoring any override of <see cref="M:System.Object.Equals(System.Object)"/> or <see cref="T:System.IEquatable`1"/>.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.ReferenceEqualityComparer`1.Default">
            <summary>
            Returns a default equality comparer for the type specified by the generic arguments.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether two objects of type T are the same reference.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Gets a hash code of the specified object.
            </summary>
            <param name="obj">The object for which to get a hash code.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Reflection.DynamicAssembly">
            <summary>
            Implements methods for creating a dynamic assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Reflection.DynamicAssembly.assemblyName">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Reflection.DynamicAssembly.assemblyBuilder">
            <summary>
            The one and only assembly builder.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Reflection.DynamicAssembly.moduleBuilder">
            <summary>
            The one and only module builder.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.DynamicAssembly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Reflection.DynamicAssembly"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.DynamicAssembly.CreatePublicType(System.String,System.Type,System.Type[])">
            <summary>
            Creates a public dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="baseClass">The base class for the created type.</param>
            <param name="interfaces">The interfaces implemented by the created type.</param>
            <returns>A <see cref="T:System.Reflection.Emit.TypeBuilder"/> used to construct the dynamic type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.DynamicAssembly.CreateInternalType(System.String,System.Type,System.Type[])">
            <summary>
            Creates an internal dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="baseClass">The base class for the created type.</param>
            <param name="interfaces">The interfaces implemented by the created type.</param>
            <returns>A <see cref="T:System.Reflection.Emit.TypeBuilder"/> used to construct the dynamic type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.DynamicAssembly.CreateType(System.Boolean,System.String,System.Type,System.Type[])">
            <summary>
            Creates a dynamic type.
            </summary>
            <param name="isPublic">A value indicating whether this type is public.</param>
            <param name="typeName">The name of the type.</param>
            <param name="baseClass">The base class for the created type.</param>
            <param name="interfaces">The interfaces implemented by the created type.</param>
            <returns>A <see cref="T:System.Reflection.Emit.TypeBuilder"/> used to construct the dynamic type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.DynamicAssembly.Dump">
            <summary>
            Writes the dynamic assembly to disk.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Reflection.ReflectionFactory">
            <summary>
            Contains methods for constructing <c>System.Reflection</c> classes from string specifications.
            </summary>
            <remarks>
            The expected format of the string specification passed to these functions is <c>[namespace.]type[.member], assemblyname</c>.
            <c>assemblyname</c> is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetConstructor(System.String,System.Type[])">
            <summary>
            Searches for the specified public constructor whose parameters match the specified argument types.
            </summary>
            <param name="specification">A member specification containing the type, constructor name, and assembly name of the public
            constructor to get.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the constructor to get.</param>
            <returns>An object representing the public constructor whose parameters match the specified argument types, if found;
            otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one constructor is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.constructor, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetConstructor(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified constructor whose parameters match the specified argument types and modifiers, using the
            specified binding constraints.
            </summary>
            <param name="specification">A member specification containing the type, constructor name, and assembly name of the
            constructor to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of
            an overloaded member, coersion of argument types, and invocation of a member through reflection.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the constructor to get.</param>
            <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the attributes associated with
            the corresponding element in the <paramref name="types"/> array.</param>
            <returns>An object representing the constructor that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one constructor is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional, -or- <paramref name="modifiers"/> is
            multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.constructor, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetConstructor(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified constructor whose parameters match the specified argument types and modifiers, using the
            specified binding constraints and the specified calling convention.
            </summary>
            <param name="specification">A member specification containing the type, constructor name, and assembly name of the
            constructor to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of
            an overloaded member, coersion of argument types, and invocation of a member through reflection.</param>
            <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments,
            how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the constructor to get.</param>
            <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the attributes associated with
            the corresponding element in the <paramref name="types"/> array.</param>
            <returns>An object representing the constructor that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one constructor is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional, -or- <paramref name="modifiers"/> is
            multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.constructor, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetEvent(System.String)">
            <summary>
            Searches for the public event with the specified name.
            </summary>
            <param name="specification">A member specification containing the type, event name, and assembly name of the public
            event to get.</param>
            <returns>An object that represents the public event with the specified name, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.event, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetEvent(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified event, using the specified binding constraints.
            </summary>
            <param name="specification">A member specification containing the type, event name, and assembly name of the
            event to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <returns>An object representing the event that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.event, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetField(System.String)">
            <summary>
            Searches for the public field with the specified name.
            </summary>
            <param name="specification">A member specification containing the type, field name, and assembly name of the public
            field to get.</param>
            <returns>An object that represents the public field with the specified name, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.field, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetField(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified field, using the specified binding constraints.
            </summary>
            <param name="specification">A member specification containing the type, field name, and assembly name of the
            field to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <returns>An object representing the field that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.field, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetMethod(System.String)">
            <summary>
            Searches for the public method with the specified name.
            </summary>
            <param name="specification">A member specification containing the type, method name, and assembly name of the public
            method to get.</param>
            <returns>An object that represents the public method with the specified name, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.method, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetMethod(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified method, using the specified binding constraints.
            </summary>
            <param name="specification">A member specification containing the type, method name, and assembly name of the
            method to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.method, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetMethod(System.String,System.Type[])">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types.
            </summary>
            <param name="specification">A member specification containing the type, method name, and assembly name of the public
            method to get.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the method to get.</param>
            <returns>An object representing the public method whose parameters match the specified argument types, if found;
            otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.method, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types and modifiers.
            </summary>
            <param name="specification">A member specification containing the type, method name, and assembly name of the public
            method to get.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the method to get.</param>
            <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the attributes associated with
            the corresponding element in the <paramref name="types"/> array.</param>
            <returns>An object representing the public method that matches the specified requirements, if found;
            otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional, -or- <paramref name="modifiers"/> is
            multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.method, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified method whose parameters match the specified argument types and modifiers, using the
            specified binding constraints.
            </summary>
            <param name="specification">A member specification containing the type, method name, and assembly name of the
            method to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of
            an overloaded member, coersion of argument types, and invocation of a member through reflection.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the method to get.</param>
            <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the attributes associated with
            the corresponding element in the <paramref name="types"/> array.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional, -or- <paramref name="modifiers"/> is
            multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.method, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified method whose parameters match the specified argument types and modifiers, using the
            specified binding constraints and the specified calling convention.
            </summary>
            <param name="specification">A member specification containing the type, method name, and assembly name of the
            method to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of
            an overloaded member, coersion of argument types, and invocation of a member through reflection.</param>
            <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments,
            how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the method to get.</param>
            <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the attributes associated with
            the corresponding element in the <paramref name="types"/> array.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional, -or- <paramref name="modifiers"/> is
            multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.method, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetProperty(System.String)">
            <summary>
            Searches for the public property with the specified name.
            </summary>
            <param name="specification">A member specification containing the type, property name, and assembly name of the public
            property to get.</param>
            <returns>An object representing the public property with the specified name, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.property, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetProperty(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified property, using the specified binding constraints.
            </summary>
            <param name="specification">A member specification containing the type, property name, and assembly name of the
            property to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <returns>An object representing the property that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.property, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetProperty(System.String,System.Type)">
            <summary>
            Searches for the public property with the specified name and return type.
            </summary>
            <param name="specification">A member specification containing the type, property name, and assembly name of the public
            property to get.</param>
            <param name="returnType">The return type of the property.</param>
            <returns>An object representing the public property with the specified name, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.property, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetProperty(System.String,System.Type[])">
            <summary>
            Searches for the specified public property whose parameters match the specified argument types.
            </summary>
            <param name="specification">A member specification containing the type, property name, and assembly name of the public
            property to get.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the property to get.</param>
            <returns>An object representing the public property whose parameters match the specified argument types, if found;
            otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.property, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetProperty(System.String,System.Type,System.Type[])">
            <summary>
            Searches for the specified public property whose parameters match the specified argument types and modifiers.
            </summary>
            <param name="specification">A member specification containing the type, property name, and assembly name of the public
            property to get.</param>
            <param name="returnType">The return type of the property.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the property to get.</param>
            <returns>An object representing the public property that matches the specified requirements, if found;
            otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.property, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified public property whose parameters match the specified argument types and modifiers.
            </summary>
            <param name="specification">A member specification containing the type, property name, and assembly name of the public
            property to get.</param>
            <param name="returnType">The return type of the property.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the property to get.</param>
            <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the attributes associated with
            the corresponding element in the <paramref name="types"/> array.</param>
            <returns>An object representing the public property that matches the specified requirements, if found;
            otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional, -or- <paramref name="modifiers"/> is
            multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.property, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Reflection.ReflectionFactory.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified property whose parameters match the specified argument types and modifiers, using the
            specified binding constraints and the specified calling convention.
            </summary>
            <param name="specification">A member specification containing the type, property name, and assembly name of the
            property to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that speciify how the search is performed.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of
            an overloaded member, coersion of argument types, and invocation of a member through reflection.</param>
            <param name="returnType">The return type of the property.</param>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters
            for the property to get.</param>
            <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterInfo"/> objects representing the attributes associated with
            the corresponding element in the <paramref name="types"/> array.</param>
            <returns>An object representing the property that matches the specified requirements, if found; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional, -or- <paramref name="modifiers"/> is
            multidimensional.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="specification"/> is <c>null</c>, -or- <paramref name="types"/>
            is <c>null</c>, -or- one of the elements in <paramref name="types"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="specification"/> is not in the correct format (see remarks).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="specification"/> contains an assembly that cannot
            be found.</exception>
            <exception cref="T:System.IO.FileLoadException"><paramref name="specification"/> contains an assembly that exists but cannot
            be loaded.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="specification"/> contains an invalid assembly.</exception>
            <remarks>
            The expected format of <paramref name="specification"/> is <c>[namespace.]type.property, assemblyname</c>. <c>assemblyname</c>
            is the full assembly name.  It may optionally include version, public key, and culture information.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.PrivateObjectAccessor">
            <summary>
            A wrapper class around an object that is not publicly accessible, or for accessing non-public fields
            on a publicly-accessible type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PrivateObjectAccessor.Type">
            <summary>
            Gets the <see cref="P:Microsoft.BI.Common.PrivateObjectAccessor.Type"/> which the <see cref="T:Microsoft.BI.Common.PrivateTypeAccessor"/> instance is wrapping.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PrivateObjectAccessor.Target">
            <summary>
            Gets the object which the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> instance is wrapping.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.#ctor(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> class around a new instance of an object
            of the specified type.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <param name="args">The arguments to pass to the constructor.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.#ctor(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> class around a new instance of an object
            of the specified type.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <param name="parameterTypes">The type of the object's constructor parameters.</param>
            <param name="args">The arguments to pass to the constructor.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> class around the specified object.
            </summary>
            <param name="target">The object instance to wrap.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> class around a new instance of the specified type
            in the specified assembly.
            </summary>
            <param name="assemblyPath">The path to the assembly containing the type to load.</param>
            <param name="fullyQualifiedTypeName">The fully-qualified name of the type to load.</param>
            <param name="args">The arguments to pass to the object constructor.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.#ctor(System.String,System.String,System.Type[],System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> class around a new instance of the specified type
            in the specified assembly.
            </summary>
            <param name="assemblyPath">The path to the assembly containing the type to load.</param>
            <param name="fullyQualifiedTypeName">The fully-qualified name of the type to load.</param>
            <param name="parameterTypes">The types of the constructor parameters.</param>
            <param name="args">The arguments to pass to the object constructor.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.#ctor(System.Reflection.Assembly,System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> class around a new instance of the specified type
            in the specified assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> containing the type to load.</param>
            <param name="fullyQualifiedTypeName">The fully-qualified name of the type to load.</param>
            <param name="args">The arguments to pass to the object constructor.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.#ctor(System.Reflection.Assembly,System.String,System.Type[],System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateObjectAccessor"/> class around a new instance of the specified type
            in the specified assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> containing the type to load.</param>
            <param name="fullyQualifiedTypeName">The fully-qualified name of the type to load.</param>
            <param name="parameterTypes">The type of the constructor parameters.</param>
            <param name="args">The arguments to pass to the object constructor.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.HasMember(System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Returns whether the type has a member with the specified name.
            </summary>
            <param name="name">The name of the field or property to get.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="types">An optional array of index types (for properties).</param>
            <returns>true if the object has a field or property with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.GetValue(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the specified field or property.
            </summary>
            <param name="name">The name of the field or property to get the value of.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <returns>The value of the field or property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.GetValue``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the specified field or property.
            </summary>
            <typeparam name="T">The type of the object being retrieved.</typeparam>
            <param name="name">The name of the field or property to get the value of.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <returns>The value of the field or property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.GetIndexedValue(System.String,System.Reflection.BindingFlags,System.Int32[])">
            <summary>
            Gets the value of the specified indexed property.
            </summary>
            <param name="name">The name of the property to get the value of.</param>
            <param name="flags">An optional  set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="indexes">The list of indexes into the property.</param>
            <returns>The value at the specified index of the property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.GetIndexedValue``1(System.String,System.Reflection.BindingFlags,System.Int32[])">
            <summary>
            Gets the value of the specified indexed property.
            </summary>
            <typeparam name="T">The type of the object being retrieved.</typeparam>
            <param name="name">The name of the property to get the value of.</param>
            <param name="flags">An optional  set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="indexes">The list of indexes into the property.</param>
            <returns>The value at the specified index of the property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.SetValue(System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the specified field or property.
            </summary>
            <param name="name">The name of the field or property to set the value of.</param>
            <param name="value">The value to assign.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.SetIndexedValue(System.String,System.Object,System.Reflection.BindingFlags,System.Int32[])">
            <summary>
            Sets the value of the specified indexed property.
            </summary>
            <param name="name">The name of the property to assign to.</param>
            <param name="value">The value to assign.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="indexes">The list of indexes to the property.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke(System.String,System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke``1(System.String,System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke``1(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke(System.String,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified generic method with the specified arguments and generic types.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke``1(System.String,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified generic method with the specified arguments and generic types.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="parameterTypes">The type of th method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method, if generic.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateObjectAccessor.Invoke``1(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="parameterTypes">The type of th method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method, if generic.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.PrivateTypeAccessor">
            <summary>
            A wrapper class around a type that is not publicly accessible, or for accessing non-public, static fields
            on a publicly-accessible type.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.PrivateTypeAccessor.Type">
            <summary>
            Gets the <see cref="P:Microsoft.BI.Common.PrivateTypeAccessor.Type"/> which the <see cref="T:Microsoft.BI.Common.PrivateTypeAccessor"/> instance is wrapping.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateTypeAccessor"/> class around the specified type.
            </summary>
            <param name="type">The type to wrap.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.PrivateTypeAccessor"/> class around the specified assembly and type.
            </summary>
            <param name="assemblyPath">The path to the assembly containing the type to load.</param>
            <param name="fullyQualifiedTypeName">The fully-qualified name of the type to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a n ew instance of the <see cref="T:Microsoft.BI.Common.PrivateTypeAccessor"/> around the specified type from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> that contains the type.</param>
            <param name="fullyQualifiedTypeName">The fully-qualified name of the type to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.HasMember(System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Returns whether the type has a member with the specified name.
            </summary>
            <param name="name">The name of the field or property to get.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="types">An optional array of index types (for properties).</param>
            <returns>true if the object has a field or property with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.GetValue(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the specified field or property.
            </summary>
            <param name="name">The name of the field or property to get the value of.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <returns>The value of the field or property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.GetValue``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the specified field or property.
            </summary>
            <typeparam name="T">The type of the object being retrieved.</typeparam>
            <param name="name">The name of the field or property to get the value of.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <returns>The value of the field or property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.GetIndexedValue(System.String,System.Reflection.BindingFlags,System.Int32[])">
            <summary>
            Gets the value of the specified indexed property.
            </summary>
            <param name="name">The name of the property to get the value of.</param>
            <param name="flags">An optional  set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="indexes">The list of indexes into the property.</param>
            <returns>The value at the specified index of the property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.GetIndexedValue``1(System.String,System.Reflection.BindingFlags,System.Int32[])">
            <summary>
            Gets the value of the specified indexed property.
            </summary>
            <typeparam name="T">The type of the object being retrieved.</typeparam>
            <param name="name">The name of the property to get the value of.</param>
            <param name="flags">An optional  set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="indexes">The list of indexes into the property.</param>
            <returns>The value at the specified index of the property.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.SetValue(System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the specified field or property.
            </summary>
            <param name="name">The name of the field or property to set the value of.</param>
            <param name="value">The value to assign.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.SetIndexedValue(System.String,System.Object,System.Reflection.BindingFlags,System.Int32[])">
            <summary>
            Sets the value of the specified indexed property.
            </summary>
            <param name="name">The name of the property to assign to.</param>
            <param name="value">The value to assign.</param>
            <param name="flags">An optional set of <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="indexes">The list of indexes to the property.</param>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke(System.String,System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke``1(System.String,System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke``1(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke(System.String,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified generic method with the specified arguments and generic types.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke``1(System.String,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified generic method with the specified arguments and generic types.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="parameterTypes">The type of the method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="parameterTypes">The type of th method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method, if generic.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.PrivateTypeAccessor.Invoke``1(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Type[])">
            <summary>
            Invokes the specified method with the specified arguments.
            </summary>
            <typeparam name="T">The type of the return value of the method.</typeparam>
            <param name="name">The name of the method to invoke.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to include.</param>
            <param name="parameterTypes">The type of th method's parameters.</param>
            <param name="args">The arguments to pass to the method.</param>
            <param name="typeArguments">The type arguments to pass to the generic method, if generic.</param>
            <returns>The result of invoking the specified method with the specified arguments.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.RetryEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.RetryExecutor`1.Retry"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.RetryEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.SuccessEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.RetryExecutor`1.Success"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.SuccessEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.FailureEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.RetryExecutor`1.Failure"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.FailureEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.RetryExecutor">
            <summary>
            Provides the ability to execute a given method in a retry mode.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor.#ctor(System.Action)">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor"/> with the given method.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <remarks>The retry limit would be defaulted to 3.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor.#ctor(System.Action,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor"/> with the given method and retry limit.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <param name="retryLimit">The number of times to retry the <paramref name="method"/> if it fails.</param>     
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="retryLimit"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor.#ctor(System.Action,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor"/> with the given method, retry limit and retry interval.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <param name="retryLimit">The number of times to retry the <paramref name="method"/> if it fails.</param>
            <param name="retryInterval">The amount of time to wait before retrying.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="retryLimit"/> is less than or equal to zero -or - <paramref name="retryInterval"/> is less than <c>TimeSpan.Zero</c></exception>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor.Execute">
            <summary>
            Executes the given method in retry mode.
            </summary>
            <exception cref="T:System.AggregateException">Number of retries exceeds the retry limit specified.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.RetryEventArgs">
            <summary>
            Provides information about the <see cref="E:Microsoft.BI.Common.RetryExecutor`1.Retry"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RetryEventArgs.#ctor(System.Int32,System.Exception)">
            <summary>
            Initializes <see cref="T:Microsoft.BI.Common.RetryEventArgs"/> with the given retry attempt and the exception encountered.
            </summary>
            <param name="retryAttempt">Number of retry attempts made.</param>
            <param name="exception">The <see cref="T:System.Exception"/> thrown by the retrying function.</param>
        </member>
        <member name="P:Microsoft.BI.Common.RetryEventArgs.RetryAttempt">
            <summary>
            Gets the current retry attempt number.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.RetryEventArgs.ActualException">
            <summary>
            Gets the exception thrown in the current retry attempt.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.SuccessEventArgs">
            <summary>
            Provides information about the <see cref="E:Microsoft.BI.Common.RetryExecutor`1.Success"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SuccessEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes <see cref="T:Microsoft.BI.Common.SuccessEventArgs"/> with the given retry attempts.
            </summary>
            <param name="retryAttempts">Number of retries attempted.</param>
        </member>
        <member name="P:Microsoft.BI.Common.SuccessEventArgs.RetryAttempts">
            <summary>
            Gets the total number of retries attempted.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.FailureEventArgs">
            <summary>
            Provides information about the <see cref="E:Microsoft.BI.Common.RetryExecutor`1.Failure"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.FailureEventArgs.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes <see cref="T:Microsoft.BI.Common.FailureEventArgs"/> with the geiven <paramref name="retryAttempts"/> and <paramref name="exceptions"/>
            </summary>
            <param name="retryAttempts">Number of retries attempted.</param>
            <param name="exceptions">Exceptions encountered in each retry attempt.</param>
        </member>
        <member name="P:Microsoft.BI.Common.FailureEventArgs.RetryAttempts">
            <summary>
            Gets the total number of retries attempted.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.FailureEventArgs.Exceptions">
            <summary>
            Gets the list of exceptions encountered in each retry attempt.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.RetryExecutor`1">
            <summary>
            Provides the ability to execute a given method in a retry mode and return <typeparamref name="T"/> back to the caller.
            </summary>
            <typeparam name="T">The type of the value the retry method should return.</typeparam>
        </member>
        <member name="P:Microsoft.BI.Common.RetryExecutor`1.RetryLimit">
            <summary>
            Number of times to retry.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.RetryExecutor`1.RetryInterval">
            <summary>
            The amount of time to wait before each retry attempt.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.RetryExecutor`1.Retry">
            <summary>
            Gets invoked during each retry attempt.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.RetryExecutor`1.Success">
            <summary>
            Gets invoked when the method succeeds within the retry limit specified.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.RetryExecutor`1.Failure">
            <summary>
            Gets invoked when the retry limit specified is exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor`1"/> with the given method.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <remarks>The retry limit would be defaulted to 3.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor`1"/> with the given method and retry limit.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <param name="retryLimit">The number of times to retry the <paramref name="method"/> if it fails.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="retryLimit"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor`1.#ctor(System.Func{`0},System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor`1"/> with the given method, retry limit and retry interval.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <param name="retryLimit">The number of times to retry the <paramref name="method"/> if it fails.</param>
            <param name="retryInterval">The amount of time to wait before retrying.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="retryLimit"/> is less than or equal to zero -or - <paramref name="retryInterval"/> is less than <c>TimeSpan.Zero</c></exception>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor`1.#ctor(System.Func{`0},System.Func{`0})">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor`1"/> with the given method and failure return method.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <param name="failureReturnMethod">The method to execute if the retry limit exceeded to return a default value.</param>
            <remarks>The retry limit would be defaulted to 3.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor`1.#ctor(System.Func{`0},System.Func{`0},System.Int32)">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor`1"/> with the given method, failure return method and retry limit.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <param name="failureReturnMethod">The method to execute if the retry limit exceeded to return a default value.</param>
            <param name="retryLimit">The number of times to retry the <paramref name="method"/> if it fails.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="retryLimit"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor`1.#ctor(System.Func{`0},System.Func{`0},System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:Microsoft.BI.Common.RetryExecutor`1"/> with the given method, failure return method and retry limit.
            </summary>
            <param name="method">The method to be executed in retry mode.</param>
            <param name="failureReturnMethod">The method to execute if the retry limit exceeded to return a default value.</param>
            <param name="retryLimit">The number of times to retry the <paramref name="method"/> if it fails.</param>
            <param name="retryInterval">The amount of time to wait before each retry attempt.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="retryLimit"/> is less than or equal to zero -or - <paramref name="retryInterval"/> is less than <c>TimeSpan.Zero</c></exception>
        </member>
        <member name="M:Microsoft.BI.Common.RetryExecutor`1.Execute">
            <summary>
            Executes the given method in retry mode.
            </summary>
            <returns>Returns <typeparamref name="T"/> specified while initializing this instance.</returns>
            <remarks>
            When provided, the failed return method will be executed if the number of retries attempted exceeds the retry limit to return a default value. 
            Otherwise throws <see cref="T:System.AggregateException"/> exception.
            </remarks>
            <exception cref="T:System.AggregateException">Number of retries exceeds the retry limit specified.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DataColumnEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation for comparing <see cref="T:System.Data.DataColumn"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DataColumnEqualityComparer.Equals(System.Data.DataColumn,System.Data.DataColumn)">
            <summary>
            Determines whether the specified <see cref="T:System.Data.DataColumn"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:System.Data.DataColumn"/> to compare.</param>
            <param name="y">The second <see cref="T:System.Data.DataColumn"/> to compare.</param>
            <returns><c>true</c> if the <see cref="T:System.Data.DataColumn"/> instances are equal; otherwise, <c>false</c>.</returns>
            <remarks>
            <see cref="T:System.Data.DataColumn"/> objects are considered equal if both instances are <c>null</c> or if both instances are not <c>null</c>
            and <see cref="P:System.Data.DataColumn.ColumnName"/>, <see cref="P:System.Data.DataColumn.AllowDBNull"/>, and <see cref="P:System.Data.DataColumn.DataType"/> property values
            are equal.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DataColumnEqualityComparer.GetHashCode(System.Data.DataColumn)">
            <summary>
            Returns a hash code for the specified <see cref="T:System.Data.DataColumn"/>.
            </summary>
            
            <param name="obj">The <see cref="T:System.Data.DataColumn"/> for which the hash code is to be returned.</param>
            <returns>A hash code for the specified <see cref="T:System.Data.DataColumn"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.ColumnInfo">
            <summary>
            Struct to cache schema-related DataColumn extension results.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DsvDataColumnExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Data.DataColumn"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.CodePageProperty">
            <summary>
            The CodePage extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.DataSizeProperty">
            <summary>
            The DataSize extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.DefaultValueProperty">
            <summary>
            The DefaultValue extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.ExtendedDataTypeProperty">
            <summary>
            The ExtendedDataType extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.NullValueProperty">
            <summary>
            The NullValue extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.NullStringProperty">
            <summary>
            The NullString extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.PrecisionProperty">
            <summary>
            The Precision extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.ScaleProperty">
            <summary>
            The Scale extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.SortKeyPosProperty">
            <summary>
            The SortKeyPos extended property string.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetNullValue(System.Data.DataColumn)">
            <summary>
            Get the NullValue extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The NullValue enumeration value for this column, or NullValue.Preserve if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetNullString(System.Data.DataColumn)">
            <summary>
            Gets the NullString extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The NullString for this column, or String.Empty if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetDefaultValueAsString(System.Data.DataColumn)">
            <summary>
            Gets the DefaultValue extended property of a DataColumn loaded from a DSV as a string.
            </summary>
            <param name="column">The column to check.</param>
            <returns>A DefaultValue string for this column as a string, or the default for the data type
            as a string if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetDefaultValueAsString(System.Data.DataColumn,Microsoft.BI.Common.DataTypeFormatter)">
            <summary>
            Gets the DefaultValue extended property of a DataColumn loaded from a DSV as a string.
            </summary>
            <param name="column">The column to check.</param>
            <param name="formatProvider">The DataTypeFormatProvider to use when formatting the string.</param>
            <returns>The DefaultValue string for this column as a string, or the default for the data type
            as a string if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetDefaultValue(System.Data.DataColumn)">
            <summary>
            Gets the DefaultValue extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The DefaultValue string for this column converted to the data type, or the default
            for the data type if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetDefaultValue(System.Data.DataColumn,Microsoft.BI.Common.DataTypeFormatter)">
            <summary>
            Gets the DefaultValue extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <param name="formatProvider">The DataTypeFormatProvider to use when parsing the value in the DSV.</param>
            <returns>The DefaultValue string for this column converted to the data type, or the default
            for the data type if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetExtendedDataType(System.Data.DataColumn)">
            <summary>
            Gets the ExtendedDataType property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The DataType of the column.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetDataTypeAttributes(System.Data.DataColumn)">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> property of a <see cref="T:System.Data.DataColumn"/> loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.DataTypeAttributes"/> of the column.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetDataSize(System.Data.DataColumn)">
            <summary>
            Get the DataSize extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The DataSize of the column, or 0 if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetEncoding(System.Data.DataColumn)">
            <summary>
            Get the Encoding of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The Encoding associated with the CodePage extended property, or the default for the column type
            if not explicitly specified.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetCodePage(System.Data.DataColumn)">
            <summary>
            Get the CodePage extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The CodePage of the column, or 0 if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetSortKeyPosition(System.Data.DataColumn)">
            <summary>
            Get the SortKeyPos extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The SortKeyPos of the column, or 0 if not explicitly specified.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetPrecision(System.Data.DataColumn)">
            <summary>
            Get the Precision extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The Precision of the column, or 0 if not explicitly specified.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetScale(System.Data.DataColumn)">
            <summary>
            Get the Scale extended property of a DataColumn loaded from a DSV.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The Scale of the column, or 0 if not explicitly specified.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetExtendedDataTypeAsString(System.Data.DataColumn)">
            <summary>
            Get the extended data type of a column as a human-readable string.
            </summary>
            <param name="column">The column to check.</param>
            <returns>The full extended data type as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataColumnExtensions.GetDataType(System.Data.DataColumn)">
            <summary>
            Returns the "true" <see cref="T:System.Type"/> of the <see cref="T:System.Data.DataColumn"/>, including accounting for nullability.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> to get the <see cref="T:System.Type"/> of.</param>
            <returns>The <see cref="T:System.Type"/> of this <see cref="T:System.Data.DataColumn"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DataTableEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation for comparing <see cref="T:System.Data.DataTable"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DataTableEqualityComparer.DataColumnComparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare the columns of the tables.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DataTableEqualityComparer.Equals(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Determines whether the specified <see cref="T:System.Data.DataTable"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:System.Data.DataTable"/> to compare.</param>
            <param name="y">The second <see cref="T:System.Data.DataTable"/> to compare.</param>
            <returns><c>true</c> if the <see cref="T:System.Data.DataTable"/> instances are equal; otherwise, <c>false</c>.</returns>
            <remarks>
            <see cref="T:System.Data.DataTable"/> objects are considered equal if both instances are <c>null</c> or if both instances are not <c>null</c>
            and their number of columns is the same and if each column is equal.  See <see cref="T:Microsoft.BI.Common.Schema.DataColumnEqualityComparer"/> for details
            on what makes two columns equal.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DataTableEqualityComparer.GetHashCode(System.Data.DataTable)">
            <summary>
            Returns a hash code for the specified <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Data.DataTable"/> for which the hash code is to be returned.</param>
            <returns>A hash code for the specified <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DsvDataTableExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Data.DataTable"/> instances for intereacting with Data Source View (DSV) files.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.GetRecordDelimiter(System.Data.DataTable)">
            <summary>
            Get the RecordDelimiter extended property from a table loaded from a DSV.
            </summary>
            <param name="table">The DSV table to check.</param>
            <returns>The record delimiter for the table, or ',' if not explicitly specified.</returns>
            <exception cref="T:System.ArgumentException">The RecordDelimiter extended property is not a supported value.</exception>
            <exception cref="T:System.ArgumentNullException">The RecordDelimiter extended property is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.GetDataCompression(System.Data.DataTable)">
            <summary>
            Get the <see cref="T:Microsoft.BI.Common.DataCompression"/> extended property from a table loaded from a DSV.
            </summary>
            <param name="table">The DSV table to check.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.DataCompression"/> of the table, or <see cref="F:Microsoft.BI.Common.DataCompression.Default"/>
            if not explicitly specified.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.GetDataFormat(System.Data.DataTable)">
            <summary>
            Get the <see cref="T:Microsoft.BI.Common.DataFormat"/> extended property from a table loaded from a DSV.
            </summary>
            <param name="table">The DSV to check.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.DataFormat"/> of the table, or <see cref="F:Microsoft.BI.Common.DataFormat.Default"/> if not explicitly specified.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.GetLineDelimiter(System.Data.DataTable)">
            <summary>
            Get the line delimited extended property from a table loaded from a DSV.
            </summary>
            <param name="table">The DSV to check.</param>
            <returns>The line delimiter of the table, or <see cref="P:System.Environment.NewLine"/> if not explicitly specified.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.GetHashExpression(System.Data.DataTable)">
            <summary>
            Gets the hash expression extended property from a table loaded from a DSV.
            </summary>
            <param name="table">The DSV to check.</param>
            <returns>The hash expression of the table, or <see cref="F:System.String.Empty"/> if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.GetPartitionHigh(System.Data.DataTable)">
            <summary>
            Gets the PartitionHigh extended property from a table loaded from a DSV.
            </summary>
            <param name="table">The DSV to check.</param>
            <returns>The PartitionHigh value of the table, or 0 if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.GetPartitionLow(System.Data.DataTable)">
            <summary>
            Gets the PartitionLow extended property from a table loaded from a DSV.
            </summary>
            <param name="table">The DSV to check.</param>
            <returns>The PartitionLow value of the table, or 0 if not explicitly defined.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.AddWithCLRTypeRules(System.Data.DataColumnCollection,System.String,System.Type)">
            <summary>
            Creates and adds a <see cref="T:System.Data.DataColumn"/> object that has the specified name and type to the
            <see cref="T:System.Data.DataColumnCollection"/>.</summary>
            <param name="instance">The <see cref="T:System.Data.DataColumnCollection"/> where the column will be added.</param>
            <param name="columnName">The name of the column to create.</param>
            <param name="columnType">The type of the column to create.</param>
            <returns>The newly created <see cref="T:System.Data.DataColumn"/>.</returns>
            <exception cref="T:System.Data.DuplicateNameException">The collection already has a column with the specified name
            (the comparison is not case-sensitive).</exception>
            <remarks>
            Unlike <see cref="M:System.Data.DataColumnCollection.Add(System.String,System.Type)"/>, this method takes into account the nullability of the
            type in question when determining whether the <see cref="P:System.Data.DataColumn.AllowDBNull"/> property is true or false.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTableExtensions.AddWithCLRTypeRules(System.Data.DataColumnCollection,System.String,System.Type,System.Object)">
            <summary>
            Creates and adds a <see cref="T:System.Data.DataColumn"/> object that has the specified name and type to the
            <see cref="T:System.Data.DataColumnCollection"/>.</summary>
            <param name="instance">The <see cref="T:System.Data.DataColumnCollection"/> where the column will be added.</param>
            <param name="columnName">The name of the column to create.</param>
            <param name="columnType">The type of the column to create.</param>
            <param name="defaultValue">The default value of the new column. </param>
            <returns>The newly created <see cref="T:System.Data.DataColumn" />.</returns>
            <exception cref="T:System.Data.DuplicateNameException">The collection already has a column with the specified name.
            (the comparison is not case-sensitive).</exception>
            <remarks>
            Unlike <see cref="M:System.Data.DataColumnCollection.Add(System.String,System.Type)"/>, this method takes into account the nullability of the
            type in question when determining whether the <see cref="P:System.Data.DataColumn.AllowDBNull"/> property is true or false.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DsvDataTable">
            <summary>
            Wrapper class around <see cref="T:System.Data.DataTable"/> that provides some helpful tools for performing common tasks
            with DSV tables.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.ColumnHeaderProperty">
            <summary>
            The ColumnHeader extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.CsvQuotationProperty">
            <summary>
            The CsvQuotation extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.DataCompressionProperty">
            <summary>
            The DataCompression extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.DataFormatProperty">
            <summary>
            The DataFormat extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.EncodingProperty">
            <summary>
            The Encoding extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.FormatProviderProperty">
            <summary>
            The FormatProvider extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.HashExpressionProperty">
            <summary>
            The HashExpression extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.LineDelimiterProperty">
            <summary>
            The LineDelimiter extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.PartitionHighProperty">
            <summary>
            The PartitionHigh extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.PartitionLowProperty">
            <summary>
            The PartitionLow extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.RecordDelimiterProperty">
            <summary>
            The RecordDelimiter extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.RetentionProperty">
            <summary>
            The Retention extended property string.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvDataTable.StorageModeProperty">
            <summary>
            The StorageMode extended property string.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> class with the specified table name.
            </summary>
            <param name="tableName">The name to give to the table.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> class based on the DSV at the specified path.
            </summary>
            <param name="dsvPath">The path to the DSV.</param>
            <param name="tableName">The name of the table in <paramref name="dsvPath"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> class based on the specified <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> to copy schema and data from.</param>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.ColumnHeader">
            <summary>
            Gets or sets whether the table has a column header.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.CsvQuotation">
            <summary>
            Gets or sets whether the table uses CSV quotation.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.DataCompression">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataCompression"/> of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.DataFormat">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataFormat"/> of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.Encoding">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.Encoding"/> of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.FieldDelimiter">
            <summary>
            Gets or sets the field delimiter of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.HashExpression">
            <summary>
            Gets or sets the HashExpression of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.PartitionHigh">
            <summary>
            Gets or sets the top partition of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.PartitionLow">
            <summary>
            Gets or sets the bottom partition of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.Retention">
            <summary>
            Gets or sets the retention period of this table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.StorageMode">
            <summary>
            Gets or sets the <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.StorageMode"/> of the table.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvDataTable.FormatProvider">
            <summary>
            Gets or sets the <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> used to format data in the table with
            <see cref="M:Microsoft.BI.Common.Schema.DsvDataTable.Write(System.String,System.Nullable{Microsoft.BI.Common.DataFormat},System.Nullable{Microsoft.BI.Common.DataCompression},System.Nullable{System.Boolean},System.Nullable{System.Char},System.Nullable{System.Boolean},System.Text.Encoding,Microsoft.BI.Common.DataTypeFormatProvider)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Read(System.String,System.Nullable{Microsoft.BI.Common.DataFormat},System.Nullable{Microsoft.BI.Common.DataCompression},System.Nullable{System.Boolean},System.Nullable{System.Char},System.Nullable{System.Boolean},System.Text.Encoding,Microsoft.BI.Common.DataTypeFormatProvider)">
            <summary>
            Read the specified file and populate the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/>, optionally allowing format, compression, and
            other options to be overridden.
            </summary>
            <param name="path">The file to read the data from.</param>
            <param name="format">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataFormat"/> of the file.</param>
            <param name="compression">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataCompression"/> of the file.</param>
            <param name="header">Whether to skip the CSV header when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="delimiter">The field delimiter to use when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="useCsvQuotation">Whether to use CSV quotation when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.Encoding"/> to use when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="formatProvider">The <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> to use when <paramref name="format"/> is not <see cref="F:Microsoft.BI.Common.DataFormat.DTS"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Read(System.IO.Stream,System.Nullable{Microsoft.BI.Common.DataFormat},System.Nullable{Microsoft.BI.Common.DataCompression},System.Nullable{System.Boolean},System.Nullable{System.Char},System.Nullable{System.Boolean},System.Text.Encoding,Microsoft.BI.Common.DataTypeFormatProvider)">
            <summary>
            Read the specified stream and populate the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/>, optionally allowing format, compression, and
            other options to be overridden.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <param name="format">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataFormat"/> of the file.</param>
            <param name="compression">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataCompression"/> of the file.</param>
            <param name="header">Whether to skip the CSV header when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="delimiter">The field delimiter to use when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="useCsvQuotation">Whether to use CSV quotation when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.Encoding"/> to use when <paramref name="format"/> is <see cref="F:Microsoft.BI.Common.DataFormat.CSV"/>.</param>
            <param name="formatProvider">The <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> to use when <paramref name="format"/> is not <see cref="F:Microsoft.BI.Common.DataFormat.DTS"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.GetDataReader(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> suitable for loading data into this table.
            </summary>
            <param name="path">The file containing the data to read.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> suitable for reading data from the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.GetDataReader(System.IO.Stream)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> suitable for loading data into this table.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the data to read.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> suitable for reading data from the stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Read(System.String)">
            <summary>
            Reads data from a file and populate the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/>.
            </summary>
            <param name="path">The file containing the data to read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Read(System.IO.Stream)">
            <summary>
            Reads data from a <see cref="T:System.IO.Stream"/> and populate the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/>.
            </summary>
            <param name="stream">The stream containing the data to read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Read(Microsoft.BI.Common.IO.IDataReader)">
            <summary>
            Read data from a <see cref="T:Microsoft.BI.Common.IO.IDataReader"/>
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.IO.IDataReader"/> to use to read the data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Write(System.String,System.Nullable{Microsoft.BI.Common.DataFormat},System.Nullable{Microsoft.BI.Common.DataCompression},System.Nullable{System.Boolean},System.Nullable{System.Char},System.Nullable{System.Boolean},System.Text.Encoding,Microsoft.BI.Common.DataTypeFormatProvider)">
            <summary>
            Write the current contents of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> to the specified path, optionally allowing format, compression, and
            other options to be overridden.
            </summary>
            <param name="path">The path to write the data to.</param>
            <param name="format">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataFormat"/> of the file to write.</param>
            <param name="compression">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataCompression"/> of the file to write.</param>
            <param name="header">Whether to write a CSV header when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="delimiter">The field delimiter to use when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="useCsvQuotation">Whether to use CSV quotation when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.Encoding"/> to use when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="formatProvider">The <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> to use when <paramref name="format"/> is not <see cref="F:DataFormat.DTS"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Write(System.IO.Stream,System.Nullable{Microsoft.BI.Common.DataFormat},System.Nullable{Microsoft.BI.Common.DataCompression},System.Nullable{System.Boolean},System.Nullable{System.Char},System.Nullable{System.Boolean},System.Text.Encoding,Microsoft.BI.Common.DataTypeFormatProvider)">
            <summary>
            Write the current contents of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> to the specified stream, optionally allowing format, compression, and
            other options to be overridden.
            </summary>
            <param name="stream">The stream to write the data to.</param>
            <param name="format">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataFormat"/> of the file to write.</param>
            <param name="compression">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.DataCompression"/> of the file to write.</param>
            <param name="header">Whether to write a CSV header when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="delimiter">The field delimiter to use when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="useCsvQuotation">Whether to use CSV quotation when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="encoding">The <see cref="P:Microsoft.BI.Common.Schema.DsvDataTable.Encoding"/> to use when <paramref name="format"/> is <see cref="F:DataFormat.CSV"/>.</param>
            <param name="formatProvider">The <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> to use when <paramref name="format"/> is not <see cref="F:DataFormat.DTS"/>.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.GetDataWriter(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> suitable for writing data from this table to a file.
            </summary>
            <param name="path">The file into which to write the data.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> suitable for writing data to the file.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.GetDataWriter(System.IO.Stream)">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> suitable for writing data from this table to a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> into which to write the data.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> suitable for writing data to the stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Write(System.String)">
            <summary>
            Writes the data in the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> to a file.
            </summary>
            <param name="path">The file into which to write the data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Write(System.IO.Stream)">
            <summary>
            Writes the data in the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream into which to write the data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.Write(Microsoft.BI.Common.IO.IDataWriter)">
            <summary>
            Write the current contents of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> using the specified <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:Microsoft.BI.Common.IO.IDataWriter"/> to use to write the data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.TypelessClone">
            <summary>
            Returns a copy of the <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> with all column data types set to string.
            </summary>
            <returns>A <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> instance with all column types set to (unbounded) strings.</returns>
            <remarks>This method can be used to return a <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> copy suitable for reading an input
            as a string without performing any validations on its content.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.ReadSchemaImplicit(System.String)">
            <summary>
            Reads schema from the first row from a file.
            </summary>
            <param name="file">The file to read.</param>
            <remarks>As the data type cannot be inferred from merely reading a row, all columns will be set to string type.
            Column names are taken from the header row.  If the first row does not contain a header, then column names are
            assigned from their index.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.ReadSchemaImplicit(System.IO.Stream)">
            <summary>
            Reads schema from the first row from a stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <remarks>As the data type cannot be inferred from merely reading a row, all columns will be set to string type.
            Column names are taken from the header row.  If the first row does not contain a header, then column names are
            assigned from their index.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvDataTable.ParseDsvTimeSpan(System.String)">
            <summary>
            Parses a timespan of the form "last &lt;num&gt; (seconds|minutes|hours|days)" or "never" into a
            <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="dsvTimeSpan">The string to parse.</param>
            <returns>The resulting <see cref="T:System.TimeSpan"/> object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dsvTimeSpan"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="dsvTimeSpan"/> is not in the expected format.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.NullValue">
            <summary>
            Defines the read/write behavior when a column contains null.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValue.Error">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValue.ConvertZeroToNull">
            <summary>
            Convert any value of 0 or empty to null.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValue.Convert">
            <summary>
            Convert any null to either the default value for the type (usually 0)
            or to the value specified in DefaultValue, if present.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValue.Preserve">
            <summary>
            Preserve any null values.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValue.None">
            <summary>
            Do not enforce null value restrictions.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValue.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.NullValue.Preserve"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DataOverflowMode">
            <summary>
            Define the read/write behavior of components with respect to their
            handling of data that overflows the allocated buffer size (strings and byte
            arrays) or maximum/minimum values (numeric types).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DataOverflowMode.DefaultValue">
            <summary>
            Use the default value for the column.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DataOverflowMode.Drop">
            <summary>
            Drop the entire row.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DataOverflowMode.Error">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DataOverflowMode.Trim">
            <summary>
            Trim the value to the maximum length (string and byte[]) or maximum/minimum
            size (numeric types).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DataOverflowMode.None">
            <summary>
            Do not enforce maximum sizes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DataOverflowMode.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.DataOverflowMode.Error"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.ConversionErrorMode">
            <summary>
            Define the read/write behavior of components when there is a problem
            with converting input data to the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ConversionErrorMode.DefaultValue">
            <summary>
            Use the default value for the column.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ConversionErrorMode.Drop">
            <summary>
            Drop the entire row.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ConversionErrorMode.Error">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ConversionErrorMode.None">
            <summary>
            No handling at all (use at your own risk).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ConversionErrorMode.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.ConversionErrorMode.Error"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.ExtraColumnsMode">
            <summary>
            Define the read/write behavior of components when more than
            the expected number of columns are present in the input.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ExtraColumnsMode.Drop">
            <summary>
            Drop the entire row.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ExtraColumnsMode.Error">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ExtraColumnsMode.Ignore">
            <summary>
            Ignore extra columns.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ExtraColumnsMode.None">
            <summary>
            No handling at all (use at your own risk).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.ExtraColumnsMode.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.ExtraColumnsMode.Error"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.MissingColumnsMode">
            <summary>
            Define the read/write behavior of components when fewer than
            the expected number of columns are present in the input.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.MissingColumnsMode.Drop">
            <summary>
            Drop the entire row.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.MissingColumnsMode.Error">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.MissingColumnsMode.DefaultValue">
            <summary>
            Use the default value for the column.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.MissingColumnsMode.None">
            <summary>
            No handling at all (use at your own risk).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.MissingColumnsMode.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.MissingColumnsMode.Error"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.NullValueMode">
            <summary>
            Define the read/write behavior of components when processing null values.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueMode.Schema">
            <summary>
            Perform conversion as specified by the schema.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueMode.None">
            <summary>
            Do not perform any conversion.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueMode.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.NullValueMode.Schema"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.NullValueErrorMode">
            <summary>
            Define the read/write behavior of components when a null value is found
            in a column that the schema explicitly disallows.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueErrorMode.DefaultValue">
            <summary>
            Use the default value for the column.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueErrorMode.Drop">
            <summary>
            Drop the entire row.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueErrorMode.Error">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueErrorMode.Ignore">
            <summary>
            Leave the null value.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueErrorMode.None">
            <summary>
            No handling at all (synonym for <see cref="F:Microsoft.BI.Common.Schema.NullValueErrorMode.Ignore"/>).
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.NullValueErrorMode.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.NullValueErrorMode.Error"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.StorageMode">
            <summary>
            Define the supported storage modes.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.StorageMode.MetadataOnly">
            <summary>
            Table contains only schema information.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.StorageMode.NumberTimePartition">
            <summary>
            Table contains both schema as well as data format, retention, and partitioning information.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.StorageMode.Default">
            <summary>
            Default behavior (synonym for <see cref="F:Microsoft.BI.Common.Schema.StorageMode.MetadataOnly"/>).
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DsvUtilities">
            <summary>
            Provides utility methods for interacting with Data Source View (DSV) files.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.DsvUtilities._Cache">
            <summary>
            Cache of retrieved <see cref="T:System.Data.DataSet"/> objects for faster repeat access.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetAllDsvTables(System.String,System.Boolean)">
            <summary>
            Get a <see cref="T:System.Data.DataSet"/> containing all the DSV tables within a specified DSV.
            </summary>
            <param name="path">The DSV file to read.</param>
            <param name="refresh">Whether to force reading from disk; if <c>false</c>, the cached table value will be used,
            if available.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing all the DSV tables in the file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a file that cannot be found.</exception>
            <remarks>
            <para>
            This method returns a <see cref="T:System.Data.DataSet"/> containing all the <see cref="T:System.Data.DataTable"/> objects that are defined
            in the specified DSV.
            </para>
            <para>
            When a DSV is read, the result is cached in order to make subsequent access faster.  To force the DSV to be reread
            from disk, set <paramref name="refresh"/> to <c>true</c>.  Refreshing from disk will replace any existing cache entry
            with the new <see cref="T:System.Data.DataSet"/> from the DSV.  Note that caching is performed based on the full name of the DSV as
            called from this method - if two different paths point to the same file (such as through a symbolic link, directory
            junction, or network share), each will have its own cache entry, and changes to one will not affect the others.
            </para>
            <para>
            If the DSV contains one or more data tables with non-primitive types, the .NET runtime must be able to resolve these
            types by loading their type definition from the DLL in which they are defined.  This typically means that the DLL
            containing the type definition must be in the executing assembly's base directory (or the app domain's base directory,
            if loaded as a separate app domain) or installed into the Global Assembly Cache (GAC).
            </para>
            <para>
            Non-primitive types include most structs, collections, non-builting C# types, and any user-defined type.  A column with
            a non-primitive type can be identified within a DSV file by looking for the
            <c>msdata:DataType="fully-qualified-name, assembly-name"</c> attribute on the column. <c>fully-qualified-name</c> is the
            fully-qualified name of the type of this column, while <c>assembly-name</c> is the name of the assembly in which the
            type is defined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetAllDsvTables(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Get a <see cref="T:System.Data.DataSet"/> containing all the DSV tables within a specified DSV.
            </summary>
            <param name="dsvStream">The DSV stream to read.</param>
            <param name="name">The DSV filename.</param>
            <param name="refresh">Whether to force reading from disk; if <c>false</c>, the cached table value will be used,
            if available.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing all the DSV tables in the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dsvStream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="refresh"/> is <c>true</c> and <paramref name="name"/> is
            <c>null</c>.</exception>
            <remarks>
            <para>
            This method returns a <see cref="T:System.Data.DataSet"/> containing all the <see cref="T:System.Data.DataTable"/> objects that are defined
            in the DSV in the specified stream.
            </para>
            <para>
            If a dsv name is provided via the <paramref name="name"/> parameter, when a DSV is read, the result is cached in order
            to make subsequent access faster.  To force the DSV to be reread from disk, set <paramref name="refresh"/> to
            <c>true</c>.  Refreshing from disk will replace any existing cache entry with the new <see cref="T:System.Data.DataSet"/> from the
            DSV.  Note that caching is performed based on the value of the <paramref name="name"/> parameter - if the same stream
            is used to load DSVs with different names, each will have its own cache entry, and changes to one will not affect the
            others.
            </para>
            <para>
            If the DSV contains one or more data tables with non-primitive types, the .NET runtime must be able to resolve these
            types by loading their type definition from the DLL in which they are defined.  This typically means that the DLL
            containing the type definition must be in the executing assembly's base directory (or the app domain's base directory,
            if loaded as a separate app domain) or installed into the Global Assembly Cache (GAC).
            </para>
            <para>
            Non-primitive types include most structs, collections, non-builting C# types, and any user-defined type.  A column with
            a non-primitive type can be identified within a DSV file by looking for the
            <c>msdata:DataType="fully-qualified-name, assembly-name"</c> attribute on the column. <c>fully-qualified-name</c> is the
            fully-qualified name of the type of this column, while <c>assembly-name</c> is the name of the assembly in which the
            type is defined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetDsvTable(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Gets a table with the given name from one or more DSV files on disk.
            </summary>
            <param name="paths">An enumerable collection of DSVs to read.</param>
            <param name="table">The name of the table to get from the collection of DSVs.</param>
            <param name="refresh">Whether to force reading from disk; if <c>false</c>, the cached table value will be used,
            if available.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> representing the requested DSV table.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="paths"/> is <c>null</c> -or- <paramref name="paths"/> contains
            a value that is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="table"/> does not exist in any DSV.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="paths"/> contains one or more paths that do not exist.</exception>
            <remarks>
            <para>
            If <paramref name="paths"/> contains multiple DSVs that define a table with name <paramref name="table"/>, this method
            will return the first match that it finds.
            </para>
            <para>
            When a DSV is read, the result is cached in order to make subsequent access faster.  To force the DSV to be reread
            from disk, set <paramref name="refresh"/> to <c>true</c>.  Refreshing from disk will replace any existing cache entry
            with the new <see cref="T:System.Data.DataSet"/> from the DSV.  Note that caching is performed based on the full name of the DSV as
            called from this method - if two different paths point to the same file (such as through a symbolic link, directory
            junction, or network share), each will have its own cache entry, and changes to one will not affect the others.
            </para>
            <para>
            If the requested DSV table contains one or more colums with non-primitive types, the .NET runtime must be able to
            resolve these types by loading their type definition from the DLL in which they are defined.  This typically means that
            the DLL containing the type definition must be in the executing assembly's base directory (or the app domain's base
            directory, if loaded as a separate app domain) or installed into the Global Assembly Cache (GAC).
            </para>
            <para>
            Non-primitive types include most structs, collections, non-builting C# types, and any user-defined type.  A column with
            a non-primitive type can be identified within a DSV file by looking for the
            <c>msdata:DataType="fully-qualified-name, assembly-name"</c> attribute on the column. <c>fully-qualified-name</c> is the
            fully-qualified name of the type of this column, while <c>assembly-name</c> is the name of the assembly in which the
            type is defined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetDsvTable(System.Collections.Generic.IEnumerable{System.IO.Stream},System.String)">
            <summary>
            Gets a table with the given name from one or more DSV streams.
            </summary>
            <param name="dsvStreams">An enumerable collection of DSVs streams to read.</param>
            <param name="table">The name of the table to get from the collection of DSVs.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> representing the requested DSV table.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dsvStreams"/> is <c>null</c> -or- <paramref name="dsvStreams"/>
            contains a value that is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="table"/> does not exist in any DSV.</exception>
            <remarks>
            <para>
            If <paramref name="dsvStreams"/> contains multiple DSVs that define a table with name <paramref name="table"/>, this method
            will return the first match that it finds.
            </para>
            <para>
            Unlike other overloads, <see cref="M:Microsoft.BI.Common.Schema.DsvUtilities.GetDsvTable(System.Collections.Generic.IEnumerable{System.IO.Stream},System.String)"/> does not support caching (since it
            is not possible to know the stream name under which to cache the stream).  You may either use one of the file-based
            overloads or <see cref="M:Microsoft.BI.Common.Schema.DsvUtilities.GetDsvTable(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.IO.Stream}},System.String,System.Boolean)"/> in order to
            support caching.
            </para>
            <para>
            If the requested DSV table contains one or more columns with non-primitive types, the .NET runtime must be able to
            resolve these types by loading their type definition from the DLL in which they are defined.  This typically means that
            the DLL containing the type definition must be in the executing assembly's base directory (or the app domain's base
            directory, if loaded as a separate app domain) or installed into the Global Assembly Cache (GAC).
            </para>
            <para>
            Non-primitive types include most structs, collections, non-builting C# types, and any user-defined type.  A column with
            a non-primitive type can be identified within a DSV file by looking for the
            <c>msdata:DataType="fully-qualified-name, assembly-name"</c> attribute on the column. <c>fully-qualified-name</c> is the
            fully-qualified name of the type of this column, while <c>assembly-name</c> is the name of the assembly in which the
            type is defined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetDsvTable(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.IO.Stream}},System.String,System.Boolean)">
            <summary>
            Gets a table with the given name from one or more DSV streams.
            </summary>
            <param name="dsvStreams">An enumerable collection of DSV names and streams to read.</param>
            <param name="table">The name of the table to get from the collection of DSVs.</param>
            <param name="refresh">Whether to force reading from disk; if <c>false</c>, the cached table value will be used,
            if available.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> representing the requested DSV table.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dsvStreams"/> is <c>null</c> -or- <paramref name="dsvStreams"/> contains
            a stream value that is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="table"/> does not exist in any DSV.</exception>
            <remarks>
            <para>
            If <paramref name="dsvStreams"/> contains multiple DSVs that define a table with name <paramref name="table"/>, this method
            will return the first match that it finds.
            </para>
            <para>
            If a dsv name is provided as the key, when a DSV is read, the result is cached in order to make subsequent access faster.
            To force the DSV to be reread from disk, set <paramref name="refresh"/> to <c>true</c>.  Refreshing from disk will replace
            any existing cache entry with the new <see cref="T:System.Data.DataSet"/> from the DSV.  Note that caching is performed based on the
            key in each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> - if the same stream is used to load DSVs with different names, each will
            have its own cache entry, and changes to one will not affect the others.
            </para>
            <para>
            If the requested DSV table contains one or more columns with non-primitive types, the .NET runtime must be able to
            resolve these types by loading their type definition from the DLL in which they are defined.  This typically means that
            the DLL containing the type definition must be in the executing assembly's base directory (or the app domain's base
            directory, if loaded as a separate app domain) or installed into the Global Assembly Cache (GAC).
            </para>
            <para>
            Non-primitive types include most structs, collections, non-builting C# types, and any user-defined type.  A column with
            a non-primitive type can be identified within a DSV file by looking for the
            <c>msdata:DataType="fully-qualified-name, assembly-name"</c> attribute on the column. <c>fully-qualified-name</c> is the
            fully-qualified name of the type of this column, while <c>assembly-name</c> is the name of the assembly in which the
            type is defined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetDsvTable(System.String,System.String,System.Boolean)">
            <summary>
            Gets a table with the given name from a DSV file on disk.
            </summary>
            <param name="path">The path to the DSV to read.</param>
            <param name="table">The name of the table to get from the collection of DSVs.</param>
            <param name="refresh">Whether to force reading from disk; if <c>false</c>, the cached table value will be used,
            if available.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> representing the requested DSV table.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="table"/> does not exist in the DSV.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> does not exist.</exception>
            <remarks>
            <para>
            When a DSV is read, the result is cached in order to make subsequent access faster.  To force the DSV to be reread
            from disk, set <paramref name="refresh"/> to <c>true</c>.  Refreshing from disk will replace any existing cache entry
            with the new <see cref="T:System.Data.DataSet"/> from the DSV.  Note that caching is performed based on the full name of the DSV as
            called from this method - if two different paths point to the same file (such as through a symbolic link, directory
            junction, or network share), each will have its own cache entry, and changes to one will not affect the others.
            </para>
            <para>
            If the requested DSV table contains one or more columns with non-primitive types, the .NET runtime must be able to
            resolve these types by loading their type definition from the DLL in which they are defined.  This typically means that
            the DLL containing the type definition must be in the executing assembly's base directory (or the app domain's base
            directory, if loaded as a separate app domain) or installed into the Global Assembly Cache (GAC).
            </para>
            <para>
            Non-primitive types include most structs, collections, non-builting C# types, and any user-defined type.  A column with
            a non-primitive type can be identified within a DSV file by looking for the
            <c>msdata:DataType="fully-qualified-name, assembly-name"</c> attribute on the column. <c>fully-qualified-name</c> is the
            fully-qualified name of the type of this column, while <c>assembly-name</c> is the name of the assembly in which the
            type is defined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetDsvTable(System.IO.Stream,System.String,System.Boolean,System.String)">
            <summary>
            Gets a table with the given name from a DSV stream.
            </summary>
            <param name="dsvStream">The DSV stream to read.</param>
            <param name="table">The name of the table to get from the collection of DSVs.</param>
            <param name="refresh">Whether to force reading from disk; if <c>false</c>, the cached table value will be used,
            if available.</param>
            <param name="name">The name of the DSV stream.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Schema.DsvDataTable"/> representing the requested DSV table.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dsvStream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="refresh"/> is <c>true</c> and <paramref name="name"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="table"/> does not exist in the DSV.</exception>
            <remarks>
            <para>
            If a dsv name is provided via the <paramref name="name"/> parameter, when a DSV is read, the result is cached in order
            to make subsequent access faster.  To force the DSV to be reread from disk, set <paramref name="refresh"/> to
            <c>true</c>.  Refreshing from disk will replace any existing cache entry with the new <see cref="T:System.Data.DataSet"/> from the
            DSV.  Note that caching is performed based on the value of the <paramref name="name"/> parameter - if the same stream
            is used to load DSVs with different names, each will have its own cache entry, and changes to one will not affect the
            others.
            </para>
            <para>
            If the requested DSV table contains one or more columns with non-primitive types, the .NET runtime must be able to
            resolve these types by loading their type definition from the DLL in which they are defined.  This typically means that
            the DLL containing the type definition must be in the executing assembly's base directory (or the app domain's base
            directory, if loaded as a separate app domain) or installed into the Global Assembly Cache (GAC).
            </para>
            <para>
            Non-primitive types include most structs, collections, non-builting C# types, and any user-defined type.  A column with
            a non-primitive type can be identified within a DSV file by looking for the
            <c>msdata:DataType="fully-qualified-name, assembly-name"</c> attribute on the column. <c>fully-qualified-name</c> is the
            fully-qualified name of the type of this column, while <c>assembly-name</c> is the name of the assembly in which the
            type is defined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.ConvertFromDataLoaderSchema(System.Data.DataTable)">
            <summary>
            Converts an <see cref="T:System.Data.IDataReader"/>-compatible schema table into a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="dataReaderSchema">The <see cref="T:System.Data.IDataReader"/>-compatible schema.</param>
            <returns>A DSV schema.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.ConvertToDataLoaderSchema(System.Data.DataTable)">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> describing a DSV schema into a <see cref="T:System.Data.IDataReader"/>-compatible format.
            </summary>
            <param name="schema">The DSV schema to convert.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/>-compatible schema.</returns>
            <remarks>Do not use this with <see cref="T:Microsoft.BI.Common.IO.CsvReader"/>, <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/>, etc.  This method is intended
            to return a data table in a very specific format that is required by <see cref="T:System.Data.IDataReader"/> in
            order to load data into a <see cref="T:System.Data.DataTable"/> properly.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.ConvertToDataLoaderSchema(System.Data.DataTable,Microsoft.BI.Common.DataTypeFormatter)">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> describing a DSV schema into a <see cref="T:System.Data.IDataReader"/>-compatible format.
            </summary>
            <param name="schema">The DSV schema to convert.</param>
            <param name="formatProvider">The <see cref="T:Microsoft.BI.Common.DataTypeFormatter"/> to use when computing default values.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/>-compatible schema.</returns>
            <remarks>Do not use this with <see cref="T:Microsoft.BI.Common.IO.CsvReader"/>, <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/>, etc.  This method is intended
            to return a data table in a very specific format that is required by <see cref="T:System.Data.IDataReader"/> in
            order to load data into a <see cref="T:System.Data.DataTable"/> properly.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.WriteDsv(System.Data.DataSet,System.String)">
            <summary>
            Writes the <see cref="T:System.Data.DataSet"/> to a DSV file.
            </summary>
            <param name="tables">The <see cref="T:System.Data.DataSet"/> containing the data tables to write out.</param>
            <param name="path">The path to write the DSV to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.WriteDsv(System.Data.DataSet,System.IO.TextWriter)">
            <summary>
            Writes the <see cref="T:System.Data.DataSet"/> to a DSV file.
            </summary>
            <param name="tables">The <see cref="T:System.Data.DataSet"/> containing the data tables to write out.</param>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> to use to write the DSV.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.WriteDsv(System.Data.DataSet,System.IO.Stream)">
            <summary>
            Writes the <see cref="T:System.Data.DataSet"/> to a stream.
            </summary>
            <param name="tables">The <see cref="T:System.Data.DataSet"/> containing the data tables to write out.</param>
            <param name="stream">The path to write the DSV to.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.CheckDataSet(System.Data.DataSet)">
            <summary>
            Checks all the <see cref="T:System.Data.DataTable"/> instances in a <see cref="T:System.Data.DataSet"/> to ensure they do not contain any
            unresolved data types.
            </summary>
            <param name="ds">The <see cref="T:System.Data.DataSet"/> to check.</param>
            <returns>The <see cref="T:System.Data.DataSet"/> that was passed to the function.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.CheckDataTable(System.Data.DataTable)">
            <summary>
            Checks a <see cref="T:System.Data.DataTable"/> instance's columns for occurences of the <see cref="F:Microsoft.BI.Common.Schema.DsvUtilities.UnknownDataTypeProperty"/>
            attribute, which indicates that the column's type was a custom type that is not defined in the current app domain.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> to check.</param>
            <returns>The <see cref="T:System.Data.DataTable"/> that was passed to the function.</returns>
            <exception cref="T:System.TypeLoadException"><paramref name="table"/> contains one or more <see cref="T:System.Data.DataColumn"/> instances
            whose types are not resolvable at runtime.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.GetSchema(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> describing a DSV schema in a <see cref="T:System.Data.IDataReader"/>-compatible format.
            </summary>
            <param name="path">The DSV file to read.</param>
            <param name="table">The table to search for.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> decribing the schema of the specified DSV table.</returns>
            <remarks>Do not use this with <see cref="T:Microsoft.BI.Common.IO.CsvReader"/>, <see cref="T:Microsoft.BI.Common.IO.CsvWriter"/>, etc.  This method is intended
            to return a data table in a very specific format that is required by <see cref="T:System.Data.IDataReader"/> in
            order to load data into a <see cref="T:System.Data.DataTable"/> properly.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.InternalGetAllDsvTables(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Get a <see cref="T:System.Data.DataSet"/> containing all the DSV tables within a specified DSV.
            </summary>
            <param name="dsvStream">The DSV stream to read.</param>
            <param name="name">The DSV filename.</param>
            <param name="refresh">Whether to force reading from disk; if <c>false</c>, the cached table value will be used,
            if available.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing all the DSV tables in the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dsvStream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="refresh"/> is <c>true</c> and <paramref name="name"/> is
            <c>null</c>.</exception>
            <remarks>
            <para>
            If a <see cref="T:System.Data.DataTable"/> in the <see cref="T:System.Data.DataSet"/> contains one or more custom data types that are not defined
            in the current app domain, these columns will have data tyep "anyType" (<c>object</c>) and an additional attribute
            indicating the original data type.  The public API checks for the presence of this attribute and will throw an exception
            if it finds it.  (This allows a <see cref="T:System.Data.DataTable"/> to be consumed from a <see cref="T:System.Data.DataSet"/> containing an
            unloaded type without exception - only if the <see cref="T:System.Data.DataSet"/> or if a <see cref="T:System.Data.DataTable"/> containing one of
            these missing types is requested will it throw.)
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader">
            <summary>
            A subclass of <see cref="T:System.Xml.XmlNodeReader"/> that validates column data types when loading to an XSD schema and
            preemptively removes data types that cannot be loaded at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader"/> class using the specifed <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XmlNode"/> to read.</param>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <remarks>
            <para>
            Changes 'msdata:DataType="..."' to 'msprop:Microsoft.BI.Common.Schema.DataType="..."' if the .NET runtime
            is unable to find the type definition supplied in the property.  For non-attributes, attributes that are
            not msdata:DataType, or msdata:DataType attributes that can be resolved correctly, returns the original
            local name.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is
            currently positioned.
            </summary>
            <remarks>
            <para>
            Changes 'msdata:DataType="..."' to 'msprop:Microsoft.BI.Common.Schema.DataType="..."' if the .NET runtime
            is unable to find the type definition supplied in the property.  For non-attributes, attributes that are
            not msdata:DataType, or msdata:DataType attributes that can be resolved correctly, returns the original
            namespace uri.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
            <remarks>
            <para>
            Changes 'msdata:DataType="..."' to 'msprop:Microsoft.BI.Common.Schema.DataType="..."' if the .NET runtime
            is unable to find the type definition supplied in the property.  For non-attributes, attributes that are
            not msdata:DataType, or msdata:DataType attributes that can be resolved correctly, returns the original
            prefix.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader.IsTypeLoadable(System.String)">
            <summary>
            Determines whether the specified assembly-qualified type name can be loaded in the current app domain.
            </summary>
            <param name="value">The assembly-qualified type name to check.</param>
            <returns><c>true</c> if the type can be loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.DsvUtilities.XmlTypeValidatingNodeReader.IsUnloadableDataTypeAttribute">
            <summary>
            Determines whether the current node is an attribute representing an unloadable data type.
            </summary>
            <returns><c>true</c> if the current node is an attribute representing an unloadable type; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Schema.StagingArea">
            <summary>
            Contains a collection of versioned DsvDataTables describing a DSV staging area.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.StagingArea.AllTables">
            <summary>
            Contains all DSV tables, indexed by name and version.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.StagingArea.LatestTables">
            <summary>
            Contains the latest DSV table, indexed by name.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Schema.StagingArea.LatestVersion">
            <summary>
            Contains the latest version number of all tables, indexed by name.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.LoadDsvTables(System.String,System.Double,System.String[])">
            <summary>
            Loads one or more tables from a DSV file.
            </summary>
            <param name="dsvFile">The DSV file to load from.</param>
            <param name="version">The version of the DSV file.</param>
            <param name="tableNames">The name of one or more tables to load.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.LoadAllDsvTables(System.String,System.Double)">
            <summary>
            Load all tables from a DSV file.
            </summary>
            <param name="dsvFile">The DSV file to load from.</param>
            <param name="version">The version of the DSV file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.Add(System.Data.DataTable)">
            <summary>
            Adds a <see cref="T:System.Data.DataTable"/> to the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> with the given name
            and default version.
            </summary>
            <param name="value">The <see cref="T:System.Data.DataTable"/> to add.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.Add(System.Data.DataTable,System.Double)">
            <summary>
            Add a <see cref="T:System.Data.DataTable"/> to the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> with the given name
            and version.
            </summary>
            <param name="value">The <see cref="T:System.Data.DataTable"/> to add.</param>
            <param name="version">The version of the table schema.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.Remove(System.String)">
            <summary>
            Removes the latest version of the table with the specified name from the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
            <param name="key">The name of the table to remove.</param>
            <returns>true if the table was removed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.Remove(System.String,System.Double)">
            <summary>
            Removes the table with the specified name and version from the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
            <param name="key">The name of the table to remove.</param>
            <param name="version">The version of the table to remove.</param>
            <returns>true if the table was removed; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.Item(System.String)">
            <summary>
            Gets the table with the specified name.
            </summary>
            <param name="key">The name of the table to get.</param>
            <returns>The table with the specified name.</returns>
            <remarks>If multiple DSVs match the specified name, returns the latest one.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.Item(System.String,System.Double)">
            <summary>
            Gets the table with the specified name and version.
            </summary>
            <param name="key">The name of the table to get.</param>
            <param name="version">The version of the table to get.</param>
            <returns>The table with the specified name and version.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> contains a table with the specified
            name and any version.
            </summary>
            <param name="key">The name of the table.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> contains the specified table; otherwise,
            false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.ContainsKey(System.String,System.Double)">
            <summary>
            Determines whether the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> contains a table with the specified
            key and version.
            </summary>
            <param name="key">The name of the table.</param>
            <param name="version">The version of the table.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> contains the specified version of the
            specified table; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.Count">
            <summary>
            Returns the number of unique tables in the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.CountAll">
            <summary>
            Returns the number of tables in the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.GetLatestVersion(System.String)">
            <summary>
            Gets the latest version of a table with the specified name.
            </summary>
            <param name="key">The name of the table.</param>
            <returns>The latest version of this table.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.TryGetValue(System.String,Microsoft.BI.Common.Schema.DsvDataTable@)">
            <summary>
            Gets the latest table associated with the specified name.
            </summary>
            <param name="key">The name of the table.</param>
            <param name="value">When this method returns, contains the table associated with
            the specified name and version, if found; otherwise, null.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> contains table with the specified
            name and version; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.TryGetValue(System.String,System.Double,Microsoft.BI.Common.Schema.DsvDataTable@)">
            <summary>
            Gets the table associated with the specified name and version.
            </summary>
            <param name="key">The name of the table.</param>
            <param name="version">The version of the table.</param>
            <param name="value">When this method returns, contains the table associated with
            the specified name and version, if found; otherwise, null.</param>
            <returns>true if the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/> contains table with the specified
            name and version; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.Keys">
            <summary>
            Gets a collection containing the set of all of the latest versions of all tables in
            the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.AllKeys">
            <summary>
            Gets a collection containing the set of all tables and versions in the
            <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.Values">
            <summary>
            Gets a collection containing the latest version of all tables in the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Schema.StagingArea.AllValues">
            <summary>
            Gets a collection containing the tables in the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.GetEnumerator">
            <summary>
            Returns an enumerator to iterate through the latest version of all tables in the
            <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
            <returns>An enumerator to iterate through the latest version of all tables in the
            <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to iterate through the latest version of all tables in the
            <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
            <returns>An enumerator to iterate through the latest version of all tables in the
            <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.GetEnumeratorAll">
            <summary>
            Returns an enumerator to iterate through all tables in the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.
            </summary>
            <returns>An enumerator to iterate through all tables in the <see cref="T:Microsoft.BI.Common.Schema.StagingArea"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Schema.StagingArea.UpdateLatestVersion(System.String)">
            <summary>
            Update the highest version for the specified table.
            </summary>
            <param name="key">The name of the table to update.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.MemoryStreamRecycler">
            <summary>
            Provides methods for recycling <see cref="T:System.IO.MemoryStream"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryStreamRecycler.RecycleForRead(System.IO.MemoryStream,System.Byte[])">
            <summary>
            Resets the underlying byte array buffer of a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.MemoryStream"/> to recycle.</param>
            <param name="buffer">The new buffer.</param>
            <remarks>
            The resulting state of the <see cref="T:System.IO.MemoryStream"/> is identical to the state of a new
            <see cref="T:System.IO.MemoryStream"/> created with <paramref name="buffer"/> using the 
            <see cref="M:System.IO.MemoryStream.#ctor(System.Byte[])"/> constructor.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryStreamRecycler.RecycleForWrite(System.IO.MemoryStream,System.Byte[])">
            <summary>
            Restest the underlying byte array buffer of a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.MemoryStream"/> to recycle.</param>
            <param name="buffer">The new buffer.</param>
            <remarks>
            The resulting state of the <see cref="T:System.IO.MemoryStream"/> is identical to the state of a new
            <see cref="T:System.IO.MemoryStream"/> created using the <see cref="M:System.IO.MemoryStream.#ctor(System.Int32)"/> constructor,
            except the capacity and underlying buffer are based off of <paramref name="buffer"/> instead
            of using a new byte array.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryStreamRecycler.EmitRecycleFor(System.IO.FileAccess)">
            <summary>
            Emits a delegate that resets the internal data structures of a <see cref="T:System.IO.MemoryStream"/> to
            point to a new byte array.
            </summary>
            <param name="access">The desired <see cref="T:System.IO.FileAccess"/> of the stream.</param>
            <returns>A delegate that resets the internal data structures of a <see cref="T:System.IO.MemoryStream"/> to
            point to a new byte array.</returns>
            <remarks>
            <para>
            The delegate returned by this method allows a <see cref="T:System.IO.MemoryStream"/> to be reused on another
            byte array instead of discarding and creating a new <see cref="T:System.IO.MemoryStream"/>.  The byte arrays
            used in the reset operation can similarly be pooled to further reduce allocations and GC pressure.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.MemoryWriter">
            <summary>
            Writes structured data from memory.
            </summary>
            <remarks>
            This class is a specialization of <see cref="T:System.IO.BinaryWriter"/> where the <see cref="P:Microsoft.BI.Common.Serialization.MemoryWriter.BaseStream"/> is
            guaranteed to be a <see cref="T:System.IO.MemoryStream"/>.  It is provided to support serialization in the
            <c>Microsoft.BI.Common.Serialization</c> namespace and is not intended to be used in external code.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.MemoryWriter.BaseStream">
            <summary>
            Gets the <see cref="T:System.IO.MemoryStream"/> to which data is written.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> class using the default character encoding.
            </summary>
            <remarks>
            The default character encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriter.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> class using the specified character encoding.
            </summary>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriter.#ctor(System.IO.MemoryStream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> class that writes data to the speci.
            </summary>
            <param name="stream">The <see cref="T:System.IO.MemoryStream"/> into which to write data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriter.#ctor(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> class that writes data to the speci.
            </summary>
            <param name="stream">The <see cref="T:System.IO.MemoryStream"/> into which to write data.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriter.ResetBuffer">
            <summary>
            Resets the underyling buffer.
            </summary>
            <remarks>
            This method sets the length of the underlying stream to 0.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriter.ResetBuffer(System.Int32)">
            <summary>
            Resets the underyling buffer.
            </summary>
            <param name="maximumCapacity">The maximum capacity of the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCapacity"/> is less than 0.</exception>
            <remarks>
            This method sets the length of the underlying stream to 0 and truncates its capacity if it is larger
            than <paramref name="maximumCapacity"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.MemoryReader">
            <summary>
            Reads structured data from memory.
            </summary>
            <remarks>
            This class is a specialization of <see cref="T:System.IO.BinaryReader"/> where the <see cref="P:Microsoft.BI.Common.Serialization.MemoryReader.BaseStream"/> is
            guaranteed to be a <see cref="T:System.IO.MemoryStream"/>.  It is provided to support serialization in the
            <c>Microsoft.BI.Common.Serialization</c> namespace and is not intended to be used in external code.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.MemoryReader.BaseStream">
            <summary>
            Gets the <see cref="T:System.IO.MemoryStream"/> from which data is read.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> class using the default character encoding.
            </summary>
            <remarks>
            The default character encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReader.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> class using the specified character encoding.
            </summary>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReader.#ctor(System.IO.MemoryStream)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> class that writes data to the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.MemoryStream"/> from which to read data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReader.#ctor(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> class that writes data to the specified stream
            using the specified encoding.
            </summary>
            <param name="stream">The <see cref="T:System.IO.MemoryStream"/> from which to read data.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="encoding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReader.SetBuffer(System.Byte[])">
            <summary>
            Sets the byte array from which to read data.
            </summary>
            <param name="buffer">The byte array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <remarks>
            Setting the buffer resets the position of the underlying stream to the beginning of the new buffer.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.MemoryWriterPool">
            <summary>
            Provides a pool of <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> instances for internal use to minimize allocation
            and collection for short-lived serialization operations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.MemoryWriterPool.Default">
            <summary>
            Gets the default <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriterPool"/> for the app domain.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriterPool.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriterPool"/> class.
            </summary>
            <remarks>
            This constructor enforces a maximum buffer size of 1024 bytes for <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> objects
            stored in the pool.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriterPool.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriterPool"/> class with the specified capacity.
            </summary>
            <param name="capacity">The capacity of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriterPool"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <remarks>
            This constructor enforces a maximum buffer size of 1024 bytes for <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> objects
            stored in the pool.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriterPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriterPool"/> class with the specified capacity
            and maximum pooled size.
            </summary>
            <param name="capacity">The capacity of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriterPool"/>.</param>
            <param name="maxPooledBufferSize">The maximum size of the underlying memory stream for
            a <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> in the pool.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <remarks>
            The <paramref name="maxPooledBufferSize"/> parameter specifies the maximum size of a
            <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/>'s underlying buffer when stored in the pool.  If the underlying
            buffer is larger than this value, it's capacity will be truncated when returning it to
            the pool.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriterPool.Free(Microsoft.BI.Common.Serialization.MemoryWriter)">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> to the pool.
            </summary>
            <param name="writer">The <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> to return to the pool.</param>
            <remarks>
            <paramref name="writer"/> is cleared before returning, and its capacity is trimmed if too large.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriterPool.ReturnAndFree(Microsoft.BI.Common.Serialization.MemoryWriter)">
            <summary>
            Returns the current contents of a <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> and returns it to the pool.
            </summary>
            <param name="writer">The <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> to return to the pool.</param>
            <returns>The contents of <paramref name="writer"/> before clearing.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <c>null</c>.</exception>
            <remarks>
            <paramref name="writer"/> is cleared before returning, and its capacity is trimmed if too large.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryWriterPool.InternalFree(Microsoft.BI.Common.Serialization.MemoryWriter)">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> to the pool.
            </summary>
            <param name="writer">The <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> to return to the pool.</param>
            <remarks>
            Trims the internal buffer of the supplied <see cref="T:Microsoft.BI.Common.Serialization.MemoryWriter"/> if it is too large to control
            memory usage.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.MemoryReaderPool">
            <summary>
            Provides a pool of <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> instances for internal use to minimize allocation
            and collection for short-lived serialization operations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.MemoryReaderPool.Default">
            <summary>
            Gets the default <see cref="T:Microsoft.BI.Common.Serialization.MemoryReaderPool"/> for the app domain.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReaderPool.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryReaderPool"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReaderPool.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryReaderPool"/> class with the specified capacity.
            </summary>
            <param name="capacity">The capacity of the <see cref="T:Microsoft.BI.Common.Serialization.MemoryReaderPool"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReaderPool.GetAndWrap(System.Byte[])">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> from the pool wrapping the specified byte array.
            </summary>
            <param name="buffer">The byte array to read.</param>
            <returns>A <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> wrapping the specified byte array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.MemoryReaderPool.Free(Microsoft.BI.Common.Serialization.MemoryReader)">
            <summary>
            Returns a <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> to the pool.
            </summary>
            <param name="reader">The <see cref="T:Microsoft.BI.Common.Serialization.MemoryReader"/> to return to the pool.</param>
            <remarks>
            <paramref name="reader"/> is cleared before returning.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.IBinarySerializable">
            <summary>
            An interface that describes methods for serializing and deserializing objects to a binary stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IBinarySerializable.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize the contents of the object to a binary stream.
            </summary>
            <param name="writer">A <see cref="T:System.IO.BinaryWriter"/> to which to write the serialized object data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IBinarySerializable.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize the contents of the object from a binary stream.
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader"/> from which to read the serialized object data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.IDataTableLoadable">
            <summary>
            An interface that provides methods for loading serialized data to and from <see cref="T:System.Data.DataTable"/> objects.
            </summary>
            <remarks>This interface also requires that the class implement a "GetDataTableSchema" method that accepts
            no arguments and returns a <see cref="T:System.Data.DataTable"/> containing the schema of the object.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IDataTableLoadable.AddToDataTable(System.Data.DataTable)">
            <summary>
            Add the contents of the current object to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> into which to add the data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IDataTableLoadable.LoadFromDataRow(System.Data.DataRow)">
            <summary>
            Loads contents of the specified <see cref="T:System.Data.DataRow"/> into the current instance.
            </summary>
            <param name="row">A <see cref="T:System.Data.DataRow"/> from which to load data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.ILogSerializable">
            <summary>
            An interface that describes methods for serializing and deserializing C# objects to byte arrays.
            </summary>
            <remarks>This interface also requires that the class implement a static "Deserialize" method accepting
            a single argument of type byte[] with no return value.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.ILogSerializable.Serialize">
            <summary>
            Serialize the contents of the object to a byte array.
            </summary>
            <returns>A byte array containing the object in serialized form.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.IValueResolvable">
            <summary>
            Interface describing an object capable of performing translation between different versions
            of the same object.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IValueResolvable.BeginLoadObject">
            <summary>
            Invoked at the beginning of a resolve session.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IValueResolvable.ResolveValue(System.String,System.Object)">
            <summary>
            Invoked once for every unresolved value in the source.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value of the field.</param>
            <returns><c>true</c> if the value was successfully resolved; otherwise, <c>false</c>.</returns>
            <remarks>
            Implementers may utilize this method to map values from former schemas up to a value in the current schema.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IValueResolvable.EndLoadObject">
            <summary>
            Invoked at the end of a resolve session.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.BinaryEnum`1">
            <summary>
            Internal helper to read and write enum values to a binary stream.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <remarks>
            C# does not provide the capacity to constrain a type parameter to an enum type, unfortunately.
            Thus, it is possible to use this class with a type that is not an enum and not get a compilation
            error.  In that case, you will get a runtime error when attempting to read or write the value.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.BinaryEnum`1.WriteEnum">
            <summary>
            Function to write enum values to a stream.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.BinaryEnum`1.ReadEnum">
            <summary>
            Function to read enum values from a stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryEnum`1.#cctor">
            <summary>
            Initializes helper functions.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryEnum`1.GenerateWriteEnum">
            <summary>
            Emits the <see cref="F:Microsoft.BI.Common.Serialization.BinaryEnum`1.WriteEnum"/> function.
            </summary>
            <returns>The <see cref="F:Microsoft.BI.Common.Serialization.BinaryEnum`1.WriteEnum"/> function.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryEnum`1.GenerateReadEnum">
            <summary>
            Emits the <see cref="F:Microsoft.BI.Common.Serialization.BinaryEnum`1.ReadEnum"/> function.
            </summary>
            <returns>The <see cref="F:Microsoft.BI.Common.Serialization.BinaryEnum`1.ReadEnum"/> function.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader">
            <summary>
            Reads data types from a binary stream.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class provides methods that simplify reading primitive data types from a stream. For example,
            you can use the <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadBoolean"/> method to read the next byte as a <see cref="T:System.Boolean"/> value and advance the current position
            in the stream by one byte. The class includes read methods that support different data types.
            </para>
            <para>
            When you create a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class, you provide the stream to read from, and optionally
            specify the type of encoding and whether to leave the stream open after disposing the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> object. If
            you do not specify an encoding type, UTF-8 is used.
            </para>
            <para>
            This type implements the <see cref="T:System.IDisposable"/> interface. When you have finished using the type, you should dispose of it either directly
            or indirectly. To dispose of the type directly, call its <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Dispose"/> method in a try/catch block. To dispose of it indirectly, use
            a language construct such as <c>using</c>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.BaseStream">
            <summary>
            Exposes access to the underlying stream of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/>.
            </summary>
            <remarks>
            Using the underlying stream while reading or while using the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> can cause data loss and corruption.
            For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class based on the specified stream and using UTF-8 encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class based on the specified stream and character encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class based on the specified stream and character encoding,
            and optionally leaves the stream open.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> is disposed; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class based on the specified <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The binary reader used to read data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Close">
            <summary>
            Closes the current reader and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class.
            </summary>
            <remarks>
            <para>
            Call <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Dispose"/> when you are finished using the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/>. The <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Dispose"/> method leaves the
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> in an unusable state. After calling <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Dispose"/>, you must release all references to the
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> so the garbage collector can reclaim the memory that the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> was
            occupying.
            </para>
            <para>
            Always call <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Dispose"/> before you release your last reference to the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/>. Otherwise, the resources
            it is using will not be freed until the garbage collector calls the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> object's <c>Finalize</c> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read(System.Byte[],System.Int32)">
            <summary>
            Reads an array of bytes from the input into the specified array.
            </summary>
            <param name="buffer">The array into which to read bytes.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing bytes.</param>
            <returns>The number of bytes read.</returns>
            <exception cref="T:System.ArgumentException">The length of <paramref name="buffer"/> minus <paramref name="offset"/> is less than the size of the
            array in the stream.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes from the stream, starting from a specified point in the byte array. 
            </summary>
            <param name="buffer">The array into which to read bytes.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing bytes.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.  This might be less than <paramref name="count"/> if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentException">The length of <paramref name="buffer"/> minus <paramref name="offset"/> is less than the size of the
            array in the stream.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read(System.Char[],System.Int32)">
            <summary>
            Reads an array of characters from the input into the specified array.
            </summary>
            <param name="buffer">The array into which to read characters.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing characters.</param>
            <returns>The number of characters read.</returns>
            <exception cref="T:System.ArgumentException">The length of <paramref name="buffer"/> minus <paramref name="offset"/> is less than the size of the
            array in the stream.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads an array of characters from the input into the specified array.
            </summary>
            <param name="buffer">The array into which to read characters.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing characters.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The number of characters read.</returns>
            <exception cref="T:System.ArgumentException">The length of <paramref name="buffer"/> minus <paramref name="offset"/> is less than the size of the
            array in the stream.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadBoolean">
            <summary>
            Reads a <see cref="T:System.Boolean"/> value from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns><c>true</c> if the byte is nonzero; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>The next byte read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </para>
            <para>
            This method expects to read the length of the byte array before returning the actual data.  In order to read a byte array that is
            not prefixed by its length, use <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read(System.Byte[],System.Int32,System.Int32)"/> instead.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadBytes">
            <summary>
            Reads a length-prefixed byte array from the current stream into a byte array and advances the current position by that number of bytes.
            </summary>
            <returns>A byte array containing data read from the underlying stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A byte array containing data read from the underlying stream.  This may be less than the number of bytes requested if the end
            of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadChar">
            <summary>
            Reads the next character from the current stream and advances the current position of the stream in accordance with the <see cref="T:System.Text.Encoding"/>
            used and the specific character being read from the stream.
            </summary>
            <returns>A character read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadChars">
            <summary>
            Reads a length-prefixed character array from the current stream into a character array and advances the current position of the stream in
            accordance with the <see cref="T:System.Text.Encoding"/> used and the specific characters being read from the stream.
            </summary>
            <returns>A character array containing data read from the underlying stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadChars(System.Int32)">
            <summary>
            Reads the specified number of characters from the current stream into a character array and advances the current position of the stream in
            accordance with the <see cref="T:System.Text.Encoding"/> used and the specific characters being read from the stream.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>A character array containing data read from the underlying stream.  This may be less than the number of characters requested if the end
            of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadDateTime">
            <summary>
            Reads a <see cref="T:System.DateTime"/> value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>A decimal value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadEnum``1">
            <summary>
            Reads an enum value from the current stream and advances the current position of the stream by the size of the enum.
            </summary>
            <typeparam name="T">The type of the enum to read.</typeparam>
            <returns>An enum value read from the current stream.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an enum.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadGuid">
            <summary>
            Reads a <see cref="T:System.Guid"/> value from the current stream and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>A <see cref="T:System.Guid"/> value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadSByte">
            <summary>
            Reads a signed byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>A signed byte read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by fours bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadString">
            <summary>
            Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.
            </summary>
            <returns>The string being read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadTimeSpan">
            <summary>
            Reads a <see cref="T:System.TimeSpan"/> value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>A <see cref="T:System.TimeSpan"/> value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.ReadUInt128">
            <summary>
            Reads a 16-byte unsigned integer from the current stream and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>A 16-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> reads this data type in little-endian format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read``1(System.Void*)">
            <summary>
            Reads an unmanaged struct into the specified pointer.
            </summary>
            <typeparam name="T">The type of the unmanaged struct to read.</typeparam>
            <param name="buffer">The pointer into which to copy the struct data.</param>
            <returns><c>true</c> if the struct was read successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para>An unmanaged struct is a struct that consists of only value type fields.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read``1(System.Void*,System.Int32)">
            <summary>
            Reads multiple unmanaged structs into an array at the specified pointer.
            </summary>
            <typeparam name="T">The type of the unmanaged structs to read.</typeparam>
            <param name="buffer">The pointer into which to copy the struct data.</param>
            <param name="count">The number of structs to read.</param>
            <returns><c>true</c> if all the structs were read successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <para>An unmanaged struct is a struct that consists of only value type fields.</para>
            <para><see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; false to release only unamanged resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read(System.Void*,System.Int32)">
            <summary>
            Reads the specified number of bytes from the underlying stream and copies to a buffer at the specified pointer.
            </summary>
            <param name="buffer">The pointer to the buffer into which to copy data.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns><c>true</c> if the specified number of bytes were read successfully; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader.Read7BitEncodedInteger">
            <summary>
            Reads a 7-bit encoded integer.
            </summary>
            <returns>The integer read from the stream.</returns>
            <remarks>
            7-bit encoding allows an integer to be written with fewer than 4 bytes for small, positive values.
            <list type="table">
              <listheader> <term>Value                      </term>              <term>Number of bytes</term></listheader>
              <item><description>0-127                      </description><description>1 byte </description></item>
              <item><description>128-16383                  </description><description>2 bytes</description></item>
              <item><description>16384-2097151              </description><description>3 bytes</description></item>
              <item><description>2097152-268435455          </description><description>4 bytes</description></item>
              <item><description>268435456-Int32.MaxValue   </description><description>5 bytes</description></item>
              <item><description>-1-Int32.MinValue          </description><description>5 bytes</description></item>
            </list>
            Note that for negative values and for values larger than 268435455, this encoding actually requires 5 bytes per value.
            However, in the common case, encoding in this way helps to reduce the number of bytes used writing length prefixes for
            byte arrays and strings.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter">
            <summary>
            Writes primitive types in binary to a stream.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> class provides methods that simplify writing primitive data types to a stream. For example, you
            can use the <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Boolean)"/> method to write a <see cref="T:System.Boolean"/> value to the stream as a one-byte value. The class includes
            write methods that support different data types.
            </para>
            <para>
            When you create a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> class, you provide the stream to write to, and optionally
            specify the type of encoding and whether to leave the stream open after disposing the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> object. If
            you do not specify an encoding type, UTF-8 is used.
            </para>
            <para>
            This type implements the <see cref="T:System.IDisposable"/> interface. When you have finished using the type, you should dispose of it either directly
            or indirectly. To dispose of the type directly, call its <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Dispose"/> method in a try/catch block. To dispose of it indirectly, use
            a language construct such as <c>using</c>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.BaseStream">
            <summary>
            Exposes access to the underlying stream of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> class based on the specified stream and using UTF-8 encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> class based on the specified stream and character encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> class based on the specified stream and character encoding,
            and optionally leaves the stream open.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> is disposed; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> class based on the specified <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The binary writer used to write data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Close">
            <summary>
            Closes the current writer and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> class.
            </summary>
            <remarks>
            <para>
            Call <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Dispose"/> when you are finished using the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/>. The <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Dispose"/> method leaves the
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> in an unusable state. After calling <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Dispose"/>, you must release all references to the
            <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> so the garbage collector can reclaim the memory that the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> was
            occupying.
            </para>
            <para>
            Always call <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Dispose"/> before you release your last reference to the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/>. Otherwise, the resources
            it is using will not be freed until the garbage collector calls the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter"/> object's <c>Finalize</c> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a byte array to the output.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="index">The starting point in <paramref name="buffer"/> at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a character array to the output.
            </summary>
            <param name="chars">A character array containing the data to write.</param>
            <param name="index">The starting point in <paramref name="chars"/> at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="chars"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the output.
            </summary>
            <param name="value">The unsigned bye to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Byte[])">
            <summary>
            Writes a length-prefixed byte array to the underlying stream.
            </summary>
            <param name="value">A byte array containing the data to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <remarks>
            This method will prefix the data with the length of the array being written.  In order to write a byte array that is
            not prefixed by its length, use <see cref="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Byte[],System.Int32,System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Char)">
            <summary>
            Writes a Unicode character to the output.
            </summary>
            <param name="value">The non-surrogate, Unicode character to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the output.
            </summary>
            <param name="value">A character array containing the data to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal to the output.
            </summary>
            <param name="value">The decimal value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the output.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer value to the output.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer value to the output.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer value to the output.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.SByte)">
            <summary>
            Writes a signed byte to the stream.
            </summary>
            <param name="value">The signed bye to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the output.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed stream to the output.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer value to the output.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer value to the output.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer value to the output.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(Microsoft.BI.Common.UInt128)">
            <summary>
            Writes an sixteen-byte unsigned integer value to the output.
            </summary>
            <param name="value">The sixteen-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write``1(System.Void*)">
            <summary>
            Writes the data at the specified pointer to the output.
            </summary>
            <typeparam name="T">The type of the struct to write.</typeparam>
            <param name="buffer">A pointer to the struct to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write``1(System.Void*,System.Int32)">
            <summary>
            Writes an array of structs at the specified pointer to the output.
            </summary>
            <typeparam name="T">The type of the structs to write.</typeparam>
            <param name="buffer">A pointer to the struct array to write.</param>
            <param name="count">The number of items to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.WriteEnum``1(``0)">
            <summary>
            Writes an enumeration value to the output.
            </summary>
            <typeparam name="T">The type of the enum to write.</typeparam>
            <param name="value">The enum value to write.</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an enum.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.BI.Common.Serialization.BinaryStructuredDataReader"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; false to release only unamanged resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write(System.Void*,System.Int32)">
            <summary>
            Writes an array of bytes to the output.
            </summary>
            <param name="buffer">A pointer to the bytes to write.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.BinaryStructuredDataWriter.Write7BitEncodedInteger(System.Int32)">
            <summary>
            Writes a 7-bit encoded integer.
            </summary>
            <param name="value">The integer value to encode.</param>
            <remarks>
            7-bit encoding allows an integer to be written with fewer than 4 bytes for small, positive values.
            <list type="table">
              <listheader> <term>Value                      </term>              <term>Number of bytes</term></listheader>
              <item><description>0-127                      </description><description>1 byte </description></item>
              <item><description>128-16383                  </description><description>2 bytes</description></item>
              <item><description>16384-2097151              </description><description>3 bytes</description></item>
              <item><description>2097152-268435455          </description><description>4 bytes</description></item>
              <item><description>268435456-Int32.MaxValue   </description><description>5 bytes</description></item>
              <item><description>-1-Int32.MinValue          </description><description>5 bytes</description></item>
            </list>
            Note that for negative values and for values larger than 268435455, this encoding actually requires 5 bytes per value.
            However, in the common case, encoding in this way helps to reduce the number of bytes used writing length prefixes for
            byte arrays and strings.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.IStructuredDataReader">
            <summary>
            Contains methods for reading strongly-typed values from a <see cref="T:System.IO.Stream"/> or other input source.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.Read(System.Byte[],System.Int32)">
            <summary>
            Reads an array of bytes from the input into the specified array.
            </summary>
            <param name="buffer">The array into which to read bytes.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing bytes.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.Read(System.Char[],System.Int32)">
            <summary>
            Reads an array of characters from the input into the specified array.
            </summary>
            <param name="buffer">The array into which to read characters.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing characters.</param>
            <returns>The number of characters read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadBoolean">
            <summary>
            Reads a <see cref="T:System.Boolean"/> value from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadByte">
            <summary>
            Reads a <see cref="T:System.Byte"/> value from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Byte"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadBytes">
            <summary>
            Reads an array of bytes from the input and advances to the next value.
            </summary>
            <returns>The array of bytes read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadChar">
            <summary>
            Reads a <see cref="T:System.Char"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Char"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadChars">
            <summary>
            Reads an array of characters from the input and advances to the next value.
            </summary>
            <returns>The array of characters read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadDateTime">
            <summary>
            Reads a <see cref="T:System.DateTime"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.DateTime"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadDecimal">
            <summary>
            Reads a <see cref="T:System.Decimal"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Decimal"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadDouble">
            <summary>
            Reads a <see cref="T:System.Double"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Double"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadGuid">
            <summary>
            Reads a <see cref="T:System.Guid"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Guid"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadInt16">
            <summary>
            Reads a <see cref="T:System.Int16"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Int16"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadInt32">
            <summary>
            Reads a <see cref="T:System.Int32"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Int32"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadInt64">
            <summary>
            Reads a <see cref="T:System.Int64"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Int64"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadSByte">
            <summary>
            Reads a <see cref="T:System.SByte"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.SByte"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadSingle">
            <summary>
            Reads a <see cref="T:System.Single"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.Single"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadString">
            <summary>
            Reads a <see cref="T:System.String"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.String"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadTimeSpan">
            <summary>
            Reads a <see cref="T:System.TimeSpan"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.TimeSpan"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadUInt16">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.UInt16"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadUInt32">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.UInt32"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadUInt64">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:System.UInt64"/> read from the input.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataReader.ReadUInt128">
            <summary>
            Reads a <see cref="T:Microsoft.BI.Common.UInt128"/> from the input and advances to the next value.
            </summary>
            <returns>The <see cref="T:Microsoft.BI.Common.UInt128"/> read from the input.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.IStructuredDataWriter">
            <summary>
            Contains methods for writing strongly-typed values to a <see cref="T:System.IO.Stream"/> or other output source.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a byte array to the output.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="index">The starting point in <paramref name="buffer"/> at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a character array to the output.
            </summary>
            <param name="chars">A character array containing the data to write.</param>
            <param name="index">The starting point in <paramref name="chars"/> at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the output.
            </summary>
            <param name="value">The unsigned bye to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="value">A byte array containing the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Char)">
            <summary>
            Writes a Unicode character to the output.
            </summary>
            <param name="value">The non-surrogate, Unicode character to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the output.
            </summary>
            <param name="value">A character array containing the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal to the output.
            </summary>
            <param name="value">The decimal value to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the output.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer value to the output.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer value to the output.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer value to the output.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.SByte)">
            <summary>
            Writes a signed byte to the stream.
            </summary>
            <param name="value">The signed bye to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the output.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed stream to the output.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer value to the output.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer value to the output.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer value to the output.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.IStructuredDataWriter.Write(Microsoft.BI.Common.UInt128)">
            <summary>
            Writes a sixteen-byte unsigned integer value to the output.
            </summary>
            <param name="value">The sixteen-byte unsigned integer to write.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader">
             <summary>
             Reads data types from a comma-separated text stream.
             </summary>
             <remarks>
             <para>
             The <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class provides methods that simplify reading primitive data types from a stream. For example,
             you can use the <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadBoolean"/> method to read the next byte as a <see cref="T:System.Boolean"/> value and advance the current position
             in the stream to the next item. The class includes read methods that support different data types.
             </para>
            <para>
             When you create a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class, you provide the stream to read from, and optionally
             specify the type of encoding and buffer size. If you do not specify an encoding type, UTF-8 is used.
             </para>
             <para>
             This type implements the <see cref="T:System.IDisposable"/> interface. When you have finished using the type, you should dispose of it either directly
             or indirectly. To dispose of the type directly, call its <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose"/> method in a try/catch block. To dispose of it indirectly, use
             a language construct such as <c>using</c>
             </para>
             </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.BaseStream">
            <summary>
            Exposes access to the underlying stream of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/>.
            </summary>
            <remarks>
            You can use this property to access the underlying stream. The <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class buffers input from the underlying
            stream when you call one of the <c>Read</c> methods. If you manipulate the position of the underlying stream after reading data into the buffer,
            the position of the underlying stream might not match the position of the internal buffer. To reset the internal buffer, call the
            <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.DiscardBufferedData"/> method; however, this method slows performance and should be called only when absolutely necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.CurrentEncoding">
            <summary>
            Gets the current character encoding that the current <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> object is using.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Location">
            <summary>
            Gets a value that indicates the current location of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> in the stream.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> will automatically detect its location as it is being used.  After every call to one of the <c>Read</c>
            methods, this property will be updated with the new location in the stream.
            </para>
            <para>
            When the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> is initialized for the first time, the location will be set to <see cref="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.Unknown"/>
            until <c>Read</c> has been called at least once.  Similarly, after calling <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.DiscardBufferedData"/>, the location will be set to
            <see cref="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.Unknown"/> until <c>Read</c> has been called at least once.
            </para>
            <para>
            You can use this property to validate that the schema of a CSV file matches the expected schema.  On every line, reading each field except for the
            last one will set the <see cref="P:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Location"/> value to <see cref="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.Delimiter"/>.  Reading the last field on the line will set
            the <see cref="P:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Location"/> value to <see cref="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.NewLine"/>.  If the location does not match this pattern, then the CSV file
            being read has a different schema than expected.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class based on the specified stream and using UTF-8 encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class based on the specified stream and character encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class based on the specified stream, character encoding, and buffer size.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="bufferSize">The buffer size to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is less than or equal to zero (0).</exception>
            <remarks>
            If <paramref name="bufferSize"/> is less than 64, then the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> will use a buffer size of 64 instead.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class based on the specified stream, character encoding, and buffer size.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is less than or equal to zero (0).</exception>
            <remarks>
            If <paramref name="bufferSize"/> is less than 64, then the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> will use a buffer size of 64 instead.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Close">
            <summary>
            Closes the current reader and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.DiscardBufferedData">
            <summary>
            Clears the internal buffer.
            </summary>
            <remarks>
            Use the <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.DiscardBufferedData"/> method to reset the internal buffer for the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> object.
            You need to call this method only when the position of the internal buffer and the <see cref="P:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.BaseStream"/> do not match. These
            positions can become mismatched when you read data into the buffer and then seek a new position in the underlying stream. This method
            slows performance and should be used only when absolutely necessary, such as when you want to read a portion of the contents of a
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> object more than once. 
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class.
            </summary>
            <remarks>
            <para>
            Call <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose"/> when you are finished using the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/>. The <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose"/> method leaves the
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> in an unusable state. After calling <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose"/>, you must release all references to the
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> so the garbage collector can reclaim the memory that the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> was
            occupying.
            </para>
            <para>
            Always call <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose"/> before you release your last reference to the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/>. Otherwise, the resources
            it is using will not be freed until the garbage collector calls the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> object's <c>Finalize</c> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.IsNull">
            <summary>
            Gets a value indicating whether the current field in the underlying stream is <c>null</c>.
            </summary>
            <returns><c>true</c> if the current field is <c>null</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Read(System.Byte[],System.Int32)">
            <summary>
            Reads an array of bytes from the input into the specified array.
            </summary>
            <param name="buffer">The array into which to read bytes.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing bytes.</param>
            <returns>The number of bytes read.</returns>
            <exception cref="T:System.ArgumentException">The length of <paramref name="buffer"/> minus <paramref name="offset"/> is less than the size of the
            array in the stream.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Read(System.Char[],System.Int32)">
            <summary>
            Reads an array of characters from the input into the specified array.
            </summary>
            <param name="buffer">The array into which to read characters.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start writing characters.</param>
            <returns>The number of characters read.</returns>
            <exception cref="T:System.ArgumentException">The length of <paramref name="buffer"/> minus <paramref name="offset"/> is less than the size of the
            array in the stream.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadBoolean">
            <summary>
            Reads a <see cref="T:System.Boolean"/> value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns><c>true</c> if the byte is nonzero; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>The next byte read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadBytes">
            <summary>
            Reads a length-prefixed byte array from the current stream into a byte array and advances the current position to the next value.
            </summary>
            <returns>A byte array containing data read from the underlying stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadChar">
            <summary>
            Reads the next character from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A character read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadChars">
            <summary>
            Reads a length-prefixed character array from the current stream into a character array and advances the current position of
            the stream to the next value.
            </summary>
            <returns>A character array containing data read from the underlying stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadDateTime">
            <summary>
            Reads a <see cref="T:System.DateTime"/> value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A decimal value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadEnum``1">
            <summary>
            Reads an enum value from the current stream and advances the current position of the stream to the next item.
            </summary>
            <typeparam name="T">The type of the enum to read.</typeparam>
            <returns>An enum value read from the current stream.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an enum.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadGuid">
            <summary>
            Reads a <see cref="T:System.Guid"/> value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A <see cref="T:System.Guid"/> value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadSByte">
            <summary>
            Reads a signed byte from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A signed byte read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadString">
            <summary>
            Reads a string from the current stream.
            </summary>
            <returns>The string being read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadTimeSpan">
            <summary>
            Reads a <see cref="T:System.TimeSpan"/> value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A <see cref="T:System.TimeSpan"/> value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 2-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 4-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>An 8-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadUInt128">
            <summary>
            Reads a sixteen-byte unsigned integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A sixteen-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Skip">
            <summary>
            Skips over the current field.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.SkipLine">
            <summary>
            Skips over the current line.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Microsoft#BI#Common#Serialization#IBinarySerializable#Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the state of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> to a stream.
            </summary>
            <param name="writer">The stream into which to write the data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Microsoft#BI#Common#Serialization#IBinarySerializable#Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the state of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> from a stream.
            </summary>
            <param name="reader">The stream fropm which to read data.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The buffer length or encoding of the serialized data does not
            match the buffer length and encoding of the current instance.</exception>
            <remarks>
            <para>
            This method allows the current state of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> to be restored from a
            serialized binary stream written with <see cref="M:Microsoft.BI.Common.Serialization.IBinarySerializable.Serialize(System.IO.BinaryWriter)"/>.  In order for this to
            work properly, the following conditions must be met:
            </para>
            <para>
            <list type="number">
              <item><description>
              The reader must be based on the same (or an equivalent) underlying stream, and the
              position in the stream must be the same (or equivalent) to the position when
              <see cref="M:Microsoft.BI.Common.Serialization.IBinarySerializable.Serialize(System.IO.BinaryWriter)"/> was originally called.
              </description></item>
              <item><description>
              The reader must have the same buffer size as the original reader.
              </description></item>
              <item><description>
              The reader must have the same encoding as the original reader.
              </description></item>
            </list>
            </para>
            <para>
            If the above conditions are met, then the restored <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> will resume
            reading in exactly the same position as the original reader.
            </para>
            <para>
            An "equivalent" stream, as mentioned above, is the original stream or another stream that contains the same
            data.  For example, you could pass the same instance of a <see cref="T:System.IO.FileStream"/> to the restored instance,
            a new <see cref="T:System.IO.FileStream"/> where the <see cref="P:System.IO.Stream.Position"/> was set to the same location as the
            original stream, a <see cref="T:System.IO.BufferedStream"/> wrapping a <see cref="T:System.IO.FileStream"/>, and so on.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; false to release only unamanged resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadIntoStringBuilder(System.Text.StringBuilder)">
            <summary>
            Reads data from the underlying stream into a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> into which to read data from the stream.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.EnforceBuffer(System.Int32)">
            <summary>
            Enforces that there is at least 1 character in the stream left to be read.
            </summary>
            <param name="reserved">The number of characters that the caller wants to read.</param>
            <exception cref="T:System.IO.EndOfStreamException">The underlying stream is empty, -or- the current position in the underlying
            stream is at the end..</exception>
            <remarks>
            This method does not enforce that the underlying buffer is <paramref name="reserved"/> characters long; rather, it
            merely enforces that there is at least 1 character.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.EnsureBuffer(System.Int32)">
            <summary>
            Attempts to fill the internal buffer and returns a value indicating whether it was successful.
            </summary>
            <param name="reserved">The number of characters that the caller wants to read.</param>
            <returns><c>true</c> if at least one character was read; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.EnsureBuffer(System.Char*,System.Char*@,System.Int32)">
            <summary>
            Attempts to fill the internal buffer and returns a value indicating whether it was successful.
            </summary>
            <param name="buffer">A pointer to the character buffer.</param>
            <param name="p">A pointer to the current position within <paramref name="buffer"/>.</param>
            <param name="reserved">The number of characters that the caller wants to read.</param>
            <returns><c>true</c> if at least one character was read; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The detected encoding in the underlying stream does not match the encoding
            specified in the constructor.</exception>
            <remarks>
            <para>
            The first time this method is called, the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataReader"/> will attempt to detect the encoding
            of the underlying stream.  If successful, and if the detected encoding does not match the encoding specified in the
            constructor, an <see cref="T:System.ArgumentException"/> will be thrown.
            </para>
            <para>
            When this method returns, the location pointed to by <paramref name="p"/> may be changed, depending
            on whether more data was read into the buffer or not.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.IsAtDelimiter(System.Char*,System.Char*@)">
            <summary>
            Checks that the character pointed to by <paramref name="p"/> is a delimiter (comma or newline).
            </summary>
            <param name="buffer">A pointer to the character buffer.</param>
            <param name="p">A pointer to the current character in the stream.</param>
            <returns><c>true</c> if <paramref name="p"/> points to a delimiter; otherwise, <c>false</c>.</returns>
            <remarks>
            When this method returns, <paramref name="p"/> will be pointing to the first character after the detected delimiter.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.EnsureAtDelimiter(System.Char*,System.Char*@)">
            <summary>
            Ensures that the character pointed to by <paramref name="p"/> is a delimiter (comma or newline).
            </summary>
            <param name="buffer">A pointer to the character buffer.</param>
            <param name="p">A pointer to the current position in <paramref name="buffer"/>.</param>
            <exception cref="T:System.FormatException"><paramref name="p"/> does not point to a delimiter, which indicates that the
            parsing of the previous field was incomplete.</exception>
            <remarks>
            When this method returns, the location pointed to by <paramref name="p"/> may be changed, depending
            on whether more data was read into the buffer or not.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.CheckEncoding">
            <summary>
            Checks the encoding of the underlying stream against the encoding specified in the constructor.
            </summary>
            <returns>The number of bytes to skip because of the encoding's byte-order mark.</returns>
            <exception cref="T:System.ArgumentException">The detected encoding in the underlying stream does not match the encoding
            specified in the constructor.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter">
            <summary>
            Writes primitive types to a stream in comma-separated value (CSV) format.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> class provides methods that simplify writing primitive data types to a stream. For example, you
            can use the <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Boolean)"/> method to write a <see cref="T:System.Boolean"/> value to the stream as a string value. The class includes
            write methods that support different data types.
            </para>
            <para>
            When you create a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> class, you provide the stream to read from, and optionally
            specify the type of encoding. If you do not specify an encoding type, UTF-8 is used.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> does not support writing fields that contain newline (\r, \n) or delimiter (,) characters.  If you
            need to write out data that contains these characters, consider using a <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter"/> instead.
            </para>
            <para>
            This type implements the <see cref="T:System.IDisposable"/> interface. When you have finished using the type, you should dispose of it either directly
            or indirectly. To dispose of the type directly, call its <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose"/> method in a try/catch block. To dispose of it indirectly, use
            a language construct such as <c>using</c>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.BaseStream">
            <summary>
            For <see cref="T:System.IO.Stream"/>-based <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> instances, exposes access to the underlying stream.
            </summary>
            <remarks>
            This property is non-null when the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> is constructed via the <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.#ctor(System.IO.Stream)"/>
            or <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.#ctor(System.IO.Stream,System.Text.Encoding)"/> constructors, or the <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.#ctor(System.IO.TextWriter)"/> constructor
            if <c>writer</c> is a <see cref="T:System.IO.StreamWriter"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> class based on the specified stream and using UTF-8 encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> class based on the specified stream and character encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> class based on the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The text writer used to write data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Close">
            <summary>
            Closes the current reader and the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> class.
            </summary>
            <remarks>
            <para>
            Call <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose"/> when you are finished using the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/>. The <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose"/> method leaves the
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> in an unusable state. After calling <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose"/>, you must release all references to the
            <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> so the garbage collector can reclaim the memory that the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> was
            occupying.
            </para>
            <para>
            Always call <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose"/> before you release your last reference to the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/>. Otherwise, the resources
            it is using will not be freed until the garbage collector calls the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> object's <c>Finalize</c> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a byte array to the output.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="index">The starting point in <paramref name="buffer"/> at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a character array to the output.
            </summary>
            <param name="chars">A character array containing the data to write.</param>
            <param name="index">The starting point in <paramref name="chars"/> at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="chars"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the output.
            </summary>
            <param name="value">The unsigned bye to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="value">A byte array containing the data to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Char)">
            <summary>
            Writes a Unicode character to the output.
            </summary>
            <param name="value">The non-surrogate, Unicode character to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the output.
            </summary>
            <param name="value">A character array containing the data to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal to the output.
            </summary>
            <param name="value">The decimal value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the output.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer value to the output.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer value to the output.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer value to the output.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.SByte)">
            <summary>
            Writes a signed byte to the stream.
            </summary>
            <param name="value">The signed bye to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the output.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed stream to the output.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value to the output.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer value to the output.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer value to the output.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer value to the output.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(Microsoft.BI.Common.UInt128)">
            <summary>
            Writes a sixteen-byte unsigned integer value to the output.
            </summary>
            <param name="value">The sixteen-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.WriteEnum``1(``0)">
            <summary>
            Writes an enumeration value to the output.
            </summary>
            <typeparam name="T">The type of the enum to write.</typeparam>
            <param name="value">The enum value to write.</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an enum.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.WriteLine">
            <summary>
            Writes a newline to the underlying stream.
            </summary>
            <remarks>
            This suppresses the normal appending of the delimiter between fields for one call to <c>Write</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.WriteNull">
            <summary>
            Writes a null value to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; false to release only unamanged resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.WriteDelimiter">
            <summary>
            Writes a delimiter if not currently at a newline.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Writer">
            <summary>
            The <see cref="T:System.IO.TextWriter"/> to use when writing data to the stream.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader">
             <summary>
             Reads data types from a comma-separated text stream that is optionally quoted.
             </summary>
             <remarks>
             <para>
             The <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> class provides methods that simplify reading primitive data types from a stream. For example,
             you can use the <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.ReadBoolean"/> method to read the next byte as a <see cref="T:System.Boolean"/> value and advance
             the current position in the stream to the next item. The class includes read methods that support different data types.
             </para>
            <para>
             When you create a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> class, you provide the stream to read from, and optionally
             specify the type of encoding and buffer size. If you do not specify an encoding type, UTF-8 is used.
             </para>
             <para>
             This class parses data according to the RFC 4180 standard for quoting comma-separated value files.  Fields may contain delimiter characters or
             newlines so long as the field itself is properly quoted.  See http://tools.ietf.org/html/rfc4180 for more details.
             </para>
             <para>
             This type implements the <see cref="T:System.IDisposable"/> interface. When you have finished using the type, you should dispose of it either directly
             or indirectly. To dispose of the type directly, call its <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataReader.Dispose"/> method in a try/catch block. To dispose
             of it indirectly, use a language construct such as <c>using</c>
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> class based on the specified stream and using UTF-8 encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> class based on the specified stream and character encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> class based on the specified stream, character encoding, and buffer size.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="bufferSize">The buffer size to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is less than or equal to zero (0).</exception>
            <remarks>
            If <paramref name="bufferSize"/> is less than 64, then the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> will use a buffer size of 64 instead.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> class based on the specified stream, character encoding, and buffer size.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading or is already closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is less than or equal to zero (0).</exception>
            <remarks>
            If <paramref name="bufferSize"/> is less than 64, then the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> will use a buffer size of 64 instead.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>The next byte read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadChar">
            <summary>
            Reads the next character from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A character read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A decimal value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadGuid">
            <summary>
            Reads a <see cref="T:System.Guid"/> value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A <see cref="T:System.Guid"/> value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadSByte">
            <summary>
            Reads a signed byte from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A signed byte read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 2-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>A 4-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the current position of the stream to the next value.
            </summary>
            <returns>An 8-byte unsigned integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <remarks>
            <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader"/> does not restore the stream position after an unsuccessful read operation.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.Skip">
            <summary>
            Skips over the current field.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ReadIntoStringBuilder(System.Text.StringBuilder)">
            <summary>
            Reads data from the underlying stream into a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> into which to read data from the stream.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ConsumeFieldStart(System.Int32,System.Char*,System.Char*@,Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State@)">
            <summary>
            Reads the beginning of a field.
            </summary>
            <param name="ensureCount">The number of characters the caller would like to read.</param>
            <param name="buffer">A pointer to the character buffer.</param>
            <param name="p">A pointer to the current character in <paramref name="buffer"/>.</param>
            <param name="state">When this method returns, contains a <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State"/> value indicating the current
            parsing state of the field (namely, whether it was quoted or not).</param>
            <remarks>
            When this method returns, the location pointed to by <paramref name="p"/> may be changed, depending
            on whether more data was read into the buffer or not.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ConsumeFieldEnd(System.Char*,System.Char*@,Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State)"/>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ConsumeFieldEnd(System.Char*,System.Char*@,Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State)">
            <summary>
            Reads the end of a field.
            </summary>
            <param name="buffer">A pointer to the character buffer.</param>
            <param name="p">A pointer to the current character in <paramref name="buffer"/>.</param>
            <param name="state">The <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State"/> enumeration value that was obtained by calling <see cref="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ConsumeFieldStart(System.Int32,System.Char*,System.Char*@,Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State@)"/>
            before parsing the field's data.</param>
            <exception cref="T:System.IO.EndOfStreamException"><paramref name="state"/> contains the <see cref="F:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State.InQuote"/> flag and the stream
            was read to the end without encountering another quotation character.</exception>
            <exception cref="T:System.FormatException">The field contained extra characters beyond what the field parser consumed, -or- there was
            a quotation character in the field that was not properly escaped.</exception>
            <remarks>
            When this method returns, the location pointed to by <paramref name="p"/> may be changed, depending
            on whether more data was read into the buffer or not.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.ConsumeFieldStart(System.Int32,System.Char*,System.Char*@,Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State@)"/>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataReader.State">
            <summary>
            Values that represent the parsing state of the quote parser.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter">
            <summary>
            Writes primitive types to a stream in comma-separated value (CSV) format.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter"/> class provides methods that simplify writing primitive data types to a stream. For example, you
            can use the <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Write(System.Boolean)"/> method to write a <see cref="T:System.Boolean"/> value to the stream as a string value. The
            class includes write methods that support different data types.
            </para>
            <para>
            When you create a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter"/> class, you provide the stream to read from, and optionally
            specify the type of encoding. If you do not specify an encoding type, UTF-8 is used.
            </para>
            <para>
            The <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter"/> supports writing values that contain newline (\r, \n) or delimiter (,) characters.  Such fields
            will be quoted according to the RFC 4180 standard for CSV files.  Namely, this means the field will be surrounded in quotes ("), and any embedded
            quotation characters will be escaped by appending an additional quote character.
            </para>
            <para>
            This type implements the <see cref="T:System.IDisposable"/> interface. When you have finished using the type, you should dispose of it either directly
            or indirectly. To dispose of the type directly, call its <see cref="M:Microsoft.BI.Common.Serialization.CsvStructuredDataWriter.Dispose"/> method in a try/catch block. To dispose
            of it indirectly, use a language construct such as <c>using</c>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter"/> class based on the specified stream and using UTF-8 encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter"/> class based on the specified stream and character encoding.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>, -or-, <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support writing or is already closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter"/> class based on the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The text writer used to write data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.Write(System.Char)">
            <summary>
            Writes a Unicode character to the output.
            </summary>
            <param name="value">The non-surrogate, Unicode character to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the output.
            </summary>
            <param name="value">A character array containing the data to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed stream to the output.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.IO.IOException">An I/O errror occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.NeedsQuoting(System.Char)">
            <summary>
            Returns <c>true</c> if the specified character requires quoting; otherwise, returns <c>false</c>.
            </summary>
            <param name="c">The character to check.</param>
            <returns><c>true</c> if <paramref name="c"/> requires quoting; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.QuotedCsvStructuredDataWriter.WriteChar(System.Char)">
            <summary>
            Writes a single character to the underlying stream.
            </summary>
            <param name="c">The character to write.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.StructuredDataLocation">
            <summary>
            Contains values for the possible locations of an <see cref="T:Microsoft.BI.Common.Serialization.IStructuredDataReader"/> when reading.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.Unknown">
            <summary>
            The <see cref="T:Microsoft.BI.Common.Serialization.IStructuredDataReader"/> is in an unknown location.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.NewLine">
            <summary>
            The <see cref="T:Microsoft.BI.Common.Serialization.IStructuredDataReader"/> is at a new line between records.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.Delimiter">
            <summary>
            The <see cref="T:Microsoft.BI.Common.Serialization.IStructuredDataReader"/> is at a delimiter between fields.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.StructuredDataLocation.EndOfStream">
            <summary>
            The <see cref="T:Microsoft.BI.Common.Serialization.IStructuredDataReader"/> is at the end of the stream.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.GuidParser">
            <summary>
            Provides methods for parsing <see cref="T:System.Guid"/> values.
            </summary>
            <remarks>
            These methods are anywhere from 4.5 (for the D, B, and P formats) to 6.5 (for the N format) times
            faster at parsing <see cref="T:System.Guid"/> values as compared to the builtin <see cref="M:System.Guid.Parse(System.String)"/>
            method.  They also have no allocations.  (The default .NET parser makes extensive use of
            <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> when parsing, which slows everything down and allocates
            strings unnecessarily.)
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.GuidParser.NumberMaxChars">
            <summary>
            The maximum number of characters in a <see cref="T:System.Guid"/> string.
            </summary>
            <remarks>
            The maximum length of a <see cref="T:System.Guid"/> in each format is expressed in the following table:
            <list type="table">
              <listheader><term>Format</term></listheader><listheader><term>Length</term></listheader>
              <item><description>N</description></item><item><description>32 characters                    </description></item>
              <item><description>D</description></item><item><description>36 characters                    </description></item>
              <item><description>B</description></item><item><description>38 characters                    </description></item>
              <item><description>P</description></item><item><description>38 characters                    </description></item>
              <item><description>X</description></item><item><description>68 characters (not yet supported)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.GuidParser.Parse(System.String)">
            <summary>
            Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>A structure that contains the value that was parsed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> is not in a recognized format.</exception>
            <remarks>
            The <c>X</c> format is not yet supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.GuidParser.Parse(System.Char*,System.Int32)">
            <summary>
            Converts an array of characters representing a GUID to the equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="c">A pointer to the first character in the array.</param>
            <param name="count">The maximum number of characters in the array to parse.</param>
            <returns>A structure that contains the value that was parsed.</returns>
            <exception cref="T:System.FormatException">The character array starting at <paramref name="c"/> is not in
            a recognized format.</exception>
            <remarks>
            The <c>X</c> format is not yet supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.GuidParser.Parse(System.Char*@)">
            <summary>
            Converts an array of characters representing a GUID to the equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="c">A pointer to the first character in the array.</param>
            <returns>A structure that contains the value that was parsed.</returns>
            <exception cref="T:System.FormatException">The character array starting at <paramref name="c"/> is not in
            a recognized format.</exception>
            <remarks>
            The <c>X</c> format is not yet supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.GuidParser.TryParse(System.String,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="result">The structure that will contain the parsed value.  If the method returns <c>true</c>,
            <paramref name="result"/> contains a valid <see cref="T:System.Guid"/>.  If the method returns <c>false</c>,
            <paramref name="result"/> equals <see cref="F:System.Guid.Empty"/>.</param>
            <returns><c>true</c> if the parse operation was successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is <c>null</c>.</exception>
            <remarks>
            The <c>X</c> format is not yet supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.GuidParser.TryParse(System.Char*,System.Int32,System.Guid@)">
            <summary>
            Converts an array of characters representing a GUID to the equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="c">A pointer to the first character in the array.</param>
            <param name="count">The maximum number of characters in the array to parse.</param>
            <param name="result">The structure that will contain the parsed value.  If the method returns <c>true</c>,
            <paramref name="result"/> contains a valid <see cref="T:System.Guid"/>.  If the method returns <c>false</c>,
            <paramref name="result"/> equals <see cref="F:System.Guid.Empty"/>.</param>
            <returns><c>true</c> if the parse operation was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            The <c>X</c> format is not yet supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.GuidParser.TryParse(System.Char*@,System.Guid@)">
            <summary>
            Converts an array of characters representing a GUID to the equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="c">A pointer to the first character in the array.</param>
            <param name="result">The structure that will contain the parsed value.  If the method returns <c>true</c>,
            <paramref name="result"/> contains a valid <see cref="T:System.Guid"/>.  If the method returns <c>false</c>,
            <paramref name="result"/> equals <see cref="F:System.Guid.Empty"/>.</param>
            <returns><c>true</c> if the parse operation was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            The <c>X</c> format is not yet supported.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.HexParser">
            <summary>
            Provides methods for parsing hex strings into byte arrays and for formatting byte
            arrays into hex strings.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Parse(System.String)">
            <summary>
            Parses a hex string into a byte array.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>The resulting byte array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="str"/> does not have even length, starts with "0x"
            and has no more characters, or contains one or more characters that are not valid hex characters.</exception>
            <remarks>
            This method supports parsing hex strings that optionally start with a leading "0x" or "0X" hex indicator.
            Both uppercase and lowercase characters are supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.TryParse(System.String,System.Byte[]@)">
            <summary>
            Parses a hex string into a byte array.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="result">When this method returns, contains the result of parsing <paramref name="str"/> as a byte array.</param>
            <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            This method supports parsing hex strings that optionally start with a leading "0x" or "0X" hex indicator.
            Both uppercase and lowercase characters are supported.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte[])">
            <summary>
            Formats the supplied byte array as a string.
            </summary>
            <param name="buffer">The byte array to format.</param>
            <returns>The formatted string, or <c>null</c> if <paramref name="buffer"/> was <c>null</c>.</returns>
            <remarks>
            <para>
            The resulting string will contain the big-endian representation of the byte array (that is, the
            most-significant bit will be on the right and the least-significant bit will be on the left).  This
            matches the way that byte arrays are declared.  For example,
            <example>
            HexParser.Format(new byte[] { 0xDE, 0xAD, 0xBE, 0xEF }); // returns "DEADBEEF"
            </example>
            Contrast this behavior to that of <see cref="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte*,System.Int32)"/>, which returns a little-endian
            representation of the bytes being formatted.
            </para>
            <para>
            This method does not append a leading hex indicator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Formats a segment of the supplied byte array as a string.
            </summary>
            <param name="buffer">The byte array to format.</param>
            <param name="offset">The starting offset in <paramref name="buffer"/> at which to begin formatting.</param>
            <param name="count">The number of bytes to format.</param>
            <returns>The formatted string, or <c>null</c> if <paramref name="buffer"/> was <c>null</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is
            greater than the length of <paramref name="buffer"/>.</exception>
            <remarks>
            <para>
            The resulting string will contain the big-endian representation of the byte array (that is, the
            most-significant bit will be on the right and the least-significant bit will be on the left).  This
            matches the way that byte arrays are declared.  For example,
            <example>
            HexParser.Format(new byte[] { 0xDE, 0xAD, 0xBE, 0xEF }, 1, 2); // returns "ADBE"
            </example>
            Contrast this behavior to that of <see cref="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte*,System.Int32)"/>, which returns a little-endian
            representation of the bytes being formatted.
            </para>
            <para>
            This method does not append a leading hex indicator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte[],System.Boolean)">
            <summary>
            Formats the supplied byte array as a string.
            </summary>
            <param name="buffer">The byte array to format.</param>
            <param name="hexIndicator">Whether to append a leading hex indicator.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            The resulting string will contain the big-endian representation of the byte array (that is, the
            most-significant bit will be on the right and the least-significant bit will be on the left).  This
            matches the way that byte arrays are declared.  For example,
            <example>
            HexParser.Format(new byte[] { 0xDE, 0xAD, 0xBE, 0xEF }, true); // returns "0xDEADBEEF"
            </example>
            Contrast this behavior to that of <see cref="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte*,System.Int32,System.Boolean)"/>, which returns a little-endian
            representation of the bytes being formatted.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Formats the supplied byte array as a string.
            </summary>
            <param name="buffer">The byte array to format.</param>
            <param name="offset">The starting offset in <paramref name="buffer"/> at which to begin formatting.</param>
            <param name="count">The number of bytes to format.</param>
            <param name="hexIndicator">Whether to append a leading hex indicator.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is
            greater than the length of <paramref name="buffer"/>.</exception>
            <remarks>
            <para>
            The resulting string will contain the big-endian representation of the byte array (that is, the
            most-significant bit will be on the right and the least-significant bit will be on the left).  This
            matches the way that byte arrays are declared.  For example,
            <example>
            HexParser.Format(new byte[] { 0xDE, 0xAD, 0xBE, 0xEF }, 1, 2, true); // returns "0xADBE"
            </example>
            Contrast this behavior to that of <see cref="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte*,System.Int32,System.Boolean)"/>, which returns a little-endian
            representation of the bytes being formatted.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte*,System.Int32)">
            <summary>
            Formats the supplied bytes as a string.
            </summary>
            <param name="buffer">A pointer to the byte at which to start formatting.</param>
            <param name="count">The number of bytes to format.</param>
            <returns>The formatted string, or <c>null</c> if <paramref name="buffer"/> was <c>null</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <remarks>
            <para>
            The resulting string will contain the little-endian representation of the bytes (that is, the
            least-significant bit will be on the right and the most-significant bit will be on the left).  This
            matches the way that integral values formatted with the "X" format specifier are returned.  For example,
            <example>
            long value = 1234567890;
            HexParser.Format((byte*)&amp;value, 8); // returns "00000000499602D2"
            value.ToString("X16");                  // returns "00000000499602D2"
            </example>
            Contrast this behavior to that of <see cref="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte[])"/>, which returns a little-endian
            representation of the bytes being formatted.
            </para>
            <para>
            This method does not append a leading hex indicator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte*,System.Int32,System.Boolean)">
            <summary>
            Formats the supplied bytes as a string.
            </summary>
            <param name="buffer">A pointer to the byte at which to start formatting.</param>
            <param name="count">The number of bytes to format.</param>
            <param name="hexIndicator">Whether to append a leading hex indicator.</param>
            <returns>The formatted string, or <c>null</c> if <paramref name="buffer"/> was <c>null</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <remarks>
            <para>
            The resulting string will contain the little-endian representation of the bytes (that is, the
            least-significant bit will be on the right and the most-significant bit will be on the left).  This
            matches the way that integral values formatted with the "X" format specifier are returned.  For example,
            <example>
            long value = 1234567890;
            HexParser.Format((byte*)&amp;value, 8, false); // returns "00000000499602D2"
            value.ToString("X16");                         // returns "00000000499602D2"
            </example>
            Contrast this behavior to that of <see cref="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte[],System.Boolean)"/>, which returns a little-endian
            representation of the bytes being formatted.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.Format(System.Byte*,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Formats the supplied bytes as a string.
            </summary>
            <param name="buffer">A pointer to the byte at which to start formatting.</param>
            <param name="count">The number of bytes to format.</param>
            <param name="hexIndicator">Whether to append a leading hex indicator.</param>
            <param name="bigEndian">Whether to format the result as big-endian or little-endian.</param>
            <returns>The resulting string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.HexParser.#cctor">
            <summary>
            Populates lookup tables
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.NumberParser">
            <summary>
            Contains functions for parsing strings of characters as numbers.
            </summary>
            <remarks>
            The functions in <see cref="T:Microsoft.BI.Common.Serialization.NumberParser"/> can only parse numbers formatted using
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> (no digit separators, characters 0-9 for
            digits, <c>'-'</c> for negative values.
            </remarks>
            <content>
            Contains the boilerplate implementations of the various <c>Format</c> methods.
            </content>
            <content>
            Contains the boilerplate implementations of the various <c>Parse</c> and <c>TryParse</c> methods.
            </content>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.FormatUInt128(Microsoft.BI.Common.UInt128,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Formats a <see cref="T:Microsoft.BI.Common.UInt128"/> value using the specified format string and culture-specific formatting info.
            </summary>
            <param name="value">The value.</param>
            <param name="format">The numeric formatting string.</param>
            <param name="info">An object that provides culture-specific formatting information.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt32ToDecimalChars(System.Char*,System.UInt32,System.Int32)">
            <summary>
            Fills a char buffer with the decimal characters of the specified <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="p">A pointer to the end of buffer at which to start filling characters.</param>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return from <paramref name="value"/>.</param>
            <returns>The position in the character buffer of the beginning of the number's characters.</returns>
            <remarks>
            <para>
            The buffer pointed to by <paramref name="p"/> is filled from high-order values to low-order values -
            that is, the rightmost character will have the highest address and the leftmost character will have the
            lowest address.  The characters of the number will end in a null character to terminate the string.
            </para>
            <para>
            It is the responsibility of the caller to supply a buffer large enough to contain the entire number
            plus the null terminator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt64ToDecimalChars(System.Char*,System.UInt64,System.Int32)">
            <summary>
            Fills a char buffer with the decimal characters of the specified <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="p">A pointer to the end of buffer at which to start filling characters.</param>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return from <paramref name="value"/>.</param>
            <returns>The position in the character buffer of the beginning of the number's characters.</returns>
            <remarks>
            <para>
            The buffer pointed to by <paramref name="p"/> is filled from high-order values to low-order values -
            that is, the rightmost character will have the highest address and the leftmost character will have the
            lowest address.  The characters of the number will end in a null character to terminate the string.
            </para>
            <para>
            It is the responsibility of the caller to supply a buffer large enough to contain the entire number
            plus the null terminator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt128ToDecimalChars(System.Char*,Microsoft.BI.Common.UInt128,System.Int32)">
            <summary>
            Fills a char buffer with the decimal characters of the specified <see cref="T:Microsoft.BI.Common.UInt128"/> value.
            </summary>
            <param name="p">A pointer to the end of buffer at which to start filling characters.</param>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return from <paramref name="value"/>.</param>
            <returns>The position in the character buffer of the beginning of the number's characters.</returns>
            <remarks>
            <para>
            The buffer pointed to by <paramref name="p"/> is filled from high-order values to low-order values -
            that is, the rightmost character will have the highest address and the leftmost character will have the
            lowest address.  The characters of the number will end in a null character to terminate the string.
            </para>
            <para>
            It is the responsibility of the caller to supply a buffer large enough to contain the entire number
            plus the null terminator.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt128ToNumber(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.Serialization.NumberParser.NumberBuffer*)">
            <summary>
            Converts a <see cref="T:Microsoft.BI.Common.UInt128"/> into a native <see cref="T:Microsoft.BI.Common.Serialization.NumberParser.NumberBuffer"/> structure.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt64DivMod1E9(System.UInt64@)">
            <summary>
            Divides the specified <see cref="T:System.UInt64"/> value by 1,000,000,000 (1e+9, one billion).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt128DivMod1E18(Microsoft.BI.Common.UInt128@)">
            <summary>
            Divides the specified <see cref="T:Microsoft.BI.Common.UInt128"/> value by 1,000,000,000,000,000,000 (1e+18, one quintillion).
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.NormalizeToHexBase(System.Char)">
            <summary>
            Returns a normalized hex base value used by <see cref="M:Microsoft.BI.Common.Serialization.NumberParser.UInt32ToHexChars(System.Char*,System.UInt32,System.Int32,System.Int32)"/> to format
            integral values as a hexadecimal string based on the case of the user-supplied character <paramref name="c"/>.
            </summary>
            <remarks>
            If <paramref name="c"/> is not one of 'x' or 'X', the behavior of this method is undefined.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseFormatSpecifier(System.String,System.Int32@)">
            <summary>
            Parses a string of the form "({char}{digit}*)?", returning the associated <see cref="T:Microsoft.BI.Common.Serialization.NumberParser.NumericFormatSpecifier"/>
            and digit value.
            </summary>
            <param name="format">The format string.</param>
            <param name="digitCount">When this method returns, contains the number of digits specified by
            <paramref name="format"/>, or -1 if none were specified.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.Serialization.NumberParser.NumericFormatSpecifier"/> parsed from <paramref name="format"/>, or
            <see cref="F:Microsoft.BI.Common.Serialization.NumberParser.NumericFormatSpecifier.Custom"/> if the format was unrecognized.</returns>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k%28v=vs.110%29.aspx"/>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.NumberParser.NumericFormatSpecifier">
            <summary>
            Represents a numeric format specifier.
            </summary>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k%28v=vs.110%29.aspx"/>
        </member>
        <member name="F:Microsoft.BI.Common.Serialization.NumberParser.NumericFormatSpecifier.NormalizeMask">
            <summary>
            Use this mask to normalize each format kind to its canonical representation.  For example,
            <example>
            <c>HexadecimalLower &amp; NormalizeMask = Hexadecimal</c>
            <c>HexadecimalUpper &amp; NormalizeMask = Hexadecimal</c>
            <c>Hexadecimal      &amp; NormalizeMask = Hexadecimal</c>
            </example>
            and so on.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Serialization.NumberParser.NumberBuffer">
            <summary>
            Copy of the struct with the same name in mscorlib.dll.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.Int32ToDecimalString(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the string representation of an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <param name="negativePrefix">The string to prepend to the beginning of the result if <paramref name="value"/>
            is negative.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.Int64ToDecimalString(System.Int64,System.Int32,System.String)">
            <summary>
            Returns the string representation of an <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <param name="negativePrefix">The string to prepend to the beginning of the result if <paramref name="value"/>
            is negative.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt32ToDecimalString(System.UInt32,System.Int32)">
            <summary>
            Returns the string representation of a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt64ToDecimalString(System.UInt64,System.Int32)">
            <summary>
            Returns the string representation of a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt128ToDecimalString(Microsoft.BI.Common.UInt128,System.Int32)">
            <summary>
            Returns the string representation of a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt32ToHexString(System.UInt32,System.Char,System.Int32)">
            <summary>
            Returns the string representation of a <see cref="T:System.UInt32"/> value using the specified format.
            </summary>
            <param name="value">The value.</param>
            <param name="format">The char 'X' or 'x'.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>
            If <paramref name="format"/> is not one of 'x' or 'X', the behavior of this method is undefined.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt32ToHexChars(System.Char*,System.UInt32,System.Char,System.Int32)">
            <summary>
            Fills a char buffer with the characters in the specified <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="p">A pointer to the end of buffer at which to start filling characters.</param>
            <param name="value">The value.</param>
            <param name="format">The char 'X' or 'x'.</param>
            <param name="digitCount">The minimum number of digits to return from <paramref name="value"/>.</param>
            <returns>The position in the character buffer of the beginning of the number's characters.</returns>
            <remarks>
            <para>
            The buffer pointed to by <paramref name="p"/> is filled from high-order values to low-order values -
            that is, the rightmost character will have the highest address and the leftmost character will have the
            lowest address.  The characters of the number will end in a null character to terminate the string.
            </para>
            <para>
            It is the responsibility of the caller to supply a buffer large enough to contain the entire number
            plus the null terminator.
            </para>
            <para>
            If <paramref name="format"/> is not one of 'x' or 'X', the behavior of this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt64ToHexString(System.UInt64,System.Char,System.Int32)">
            <summary>
            Returns the string representation of a <see cref="T:System.UInt64"/> value using the specified format.
            </summary>
            <param name="value">The value.</param>
            <param name="format">The char 'X' or 'x'.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>
            If <paramref name="format"/> is not one of 'x' or 'X', the behavior of this method is undefined.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt64ToHexChars(System.Char*,System.UInt64,System.Char,System.Int32)">
            <summary>
            Fills a char buffer with the characters in the specified <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="p">A pointer to the end of buffer at which to start filling characters.</param>
            <param name="value">The value.</param>
            <param name="format">The char 'X' or 'x'.</param>
            <param name="digitCount">The minimum number of digits to return from <paramref name="value"/>.</param>
            <returns>The position in the character buffer of the beginning of the number's characters.</returns>
            <remarks>
            <para>
            The buffer pointed to by <paramref name="p"/> is filled from high-order values to low-order values -
            that is, the rightmost character will have the highest address and the leftmost character will have the
            lowest address.  The characters of the number will end in a null character to terminate the string.
            </para>
            <para>
            It is the responsibility of the caller to supply a buffer large enough to contain the entire number
            plus the null terminator.
            </para>
            <para>
            If <paramref name="format"/> is not one of 'x' or 'X', the behavior of this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt128ToHexString(Microsoft.BI.Common.UInt128,System.Char,System.Int32)">
            <summary>
            Returns the string representation of a <see cref="T:Microsoft.BI.Common.UInt128"/> value using the specified format.
            </summary>
            <param name="value">The value.</param>
            <param name="format">The char 'X' or 'x'.</param>
            <param name="digitCount">The minimum number of digits to return.</param>
            <returns><paramref name="value"/> formatted as a string.</returns>
            <remarks>
            If <paramref name="format"/> is not one of 'x' or 'X', the behavior of this method is undefined.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.UInt128ToHexChars(System.Char*,Microsoft.BI.Common.UInt128,System.Char,System.Int32)">
            <summary>
            Fills a char buffer with the characters in the specified <see cref="T:Microsoft.BI.Common.UInt128"/> value.
            </summary>
            <param name="p">A pointer to the end of buffer at which to start filling characters.</param>
            <param name="value">The value.</param>
            <param name="format">The char 'X' or 'x'.</param>
            <param name="digitCount">The minimum number of digits to return from <paramref name="value"/>.</param>
            <returns>The position in the character buffer of the beginning of the number's characters.</returns>
            <remarks>
            <para>
            The buffer pointed to by <paramref name="p"/> is filled from high-order values to low-order values -
            that is, the rightmost character will have the highest address and the leftmost character will have the
            lowest address.  The characters of the number will end in a null character to terminate the string.
            </para>
            <para>
            It is the responsibility of the caller to supply a buffer large enough to contain the entire number
            plus the null terminator.
            </para>
            <para>
            If <paramref name="format"/> is not one of 'x' or 'X', the behavior of this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseSByte(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.SByte"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.SByte"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.SByte.MinValue"/> or greater than <see cref="F:System.SByte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseSByte(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.SByte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.SByte"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.SByte.MinValue"/> or greater than <see cref="F:System.SByte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseSByte(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.SByte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.SByte"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.SByte.MinValue"/> or greater than <see cref="F:System.SByte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt16(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int16"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int16"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.Int16.MinValue"/> or greater than <see cref="F:System.Int16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt16(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Int16"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Int16.MinValue"/> or greater than <see cref="F:System.Int16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt16(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int16"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Int16.MinValue"/> or greater than <see cref="F:System.Int16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt32(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int32"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt32(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Int32"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt32(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int32"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt64(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int64"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt64(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Int64"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseInt64(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int64"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseByte(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Byte"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.Byte"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.Byte.MinValue"/> or greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseByte(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Byte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Byte"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Byte.MinValue"/> or greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseByte(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Byte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Byte"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Byte.MinValue"/> or greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt16(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt16"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt16"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.UInt16.MinValue"/> or greater than <see cref="F:System.UInt16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt16(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.UInt16"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.UInt16.MinValue"/> or greater than <see cref="F:System.UInt16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt16(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt16"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.UInt16.MinValue"/> or greater than <see cref="F:System.UInt16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt32(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt32"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.UInt32.MinValue"/> or greater than <see cref="F:System.UInt32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt32(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.UInt32"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.UInt32.MinValue"/> or greater than <see cref="F:System.UInt32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt32(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt32"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.UInt32.MinValue"/> or greater than <see cref="F:System.UInt32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt64(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt64"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.UInt64.MinValue"/> or greater than <see cref="F:System.UInt64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt64(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.UInt64"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.UInt64.MinValue"/> or greater than <see cref="F:System.UInt64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt64(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt64"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.UInt64.MinValue"/> or greater than <see cref="F:System.UInt64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt128(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:Microsoft.BI.Common.UInt128.MinValue"/> or greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt128(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:Microsoft.BI.Common.UInt128.MinValue"/> or greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseUInt128(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:Microsoft.BI.Common.UInt128.MinValue"/> or greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseDecimal(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Decimal"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.Decimal"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseDecimal(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Decimal"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Decimal"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseDecimal(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Decimal"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Decimal"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseSingle(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Single"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.Single"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.Single.MinValue"/> or greater than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseSingle(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Single"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Single"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Single.MinValue"/> or greater than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseSingle(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Single"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Single"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Single.MinValue"/> or greater than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseDouble(System.String)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Double"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <returns>The <see cref="T:System.Double"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than
            <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseDouble(System.Char*,System.Int32)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Double"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Double"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.ParseDouble(System.Char*@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Double"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Double"/> value parsed from <paramref name="c"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="c"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/> represents a number less than
            <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseSByte(System.String,System.SByte@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.SByte"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.SByte"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseSByte(System.Char*,System.Int32,System.SByte@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.SByte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.SByte"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.SByte"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseSByte(System.Char*@,System.SByte@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.SByte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.SByte"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.SByte"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt16(System.String,System.Int16@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int16"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Int16"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt16(System.Char*,System.Int32,System.Int16@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Int16"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Int16"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt16(System.Char*@,System.Int16@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int16"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Int16"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt32(System.String,System.Int32@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Int32"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt32(System.Char*,System.Int32,System.Int32@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Int32"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Int32"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt32(System.Char*@,System.Int32@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int32"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Int32"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt64(System.String,System.Int64@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Int64"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt64(System.Char*,System.Int32,System.Int64@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Int64"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Int64"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseInt64(System.Char*@,System.Int64@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Int64"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Int64"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseByte(System.String,System.Byte@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Byte"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Byte"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseByte(System.Char*,System.Int32,System.Byte@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Byte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Byte"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Byte"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseByte(System.Char*@,System.Byte@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Byte"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Byte"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Byte"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt16(System.String,System.UInt16@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt16"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt16"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt16(System.Char*,System.Int32,System.UInt16@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.UInt16"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt16"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt16(System.Char*@,System.UInt16@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt16"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt16"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt16"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt32(System.String,System.UInt32@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt32"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt32(System.Char*,System.Int32,System.UInt32@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.UInt32"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt32"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt32(System.Char*@,System.UInt32@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt32"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt32"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt64(System.String,System.UInt64@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt64"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt64(System.Char*,System.Int32,System.UInt64@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.UInt64"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt64"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt64(System.Char*@,System.UInt64@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.UInt64"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.UInt64"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt128(System.String,Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt128(System.Char*,System.Int32,Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseUInt128(System.Char*@,Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.UInt128"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseDecimal(System.String,System.Decimal@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Decimal"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Decimal"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseDecimal(System.Char*,System.Int32,System.Decimal@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Decimal"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Decimal"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Decimal"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseDecimal(System.Char*@,System.Decimal@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Decimal"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Decimal"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Decimal"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseSingle(System.String,System.Single@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Single"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Single"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseSingle(System.Char*,System.Int32,System.Single@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Single"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Single"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Single"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseSingle(System.Char*@,System.Single@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Single"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Single"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Single"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseDouble(System.String,System.Double@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Double"/>.
            </summary>
            <param name="s">A string containing the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Double"/> value parsed
            from <paramref name="s"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseDouble(System.Char*,System.Int32,System.Double@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Double"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <param name="count">The number of characters to consider.</param>
            <returns>The <see cref="T:System.Double"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Double"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Serialization.NumberParser.TryParseDouble(System.Char*@,System.Double@)">
            <summary>
            Converts the invariant string representation of a number to an <see cref="T:System.Double"/>.
            </summary>
            <param name="c">A pointer to the first character of the string containing the number to convert.</param>
            <returns>The <see cref="T:System.Double"/> value parsed from <paramref name="c"/>.</returns>
            <param name="result">When this method returns, contains the <see cref="T:System.Double"/> value parsed
            from <paramref name="c"/>.</param>
            <returns><c>true</c> if parsing was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.StringUtilities">
            <summary>
            Provides several utility methods for operating on strings.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StringUtilities.ToByteArray(System.String)">
            <summary>
            Turn string to a byte array using UTF8 encoding.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The string formatted as a byte array.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StringUtilities.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Turn string to a byte array using the specified encoding.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="encoding">The encoding.</param>
            <returns>The string formatted as a byte array.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StringUtilities.NewLine(System.Text.StringBuilder@,System.Byte)">
            <summary>
            Appends a new line to a <see cref="T:System.Text.StringBuilder"/> with the specified indent level.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> to append the line to.</param>
            <param name="indentation">The number of indent levels (4 spaces each).</param>
        </member>
        <member name="M:Microsoft.BI.Common.StringUtilities.ReplaceNullWithEmpty(System.String)">
            <summary>
            Replaces a null value with <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="text">The string to check.</param>
            <returns><paramref name="text"/>, or <see cref="F:System.String.Empty"/> if <paramref name="text"/> was null.</returns>
            <returns>The string or <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StringUtilities.ConvertEncoding(System.Text.Encoding,System.Text.Encoding,System.String)">
            <summary>
            Converts a string from one encoding to another.
            </summary>
            <param name="source">The source encoding.</param>
            <param name="dest">The destination encoding.</param>
            <param name="input">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.StringExtensions">
            <summary>
            Cool extensions to the String class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StringExtensions.EscapeXML(System.String)">
            <summary>
            Turns this string into an XML-safe version.
            </summary>
            <param name="s">The string to escape.</param>
            <returns>An XML-escaped version of the string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StringExtensions.UnescapeXML(System.String)">
            <summary>
            Turn an escaped string back into a regular version.
            </summary>
            <param name="s">The string to unescape.</param>
            <returns>An unescaped version of the string.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the current string contains the specified string.  A parameter specifies
            the type of search to use for the specified string.
            </summary>
            <param name="s">The current string instance.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns><c>true</c> if the string contains <paramref name="value"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StringExtensions.Replace(System.String,System.Globalization.UnicodeCategories,System.Char)">
            <summary>
            Returns a new string in which all characters in a specified <see cref="T:System.Globalization.UnicodeCategory"/> are replaced with another Unicode character.
            </summary>
            <param name="s">The string in which to perform the replacement.</param>
            <param name="categories">An enumeration with values of type <see cref="T:System.Globalization.UnicodeCategories"/> indicating the type of characters to replace.</param>
            <param name="replacementChar">The Unicode character to replace all occurrences of chars in <paramref name="categories"/>.</param>
            <returns>A string where all characters that are in the specified <see cref="T:System.Globalization.UnicodeCategory"/> are replaced by
            <paramref name="replacementChar"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Text.Base64Encoding">
            <summary>
            Represents a base-64 character encoding of a byte array.
            </summary>
            <remarks>
            <para>
            Unlike most standard <see cref="T:System.Text.Encoding"/> implementations, the <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/>
            is a binary-to-text encoding (as opposed to a text-to-binary encoding).  That is, from the
            perspective of a <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/>, encoding is the process of transforming a
            sequence of bytes into a set of Unicode characters., and decoding is the process of
            transforming a set of Unicode characters into a sequence of bytes.
            </para>
            <para>
            Base-64 is an encoding that represents each sequence of 3 bytes with 4 Unicode characters by
            translating it into a radix-64 representation.  It uses the characters <c>'A'</c>-<c>'Z'</c>,
            <c>'a'</c>-<c>'z'</c>, <c>'0'</c>-<c>'9'</c>, and two additional characters to encode the remaining
            two values.  Base-64 encoding is designed to contain only ASCII characters so that it is unlikely
            to be modified in transit through systems that are not "8-bit clean".
            </para>
            <para>
            You can instantiate a <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> object in a number of ways, depending on
            the characters you want to use for indexes 62 and 63, the character you want to use for padding,
            and whether or not you want to pad at all.  The following table lists the constructors and
            <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> properties that return a <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> object.
            </para>
            <para>
              <list type="table">
                <listheader><term>Member                                                           </term><term>Index 62    </term><term>Index 63    </term><term>Padding                                               </term></listheader>
                <item>      <term><see cref="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Default"/>                                      </term><term><c>'+'</c>  </term><term><c>'/'</c>  </term><term><see cref="F:Microsoft.BI.Common.Text.Base64PaddingMode.Mandatory"/> (<c>'='</c>)</term></item>
                <item>      <term><see cref="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Url"/>                                          </term><term><c>'-'</c>  </term><term><c>'_'</c>  </term><term><see cref="F:Microsoft.BI.Common.Text.Base64PaddingMode.Optional"/> (<c>'='</c>) </term></item>
                <item>      <term><see cref="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Xml"/>                                          </term><term><c>'_'</c>  </term><term><c>':'</c>  </term><term><see cref="F:Microsoft.BI.Common.Text.Base64PaddingMode.None"/>                  </term></item>
                <item>      <term><see cref="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Regex"/>                                        </term><term><c>'!'</c>  </term><term><c>'-'</c>  </term><term><see cref="F:Microsoft.BI.Common.Text.Base64PaddingMode.None"/>                  </term></item>
                <item>      <term><see cref="M:Microsoft.BI.Common.Text.Base64Encoding.#ctor"/>                                   </term><term><c>'+'</c>  </term><term><c>'/'</c>  </term><term><see cref="F:Microsoft.BI.Common.Text.Base64PaddingMode.Mandatory"/> (<c>'='</c>)</term></item>
                <item>      <term><see cref="M:Microsoft.BI.Common.Text.Base64Encoding.#ctor(System.Char,System.Char,Microsoft.BI.Common.Text.Base64PaddingMode)"/>      </term><term>Configurable</term><term>Configurable</term><term>Configurable (uses <c>'='</c> as required)            </term></item>
                <item>      <term><see cref="M:Microsoft.BI.Common.Text.Base64Encoding.#ctor(System.Char,System.Char,Microsoft.BI.Common.Text.Base64PaddingMode,System.Char)"/></term><term>Configurable</term><term>Configurable</term><term>Configurable                                          </term></item>
              </list>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Default">
            <summary>
            Gets an encoding for default base-64 encoding.
            </summary>
            <remarks>
            The default base-64 encoding uses characters <c>'+'</c> and <c>'/'</c> for indexes 62 and
            63, respectively, and has mandatory padding using the <c>'='</c> character.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Url">
            <summary>
            Gets an encoding for base-64 URL encoding.
            </summary>
            <remarks>
            The base-64 URL encoding uses characters <c>'-'</c> and <c>'_'</c> for indexes 62 and
            63, respectively, and has optional padding using the <c>'='</c> character.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Xml">
            <summary>
            Gets an encoding for base-64 XML encoding.
            </summary>
            <remarks>
            The base-64 XML encoding uses characters <c>'_'</c> and <c>':'</c> for indexes 62 and
            63, respectively, and does not use padding.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Text.Base64Encoding.Base64Regex">
            <summary>
            Gets an encoding for base-64 regular expression encoding.
            </summary>
            <remarks>
            The base-64 regular expression encoding uses characters <c>'!'</c> and <c>'-'</c> for
            indexes 62 and 63, respectively, and does not use padding.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> class.
            </summary>
            <remarks>
            This constructor creates an instance that uses characters <c>'+'</c> and <c>'/'</c> for indexes 62
            and 63, respectively, and has mandatory padding using the <c>'='</c> character.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.#ctor(System.Char,System.Char,Microsoft.BI.Common.Text.Base64PaddingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> class using the specified characters
            and padding mode.
            </summary>
            <param name="index62">The character to use when encoding index 62.</param>
            <param name="index63">The character to use when encoding index 63.</param>
            <param name="paddingMode">The <see cref="T:Microsoft.BI.Common.Text.Base64PaddingMode"/> to use when encoding and decoding.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="index62"/> and <paramref name="index63"/> are the same character.
              -or- <paramref name="index62"/> or <paramref name="index63"/> is <c>'='</c>.
              -or- <paramref name="index62"/> or <paramref name="index63"/> is in the range
                   <c>'A'</c>-<c>'Z'</c>,
                   <c>'a'</c>-<c>'z'</c>,
                or <c>'0'</c>-<c>'9'</c>.
             -or- <paramref name="index62"/> or <paramref name="index63"/> is not an ASCII character.
            </exception>
            <remarks>
            This constructor uses the specified characters for indexes 62 and 63, and will perform padding as
            indicated by the <paramref name="paddingMode"/> parameter.  If padding is required, it will use
            the <c>'='</c> character.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.#ctor(System.Char,System.Char,Microsoft.BI.Common.Text.Base64PaddingMode,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> class using the specified characters
            and padding mode.
            </summary>
            <param name="index62">The character to use when encoding index 62.</param>
            <param name="index63">The character to use when encoding index 63.</param>
            <param name="paddingMode">The <see cref="T:Microsoft.BI.Common.Text.Base64PaddingMode"/> to use when encoding and decoding.</param>
            <param name="pad">The character to use when padding.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="index62"/> and <paramref name="index63"/> are the same character.
              -or- <paramref name="index62"/> or <paramref name="index63"/> is <c>'='</c>.
              -or- <paramref name="index62"/>, <paramref name="index63"/>, or <paramref name="pad"/> is in the range
                   <c>'A'</c>-<c>'Z'</c>,
                   <c>'a'</c>-<c>'z'</c>,
                or <c>'0'</c>-<c>'9'</c>.
             -or- <paramref name="index62"/>, <paramref name="index63"/>, or <paramref name="pad"/> is not an ASCII character.
            </exception>
            <remarks>
            This constructor uses the specified characters for indexes 62 and 63, and will perform padding as
            indicated by the <paramref name="paddingMode"/> parameter.  If padding is required, it will use
            the specified character.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.CheckCharacter(System.Char,System.String)">
            <summary>
            Ensures the specified character is not one of the reserved base-64 characters and is an ASCII character.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes produced by decoding a set of characters from the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to decode.</param>
            <param name="index">The index of the first character to decode.</param>
            <param name="count">The number of characters to decode.</param>
            <returns>The number of bytes produced by decoding the specified characters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chars"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> or <paramref name="count"/> is less than zero.
              -or-<paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="chars"/>.
            </exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char*,System.Int32)">
            <summary>
            Gets the number of bytes produced by decoding a set of characters starting at the specified character pointer.
            </summary>
            <param name="chars">A pointer to the first character to decode.</param>
            <param name="count">The number of characters to decode.</param>
            <returns>The number of bytes produced by decoding the specified characters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chars"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero.</exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char*,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char*,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCountInternal(System.Char*,System.Int32)">
            <summary>
            Gets the number of bytes produced by decoding a set of characters starting at the specified character pointer.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.String)">
            <summary>
            Decodes all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="s">The string containing the characters to decode.</param>
            <returns>A byte array containing the results of decoding the specified set of characters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null</c>.</exception>
            <remarks>
            The <see cref="M:System.Text.Encoding.GetByteCount(System.String)"/> method determines how many bytes result in decoding a set of
            Unicode characters, and the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.String)"/> method performs the actual encoding.  The
            <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.String)"/> method expects discrete conversions, in contrast to the
            <see cref="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)"/> method, which handles multiple conversions
            on a single input stream.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decodes a set of characters from the specified <see cref="T:System.String"/> into the specified byte array.
            </summary>
            <param name="s">The <see cref="T:System.String"/> containing the set of characters to decode.</param>
            <param name="charIndex">The index of the first character to decode.</param>
            <param name="charCount">The number of characters to decode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into <paramref name="bytes"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="s"/> is <c>null</c>.
              -or- <paramref name="bytes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="charIndex"/>, <paramref name="charCount"/>, or <paramref name="byteIndex"/> is negative.
              -or- <paramref name="charIndex"/> and <paramref name="charCount"/> do not denote a valid range in <paramref name="s"/>
              -or- <paramref name="byteIndex"/> is not a valid index in <paramref name="bytes"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="bytes"/> does not have enough capacity from <paramref name="byteIndex"/>
            to the end of the array to accomodate the resulting bytes.</exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to decode.</param>
            <param name="charIndex">The index of the first character to decode.</param>
            <param name="charCount">The number of characters to decode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into <paramref name="bytes"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="chars"/> is <c>null</c>.
              -or- <paramref name="bytes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="charIndex"/>, <paramref name="charCount"/>, or <paramref name="byteIndex"/> is negative.
              -or- <paramref name="charIndex"/> and <paramref name="charCount"/> do not denote a valid range in <paramref name="chars"/>
              -or- <paramref name="byteIndex"/> is not a valid index in <paramref name="bytes"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="bytes"/> does not have enough capacity from <paramref name="byteIndex"/>
            to the end of the array to accomodate the resulting bytes.</exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Decodes a set of characters from the specified character pointer into a sequence of bytes that are stored starting at
            the specified byte pointer.
            </summary>
            <param name="chars">A pointer to the first character to decode.</param>
            <param name="charCount">The number of characters to decode.</param>
            <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
            <param name="byteCount">The maximum number of bytes to write. </param>
            <returns>The actual number of bytes written to the location indicated by <paramref name="bytes"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="chars"/> is <c>null</c>.
              -or- <paramref name="bytes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount"/> or <paramref name="byteCount"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="byteCount"/> is thess than the resulting number of bytes.</exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char*,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char*,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.TryGetBytes(System.String,System.Byte[]@)">
            <summary>
            Decodes all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="s">The string containing the characters to decode.</param>
            <param name="bytes">When this method returns, contains the result of decoding the specified set of characters.</param>
            <returns><c>true</c> if the decoding succeeded; otherwise, <c>false</c>.</returns>
            <remarks>
            If <paramref name="s"/> is <c>null</c>, this method returns <c>false</c>.  If the length of <paramref name="s"/> is
            0, this method returns <c>true</c> and <paramref name="bytes"/> will be empty.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.TryGetBytesInternal(System.Char*,System.Int32,System.Byte*,System.Int32,Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind@)">
            <summary>
            Decodes a set of characters from the specified character buffer into the specified byte buffer.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetDecodeException(Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind)">
            <summary>
            Gets a <see cref="T:System.FormatException"/> for the specified <see cref="T:Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters produced by encoding a sequence of bytes from the specified array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to encode.</param>
            <param name="index">The index of the first byte to encode.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>The number of characters produced by encoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> or <paramref name="count"/> is negative.
              -or- <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="bytes"/>.
            </exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/> to store the
            resulting characters, call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)"/> method.  To calculate the maximum array
            size, call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)"/> method
            generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte*,System.Int32)">
            <summary>
            Calculates the number of characters produced by encoding a sequence of bytes from the specified byte pointer.
            </summary>
            <param name="bytes">A pointer to the first byte to encode</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>The number of characters produced by encoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)"/> to store the
            resulting characters, call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte*,System.Int32)"/> method.  To calculate the maximum array
            size, call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte*,System.Int32)"/> method
            generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCountInternal(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates the number of characters produced by encoding a sequence of bytes from the specified byte pointer.
            </summary>
            <param name="count">The number of bytes to encode.</param>
            <param name="blocks">When this method returns, contains the number of 4-character blocks.</param>
            <param name="padding">When this method returns, contains the number of padding characters.</param>
            <remarks>
            The return value of this method depends on the <see cref="T:Microsoft.BI.Common.Text.Base64PaddingMode"/> of the encoder - if the padding
            mode is <see cref="F:Microsoft.BI.Common.Text.Base64PaddingMode.Mandatory"/>, then the return value will include the padding characters;
            otherwise, the padding character count is subtracted from the result before returning
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Encodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to encode.</param>
            <param name="byteIndex">The index of the first byte to encode.</param>
            <param name="byteCount">The number of bytes to encode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written to <paramref name="chars"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="bytes"/> is <c>null</c>.
              -or- <paramref name="chars"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="byteIndex"/>, <paramref name="byteCount"/>, or <paramref name="charIndex"/> are negative.
              -or- <paramref name="byteIndex"/> and <paramref name="byteCount"/> do not denote a valid range in <paramref name="bytes"/>
              -or- <paramref name="charIndex"/> is not a valid index in <paramref name="chars"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="chars"/> does not have enough capacity from <paramref name="charIndex"/>
            to the end of the array to accomodate the resulting characters.</exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/> to store the
            resulting characters, call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)"/> method.  To calculate the maximum array
            size, call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)"/> method
            generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
            <summary>
            Encodes a sequence of bytes starting at specified byte pointer into a set of characters that are stored starting at
            the specified character pointer.
            </summary>
            <param name="bytes">A pointer to the first byte to encode.</param>
            <param name="byteCount">The number of bytes to encode.</param>
            <param name="chars">A pointer to the location at which to start writing the resulting set of characters. </param>
            <param name="charCount">The maximum number of characters to write. </param>
            <returns>The actual number of characters written to the location indicated by <paramref name="chars"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="bytes"/> is <c>null</c>.
              -or- <paramref name="chars"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount"/> or <paramref name="charCount"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="byteCount"/> is thess than the resulting number of bytes.</exception>
            <remarks>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte*,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte*,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method generally executes faster.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.TryGetChars(System.Byte[],System.Char[]@)">
            <summary>
            Encodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to encode.</param>
            <param name="chars">When this method returns, contains the resulting set of characters.</param>
            <returns><c>true</c> if the encoding succeeded; otherwise, <c>false</c>.</returns>
            <remarks>
            If <paramref name="bytes"/> is <c>null</c>, this method returns <c>false</c>.  If the length of <paramref name="bytes"/>
            is 0, this method returns <c>true</c> and <paramref name="chars"/> will be empty.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharsInternal(System.Byte*,System.Int32,System.Char*,System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes starting at specified byte pointer into a set of characters that are stored starting at
            the specified character pointer.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes produced by decoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to decode.</param>
            <returns>The maximum number of bytes produced by decoding the specified number of characters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount"/> is less than zero.</exception>
            <remarks>
            <para>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> method generally executes faster.
            </para>
            <para>
            <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/> has no relation to <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/>. If your
            application needs a similar function to use with <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/>, it should use
            <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/>.
            </para>
            <para>
            Note: <c>GetMaxByteCount(N)</c> is not necessarily the same value as <c>N * GetMaxByteCount(1)</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters produced by encoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to encode.</param>
            <returns>The maximum number of characters produced by encoding the specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount"/> is less than zero.</exception>
            <remarks>
            <para>
            To calculate the exact array size required by <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/> to store the
            resulting bytes, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)"/> method. To calculate the maximum
            array size, you call the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method.  The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)"/>
            method generally allocates less memory, while the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> method generally executes faster.
            </para>
            <para>
            <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxCharCount(System.Int32)"/> has no relation to <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)"/>. If your
            application needs a similar function to use with <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)"/>, it should use
            <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetMaxByteCount(System.Int32)"/>.
            </para>
            <para>
            Note: <c>GetMaxCharCount(N)</c> is not necessarily the same value as <c>N * GetMaxCharCount(1)</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetString(System.Byte[])">
            <summary>
            Encodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to encode.</param>
            <returns>A string that contains the result of encoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <remarks>
            See the Remarks section of the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/> reference topic
            for a discussion of decoding techniques and considerations.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a range of bytes from a byte array into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to encode.</param>
            <param name="index">The index of the first byte to encode.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>A string containing the results of encoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> or <paramref name="count"/> is less than zero.
              -or-<paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="bytes"/>.
            </exception>
            <remarks>
            See the Remarks section of the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/> reference topic
            for a discussion of decoding techniques and considerations.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.GetString(System.Byte*,System.Int32)">
            <summary>
            Encodes a specified number of bytes starting at a specified address into a string.
            </summary>
            <param name="bytes">A pointer to a byte array.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>A string that contains the result of encoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero.</exception>
            <remarks>
            <para>
            The <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetString(System.Byte*,System.Int32)"/> method is designed to optimize performance when you have a
            native pointer to a byte array.  Instead of creating a managed byte array and then decoding it, you
            can instead call this method without having to create any intermediate objects.
            </para>
            <para>
            See the Remarks section of the <see cref="M:Microsoft.BI.Common.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)"/> reference topic
            for a discussion of decoding techniques and considerations.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.Base64Encoding.TryGetString(System.Byte[],System.String@)">
            <summary>
            Encodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to encode.</param>
            <param name="result">When this method returns, contains a string that contains the result of encoding the
            specified sequence of bytes.</param>
            <returns><c>true</c> if the encoding was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            If <paramref name="bytes"/> is <c>null</c>, this method returns <c>false</c>.  If the length of
            <paramref name="bytes"/> is 0, this method returns <c>true</c> and <paramref name="result"/> will be empty.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind">
            <summary>
            Describes the possible failure types when decoding base-64 encoded data.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind.InvalidLength">
            <summary>
            The input data has an invalid length.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind.BadCharacter">
            <summary>
            The input data contains an invalid base-64 character.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.Base64Encoding.Base64DecodeFailureKind.InvalidPadding">
            <summary>
            There is a padding character at an unexpected location.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Text.Base64PaddingMode">
            <summary>
            Specifies whether or not a <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> should include padding characters.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.Base64PaddingMode.None">
            <summary>
            Does not append padding characters when the length of the encoded base-64 string is not a multiple
            of 4 characters.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.Base64PaddingMode.Optional">
            <summary>
            Padding characters are optional - the <see cref="T:Microsoft.BI.Common.Text.Base64Encoding"/> will not add them when encoding
            a byte array, but they will be processed normally if they are present when decoding.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.Base64PaddingMode.Mandatory">
            <summary>
            Appends padding characters as required by the encoded base-64 string.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.Text.StringBuilderPool">
            <summary>
            Provides a pool of <see cref="T:System.Text.StringBuilder"/> instances for internal use to minimize allocation
            and collection for short-lived string operations.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.Text.StringBuilderPool.Default">
            <summary>
            Gets the default <see cref="T:Microsoft.BI.Common.Text.StringBuilderPool"/> for the app domain.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Text.StringBuilderPool.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Text.StringBuilderPool"/> class.
            </summary>
            <remarks>
            This constructor enforces a maximum buffer size of 512 characters for
            <see cref="T:System.Text.StringBuilder"/> objects stored in the pool.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.StringBuilderPool.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Text.StringBuilderPool"/> class with the specified
            capacity.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <remarks>
            This constructor enforces a maximum buffer size of 512 characters for
            <see cref="T:System.Text.StringBuilder"/> objects stored in the pool.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.StringBuilderPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Text.StringBuilderPool"/> class with the specified
            capacity and maximum pooled size.
            </summary>
            <param name="capacity">The capacity of the <see cref="T:Microsoft.BI.Common.Text.StringBuilderPool"/>.</param>
            <param name="maxPooledBufferSize">The maximum size of the underlying buffer for a
            <see cref="T:System.Text.StringBuilder"/> in the pool.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <remarks>
            The <paramref name="maxPooledBufferSize"/> parameter specifies the maximum size of a
            <see cref="T:System.Text.StringBuilder"/>'s underlying buffer when stored in the pool.  If the underlying
            buffer is larger than this value, it's capacity will be truncated when returning it to
            the pool.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.StringBuilderPool.Get">
            <summary>
            Gets a <see cref="T:System.Text.StringBuilder"/> from the pool.
            </summary>
            <returns>A <see cref="T:System.Text.StringBuilder"/> from the pool.</returns>
            <remarks>
            <para>
            The <see cref="T:System.Text.StringBuilder"/> is cleared before returning to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.StringBuilderPool.Free(System.Text.StringBuilder)">
            <summary>
            Returns a <see cref="T:System.Text.StringBuilder"/> to the pool.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to return to the pool.</param>
            <remarks>
            <paramref name="builder"/> is cleared before returning, and its capacity is trimmed if too large.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Text.StringBuilderPool.ReturnAndFree(System.Text.StringBuilder)">
            <summary>
            Returns the current contents of a <see cref="T:System.Text.StringBuilder"/> and returns it to the pool.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to return to the pool.</param>
            <returns>The contents of <paramref name="builder"/> before clearing.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <c>null</c>.</exception>
            <remarks>
            <paramref name="builder"/> is cleared before returning, and its capacity is trimmed if too large.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.DelimitedTextFormatter">
            <summary>
            A <see cref="T:Microsoft.BI.Common.StructuredTextFormatter"/> abstract class for formatting strings that are delimited by some character.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DelimitedTextFormatter.Delimiter">
            <summary>
            The delimiter between each key-value pair.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DelimitedTextFormatter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> into which to write the data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.DelimitedTextParser">
            <summary>
            A <see cref="T:Microsoft.BI.Common.StructuredTextParser"/> abstract class for parsing strings that are delimited by some character.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.DelimitedTextParser.Delimiter">
            <summary>
            The delimiter between each field.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.DelimitedTextParser.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextParser"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the text to be parsed.</param>
        </member>
        <member name="T:Microsoft.BI.Common.EscapingDelimitedTextFormatterMode">
            <summary>
            An enumeration defining the possible modes for an <see cref="T:Microsoft.BI.Common.EscapingDelimitedTextFormatter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.EscapingDelimitedTextFormatterMode.Escape">
            <summary>
            Values will be escaped by replacing them with another character.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.EscapingDelimitedTextFormatterMode.Remove">
            <summary>
            Values will be removed entirely from the string.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.EscapingDelimitedTextFormatter">
            <summary>
            Implementation of the <see cref="T:Microsoft.BI.Common.IStructuredTextFormatter"/> interface that 'escapes' invalid values
            by replacing them with another character.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.EscapingDelimitedTextFormatter.ReplacementCharacter">
            <summary>
            The character with which to replace all characters that need to be escaped.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.EscapingDelimitedTextFormatter.ReplaceMode">
            <summary>
            Defines the mode of the transformation.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.EscapingDelimitedTextFormatter.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> class.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> containing the data to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.EscapingDelimitedTextFormatter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to be parsed.</param>
            <param name="encoding">The encoding of the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.EscapingDelimitedTextFormatter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> stream to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.EscapingDelimitedTextFormatter.WriteFields(System.String[])">
            <summary>
            Writes all values to the current line and advances the cursor to the next line.
            </summary>
            <param name="values">An array of values to write.</param>
            <remarks>If set up with a mapping, the fields will be written in the order defined in the mapping.
            Otherwise, fields will be written in the order they were supplied.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.EscapingDelimitedTextFormatter.RequiresEscaping(System.String)">
            <summary>
            Determines whether a string needs to be quoted in order to be output to CSV.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string needs to be quoted; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.EscapingDelimitedTextFormatter.EscapeString(System.String)">
            <summary>
            Performs escaping on a string.
            </summary>
            <param name="value">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.IStructuredTextFormatter">
            <summary>
            Interface for writing objects to a plaintext stream.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IStructuredTextFormatter.NewLine">
            <summary>
            Gets or sets the string used to indicate a new line.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IStructuredTextFormatter.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IStructuredTextFormatter.BaseStream">
            <summary>
            The underlying stream on which the <see cref="T:Microsoft.BI.Common.IStructuredTextFormatter"/> is operating.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextFormatter.WriteFields(System.String[])">
            <summary>
            Writes an array of values to the underlying stream.
            </summary>
            <param name="values">The array of strings to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextFormatter.WriteLine(System.String)">
            <summary>
            Writes the specified line to the underlying stream.
            </summary>
            <param name="line">The line to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextFormatter.Write(System.String)">
            <summary>
            Writes the specified string to the underlying stream.
            </summary>
            <param name="line">The string to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextFormatter.Flush">
            <summary>
            Flushes data to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextFormatter.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFormatter">
            <summary>
            Base class providing common implementation for many <see cref="T:Microsoft.BI.Common.IStructuredTextFormatter"/> implementations.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFormatter.NewLine">
            <summary>
            Gets or sets the string used to indicate a new line.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFormatter.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFormatter.BaseStream">
            <summary>
            The underlying stream on which the <see cref="T:Microsoft.BI.Common.StructuredTextFormatter"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFormatter.TextWriter">
            <summary>
            A <see cref="P:Microsoft.BI.Common.StructuredTextFormatter.TextWriter"/> where text should be written.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.StructuredTextFormatter"/> class.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> containing the data to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.StructuredTextFormatter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to be parsed.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.StructuredTextFormatter"/> class.
            </summary>
            <param name="writer">The <see cref="P:Microsoft.BI.Common.StructuredTextFormatter.TextWriter"/> stream to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.WriteFields(System.String[])">
            <summary>
            Writes an array of values to the underlying stream.
            </summary>
            <param name="values">The array of strings to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.WriteLine(System.String)">
            <summary>
            Writes the specified line to the underlying stream.
            </summary>
            <param name="line">The line to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.Write(System.String)">
            <summary>
            Writes the specified string to the underlying stream.
            </summary>
            <param name="line">The string to write to the file.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.Flush">
            <summary>
            Flushes data to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.Dispose">
            <summary>
            Disposes of managed resources used by the <see cref="T:Microsoft.BI.Common.StructuredTextFormatter"/>
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextFormatter.Dispose(System.Boolean)">
            <summary>
            Disposes of managed resources used by the <see cref="T:Microsoft.BI.Common.StructuredTextFormatter"/>
            </summary>
            <param name="disposing"><c>true</c> to dispose of managed and unmanaged resources; <c>false</c> to dispose
            of unmanaged resources only.</param>
        </member>
        <member name="T:Microsoft.BI.Common.IStructuredTextParser">
            <summary>
            Interface for reading tokens from a text file.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IStructuredTextParser.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IStructuredTextParser.BaseStream">
            <summary>
            The underlying stream on which the <see cref="T:Microsoft.BI.Common.IStructuredTextParser"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.IStructuredTextParser.EndOfStream">
            <summary>
            Gets a value indicating whether the current position is at the end of the stream.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.IStructuredTextParser.LineRead">
            <summary>
            Occurs when the <see cref="T:Microsoft.BI.Common.IStructuredTextParser"/> reads a line.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextParser.ReadFields">
            <summary>
            Read a line from the stream and return a list of tokens.
            </summary>
            <returns>A list of strings containing the tokens read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextParser.ReadLine">
            <summary>
            Read a line from the current stream and return it.
            </summary>
            <returns>The line read from the stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextParser.ReadToEnd">
            <summary>
            Reads to the end of the current stream and returns the string read.
            </summary>
            <returns>The contents of the stream from the current position to the end
            of the stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.IStructuredTextParser.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextParser">
            <summary>
            Base class providing common implementation for many <see cref="T:Microsoft.BI.Common.IStructuredTextParser"/> implementations.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextParser.CurrentLine">
            <summary>
            The line of the current stream being processed.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextParser.BaseStream">
            <summary>
            The underlying stream upon which the <see cref="T:Microsoft.BI.Common.StructuredTextParser"/> is operating.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextParser.EndOfStream">
            <summary>
            Gets a value indicating whether the current position is at the end of the stream.
            </summary>
        </member>
        <member name="E:Microsoft.BI.Common.StructuredTextParser.LineRead">
            <summary>
            Occurs when the <see cref="T:Microsoft.BI.Common.StructuredTextParser"/> reads a line in <see cref="M:Microsoft.BI.Common.StructuredTextParser.ReadFields"/> (but not with
            <see cref="M:Microsoft.BI.Common.StructuredTextParser.ReadLine"/> or <see cref="M:Microsoft.BI.Common.StructuredTextParser.ReadToEnd"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextParser.TextReader">
            <summary>
            A <see cref="P:Microsoft.BI.Common.StructuredTextParser.TextReader"/> containing the text to read.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextParser.LineReadHasSubscribers">
            <summary>
            Gets a value indicating whether the current instance has subscribers to the <see cref="E:Microsoft.BI.Common.StructuredTextParser.LineRead"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextParser.LineReadArgs">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.StructuredTextReadLineEventArgs"/> instance to use when raising the <see cref="E:Microsoft.BI.Common.StructuredTextParser.LineRead"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.StructuredTextParser"/> class.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.StructuredTextParser"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to be parsed.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the stream to be read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.StructuredTextParser"/> class.
            </summary>
            <param name="reader">The <see cref="P:Microsoft.BI.Common.StructuredTextParser.TextReader"/> containing the text to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.FillBuffer(System.String[])">
            <summary>
            Reads a line from the stream and fills the specified string array.
            </summary>
            <param name="buffer">The array of strings to contain the data parsed from the underlying stream.</param>
            <returns>The number of fields read, or 0 to indicate that the end of the stream has been reached.</returns>
            <remarks>It is up to the implementation to decide how to handle the case when the number of fields read
            doesn't match the size of the buffer.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.ReadFields">
            <summary>
            Read a line from the stream and return a list of tokens.
            </summary>
            <returns>A list of strings containing the tokens that were read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.ReadLine">
            <summary>
            Returns the current line as a string and advances the cursor to the next line.
            </summary>
            <returns>The current line from the file or stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.ReadToEnd">
            <summary>
            Reads the remainder of the file or stream and returns it as a string.
            </summary>
            <returns>The remaining text from the file or stream.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.Dispose">
            <summary>
            Disposes of resources used by the <see cref="T:Microsoft.BI.Common.StructuredTextParser"/>
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.Dispose(System.Boolean)">
            <summary>
            Disposes of resources used by the <see cref="T:Microsoft.BI.Common.StructuredTextParser"/>.
            </summary>
            <param name="disposing"><c>true</c> to dispose of both managed and unmanaged resources; <c>false</c> to dispose of only unmanaged
            resources.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextParser.OnLineRead(Microsoft.BI.Common.StructuredTextReadLineEventArgs)">
            <summary>
            Invokes the <see cref="E:Microsoft.BI.Common.StructuredTextParser.LineRead"/> event.
            </summary>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextReadLineEventArgs"/> instance that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.KeyValuePairTextFormatter">
            <summary>
            Provides methods and properties for writing strings to plantext streams in key-value pair format.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyValuePairTextFormatter.PairDelimiter">
            <summary>
            The delimiter between each key-value pair.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyValuePairTextFormatter.KeyValueDelimiter">
            <summary>
            The delimiter between the key and value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyValuePairTextFormatter.FieldMapping">
            <summary>
            An array containing a mapping from column name to output index.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextFormatter.#ctor(System.Text.StringBuilder,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.KeyValuePairTextFormatter"/> class.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> in which to write the KVP values.</param>
            <param name="fieldMapping">A string array containing the mapping from input columns to output field names.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextFormatter.#ctor(System.IO.Stream,System.String[],System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.KeyValuePairTextFormatter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> into which to write the KVP values.</param>
            <param name="fieldMapping">A string array containing the mapping from input columns to output field names.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the stream.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextFormatter.#ctor(System.IO.TextWriter,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.KeyValuePairTextFormatter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> into which to write the KVP values.</param>
            <param name="fieldMapping">A string array containing the mapping from input columns to output field names.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextFormatter.WriteKVPFields(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes all values to the current line and advances the cursor to the next line containing data.
            </summary>
            <param name="values">A dictionary containing the key-value pairs to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextFormatter.WriteFields(System.String[])">
            <summary>
            Writes all values to the current line and advances the cursor to the next line.
            </summary>
            <param name="values">An array of values to write.</param>
            <remarks>If set up with a mapping, the fields will be written in the order defined in the mapping.
            Otherwise, fields will be written in the order they were supplied.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.KeyValuePairTextParser">
            <summary>
            Provides methods and properties for parsing key-value pair structured text files.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyValuePairTextParser.PairDelimiter">
            <summary>
            The delimiter between each key-value pair.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyValuePairTextParser.KeyValueDelimiter">
            <summary>
            The delimiter between the key and value.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.KeyValuePairTextParser.FieldMapping">
            <summary>
            An array containing a mapping from column name to output index.
            </summary>
            <remarks>Value returned is pass-by-value, meaning you can't change the keys directly.  Instead,
            you need to pass set the value with a new array.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.KeyValuePairTextParser"/> class.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.KeyValuePairTextParser"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to be parsed.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the stream to be read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextParser.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.KeyValuePairTextParser"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> stream to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextParser.PeekChars(System.Int32)">
            <summary>
            Reads the specified number of characters without advancing the cursor.
            </summary>
            <param name="numberOfChars">Number of characters to read.</param>
            <returns>A string that contains the specified number of characters read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextParser.ReadKVPFields">
            <summary>
            Reads all fields on the current line, returns them as a dictionary, and advances
            the cursor to the next line containing data.
            </summary>
            <returns>A dictionary of key-value pairs for the current line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextParser.ReadFields">
            <summary>
            Reads all fields on the current line, returns them as an array, and advances the cursor
            to the next line containing data.
            </summary>
            <returns>A list of strings for the current line.</returns>
            <remarks>If set up with a mapping, the fields will be returned in the order defined in the mapping.
            Otherwise, fields will be returned in the order they were read.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.KeyValuePairTextParser.FillBuffer(System.String[])">
            <summary>
            Not implemented.
            </summary>
            <param name="buffer">Not implemented.</param>
            <returns>Not implemented.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.KVPDataTypeFormatProvider">
            <summary>
            A <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> override for parsing and formatting KVP data.
            </summary>
            <remarks>
            KVP date outputs don't match the DSV (what a surprise).  This <see cref="T:Microsoft.BI.Common.DataTypeFormatProvider"/> allows a
            <see cref="T:Microsoft.BI.Common.IO.StructuredTextReader"/> to parse these formats properly and a
            <see cref="T:Microsoft.BI.Common.IO.StructuredTextWriter"/> to format them properly.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.KVPDataTypeFormatProvider.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.KVPDataTypeFormatProvider"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.RFC4180DelimitedTextFormatter">
            <summary>
            Provides methods and properties for writing string arrays to plantext streams according to RFC 4180.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.RFC4180DelimitedTextFormatter.Quote">
            <summary>
            The character to use to quote fields, when applicable.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextFormatter.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> class.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> containing the data to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextFormatter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to be parsed.</param>
            <param name="encoding">The encoding of the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextFormatter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.DelimitedTextFormatter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> stream to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextFormatter.WriteFields(System.String[])">
            <summary>
            Writes all values to the current line and advances the cursor to the next line.
            </summary>
            <param name="values">An array of values to write.</param>
            <remarks>If set up with a mapping, the fields will be written in the order defined in the mapping.
            Otherwise, fields will be written in the order they were supplied.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextFormatter.RequiresQuotation(System.String)">
            <summary>
            Determines whether a string needs to be quoted in order to be output to CSV.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string needs to be quoted; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextFormatter.QuoteString(System.String)">
            <summary>
            Performs CSV quotation on a string.
            </summary>
            <param name="value">The string to quote.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.RFC4180DelimitedTextParser">
            <summary>
            Provides methods and properties for parsing structured text files according to RFC 4180
            (http://tools.ietf.org/html/rfc4180).
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.RFC4180DelimitedTextParser.Quote">
            <summary>
            The character to use to quote fields, when applicable.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.RFC4180DelimitedTextParser.TrimSpaces">
            <summary>
            Gets or sets a flag that indicates whether or not to trim leading and trailing spaces.
            True by default.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DelimitedTextParser class.
            </summary>
            <param name="text">The string to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the DelimitedTextParser class.
            </summary>
            <param name="stream">The stream to be parsed.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the stream to be read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the DelimitedTextParser class.
            </summary>
            <param name="reader">The TextReader stream to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.PeekChars(System.Int32)">
            <summary>
            Reads the specified number of characters without advancing the cursor.
            </summary>
            <param name="numberOfChars">Number of characters to read.</param>
            <returns>A string that contains the specified number of characters read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.FillBuffer(System.String[])">
            <summary>
            Reads all fields on the current line, fills the specified string array, and advances
            the cursor to the next line containing data.
            </summary>
            <param name="buffer">The string array buffer to fill.</param>
            <returns>The number of fields read, or 0 to indicate that the end of the stream has been reached.</returns>
            <remarks>This class does not throw an exception if the number of fields read does not match the buffer size.
            If the return value is less than the length of <paramref name="buffer"/>, the value of the indexes greater than
            the return value is undefined.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.ReadFields">
            <summary>
            Reads all fields on the current line, returns them as an array of strings, and advances
            the cursor to the next line containing data.
            </summary>
            <returns>An array of strings that contains field values for the current line.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.ReadLine">
            <summary>
            Returns the current line as a string and advances the cursor to the next line.
            </summary>
            <returns>The current line from the file or stream.</returns>
            <remarks>This may not be the exact string in the file - each item is still processed according
            to RFC4180, so there may be small modifications (like removing of unquoted leading and trailing
            whilespace, for example).</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.RFC4180DelimitedTextParser.GetNextItem(System.IO.TextReader,System.String@)">
            <summary>
            Gets the next item from the underlying stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> to use.</param>
            <param name="item">On a successful parse, this will contain the next item in the stream.  If the end
            of the stream is reached, this will contain null.</param>
            <returns>true if data was read from the underlying stream; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.SimpleDelimitedTextFormatter">
            <summary>
            Provides methods and properties for writing string arrays to plantext streams without quotation.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextFormatter.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.SimpleDelimitedTextFormatter"/> class.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> containing the data to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextFormatter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.SimpleDelimitedTextFormatter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to be parsed.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the data to write.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextFormatter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BI.Common.SimpleDelimitedTextFormatter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> stream to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextFormatter.WriteFields(System.String[])">
            <summary>
            Writes all values to the current line and advances the cursor to the next line.
            </summary>
            <param name="values">An array of values to write.</param>
            <remarks>If set up with a mapping, the fields will be written in the order defined in the mapping.
            Otherwise, fields will be written in the order they were supplied.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.SimpleDelimitedTextParser">
            <summary>
            Provides simple parsing of structured text files without quotation.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DelimitedTextParser class.
            </summary>
            <param name="text">The string to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the DelimitedTextParser class.
            </summary>
            <param name="stream">The stream to be parsed.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the stream to be read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParser.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the DelimitedTextParser class.
            </summary>
            <param name="reader">The TextReader stream to be parsed.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParser.PeekChars(System.Int32)">
            <summary>
            Reads the specified number of characters without advancing the cursor.
            </summary>
            <param name="numberOfChars">Number of characters to read.</param>
            <returns>A string that contains the specified number of characters read.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParser.FillBuffer(System.String[])">
            <summary>
            Reads a line from the stream and fills the specified string array.
            </summary>
            <param name="buffer">The array of strings to contain the data parsed from the underlying stream.</param>
            <returns>The number of fields read, or 0 to indicate that the end of the stream has been reached.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParser.ReadFields">
            <summary>
            Reads all fields on the current line, returns them as an array of strings, and advances
            the cursor to the next line containing data.
            </summary>
            <returns>An list of strings that contains field values for the current line.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.SimpleDelimitedTextParserWithMetadata">
            <summary>
            A <see cref="T:Microsoft.BI.Common.SimpleDelimitedTextParser"/> subclass that records line length and column count of each line it reads.
            </summary>
            <remarks>This class should no longer be needed, as its functionality can be implemented with structured text events.</remarks>
        </member>
        <member name="P:Microsoft.BI.Common.SimpleDelimitedTextParserWithMetadata.LineLength">
            <summary>
            Length current line.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.SimpleDelimitedTextParserWithMetadata.ColumnCount">
            <summary>
            Column count of current line split on delimiter.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParserWithMetadata.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the DelimitedTextParserWithMetadata class.
            </summary>
            <param name="stream">The stream to be parsed.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> of the stream to be read.</param>
        </member>
        <member name="M:Microsoft.BI.Common.SimpleDelimitedTextParserWithMetadata.ReadFields">
            <summary>
            Reads all fields on the current line, returns them as an array of strings, and advances
            the cursor to the next line containing data. Along with this also sets a few metadata fields.
            </summary>
            <returns>An list of strings that contains field values for the current line.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextReadLineEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineRead"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextReadLineEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextSplitLineEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineSplit"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldParsedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.FieldParsed"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextLineParsedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineParsed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextLineParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextParseFailureEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/>
            events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsJoining"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldsFormattedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsFormatted"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsFormattedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/>
            events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextLineEventArgs">
            <summary>
            Base class for other line reading event arg classes.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextLineEventArgs.LineNumber">
            <summary>
            Gets the line number on which the event occured.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextSchemaEventArgs">
            <summary>
            Base class for other schematized event arg classes.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextSchemaEventArgs.Schema">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> representing the expected schema of the line.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextSchemaEventArgs.KeepLine">
            <summary>
            Gets or sets a value that indicates whether the line should be kept.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextReadLineEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.BI.Common.IStructuredTextParser.LineRead"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextReadLineEventArgs.Line">
            <summary>
            Gets a string containing the data read.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineSplit"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns"/> events.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextSplitLineEventArgs.Fields">
            <summary>
            Gets a list containing the fields that were split from the line.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextSplitLineEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether any error condition in the line has been handled.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextLineParsedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineParsed"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextLineParsedEventArgs.Fields">
            <summary>
            Gets a list containing the fields that were split from the line.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextLineParsedEventArgs.ParsedFields">
            <summary>
            Gets a list containing the result of parsing <see cref="P:Microsoft.BI.Common.StructuredTextLineParsedEventArgs.Fields"/> according to
            the types defined in <see cref="N:Microsoft.BI.Common.Schema"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.FieldParsed"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/> events.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs.ColumnIndex">
            <summary>
            Gets the index of the column in which the parse error occured.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs.ColumnName">
            <summary>
            Gets the name of the column in which the parse error occured.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs.ColumnType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the column in which the parse error occured.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs.InputString">
            <summary>
            Gets the string that caused the parse error.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs.Result">
            <summary>
            Gets or sets the value that should be used as the parse result.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the parse error has been handled.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsJoining"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns"/> events.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs.Fields">
            <summary>
            Gets a list containing the fields that will be joined.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether any error condition in the line has been handled.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldsFormattedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsFormatted"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldsFormattedEventArgs.Fields">
            <summary>
            Gets a list containing the fields that were formatted.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldsFormattedEventArgs.FormattedFields">
            <summary>
            Gets a list containing the result of formatting <see cref="P:Microsoft.BI.Common.StructuredTextFieldsFormattedEventArgs.Fields"/> according to
            the types defined in <see cref="N:Microsoft.BI.Common.Schema"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldFormatted"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/>,
            <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/>, and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/> events.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs.ColumnIndex">
            <summary>
            Gets the index of the column in which the formatting error occured.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs.ColumnName">
            <summary>
            Gets the name of the column in which the formatting error occured.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs.ColumnType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the column in which the formatting error occured.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs.InputObject">
            <summary>
            Gets the string that caused the formatting error.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs.Result">
            <summary>
            Gets or sets the value that should be used as the parse result.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the formatting error has been handled.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.StructuredTextDefaultHandlers">
            <summary>
            Contains default implementations for many StructuredText events.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleParseFailure_DefaultValue(System.Object,Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/> events that replaces the value that failed parsing with the default
            value for the column.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleParseFailure_Drop(System.Object,Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/> events that drops rows that contain parse failures.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleParseFailure_Ignore(System.Object,Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseConversionError"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseIllegalNullError"/> events that ignores the parse failure entirely.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleFormatFailure_DefaultValue(System.Object,Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/> events that replaces the value that failed parsing with the default
            value for the column.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleFormatFailure_Drop(System.Object,Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/> events that drops rows that contain parse failures.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleFormatFailure_Ignore(System.Object,Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatConversionError"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatIllegalNullError"/> events that ignores the parse failure entirely.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleColumnCountMismatch_Drop(System.Object,Microsoft.BI.Common.StructuredTextSplitLineEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineSplit"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns"/> events that drops rows where the column counts mismatch.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleColumnCountMismatch_Ignore(System.Object,Microsoft.BI.Common.StructuredTextSplitLineEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineSplit"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns"/> events that ignores (keeps) rows where the column counts mismatch.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleColumnCountMismatch_Drop(System.Object,Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsJoining"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns"/> events that drops rows where the column counts mismatch.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleColumnCountMismatch_Ignore(System.Object,Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FieldsJoining"/>, <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns"/>,
            and <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns"/> events that ignores (keeps) rows where the column counts mismatch.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleLineParse_ConvertZeroToNull(System.Object,Microsoft.BI.Common.StructuredTextLineParsedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.LineParsed"/> event that converts zero/empty values to null.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextLineParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleOverflowValues_Trim(System.Object,Microsoft.BI.Common.StructuredTextFieldParsedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ParseOverflowError"/> event that trims overflow values to the maximum
            allowed size for the type.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleOverflowValues_Trim(System.Object,Microsoft.BI.Common.StructuredTextFieldFormattedEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.FormatOverflowError"/> event that trims overflow values to the maximum
            allowed size for the type.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldParsedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleMissingColumns_DefaultValue(System.Object,Microsoft.BI.Common.StructuredTextSplitLineEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.MissingColumns"/> event that inserts the default value for all missing
            columns into rows that are missing one or more columns.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleMissingColumns_DefaultValue(System.Object,Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.MissingColumns"/> event that inserts the default value for all missing
            columns into rows that are missing one or more columns.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleExtraColumns_Ignore(System.Object,Microsoft.BI.Common.StructuredTextSplitLineEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextReader.ExtraColumns"/> event that ignores all extra columns in rows that
            have one or more extra columns.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextSplitLineEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.BI.Common.StructuredTextDefaultHandlers.HandleExtraColumns_Ignore(System.Object,Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs)">
            <summary>
            Handler for the <see cref="E:Microsoft.BI.Common.IO.StructuredTextWriter.ExtraColumns"/> event that ignores all extra columns in rows that
            have one or more extra columns.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Microsoft.BI.Common.StructuredTextFieldsJoiningEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.BI.Common.Threading.ManualResetLock">
            <summary>
            Locking mechanism where threads can wait for a lock to become available but not necessarily take the lock.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Threading.ManualResetLock.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.BI.Common.Threading.ManualResetLock"/> with an initial state where threads
            will not block on <see cref="M:Microsoft.BI.Common.Threading.ManualResetLock.Wait"/> by default.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Threading.ManualResetLock.#ctor(System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.BI.Common.Threading.ManualResetLock"/> with an initial state.
            </summary>
            <param name="initialState"><c>true</c> if the signal is set so threads block on <see cref="M:Microsoft.BI.Common.Threading.ManualResetLock.Wait"/>; <c>false</c> otherwise.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Threading.ManualResetLock.TryEnter">
            <summary>
            Attempt to secure the lock.
            </summary>
            <returns><c>true</c> if successfully obtained the lock; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Threading.ManualResetLock.Exit">
            <summary>
            Release the lock and let threads resume that are waiting.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Threading.ManualResetLock.Wait">
            <summary>
            Wait until the lock has been yielded.
            </summary>
            <remarks>
            Threads should continuously try to <see cref="M:Microsoft.BI.Common.Threading.ManualResetLock.TryEnter"/> as it is possible that the thread
            is interupted between yielding the lock and reseting the event.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Threading.ManualResetLock.Wait(System.Int32)">
            <summary>
            Wait until the lock has been yielded or the timeout has been exceeded.
            </summary>
            <remarks>
            Threads should continuously try to <see cref="M:Microsoft.BI.Common.Threading.ManualResetLock.TryEnter"/> as it is possible that the thread
            is interupted between yielding the lock and reseting the event.
            </remarks>
            <param name="millisecondsTimeout">The timeout in milliseconds.
            <c>-1</c> indicates a timeout of infinity.</param>
        </member>
        <member name="M:Microsoft.BI.Common.Threading.ManualResetLock.Wait(System.TimeSpan)">
            <summary>
            Wait until the lock has been yielded or the timeout has been exceeded.
            </summary>
            <remarks>
            Threads should continuously try to <see cref="M:Microsoft.BI.Common.Threading.ManualResetLock.TryEnter"/> as it is possible that the thread
            is interupted between yielding the lock and reseting the event.
            </remarks>
            <param name="timeout">The timeout as a <see cref="T:System.TimeSpan"/>.
            A <see cref="T:System.TimeSpan"/> representing <c>-1</c> milliseconds indicates a timeout of infinity.</param>
        </member>
        <member name="T:Microsoft.BI.Common.TimeSpanExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.TimeSpan"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.TimeSpanExtensions.Multiply(System.TimeSpan,System.Int64)">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is multiplied by the specified number.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to multiply.</param>
            <param name="operand">The value by which to multiply the <see cref="T:System.TimeSpan"/>.</param>
            <returns>A new <see cref="T:System.TimeSpan"/> that represents the value of this instance multiplied by <paramref name="operand"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than
            <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
            <remarks>
            <para>
            The return value must be between <see cref="F:System.TimeSpan.MinValue"/> and <see cref="F:System.TimeSpan.MaxValue"/>; otherwise, an exception is thrown.
            </para>
            <para>
            The return value is a new <see cref="T:System.TimeSpan"/>; the original <see cref="T:System.TimeSpan"/> is not modified.
            </para>
            <para>
            Like standard multiplication, multiplying a positive <see cref="T:System.TimeSpan"/> value by a positive number will result in a positive
            <see cref="T:System.TimeSpan"/>, multiplying a negative <see cref="T:System.TimeSpan"/> value by a positive number or a positive <see cref="T:System.TimeSpan"/>
            value by a negative number will result in a negative <see cref="T:System.TimeSpan"/>, and multiplying a negative <see cref="T:System.TimeSpan"/> value
            by a positive number will result in a positive <see cref="T:System.TimeSpan"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.TimeSpanExtensions.Divide(System.TimeSpan,System.Int64)">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is divided by the specified number.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to divide.</param>
            <param name="operand">The value by which to divide the <see cref="T:System.TimeSpan"/>.</param>
            <returns>A new <see cref="T:System.TimeSpan"/> that represents the value of this instance divided by <paramref name="operand"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than
            <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
            <remarks>
            <para>
            The return value must be between <see cref="F:System.TimeSpan.MinValue"/> and <see cref="F:System.TimeSpan.MaxValue"/>; otherwise, an exception is thrown.
            </para>
            <para>
            The return value is a new <see cref="T:System.TimeSpan"/>; the original <see cref="T:System.TimeSpan"/> is not modified.
            </para>
            <para>
            Like standard division, dividing a positive <see cref="T:System.TimeSpan"/> value by a positive number will result in a positive
            <see cref="T:System.TimeSpan"/>, dividing a negative <see cref="T:System.TimeSpan"/> value by a positive number or a positive <see cref="T:System.TimeSpan"/>
            value by a negative number will result in a negative <see cref="T:System.TimeSpan"/>, and dividing a negative <see cref="T:System.TimeSpan"/> value
            by a positive number will result in a positive <see cref="T:System.TimeSpan"/>.
            </para>
            <para>
            Division performed by this method is integral, meaning all fractional remainders are rounded down.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.TimeSpanExtensions.Truncate(System.TimeSpan,System.Int64)">
            <summary>
            Truncate a <see cref="T:System.TimeSpan"/> to the specified resolution, in ticks.
            </summary>
            <example><c>DateTime.Now.Time.Truncate(TimeSpan.TicksPerHour)</c></example>
            <example><c>DateTime.Now.Time.Truncate(TimeSpan.TicksPerDay)</c></example>
            <param name="instance">The <see cref="T:System.TimeSpan"/> to truncate.</param>
            <param name="resolution">The resolution of the truncation (ie., TimeSpan.TicksPerHour
            to truncate to the nearest hour).</param>
            <returns>The truncated <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TimeSpanExtensions.Truncate(System.TimeSpan,System.TimeSpan)">
            <summary>
            Truncate a <see cref="T:System.TimeSpan"/> to the specified <see cref="T:System.TimeSpan"/> resolution.
            </summary>
            <example><c>DateTime.Now.Time.Truncate(TimeSpan.FromHours(1))</c></example>
            <example><c>DateTime.Now.Time.Truncate(TimeSpan.FromDays(1))</c></example>
            <param name="instance">The <see cref="T:System.TimeSpan"/> to truncate.</param>
            <param name="resolution">The resolution of the truncation (ie., TimeSpan.FromHours(1)
            to truncate to the nearest hour).</param>
            <returns>The truncated <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.Triple">
            <summary>
            Provides static methods for creating triple objects.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Triple.Create``3(``0,``1,``2)">
            <summary>
            Creates a new triple.
            </summary>
            <typeparam name="T1">The type of the first component of the triple.</typeparam>
            <typeparam name="T2">The type of the second component of the triple.</typeparam>
            <typeparam name="T3">The type of the third component of the triple.</typeparam>
            <param name="item1">The value of the first component of the triple.</param>
            <param name="item2">The value of the second component of the triple.</param>
            <param name="item3">The value of the third component of the triple.</param>
            <returns>A triple whose value is <paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>.</returns>
            <remarks>
            <see cref="M:Microsoft.BI.Common.Triple.Create``3(``0,``1,``2)"/> is a helper method that you can use to instantiate a triple object without having to
            explicitly specify the types of its components.
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.Triple`3">
            <summary>
            Represents a triple, which is a value type that contains three values.
            </summary>
            <typeparam name="T1">The type of the triple's first component.</typeparam>
            <typeparam name="T2">The type of the triple's second component.</typeparam>
            <typeparam name="T3">The type of the triple's third component.</typeparam>
            <remarks>
            <para>
            A triple is a data structure that has three components.
            </para>
            <para>
            You can instantiate a <see cref="T:Microsoft.BI.Common.Triple`3"/> object by calling either the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> constructor or the static <see cref="M:Microsoft.BI.Common.Triple.Create``3(``0,``1,``2)"/> method. You can
            retrieve the values of the triple's components by using the read-only <see cref="P:Microsoft.BI.Common.Triple`3.Item1"/>, <see cref="P:Microsoft.BI.Common.Triple`3.Item2"/>,
            and <see cref="P:Microsoft.BI.Common.Triple`3.Item3"/> instance properties.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.Triple`3.Item1">
            <summary>
            Gets the value of the current triple's first component.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Triple`3.Item2">
            <summary>
            Gets the value of the current triple's second component.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.Triple`3.Item3">
            <summary>
            Gets the value of the current triple's second component.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.Triple`3"/> structure.
            </summary>
            <param name="item1">The value of the triple's first component.</param>
            <param name="item2">The value of the triple's second component.</param>
            <param name="item3">The value of the triple's third component.</param>
            <remarks>
            You can also use the static <see cref="M:Microsoft.BI.Common.Triple.Create``3(``0,``1,``2)"/> method to instantiate a triple without having to
            explicitly specify the types of its components.
            </remarks>
            <seealso cref="M:Microsoft.BI.Common.Triple.Create``3(``0,``1,``2)"/>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Microsoft.BI.Common.Triple`3"/> object is equal to a
            specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following
            conditions:
            <list type="bullet">
              <item><description>It is a <see cref="T:Microsoft.BI.Common.Triple`3"/> object.</description></item>
              <item><description>Its three components are of the same type as the current instance.</description></item>
              <item><description>Its three components are equal to those of the current instance.  Equality is determined
              by the default object equality comparer for each component.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.Equals(Microsoft.BI.Common.Triple{`0,`1,`2})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Microsoft.BI.Common.Triple`3"/> object is equal to a
            specified <see cref="T:Microsoft.BI.Common.Triple`3"/>.
            </summary>
            <param name="other">The triple to compare with this instance.</param>
            <returns><c>true</c> if the current instance is equal to the specified triple; otherwise, <c>false</c>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if its three components
            are equal to those of the current instance.  Equality is determined by the default object equality comparer
            for each component.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.BI.Common.Triple`3"/> object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:Microsoft.BI.Common.Triple`3"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:Microsoft.BI.Common.Triple`3"/> object.</returns>
            <remarks>
            The string returned by this method takes the form (Item1, Item2, Item3), where Item1, Item2, and Item3
            represent the values of the <see cref="P:Microsoft.BI.Common.Triple`3.Item1"/>, <see cref="P:Microsoft.BI.Common.Triple`3.Item2"/>, and <see cref="P:Microsoft.BI.Common.Triple`3.Item3"/> properties. If
            any property value is <c>null</c>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.op_Implicit(Microsoft.BI.Common.Triple{`0,`1,`2})~System.Tuple{`0,`1,`2}">
            <summary>
            Converts a <see cref="T:Microsoft.BI.Common.Triple`3"/> to a <see cref="T:System.Tuple`3"/>.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.Triple`3"/> to convert.</param>
            <returns>The resulting <see cref="T:System.Tuple`3"/> value.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.op_Explicit(System.Tuple{`0,`1,`2})~Microsoft.BI.Common.Triple{`0,`1,`2}">
            <summary>
            Converts a <see cref="T:System.Tuple`3"/> to a <see cref="T:Microsoft.BI.Common.Triple`3"/>.
            </summary>
            <param name="value">The <see cref="T:System.Tuple`3"/> to convert.</param>
            <returns>The resulting <see cref="T:Microsoft.BI.Common.Triple`3"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Microsoft.BI.Common.Triple`3"/> object is equal to a
            specified object based on a specified comparison method.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> instance is cast to an <see cref="T:System.Collections.IStructuralEquatable"/> interface.
            </para>
            <para>
            The <see cref="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)"/> implementation is called only if <paramref name="other"/> is not
            <c>null</c>, and if it can be successfully cast to a <see cref="T:Microsoft.BI.Common.Triple`3"/> object whose
            components are of the same types as the current instance. The <see cref="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)"/> method
            first passes the <see cref="P:Microsoft.BI.Common.Triple`3.Item1"/> values of the <see cref="T:Microsoft.BI.Common.Triple`3"/> objects to be compared
            to the <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation. If this method call returns <c>true</c>, the
            method is called again and passed the <see cref="P:Microsoft.BI.Common.Triple`3.Item2"/> values of the two <see cref="T:Microsoft.BI.Common.Triple`3"/>
            objects.  If this comparison returns true, the method is called again and passed the <see cref="P:Microsoft.BI.Common.Triple`3.Item3"/> values
            of the two <see cref="T:Microsoft.BI.Common.Triple`3"/> objects.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current <see cref="T:Microsoft.BI.Common.Triple`3"/> object to a specified object and returns an integer
            that indicates whether the current object is before, after, or in the same position as the specified object
            in the sort order.
            </summary>
            <param name="obj">An object to compare with the current instance.</param>
            <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj"/>
            in the sort order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <c>null.</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:Microsoft.BI.Common.Triple`3"/>.</exception>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> instance is cast to an <see cref="T:System.IComparable"/> interface.
            </para>
            <para>
            This method provides the <see cref="M:System.IComparable.CompareTo(System.Object)"/> implementation for the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> class. Although the method can be called directly, it is most commonly
            called by the default overloads of collection sorting methods, such as <see cref="M:System.Array.Sort(System.Array)"/> and
            <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/>, to order the members of a collection.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method is intended for use in sorting operations. It should not be used
            when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two
            objects are equal, call the <see cref="M:Microsoft.BI.Common.Triple`3.Equals(System.Object)"/> method.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method uses the default object comparer to compare each component.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.System#IComparable{Microsoft#BI#Common#Triple{T1,T2,T3}}#CompareTo(Microsoft.BI.Common.Triple{`0,`1,`2})">
            <summary>
            Compares the current <see cref="T:Microsoft.BI.Common.Triple`3"/> object to a specified triple and returns an integer
            that indicates whether the current object is before, after, or in the same position as the specified triple
            in the sort order.
            </summary>
            <param name="other">A triple to compare with the current instance.</param>
            <returns>A signed integer that indicates the relative position of this instance and <paramref name="other"/>
            in the sort order.</returns>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> instance is cast to an <see cref="T:System.IComparable`1"/> interface.
            </para>
            <para>
            This method provides the <see cref="M:System.IComparable`1.CompareTo(`0)"/> implementation for the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> class. Although the method can be called directly, it is most commonly
            called by the default overloads of collection sorting methods, such as <see cref="M:System.Collections.Generic.List`1.Sort"/> and
            <see cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)"/>, to order the members of a collection.
            </para>
            <para>
            The <see cref="M:System.IComparable`1.CompareTo(`0)"/> method is intended for use in sorting operations. It should
            not be used when the primary purpose of a comparison is to determine whether two objects are equal. To
            determine whether two objects are equal, call the <see cref="M:Microsoft.BI.Common.Triple`3.Equals(Microsoft.BI.Common.Triple{`0,`1,`2})"/> method.
            </para>
            <para>
            The <see cref="M:System.IComparable`1.CompareTo(`0)"/> method uses the default comparer for each component type to
            compare the <see cref="T:Microsoft.BI.Common.Triple`3"/>'s elements.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares the current <see cref="T:Microsoft.BI.Common.Triple`3"/>.
            </summary>
            <param name="obj">An object to compare to the current instance.</param>
            <param name="comparer">An object that provides custom rules for comparison.</param>
            <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj"/>
            in the sort order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <c>null.</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not a <see cref="T:Microsoft.BI.Common.Triple`3"/>.</exception>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> instance is cast to an <see cref="T:System.Collections.IStructuralComparable"/> interface.
            </para>
            <para>
            Although the method can be called directly, it is most commonly called by collection sorting methods that
            include <see cref="T:System.Collections.IComparer"/> parameters to order the members of a collection. for example it is called
            by the <see cref="M:System.Array.Sort(System.Array,System.Collections.IComparer)"/> method and the <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> method
            of a <see cref="T:System.Collections.SortedList"/> object that is instantiated by using the <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)"/>
            constructor.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method is intended for use in sorting operations. It should not be used
            when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two
            objects are equal, call the <see cref="M:Microsoft.BI.Common.Triple`3.Equals(System.Object)"/> method.
            </para>
            <para>
            The <see cref="M:System.IComparable.CompareTo(System.Object)"/> method uses the default object comparer to compare each component.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.Triple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
            <summary>
            Calculates the hash code for the current <see cref="T:Microsoft.BI.Common.Triple`3"/> object by using a specified
            computation method.
            </summary>
            <param name="comparer">An object whose <see cref="M:Microsoft.BI.Common.Triple`3.GetHashCode"/> method calculates the hash code of the
            current <see cref="T:Microsoft.BI.Common.Triple`3"/>.</param>
            <returns>A 32-bit signed integer hash code.</returns>
            <remarks>
            <para>
            This member is an explicit interface member implementation. It can be used only when the
            <see cref="T:Microsoft.BI.Common.Triple`3"/> instance is cast to an <see cref="T:System.Collections.IStructuralComparable"/> interface.
            </para>
            <para>
            This method simply wraps a call to the <paramref name="comparer"/> object's
            <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> implementation.
            </para>
            <para>
            The algorithm used to compute the hash code should return the same hash code for two
            <see cref="T:Microsoft.BI.Common.Triple`3"/> objects that are considered to be equal.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.BI.Common.TypeConversion">
            <summary>
            Provides methods for converting strings to various primitive numeric types.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSByte(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.SByte"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSByte(System.String,System.SByte)">
            <summary>
            Converts a string to a <see cref="T:System.SByte"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt16(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt16(System.String,System.Int16)">
            <summary>
            Converts a string to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt32(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt32(System.String,System.Int32)">
            <summary>
            Converts a string to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt64(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt64(System.String,System.Int64)">
            <summary>
            Converts a string to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToByte(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToByte(System.String,System.Byte)">
            <summary>
            Converts a string to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt16(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt16(System.String,System.UInt16)">
            <summary>
            Converts a string to a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt32(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt32(System.String,System.UInt32)">
            <summary>
            Converts a string to a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt64(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt64(System.String,System.UInt64)">
            <summary>
            Converts a string to a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSByteQ(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSByteQ(System.String,System.Nullable{System.SByte})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt16Q(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt16Q(System.String,System.Nullable{System.Int16})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt32Q(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt32Q(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt64Q(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToInt64Q(System.String,System.Nullable{System.Int64})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToByteQ(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToByteQ(System.String,System.Nullable{System.Byte})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt16Q(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt16Q(System.String,System.Nullable{System.UInt16})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt32Q(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt32Q(System.String,System.Nullable{System.UInt32})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt64Q(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToUInt64Q(System.String,System.Nullable{System.UInt64})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSingle(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Single"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSingle(System.String,System.Single)">
            <summary>
            Converts a string to a <see cref="T:System.Single"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDouble(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Double"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDouble(System.String,System.Double)">
            <summary>
            Converts a string to a <see cref="T:System.Double"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSingleQ(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToSingleQ(System.String,System.Nullable{System.Single})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDoubleQ(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDoubleQ(System.String,System.Nullable{System.Double})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDecimal(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDecimal(System.String,System.Decimal)">
            <summary>
            Converts a string to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDecimalQ(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDecimalQ(System.String,System.Nullable{System.Decimal})">
            <summary>
            Converts a string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="defaultValue">The value to return if conversion fails.</param>
            <returns>The result of parsing <paramref name="s"/> as a <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToTime(System.DateTime)">
            <summary>
            Returns the time portion of a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to get the time of.</param>
            <returns>The time component of <paramref name="dateTime"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDate(System.DateTime)">
            <summary>
            Returns the date portion of a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to get the date of.</param>
            <returns>The date component of <paramref name="dateTime"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToTime(System.Nullable{System.DateTime})">
            <summary>
            Returns the time portion of a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to get the time of.</param>
            <returns>The time component of <paramref name="dateTime"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToDate(System.Nullable{System.DateTime})">
            <summary>
            Returns the date portion of a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to get the date of.</param>
            <returns>The date component of <paramref name="dateTime"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToIntQ(System.Boolean)">
            <summary>
            Returns a boolean value as an integer (0 or 1).
            </summary>
            <param name="val">The boolean to format.</param>
            <returns>The boolean value as an integer (0 or 1).</returns>
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.ToIntQ(System.Nullable{System.Boolean})">
            <summary>
            Returns an integer value as a boolean.
            </summary>
            <param name="val">The integer to format.</param>
            <returns>The integer value as a boolean.</returns>
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.Serialize(System.String)">
            <summary>
            Converts a hex string to a byte array.
            </summary>
            <param name="text">The hext string to format.</param>
            <returns>The string as a byte array.</returns>
            <exclude/>
        </member>
        <member name="M:Microsoft.BI.Common.TypeConversion.JoinString``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Joins an enumerable collection of strings with a separator.
            </summary>
            <typeparam name="T">The type of the elements in the enumerable.</typeparam>
            <param name="separator">The separator between elements.</param>
            <param name="values">The values to join.</param>
            <returns>The joined string.</returns>
            <exclude/>
        </member>
        <member name="T:Microsoft.BI.Common.TypeExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.TypeExtensions.IsAssignableFromGeneric(System.Type,System.Type)">
            <summary>
             Determines whether an instance of the current generic <see cref="T:System.Type"/> can be assigned from an instance of
             the specified generic <see cref="T:System.Type"/>.
            </summary>
            <param name="instance">The generic <see cref="T:System.Type"/> definition.</param>
            <param name="type">The generic <see cref="T:System.Type"/> to compare to the current type.</param>
            <returns>
            <c>true</c> if <paramref name="type"/>'s generic type definition and the current <see cref="T:System.Type"/> represent the
            same type, or if the current <see cref="T:System.Type"/> matches a generic type definition in the inheritance hierarchy of
            <paramref name="type"/>, or if the current <see cref="T:System.Type"/> is an interface that <paramref name="type"/> implements.
            <c>false</c> if none of these conditions are true, or if <paramref name="type"/> is <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not a generic type definition.</exception>
        </member>
        <member name="T:Microsoft.BI.Common.UInt128">
            <summary>
            Represents a 128-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.#ctor(System.UInt64)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The lower 64 bits of the 128-bit integer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="low">The lower 64 bits of the 128-bit integer.</param>
            <param name="high">The upper 64 bits of the 128-bit integer.</param>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns a comparison of their relative values.
            </summary>
            <param name="value">The object to compare with this instance, or <c>null</c>.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not a <see cref="T:Microsoft.BI.Common.UInt128"/>.</exception>
            <remarks>
            <para>
            Any instance of <see cref="T:Microsoft.BI.Common.UInt128"/>, regardless of its value, is considered greater than <c>null</c>.
            </para>
            <para>
            Parameter <paramref name="value"/> must be <c>null</c> or any instance of <see cref="T:Microsoft.BI.Common.UInt128"/>; otherwise,
            an exception is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.CompareTo(Microsoft.BI.Common.UInt128)">
            <summary>
            Compares this instance to a specified <see cref="T:Microsoft.BI.Common.UInt128"/> value and returns a comparison of their
            relative values.
            </summary>
            <param name="value">The <see cref="T:Microsoft.BI.Common.UInt128"/> to compare with this instance.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.Equals(Microsoft.BI.Common.UInt128)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:Microsoft.BI.Common.UInt128"/> object
            represent the same value.
            </summary>
            <param name="value">A <see cref="T:Microsoft.BI.Common.UInt128"/> object to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="value"/> is a <see cref="T:Microsoft.BI.Common.UInt128"/> and equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:System.Object"/> represent the
            same type and value.
            </summary>
            <param name="value">The object to compare with this instance.</param>
            <returns><c>true</c> if <paramref name="value"/> is a <see cref="T:Microsoft.BI.Common.UInt128"/> and equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.Multiply(System.UInt64,System.UInt64)">
            <summary>
            Multiplies two <see cref="T:System.UInt64"/> values and returns a <see cref="T:Microsoft.BI.Common.UInt128"/> value.
            </summary>
            <param name="n1">The first value to multiply.</param>
            <param name="n2">The second value to multiply.</param>
            <returns>The result of multiplying <paramref name="n1"/> and <paramref name="n2"/>.</returns>
            <remarks>
            This method multiplies two 64-bit unsigned integer values together and returns a 128-bit unsigned integer
            value.  As such, it is impossible for this method to throw an <see cref="T:System.OverflowException"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the value of this instance.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of this instance as specified by <paramref name="format"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the specified format
            and culture-specific format information.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">A <see cref="T:System.IFormatProvider"/> that supplied culture-specific formatting information.</param>
            <returns>The string representation of this instance as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.</returns>
            <remarks>The <paramref name="formatProvider"/> parameter is currently ignored.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:Microsoft.BI.Common.UInt128"/> equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <returns>The equivalent to the number contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is <c>null.</c></exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than 0 or greater
            than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.TryParse(System.String,Microsoft.BI.Common.UInt128@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:Microsoft.BI.Common.UInt128"/> equivalent.  A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:Microsoft.BI.Common.UInt128"/> number that is equivalent
            to the number contained in <paramref name="s"/>.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The conversion fails if the <paramref name="s"/> is <c>null</c> or <see cref="F:System.String.Empty"/>, is not a
            number in a valid format, or represents a number less than 0 or greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.
            This parameter is passed uninitialized; any value originally supplied in <paramref name="result"/> will be
            overwritten.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(System.Int64)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an explicit conversion of a 64-bit signed integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 64-bit signed integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(System.Int32)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an explicit conversion of a 32-bit signed integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 32-bit signed integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(System.Int16)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an explicit conversion of a 16-bit signed integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 16-bit signed integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(System.SByte)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an explicit conversion of an 8-bit signed integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 8-bit signed integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(System.Double)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an explicit conversion of an 8-byte floating point value to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An 8-byte floating point value that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(System.Single)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an explicit conversion of a 4-byte floating point value to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 4-byte floating point value that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Implicit(System.UInt64)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 64-bit unsigned integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Implicit(System.UInt32)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 32-bit unsigned integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Implicit(System.UInt16)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 16-bit unsigned integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Implicit(System.Byte)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an implicit conversion of an 8-bit unsigned integer to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The 8-bit unsigned integer to convert.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Implicit(System.Char)~Microsoft.BI.Common.UInt128">
            <summary>
            Defines an implicit conversion of a Unicode character to a <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> to convert from.</param>
            <returns>The converted 128-bit unsigned integer.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.UInt64">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a 64-bit unsigned integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 64-bit unsigned integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.UInt64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.Int64">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a 64-bit signed integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 64-bit signed integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.UInt32">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a 32-bit unsigned integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 32-bit unsigned integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.UInt32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.Int32">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a 32-bit signed integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 32-bit signed integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.UInt16">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a 16-bit unsigned integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 16-bit unsigned integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.UInt16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.Int16">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a 16-bit signed integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 16-bit signed integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Int16.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.Byte">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to an 8-bit unsigned integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An 8-bit unsigned integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.SByte">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to an 8-bit signed integer.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An 8-bit signed integer that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.SByte.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.Char">
            <summary>
            Performs an explicit conversion from a <see cref="T:Microsoft.BI.Common.UInt128"/> value to a Unicode character.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Unicode character that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Char.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Explicit(Microsoft.BI.Common.UInt128)~System.Decimal">
            <summary>
            Defines an explicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A decimal that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Implicit(Microsoft.BI.Common.UInt128)~System.Double">
            <summary>
            Defines an implicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to an 8-byte floating point value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An 8-byte floating point value that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Implicit(Microsoft.BI.Common.UInt128)~System.Single">
            <summary>
            Defines an implicit conversion of a <see cref="T:Microsoft.BI.Common.UInt128"/> to a 4-byte floating point value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A 4-byte floating point value that represents the converted <see cref="T:Microsoft.BI.Common.UInt128"/>.</returns>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is greater than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_UnaryPlus(Microsoft.BI.Common.UInt128)">
            <summary>
            Returns the value of the <see cref="T:Microsoft.BI.Common.UInt128"/> operand.
            </summary>
            <param name="n">The operand to return.</param>
            <returns>The value of the operand, <paramref name="n"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_OnesComplement(Microsoft.BI.Common.UInt128)">
            <summary>
            Returns the bitwise complement of the <see cref="T:Microsoft.BI.Common.UInt128"/> operand.
            </summary>
            <param name="n">The value.</param>
            <returns>The result of the unary bitwise complement operation.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Increment(Microsoft.BI.Common.UInt128)">
            <summary>
            Increments the <see cref="T:Microsoft.BI.Common.UInt128"/> operand by 1.
            </summary>
            <param name="n">The value to increment.</param>
            <returns>The value of <paramref name="n"/> incremented by 1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Decrement(Microsoft.BI.Common.UInt128)">
            <summary>
            Decrements the <see cref="T:Microsoft.BI.Common.UInt128"/> operand by 1.
            </summary>
            <param name="n">The value to decrement.</param>
            <returns>The value of <paramref name="n"/> decremented by 1.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Addition(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Adds two specified <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value to add.</param>
            <param name="n2">The second value to add.</param>
            <returns>The result of adding <paramref name="n1"/> and <paramref name="n2"/>.</returns>
            <exception cref="T:System.OverflowException">The result is greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Addition(Microsoft.BI.Common.UInt128,System.UInt64)">
            <summary>
            Adds a <see cref="T:Microsoft.BI.Common.UInt128"/> and <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="n1">The first value to add.</param>
            <param name="n2">The second value to add.</param>
            <returns>The result of adding <paramref name="n1"/> and <paramref name="n2"/>.</returns>
            <exception cref="T:System.OverflowException">The result is greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Subtraction(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Subtracts two specified <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value to subtract.</param>
            <param name="n2">The second value to subtract.</param>
            <returns>The result of subtracting <paramref name="n2"/> from <paramref name="n1"/>.</returns>
            <exception cref="T:System.OverflowException">The result is smaller than <see cref="F:Microsoft.BI.Common.UInt128.MinValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Multiply(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Multiplies two specified <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value to multiply.</param>
            <param name="n2">The second value to multiply.</param>
            <returns>The result of multiplying <paramref name="n1"/> by <paramref name="n2"/>.</returns>
            <exception cref="T:System.OverflowException">The result is greater than <see cref="F:Microsoft.BI.Common.UInt128.MaxValue"/>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Division(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Divides two specified <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value to divide.</param>
            <param name="n2">The second value to divide.</param>
            <returns>The result of dividing <paramref name="n1"/> by <paramref name="n2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Modulus(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value to divide.</param>
            <param name="n2">The second value to divide.</param>
            <returns>The remainder resulting from dividing <paramref name="n1"/> by <paramref name="n2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_BitwiseAnd(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns the bitwise and of two <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value.</param>
            <param name="n2">The second value.</param>
            <returns>The result of the bitwise and of <paramref name="n1"/> and <paramref name="n2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_BitwiseOr(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns the bitwise or of two <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value.</param>
            <param name="n2">The second value.</param>
            <returns>The result of the bitwise or of <paramref name="n1"/> and <paramref name="n2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_ExclusiveOr(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns the bitwise exclusive or of two <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">The first value.</param>
            <param name="n2">The second value.</param>
            <returns>The result of the bitwise exclusive or of <paramref name="n1"/> and <paramref name="n2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_LeftShift(Microsoft.BI.Common.UInt128,System.Int32)">
            <summary>
            Returns the value resulting from shifting the bits of a <see cref="T:Microsoft.BI.Common.UInt128"/> value to the left.
            </summary>
            <param name="n">The value to shift.</param>
            <param name="bitCount">The the number of bits to shift by.</param>
            <returns>The result of shifting the bits of <paramref name="n"/> by <paramref name="bitCount"/> to the left.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_RightShift(Microsoft.BI.Common.UInt128,System.Int32)">
            <summary>
            Returns the value resulting from shifting the bits of a <see cref="T:Microsoft.BI.Common.UInt128"/> value to the right.
            </summary>
            <param name="n">The value to shift.</param>
            <param name="bitCount">The the number of bits to shift by.</param>
            <returns>The result of shifting the bits of <paramref name="n"/> by <paramref name="bitCount"/> to the right.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Equality(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.UInt128"/> values are equal.
            </summary>
            <param name="n1">The first value to compare.</param>
            <param name="n2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="n1"/> and <paramref name="n2"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_Inequality(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Microsoft.BI.Common.UInt128"/> values are not equal.
            </summary>
            <param name="n1">The first value to compare.</param>
            <param name="n2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="n1"/> and <paramref name="n2"/> are not equal;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_GreaterThan(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Microsoft.BI.Common.UInt128"/> is greater than another
            specified <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="n1">The first value to compare.</param>
            <param name="n2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="n1"/> is greater than <paramref name="n2"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_LessThan(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Microsoft.BI.Common.UInt128"/> is less than another
            specified <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="n1">The first value to compare.</param>
            <param name="n2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="n1"/> is less than <paramref name="n2"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_GreaterThanOrEqual(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Microsoft.BI.Common.UInt128"/> is greater than or
            equal to another specified <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="n1">The first value to compare.</param>
            <param name="n2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="n1"/> is greater than or equal to <paramref name="n2"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.op_LessThanOrEqual(Microsoft.BI.Common.UInt128,Microsoft.BI.Common.UInt128)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Microsoft.BI.Common.UInt128"/> is less than or
            equal to another specified <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <param name="n1">The first value to compare.</param>
            <param name="n2">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="n1"/> is less than or equal to <paramref name="n2"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns><c>true</c> if the value of the current instance is not zero; otherwise, <c>false</c>.</returns>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.Byte"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.Char"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Char.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            This conversion is not supported.  Attempting to use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>None.  This conversion is not supported.</returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.Decimal"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting decimal value is greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.Double"/>.</returns>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to an <see cref="T:System.Int16"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Int16.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to an <see cref="T:System.Int32"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to an <see cref="T:System.Int64"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to an <see cref="T:System.SByte"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.SByte.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.Single"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Single.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the specified
            culture-specific format information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by <paramref name="provider"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>.
            </summary>
            <param name="type">The type to which to convert the value of this <see cref="T:Microsoft.BI.Common.UInt128"/> instance.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> implementation that supplies culture-specific
            information about the format of the returned value.</param>
            <returns>The value of the current instance, converted to a <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidCastException">The requested type conversion is not supported.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.UInt16"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting unsigned integer value is greater than
            <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.UInt32"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting unsigned integer value is greater than
            <see cref="F:System.UInt32.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>.
            </summary>
            <param name="provider">This parameter is ignored.</param>
            <returns>The value of the current instance, converted to a <see cref="T:System.UInt64"/>.</returns>
            <exception cref="T:System.OverflowException">The resulting unsigned integer value is greater than
            <see cref="F:System.UInt64.MaxValue"/>.</exception>
            <remarks>
            This member is an explicit interface implementation.  It can only be used when the <see cref="T:Microsoft.BI.Common.UInt128"/>
            instance is cast to an <see cref="T:System.IConvertible"/> interface.
            </remarks>
        </member>
        <member name="P:Microsoft.BI.Common.UInt128.LeadingZeros">
            <summary>
            Counts the number of leading zeros, starting from the most-significant bit, of the <see cref="T:Microsoft.BI.Common.UInt128"/>.
            </summary>
            <returns>The number of leading zeros in the value.</returns>
            <remarks>
            <para>
            This property produces the equivalent to the <c>clz</c> instruction on some processors.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.CountLeadingZeros(System.UInt64)">
            <summary>
            Counts the number of leading zeros, starting from the most-significant bit, of a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value in which to count leading zeros.</param>
            <returns>The number of leading zeros in <paramref name="value"/>.</returns>
            <remarks>
            This method produces the equivalent to the <c>clz</c> instruction on some processors.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.DivideByTwo(Microsoft.BI.Common.UInt128@)">
            <summary>
            Divides the <see cref="T:Microsoft.BI.Common.UInt128"/> value pointed to by the specified pointer by two.
            </summary>
            <param name="value">A pointer to the <see cref="T:Microsoft.BI.Common.UInt128"/> value to divide by two.</param>
            <remarks>
            This method mutates the value pointed to by <paramref name="value"/>.  A caller who wishes to preserve
            the original value should make a copy before calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.DivideByTen(Microsoft.BI.Common.UInt128@,System.UInt32@)">
            <summary>
            Divides the <see cref="T:Microsoft.BI.Common.UInt128"/> value pointed to by the specified pointer by ten.
            </summary>
            <param name="value">A pointer to the <see cref="T:Microsoft.BI.Common.UInt128"/> value to divide by ten.</param>
            <param name="remainder">When this method returns, contains the remainder of the division operation.</param>
            <remarks>
            This method mutates the value pointed to by <paramref name="value"/>.  A caller who wishes to preserve
            the original value should make a copy before calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.DivideModulo(Microsoft.BI.Common.UInt128@,Microsoft.BI.Common.UInt128@,Microsoft.BI.Common.UInt128@,Microsoft.BI.Common.UInt128@)">
            <summary>
            Divides two <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="dividend">A pointer to the value to divide.</param>
            <param name="divisor">A pointer to the value to divide by.</param>
            <param name="quotient">When this method returns, contains the result of the division operation.</param>
            <param name="remainder">When this method returns contains the remainder of the division operation.</param>
            <remarks>
            This method mutates the values pointed to by <paramref name="dividend"/> and <paramref name="divisor"/>.
            A caller who wishes to preserve the original values should make a copy of each before calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.LeftShiftOne(Microsoft.BI.Common.UInt128@)">
            <summary>
            Shifts the <see cref="T:Microsoft.BI.Common.UInt128"/> value pointed to by the specified pointer to the left 1 bit.
            </summary>
            <param name="value">A pointer to the <see cref="T:Microsoft.BI.Common.UInt128"/> value to shift.</param>
            <remarks>
            This method mutates the value pointed to by <paramref name="value"/>.  A caller who wishes to preserve
            the original value should make a copy before calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.Multiply64To128(System.UInt64,System.UInt64)">
            <summary>
            Multiplies two 64-bit unsigned integer values and produces a 128-bit unsigned value that represents
            the result of the multiplication.
            </summary>
            <param name="n1">The first value to multiply.</param>
            <param name="n2">The second value to multiply.</param>
            <returns>The 12-bit result of multiplying <paramref name="n1"/> by <paramref name="n2"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.MultiplyByTwo(Microsoft.BI.Common.UInt128@)">
            <summary>
            Multiplies the supplied <see cref="T:Microsoft.BI.Common.UInt128"/> value by 2.
            </summary>
            <param name="value">The value to multiply by 2.</param>
            <returns>The resulting value.</returns>
            <remarks>
            This method does not mutate <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.MultiplyByTen(Microsoft.BI.Common.UInt128@)">
            <summary>
            Multiplies the supplied <see cref="T:Microsoft.BI.Common.UInt128"/> value by 10.
            </summary>
            <param name="value">The value to multiply by 10.</param>
            <returns>The resulting value.</returns>
            <remarks>
            This method does not mutate <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.RightShiftOne(Microsoft.BI.Common.UInt128@)">
            <summary>
            Shifts the <see cref="T:Microsoft.BI.Common.UInt128"/> value pointed to by the specified pointer to the right 1 bit.
            </summary>
            <param name="value">A pointer to the <see cref="T:Microsoft.BI.Common.UInt128"/> value to shift.</param>
            <remarks>
            This method mutates the value pointed to by <paramref name="value"/>.  A caller who wishes to preserve
            the original value should make a copy before calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.SetLeastSignificantBit(Microsoft.BI.Common.UInt128@)">
            <summary>
            Sets the least significant bit of the <see cref="T:Microsoft.BI.Common.UInt128"/> value pointed to by the supplied pointer.
            </summary>
            <param name="value">A pointer to the <see cref="T:Microsoft.BI.Common.UInt128"/> value to modify.</param>
            <remarks>
            This method mutates the value pointed to by <paramref name="value"/>.  A caller who wishes to preserve
            the original value should make a copy before calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UInt128.Subtract(Microsoft.BI.Common.UInt128@,Microsoft.BI.Common.UInt128@)">
            <summary>
            Subtracts two <see cref="T:Microsoft.BI.Common.UInt128"/> values.
            </summary>
            <param name="n1">A pointer to the <see cref="T:Microsoft.BI.Common.UInt128"/> value to subtract from.</param>
            <param name="n2">The value to subtract from <paramref name="n1"/>.</param>
            <remarks>
            This method mutates the value pointed to by <paramref name="n1"/>.  A caller who wishes to preserve
            the original value should make a copy before calling this method.
            </remarks>
        </member>
        <member name="F:Microsoft.BI.Common.UInt128.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Microsoft.BI.Common.UInt128"/>.  This field is read-only.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UInt128.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:Microsoft.BI.Common.UInt128"/>.  This field is read-only.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UniversalTypeConverter">
            <summary>
            Provides methods for converting between objects of various types.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.Options">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.TypeConversionOptions"/> value representing the conversion options of the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.ConversionMethods">
            <summary>
            Gets a <see cref="T:Microsoft.BI.Common.TypeConversionMethods"/> value representing the conversion methods supported by
            the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.Culture">
            <summary>
            Gets a <see cref="T:System.Globalization.CultureInfo"/> containing culture-specific data used when performing conversions.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.UniversalTypeConverter.Default">
            <summary>
            Gets default <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.#ctor(Microsoft.BI.Common.TypeConversionMethods,System.Globalization.CultureInfo,Microsoft.BI.Common.TypeConversionOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> class.
            </summary>
            <param name="methods">The type of conversions that will be performed by this type converter.</param>
            <param name="culture">The culture used for performing conversions.</param>
            <param name="options">The conversion options to use when converting values.</param>
            <remarks>
            If <paramref name="culture"/> is not specified or <c>null</c>, the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> uses
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> as the culture for performing conversions.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.CanConvert``1(System.Object)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> can perform a conversion from
            the specified value to the specified type.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> can convert from <paramref name="value"/> to
            and object of type <typeparamref name="T"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            The ability for a <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> to convert a value from one type to another depends on many
            factors, including the value and type specified in the method, the value of <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.Options"/> and <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.ConversionMethods"/>,
            as well as the <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.Culture"/> on the instance.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> can perform a conversion from
            the specified value to the specified type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert to.</param>
            <returns><c>true</c> if the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> can convert from <paramref name="value"/> to
            and object of type <paramref name="destinationType"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            The ability for a <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> to convert a value from one type to another depends on many
            factors, including the value and type specified in the method, the value of <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.Options"/> and <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.ConversionMethods"/>,
            as well as the <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.Culture"/> on the instance.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.ConvertTo``1(System.Object)">
            <summary>
            Converts an object from one type to another.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns><paramref name="value"/> converted to an object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> is <c>null</c>, <typeparamref name="T"/> is a non-nullable type, and <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.Options"/> does
            not contain <see cref="F:Microsoft.BI.Common.TypeConversionOptions.DefaultValueIfNull"/>.</exception>
            <exception cref="T:System.NotSupportedException">The specified conversion is not supported.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts an object from one type to another.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert to.</param>
            <returns><paramref name="value"/> converted to an object of type <paramref name="destinationType"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> is <c>null</c>, <paramref name="destinationType"/> is a non-nullable type, and <see cref="P:Microsoft.BI.Common.UniversalTypeConverter.Options"/> does
            not contain <see cref="F:Microsoft.BI.Common.TypeConversionOptions.DefaultValueIfNull"/>.</exception>
            <exception cref="T:System.NotSupportedException">The specified conversion is not supported.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvert``1(System.Object,``0@)">
            <summary>
            Converts an object from one type to another.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">When this method returns, this parameter will contain the value of <paramref name="value"/> converted to
            <typeparamref name="T"/>.</param>
            <returns><c>true</c> if the conversion succeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Converts an object from one type to another.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert to.</param>
            <param name="result">When this method returns, this parameter will contain the value of <paramref name="value"/> converted to
            <paramref name="destinationType"/>.</param>
            <returns><c>true</c> if the conversion succeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.ConvertByExplicitCast">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> will perform conversions by explicit casting.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.ConvertByImplicitCast">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> will perform conversions by implicit casting.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.ConvertByIConvertible">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> will perform conversions using the <see cref="T:System.IConvertible"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.ConvertByTypeConverter">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> will perform conversions using a <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UniversalTypeConverter.ConvertByLiteral">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/> will perform conversions using literal conversion.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.IsNull(System.Object)">
            <summary>
            Determines whether a value represents <c>null</c>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if <paramref name="value"/> represents <c>null</c>; otherwise, <c>false</c>.</returns>
            <remarks>
            Returns <c>true</c> if <paramref name="value"/> is <c>null</c> or <see cref="F:System.DBNull.Value"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertFromNull(System.Type,System.Object@)">
            <summary>
            Converts a value of <c>null</c> to the specified type.
            </summary> to t
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertWithTypeConverter(System.Object,System.Type,System.Type,System.Object@)">
            <summary>
            Converts a value using a <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="valueType">The <see cref="T:System.Type"/> of <paramref name="value"/>.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertWithIConvertible(System.IConvertible,System.Type,System.Object@)">
            <summary>
            Converts a value using the <see cref="T:System.IConvertible"/> interface.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertIConvertibleFromString(System.String,System.Type,System.Object@)">
            <summary>
            Converts a value using the <see cref="T:System.IConvertible"/> interface with strings.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
            <remarks>
            This method is an optimization for the case when converting a string to an <see cref="T:System.IConvertible"/> value.
            in this case, we use the type's <c>TryParse</c> method to perform the conversion rather than going through
            <see cref="M:System.IConvertible.ToString(System.IFormatProvider)"/>, which will throw an exception if the string is not parseable.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertImplicit(System.Object,System.Type,System.Type,System.Object@)">
            <summary>
            Converts a value using the implicit operator.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="valueType">The <see cref="T:System.Type"/> of <paramref name="value"/>.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertExplicit(System.Object,System.Type,System.Type,System.Object@)">
            <summary>
            Converts a value using the explicit operator.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="valueType">The <see cref="T:System.Type"/> of <paramref name="value"/>.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertEnum(System.Object,System.Type,System.Object@)">
            <summary>
            Converts a value to an enumeration.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UniversalTypeConverter.TryConvertLiteral(System.Object,System.Type,System.Object@)">
            <summary>
            Converts a literal value to another type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert to.</param>
            <param name="result">When this method returns, this will contain the converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.TypeConversionOptions">
            <summary>
            Contains values that control the behavior of the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionOptions.None">
            <summary>
            No optional behavior is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionOptions.DefaultValueIfNull">
            <summary>
            When converting <c>null</c> to a value type, use the default value for the type instead of throwing
            an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.TypeConversionMethods">
            <summary>
            Contains values that control which types of conversions are performed by the <see cref="T:Microsoft.BI.Common.UniversalTypeConverter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionMethods.None">
            <summary>
            No conversions are supported.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionMethods.Implicit">
            <summary>
            Conversions via implicit casting are performed.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionMethods.Explicit">
            <summary>
            Conversions via explicit casting are performed.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionMethods.IConvertible">
            <summary>
            Conversions via the <see cref="F:Microsoft.BI.Common.TypeConversionMethods.IConvertible"/> interface are performed.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionMethods.TypeConverter">
            <summary>
            Conversions via <see cref="F:Microsoft.BI.Common.TypeConversionMethods.TypeConverter"/> are performed.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionMethods.Literal">
            <summary>
            Conversions via literal conversions are performed.
            </summary>
        </member>
        <member name="F:Microsoft.BI.Common.TypeConversionMethods.All">
            <summary>
            All conversion methods are performed.
            </summary>
        </member>
        <member name="T:Microsoft.BI.Common.UriUtils">
            <summary>
            Provides common utility functions for interacting with <see cref="T:System.Uri"/> objects and strings representing URIs.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UriUtils.DecodeUri(System.Uri)">
            <summary>
            Decodes a <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/>to decode.</param>
            <returns>The decoded <see cref="T:System.Uri"/>.</returns>
            <remarks>Implements URI decoding according to the RFC 3986 standard.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UriUtils.DecodeString(System.String)">
            <summary>
            Decodes a string representing a URI.
            </summary>
            <param name="uri">The string to decode.</param>
            <returns>The decoded string.</returns>
            <remarks>Implements URI decoding according to the RFC 3986 standard.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UriUtils.TryDecodeUri(System.Uri,System.Uri@)">
            <summary>
            Decodes a <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to decode.</param>
            <param name="result">On a successful parse, contains the result of decoding <paramref name="uri"/>.</param>
            <returns>true if successful; otherwise, false.</returns>
            <remarks>Implements URI decoding according to the RFC 3986 standard.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UriUtils.TryDecodeString(System.String,System.String@)">
            <summary>
            Decodes a string representing a URI.
            </summary>
            <param name="uri">The string to decode.</param>
            <param name="result">On a successful parse, contains the result of decoding <paramref name="uri"/>.</param>
            <returns>true if successful; otherwise, false.</returns>
            <remarks>Implements URI decoding according to the RFC 3986 standard.</remarks>
        </member>
        <member name="M:Microsoft.BI.Common.UriUtils.TryDecodeAscii(System.Char,System.Char,System.Char@)">
            <summary>
            Decodes two characters representing a hex number into an equivalent character.
            </summary>
            <param name="d1">The first digit of the hex number.</param>
            <param name="d2">The second digit of the hex number.</param>
            <param name="c">On a successful decode, contains the resulting character.</param>
            <returns>true if decoding succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UriUtils.IsHexDigit(System.Char)">
            <summary>
            Returns whether the specified character represents a valid hexadecimal digit.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if <paramref name="c"/> is a hexadecimal digit; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UriUtils.GetDigit(System.Char)">
            <summary>
            Gets the hexadecimal number represented by the specified character.
            </summary>
            <param name="c">The character to get the number of.</param>
            <returns>An integer from 0 to 15 representing the hexadecimal value of the character.</returns>
            <remarks><paramref name="c"/> should be checked for valid range using <see cref="M:Microsoft.BI.Common.UriUtils.IsHexDigit(System.Char)"/> or
            some equivalent in order to have correct behavior.</remarks>
        </member>
        <member name="T:Microsoft.BI.Common.UserName">
            <summary>
            Represents a Windows user name with optional domain prefix.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UserName.Domain">
            <summary>
            Gets the domain portion of the user name.
            </summary>
        </member>
        <member name="P:Microsoft.BI.Common.UserName.User">
            <summary>
            Gets the user portion of the user name.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.UserName.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.UserName"/> from the specified domain and user name.
            </summary>
            <param name="domain">The domain of the user.</param>
            <param name="user">The username of the user.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="user"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UserName.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.BI.Common.UserName"/> from the specified user name.
            </summary>
            <param name="username">The user name in 'username' or 'domain\username' format.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="username"/> does not match expected format.</exception>
        </member>
        <member name="M:Microsoft.BI.Common.UserName.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the current <see cref="T:Microsoft.BI.Common.UserName"/> has the same value as another object.
            </summary>
            <param name="obj">The object to compare for equality.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:Microsoft.BI.Common.UserName"/> and they are equal; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UserName.Equals(Microsoft.BI.Common.UserName)">
            <summary>
            Gets a value indicating whether the current <see cref="T:Microsoft.BI.Common.UserName"/> has the same value as another <see cref="T:Microsoft.BI.Common.UserName"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.BI.Common.UserName"/> to compare for equality.</param>
            <returns><c>true</c> if the user names are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UserName.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Microsoft.BI.Common.UserName"/>.
            </summary>
            <returns>A hash code for the <see cref="T:Microsoft.BI.Common.UserName"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UserName.op_Equality(Microsoft.BI.Common.UserName,Microsoft.BI.Common.UserName)">
            <summary>
            Gets a value indicating whether two <see cref="T:Microsoft.BI.Common.UserName"/> objects have the same value.
            </summary>
            <param name="a">The first <see cref="T:Microsoft.BI.Common.UserName"/>.</param>
            <param name="b">The second <see cref="T:Microsoft.BI.Common.UserName"/>.</param>
            <returns><c>true</c> if <paramref name="a"/> and <paramref name="b"/> have the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.UserName.op_Inequality(Microsoft.BI.Common.UserName,Microsoft.BI.Common.UserName)">
            <summary>
            Gets a value indicating whether two <see cref="T:Microsoft.BI.Common.UserName"/> objects have a different value.
            </summary>
            <param name="a">The first <see cref="T:Microsoft.BI.Common.UserName"/>.</param>
            <param name="b">The second <see cref="T:Microsoft.BI.Common.UserName"/>.</param>
            <returns><c>true</c> if <paramref name="a"/> and <paramref name="b"/> have a different value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.XmlReaderExtensions">
            <summary>
            Cool extensions to the XmlReader class.
            </summary>
        </member>
        <member name="M:Microsoft.BI.Common.XmlReaderExtensions.NextTag(System.Xml.XmlReader)">
            <summary>
            Turns this string into an XML-safe version.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to get the next tag of.</param>
        </member>
        <member name="T:Microsoft.BI.Common.XmlSerializationFactory">
            <summary>
            A factory for creating <see cref="T:System.Xml.Serialization.XmlSerializer"/> objects.
            </summary>
            <remarks>
            <para>
            Using the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class causes an assembly to be compiled and loaded into the current app domain.
            Two of the constructors, <see cref="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)"/> and <see cref="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)"/>, utilize an
            internal cache to avoid leaking memory for each serializer created; however, none of the others do.
            </para>
            <para>
            All <see cref="T:System.Xml.Serialization.XmlSerializer"/> instances created through this factory utilize a shared cache.  If a <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            is requested with the same arguments twice, a cached version will be returned rather than generating a new one.
            </para>
            <para>
            This factory has the same API as the <see cref="T:System.Xml.Serialization.XmlSerializer"/> constructors, with the exception of two of the constructors.
            One is deprecated and will not be added; the other may be added if we find a need for it later.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.CreateSerializer(System.Type)">
            <summary>
            Returns an <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of the specified type into XML documents,
            and deserialize XML documents into objects of the specified type.
            </summary>
            <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
            <returns>An <see cref="T:System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of the specified type into XML documents,
            and deserialize XML documents into objects of the specified type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.CreateSerializer(System.Type,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of the specified type into XML documents,
            and deserialize XML documents into objects of the specified type. Specifies the default namespace for all the
            XML elements.
            </summary>
            <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
            <param name="defaultNamespace">The default namespace to use for all the XML elements.</param>
            <returns>An <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of the specified type into XML documents,
            and deserialize XML documents into objects of the specified type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.CreateSerializer(System.Type,System.Type[])">
            <summary>
            Returns an <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of the specified type into XML documents,
            and deserialize XML documents into object of a specified type. If a property or field returns an array,
            the <paramref name="extraTypes"/> parameter specifies objects that can be inserted into the array.
            </summary>
            <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
            <param name="extraTypes">A <see cref="T:System.Type"/> array of additional object types to serialize.</param>
            <returns>An <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of the specified type into XML documents,
            and deserialize XML documents into object of a specified type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Returns an <see cref="T:System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of the specified type into XML
            documents, and deserialize XML documents into objects of the specified type. Each object to be serialized
            can itself contain instances of classes, which this overload can override with other classes.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"/>.</param>
            <returns>An <see cref="T:System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of the specified type into XML
            documents, and deserialize XML documents into objects of the specified type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            Returns an <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of the specified type into XML documents,
            and deserialize an XML document into object of the specified type. It also specifies the class to use as the
            XML root element.
            </summary>
            <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
            <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> that represents the XML root element.</param>
            <returns>An <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of the specified type into XML documents,
            and deserialize an XML document into object of the specified type.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of type <see cref="T:System.Object"/> into
            XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object"/>.
            Each object to be serialized can itself contain instances of classes, which this overload overrides with
            other classes. This overload also specifies the default namespace for all the XML elements and the class
            to use as the XML root element.
            </summary>
            <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
            <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"/> that extends or overrides the behavior
            of the class specified in the type parameter.</param>
            <param name="extraTypes">A <see cref="T:System.Type"/> array of additional object types to serialize.</param>
            <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> that defines the XML root element properties.</param>
            <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
            <returns>An <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of type <see cref="T:System.Object"/> into
            XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of type <see cref="T:System.Object"/> into
            XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object"/>.
            Each object to be serialized can itself contain instances of classes, which this overload overrides with
            other classes. This overload also specifies the default namespace for all the XML elements and the class
            to use as the XML root element.
            </summary>
            <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
            <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"/> that extends or overrides the behavior
            of the class specified in the type parameter.</param>
            <param name="extraTypes">A <see cref="T:System.Type"/> array of additional object types to serialize.</param>
            <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> that defines the XML root element properties.</param>
            <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
            <param name="location">The location of the types.</param>
            <returns>An <see cref="T:System.Xml.Serialization.XmlSerializer"/> that can serialize objects of type <see cref="T:System.Object"/> into
            XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.GetFromCacheOrCreateNew(Microsoft.BI.Common.XmlSerializationFactory.Key,System.Func{System.Xml.Serialization.XmlSerializer})">
            <summary>
            Returns an existing <see cref="T:System.Xml.Serialization.XmlSerializer"/> from the cache, if present; otherwise, creates a new <see cref="T:System.Xml.Serialization.XmlSerializer"/>,
            puts it in the cache at the specified key, and returns it.
            </summary>
            <param name="key">The <see cref="T:Microsoft.BI.Common.XmlSerializationFactory.Key"/> indicating the parameters passed to the <see cref="T:System.Xml.Serialization.XmlSerializer"/> constructor.</param>
            <param name="factory">The factory function used to create a new <see cref="T:System.Xml.Serialization.XmlSerializer"/>, if necessary.</param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/> in the cache, if present; otherwise, the result of calling the function specified
            by <paramref name="factory"/>.</returns>
        </member>
        <member name="T:Microsoft.BI.Common.XmlSerializationFactory.Key">
            <summary>
            Represents a key in the cache.
            </summary>
            <remarks>
            I could use a <c>Tuple</c>, but those become unwieldly with 6 parameters.
            </remarks>
        </member>
        <member name="M:Microsoft.BI.Common.XmlSerializationFactory.Key.NormalizeTypeList(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Normalizes a list of types by sorting them and removing duplicates.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Win32.AdvApi32NativeMethods">
            <summary>
            Contains native methods in advapi32.dll.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess">
            <summary>
            Contains values for the <c>DesiredAccess</c> parameter to <see cref="M:Microsoft.Win32.AdvApi32NativeMethods.OpenProcessToken(System.Runtime.InteropServices.SafeHandle,Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.STANDARD_RIGHTS_REQUIRED">
            <summary>
            Combines DELETE, READ_CONTROL, WRITE_DAC, and WRITE_OWNER access.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.STANDARD_RIGHTS_READ">
            <summary>
            Currently defined to equal READ_CONTROL.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.STANDARD_RIGHTS_WRITE">
            <summary>
            Currently defined to equal READ_CONTROL.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.STANDARD_RIGHTS_EXECUTE">
            <summary>
            Currently defined to equal READ_CONTROL.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ASSIGN_PRIMARY">
            <summary>
            Required to attach a primary token to a process. The SE_ASSIGNPRIMARYTOKEN_NAME privilege is also required to accomplish this task.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_DUPLICATE">
            <summary>
            Required to duplicate an access token.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_IMPERSONATE">
            <summary>
            Required to attach an impersonation access token to a process.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_QUERY">
            <summary>
            Required to query an access token.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_QUERY_SOURCE">
            <summary>
            Required to query the source of an access token.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ADJUST_PRIVILEGES">
            <summary>
            Required to enable or disable the privileges in an access token.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ADJUST_GROUPS">
            <summary>
            Required to adjust the attributes of the groups in an access token.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ADJUST_DEFAULT">
            <summary>
            Required to change the default owner, primary group, or DACL of an access token.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ADJUST_SESSIONID">
            <summary>
            Required to adjust the session ID of an access token. The SE_TCB_NAME privilege is required.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_READ">
            <summary>
            Combines <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.STANDARD_RIGHTS_READ"/> and <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_QUERY"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_WRITE">
            <summary>
            Combines <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.STANDARD_RIGHTS_WRITE"/>, <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ADJUST_PRIVILEGES"/>, <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ADJUST_GROUPS"/>, and <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ADJUST_DEFAULT"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_EXECUTE">
            <summary>
            Combines <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.STANDARD_RIGHTS_EXECUTE"/> and <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_IMPERSONATE"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess.TOKEN_ALL_ACCESS">
            <summary>
            Combines all possible access rights for a token.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.AdvApi32NativeMethods.PrivilegeAttributes">
            <summary>
            Contains values for the <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.LUID_AND_ATTRIBUTES.Attributes"/> field in <see cref="M:Microsoft.Win32.AdvApi32NativeMethods.OpenProcessToken(System.Runtime.InteropServices.SafeHandle,Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess,System.IntPtr@)"/>
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.PrivilegeAttributes.SE_PRIVILEGE_ENABLED_BY_DEFAULT">
            <summary>
            The privilege is enabled by default.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.PrivilegeAttributes.SE_PRIVILEGE_ENABLED">
            <summary>
            The privilege is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.PrivilegeAttributes.SE_PRIVILEGE_REMOVED">
            <summary>
            Used to remove a privilege. For details, see AdjustTokenPrivileges.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.PrivilegeAttributes.SE_PRIVILEGE_USED_FOR_ACCESS">
            <summary>
            The privilege was used to gain access to an object or service. This flag is used to identify the relevant privileges
            in a set passed by a client application that may contain unnecessary privileges.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.AdvApi32NativeMethods.LUID">
            <summary>
            A LUID is a 64-bit value guaranteed to be unique only on the system on which it was generated. The uniqueness of a locally unique identifier (LUID)
            is guaranteed only until the system is restarted.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.LUID.LowPart">
            <summary>
            Low-order bits.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.LUID.HighPart">
            <summary>
            High-order bits.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.AdvApi32NativeMethods.LUID_AND_ATTRIBUTES">
            <summary>
            The <see cref="T:Microsoft.Win32.AdvApi32NativeMethods.LUID_AND_ATTRIBUTES"/> structure represents a locally unique identifier (LUID) and its attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.LUID_AND_ATTRIBUTES.Luid">
            <summary>
            Specifies a <see cref="T:Microsoft.Win32.AdvApi32NativeMethods.LUID"/> value.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.LUID_AND_ATTRIBUTES.Attributes">
            <summary>
            Specifies attributes of the LUID. This value contains up to 32 one-bit flags. Its meaning is dependent on the definition and use of the LUID.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES">
            <summary>
            The <see cref="T:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES"/> structure contains information about a set of privileges for an access token.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES.PrivilegeCount">
            <summary>
            This must be set to the number of entries in the <see cref="F:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES.Privileges"/> array.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES.Privileges">
            <summary>
            Specifies an array of <see cref="T:Microsoft.Win32.AdvApi32NativeMethods.LUID_AND_ATTRIBUTES"/> structures.  Each structure contains the LUID and attributes of a privilege.
            To get the name of the privilege associated with a LUID, call the <c>LookupPrivilegeName</c> function, passing the address of
            the LUID as the value of the <c>lpLuid</c> parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.AdvApi32NativeMethods.AdjustTokenPrivileges(System.IntPtr,System.Boolean,Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES@,System.UInt32)">
            <summary>
            Enables or disables privileges in the specified access token. Enabling or disabling privileges in an
            access token requires TOKEN_ADJUST_PRIVILEGES access.
            </summary>
            <param name="TokenHandle">A handle to the access token that contains the privileges to be modified.</param>
            <param name="DisableAllPrivileges">Specifies whether the function disables all of the token's privileges.</param>
            <param name="NewState">A pointer to a <see cref="T:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES"/> structure that specifies an array of privileges and their attributes.</param>
            <param name="BufferLengthInBytes">Specifies the size, in bytes, of the buffer pointed to by the <paramref name="NewState"/> parameter.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.AdvApi32NativeMethods.AdjustTokenPrivileges(System.IntPtr,System.Boolean,Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES@,System.UInt32,Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES@,System.UInt32@)">
            <summary>
            Enables or disables privileges in the specified access token. Enabling or disabling privileges in an
            access token requires TOKEN_ADJUST_PRIVILEGES access.
            </summary>
            <param name="TokenHandle">A handle to the access token that contains the privileges to be modified.</param>
            <param name="DisableAllPrivileges">Specifies whether the function disables all of the token's privileges.</param>
            <param name="NewState">A pointer to a <see cref="T:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES"/> structure that specifies an array of privileges and their attributes.</param>
            <param name="BufferLengthInBytes">Specifies the size, in bytes, of the buffer pointed to by the <paramref name="NewState"/> parameter.</param>
            <param name="PreviousState">A pointer to a buffer that the function fills with a <see cref="T:Microsoft.Win32.AdvApi32NativeMethods.TOKEN_PRIVILEGES"/> structure that contains the previous
            state of any privileges that the function modifies. </param>
            <param name="ReturnLengthInBytes">A pointer to a variable that receives the required size, in bytes, of the buffer pointed to by the
            <paramref name="PreviousState"/> parameter.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.AdvApi32NativeMethods.LookupPrivilegeValue(System.String,System.String,Microsoft.Win32.AdvApi32NativeMethods.LUID@)">
            <summary>
            Opens the access token associated with a process.
            </summary>
            <param name="lpSystemName">A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved.
            If a null string is specified, the function attempts to find the privilege name on the local system.</param>
            <param name="lpName">A pointer to a null-terminated string that specifies the name of the privilege, as defined in the Winnt.h header file.</param>
            <param name="lpLuid">A pointer to a variable that receives the LUID by which the privilege is known on the system specified by the
            <paramref name="lpSystemName"/> parameter.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.AdvApi32NativeMethods.OpenProcessToken(System.Runtime.InteropServices.SafeHandle,Microsoft.Win32.AdvApi32NativeMethods.DesiredAccess,System.IntPtr@)">
            <summary>
            Opens the access token associated with a process.
            </summary>
            <param name="ProcessHandle">A handle to the process whose access token is opened. The process must have the PROCESS_QUERY_INFORMATION access permission.</param>
            <param name="DesiredAccess">Specifies an access mask that specifies the requested types of access to the access token.</param>
            <param name="TokenHandle">A pointer to a handle that identifies the newly opened access token when the function returns.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods">
            <summary>
            Contains native methods in fusion.dll.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS">
            <summary>
            Enum describing containing values that control enumeration of the GAC.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS.ASM_CACHE_ZAP">
            <summary>
            Enumerates the cache of precompiled assemblies by using Ngen.exe.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS.ASM_CACHE_GAC">
            <summary>
            Enumerates the GAC.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS.ASM_CACHE_DOWNLOAD">
            <summary>
            Enumerates the assemblies that have been downloaded on-demand or that have been shadow-copied.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.ASM_DISPLAY_FLAGS">
            <summary>
            <see cref="M:Microsoft.Win32.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,Microsoft.Win32.FusionNativeMethods.ASM_DISPLAY_FLAGS)"/>
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.ASM_NAME">
            <summary>
            The ASM_NAME enumeration property ID describes the valid names of the name-value pairs in an assembly name. 
            See the .NET Framework SDK for a description of these properties. 
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.CREATE_ASM_NAME_OBJ_FLAGS">
            <summary>
            <see cref="M:Microsoft.Win32.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,Microsoft.Win32.IAssemblyCacheItem@,System.String)"/>
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.CREATE_ASM_NAME_OBJ_FLAGS.CANOF_PARSE_DISPLAY_NAME">
            <summary>
            If this flag is specified, the szAssemblyName parameter is a full assembly name and is parsed to 
            the individual properties. If the flag is not specified, szAssemblyName is the "Name" portion of the assembly name.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.CREATE_ASM_NAME_OBJ_FLAGS.CANOF_SET_DEFAULT_VALUES">
            <summary>
            If this flag is specified, certain properties, such as processor architecture, are set to their default values.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.IASSEMBLYCACHE_INSTALL_FLAG">
            <summary>
            <see cref="M:Microsoft.Win32.IAssemblyCache.InstallAssembly(System.UInt32,System.String,Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE[])"/>
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.IASSEMBLYCACHE_UNINSTALL_DISPOSITION">
            <summary>
            <see cref="M:Microsoft.Win32.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE[],System.UInt32@)"/>
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.QUERYASMINFO_FLAG">
            <summary>
            <see cref="M:Microsoft.Win32.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO@)"/>
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE">
            <summary>
            Represents a reference that is made when an application has installed an assembly in the GAC.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE.cbSize">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE.dwFlags">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE.guidScheme">
            <summary>
            The entity that adds the reference.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE.szIdentifier">
            <summary>
            A unique string that identifies the application that installed the assembly.
            </summary>
            <remarks>
            <list type="table">
              <listheader>
                <term>GUID</term>
                <description></description>
              </listheader>
              <item>
                <term>FUSION_REFCOUNT_MSI_GUID</term>
                <description>
                The assembly is referenced by an application that has been installed by using Windows Installer. The szIdentifier
                field is set to MSI, and szNonCannonicalData is set to Windows Installer. This scheme must only be used by Windows
                Installer itself.
                </description>
                <term>FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID</term>
                <description>
                The assembly is referenced by an application that appears in Add/Remove Programs. The szIdentifier field is the token
                that is used to register the application with Add/Remove programs.
                </description>
                <term>FUSION_REFCOUNT_FILEPATH_GUID</term>
                <description>
                The assembly is referenced by an application that is represented by a file in the file system. The szIdentifier field
                is the path to this file.
                </description>
                <term>FUSION_REFCOUNT_OPAQUE_STRING_GUID</term>
                <description>
                The assembly is referenced by an application that is only represented by an opaque string. The szIdentifier is this
                opaque string. The GAC does not perform existence checking for opaque references when you remove this.
                </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE.szNonCannonicalData">
            <summary>
            A string that is only understood by the entity that adds the reference.  The GAC only stores this string.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO">
            <summary>
            The ASSEMBLY_INFO structure represents information about an assembly in the assembly cache.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO.cbAssemblyInfo">
            <summary>
            Size of the structure in bytes. Permits additions to the structure in future version of the .NET Framework.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO.dwAssemblyFlags">
            <summary>
            Indicates one or more of the ASSEMBLYINFO_FLAG_* bits.
            </summary>
            <remarks>
            Can have one of the following values
            <list type="table">
              <listheader>
                <term>GUID</term>
                <description></description>
              </listheader>
              <item>
                <term>ASSEMBLYINFO_FLAG__INSTALLED</term>
                <description>Indicates that the assembly is actually installed. Always set in current version of the .NET Framework.</description>
              </item>
              <item>
                <term>ASSEMBLYINFO_FLAG__PAYLOADRESIDENT</term>
                <description>Never set in the current version of the .NET Framework.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO.uliAssemblySizeInKB">
            <summary>
            The size of the files that make up the assembly in kilobytes (KB).
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO.pszCurrentAssemblyPathBuf">
            <summary>
            Pointer to a string buffer that holds the current path of the directory that contains the files that make up the assembly.
            The path must end with a zero.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO.cchBuf">
            <summary>
            Size of the buffer that the pszCurrentAssemblyPathBug field points to.
            </summary>
        </member>
        <member name="P:Microsoft.Win32.FusionNativeMethods.FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID">
            <summary>
            GUID value for element guidScheme in the struct <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Win32.FusionNativeMethods.FUSION_REFCOUNT_FILEPATH_GUID">
            <summary>
            GUID value for element guidScheme in the struct <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Win32.FusionNativeMethods.FUSION_REFCOUNT_OPAQUE_STRING_GUID">
            <summary>
            GUID value for element guidScheme in the struct <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Win32.FusionNativeMethods.FUSION_REFCOUNT_MSI_GUID">
            <summary>
            GUID value for element guidScheme in the struct <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.FusionNativeMethods.CreateAssemblyCache(Microsoft.Win32.IAssemblyCache@,System.UInt32)">
            <summary>
            The key entry point for reading the assembly cache.
            </summary>
            <param name="ppAsmCache">Pointer to return <see cref="T:Microsoft.Win32.IAssemblyCache"/>.</param>
            <param name="dwReserved">Must be 0.</param>
        </member>
        <member name="M:Microsoft.Win32.FusionNativeMethods.CreateAssemblyNameObject(Microsoft.Win32.IAssemblyName@,System.String,System.UInt32,System.IntPtr)">
            <summary>
            Get an instance of <see cref="T:Microsoft.Win32.IAssemblyName"/>.
            </summary>
            <param name="ppAssemblyNameObj">Pointer to a memory location that receives the <see cref="T:Microsoft.Win32.IAssemblyName"/> pointer that
            is created.</param>
            <param name="szAssemblyName">A string representation of the assembly name or of a full assembly reference that is
            determined by <paramref name="dwFlags"/>. The string representation can be <c>null</c>.</param>
            <param name="dwFlags">Zero or more of the bits that are defined in the <see cref="T:Microsoft.Win32.FusionNativeMethods.CREATE_ASM_NAME_OBJ_FLAGS"/> enumeration.</param>
            <param name="pvReserved">Must be <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.Win32.FusionNativeMethods.CreateAssemblyEnum(Microsoft.Win32.IAssemblyEnum@,System.IntPtr,Microsoft.Win32.IAssemblyName,Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS,System.IntPtr)">
            <summary>
            Get an <see cref="T:Microsoft.Win32.IAssemblyEnum"/>.
            </summary>
            <param name="pEnum">Pointer to a memory location that contains the <see cref="T:Microsoft.Win32.IAssemblyEnum"/> pointer.</param>
            <param name="pUnkReserved">Must be <c>null</c>.</param>
            <param name="pName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="dwFlags">Exactly one bit from the <see cref="T:Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS"/> enumeration.</param>
            <param name="pvReserved">Must be <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.Win32.FusionNativeMethods.CreateInstallReferenceEnum(Microsoft.Win32.IInstallReferenceEnum@,Microsoft.Win32.IAssemblyName,System.UInt32,System.IntPtr)">
            <summary>
            Get an <see cref="T:Microsoft.Win32.IInstallReferenceEnum"/>.
            </summary>
            <param name="ppRefEnum">A pointer to a memory location that receives the <see cref="T:Microsoft.Win32.IInstallReferenceEnum"/> pointer.</param>
            <param name="pName">The assembly name for which the references are enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.Win32.FusionNativeMethods.GetCachePath(Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Returns the storage location of the GAC. 
            </summary>
            <param name="dwCacheFlags">Exactly one of the bits defined in the <see cref="T:Microsoft.Win32.FusionNativeMethods.ASM_CACHE_FLAGS"/> enumeration.</param>
            <param name="pwzCachePath">Pointer to a buffer that is to receive the path of the GAC as a Unicode string.</param>
            <param name="pcchPath">Length of the <paramref name="pwzCachePath"/> buffer, in Unicode characters.</param>
        </member>
        <member name="T:Microsoft.Win32.IAssemblyCache">
            <summary>
            The top-level interface that provides access to the GAC.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE[],System.UInt32@)">
            <summary>
            Removes a reference to an assembly from the GAC.  If other applications hold no other references to the assembly, the files
            that make up the assembly are removed from the GAC. 
            </summary>
            <param name="dwFlags">No flags defined. Must be zero.</param>
            <param name="pszAssemblyName">The name of the assembly. A zero-ended Unicode string.</param>
            <param name="pRefData">A pointer to a <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/> structure. Although this is not recommended, 
            this parameter can be null. The assembly is installed without an application reference, or all existing application 
            references are gone.</param>
            <param name="pulDisposition">Pointer to an integer that indicates the action that is performed by the function.</param>
            <returns>
            The return values are defined as follows: 
            <list type="table">
              <listheader>
                <term>Return value</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>S_OK</term>
                <description>The assembly has been uninstalled.</description>
              </item>
              <item>
                <term>S_FALSE </term>
                <description>The operation succeeded, but the assembly was not removed from the GAC.  The reason is described in
                <paramref name="pulDisposition"/>.</description>
              </item>
            </list>
            </returns>
            <remarks>
            NOTE: If <paramref name="pulDisposition"/> is not null, it will contain one of the following values:
            <list type="table">
              <listheader>
                <term>Return value</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED</term>
                <description>The assembly files have been removed from the GAC.</description>
              </item>
              <item>
                <term>IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE</term>
                <description>An application is using the assembly. This value is returned on Microsoft Windows 95 and Microsoft Windows 98.</description>
              </item>
              <item>
                <term>IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED</term>
                <description>The assembly does not exist in the GAC.</description>
              </item>
              <item>
                <term>IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING</term>
                <description>Not used.</description>
              </item>
              <item>
                <term>IASSEMBLYCACHE_UNINSTALL_DISPOSITION_HAS_INSTALL_REFERENCES</term>
                <description>The assembly has not been removed from the GAC because another application reference exists.</description>
              </item>
              <item>
                <term>IASSEMBLYCACHE_UNINSTALL_DISPOSITION_REFERENCE_NOT_FOUND</term>
                <description>The reference that is specified in pRefData is not found in the GAC.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO@)">
            <summary>
            Retrieves information about an assembly from the GAC. 
            </summary>
            <param name="dwFlags">One of <see cref="F:Microsoft.Win32.FusionNativeMethods.QUERYASMINFO_FLAG.QUERYASMINFO_FLAG_VALIDATE"/> or
            <see cref="F:Microsoft.Win32.FusionNativeMethods.QUERYASMINFO_FLAG.QUERYASMINFO_FLAG_GETSIZE"/>:
            <list type="table">
              <listheader>
                <term>Flag</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>QUERYASMINFO_FLAG_VALIDATE</term>
                <description>Performs validation of the files in the GAC against the assembly manifest, including hash verification 
                and strong name signature verification.</description>
              </item>
              <item>
                <term>QUERYASMINFO_FLAG_GETSIZE</term>
                <description>Returns the size of all files in the assembly (disk footprint). If this is not specified, the 
                <see cref="F:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO.uliAssemblySizeInKB"/> field is not modified.</description>
              </item>
            </list>
            </param>
            <param name="pszAssemblyName">Name of the assembly that is queried.</param>
            <param name="pAsmInfo">Pointer to the returned <see cref="T:Microsoft.Win32.FusionNativeMethods.ASSEMBLY_INFO"/> structure.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,Microsoft.Win32.IAssemblyCacheItem@,System.String)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pvReserved"></param>
            <param name="ppAsmItem"></param>
            <param name="pszAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCache.CreateAssemblyScavenger(System.Object@)">
            <summary>
            Undocumented.
            </summary>
            <param name="ppAsmScavenger"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCache.InstallAssembly(System.UInt32,System.String,Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE[])">
            <summary>
            Adds a new assembly to the GAC. The assembly must be persisted in the file system and is copied to the GAC.
            </summary>
            <param name="dwFlags">At most, one of the bits of the <see cref="T:Microsoft.Win32.FusionNativeMethods.IASSEMBLYCACHE_INSTALL_FLAG"/> values can be specified:
            <list type="table">
              <listheader>
                <term>Flag</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>IASSEMBLY_INSTALL_FLAG_REFRESH</term>
                <description>If the assembly is already installed in the GAC and the file version numbers of the assembly being 
                installed are the same or later, the files are replaced.</description>
              </item>
              <item>
                <term>IASSEMBLY_INSTALL_FLAG_FORCE_REFRESH</term>
                <description>The files of an existing assembly are overwritten regardless of their version number.</description>
              </item>
            </list>
            </param>
            <param name="pszManifestFilePath"> A string pointing to the dynamic-linked library (DLL) that contains the assembly manifest. 
            Other assembly files must reside in the same directory as the DLL that contains the assembly manifest.</param>
            <param name="pRefData">A pointer to a <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/> that indicates the application on whose
            behalf the assembly is being installed. Although this is not recommended, this parameter can be null, but this leaves the
            assembly without any application reference.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="T:Microsoft.Win32.IAssemblyName">
            <summary>
            Represents an assembly name. An assembly name includes a predetermined set of name-value pairs.
            The assembly name is described in detail in the .NET Framework SDK.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.SetProperty(Microsoft.Win32.FusionNativeMethods.ASM_NAME,System.IntPtr,System.UInt32)">
            <summary>
            Adds a name-value pair to the assembly name, or, if a name-value pair  with the same name already exists, modifies
            or deletes the value of a name-value pair.
            </summary>
            <param name="PropertyId">The ID that represents the name part of the name-value pair that is to be added or to be
            modified. Valid property IDs are defined in the <see cref="T:Microsoft.Win32.FusionNativeMethods.ASM_NAME"/> enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that contains the value of the property.</param>
            <param name="cbProperty">The length of the <paramref name="pvProperty"/> buffer in bytes. If cbProperty is zero,
            the name-value pair is removed from the assembly name.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.GetProperty(Microsoft.Win32.FusionNativeMethods.ASM_NAME,System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves the value of a name-value pair in the assembly name that specifies the name.
            </summary>
            <param name="PropertyId">The ID that represents the name of the name-value pair whose value is to be retrieved.
            Specified property IDs are defined in the <see cref="T:Microsoft.Win32.FusionNativeMethods.ASM_NAME"/> enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that is to contain the value of the property.</param>
            <param name="pcbProperty">The length of the <paramref name="pvProperty"/> buffer, in bytes.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.Finalize">
            <summary>
            Freezes an assembly name. Additional calls to <see cref="M:Microsoft.Win32.IAssemblyName.SetProperty(Microsoft.Win32.FusionNativeMethods.ASM_NAME,System.IntPtr,System.UInt32)"/> are unsuccessful after this method has been called.
            </summary>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,Microsoft.Win32.FusionNativeMethods.ASM_DISPLAY_FLAGS)">
            <summary>
            Returns a string representation of the assembly name.
            </summary>
            <param name="szDisplayName">A pointer to a buffer that is to contain the display name. The display name is returned in Unicode.</param>
            <param name="pccDisplayName">The size of the buffer in characters (on input). The length of the returned display name (on return).</param>
            <param name="dwDisplayFlags">One or more of the bits defined in the <see cref="T:Microsoft.Win32.FusionNativeMethods.ASM_DISPLAY_FLAGS"/> enumeration:
            <list type="table">
              <listheader>
                <term>Flag</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>VERSION</term>
                <description>Includes the version number as part of the display name.</description>
              </item>
              <item>
                <term>CULTURE</term>
                <description>Includes the culture.</description>
              </item>
              <item>
                <term>PUBLIC_KEY_TOKEN</term>
                <description>Includes the public key token.</description>
              </item>
              <item>
                <term>PUBLIC_KEY</term>
                <description>Includes the public key.</description>
              </item>
              <item>
                <term>CUSTOM</term>
                <description>Includes the custom part of the assembly name.</description>
              </item>
              <item>
                <term>PROCESSORARCHITECTURE</term>
                <description>Includes the processor architecture.</description>
              </item>
              <item>
                <term>LANGUAGEID</term>
                <description>Includes the language ID.</description>
              </item>
            </list>
            </param>
            <returns>Whether the operation succeeded or not.</returns>
            <remarks>See library documentation at http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp
            for details.</remarks>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.BindToObject(System.Guid@,System.Object,System.Object,System.String,System.Int64,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Undocumented.
            </summary>
            <param name="refIID"></param>
            <param name="pUnkSink"></param>
            <param name="pUnkContext"></param>
            <param name="szCodeBase"></param>
            <param name="llFlags"></param>
            <param name="pvReserved"></param>
            <param name="cbReserved"></param>
            <param name="ppv"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.GetName(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            Returns the name part of the assembly name.
            </summary>
            <param name="lpcwBuffer">Size of the <paramref name="pwzName"/> buffer (on input). Length of the name (on return).</param>
            <param name="pwzName">Pointer to the buffer that is to contain the name part of the assembly name.</param>
            <returns>Whether the operation succeeded or not.</returns>
            <remarks>See library documentation at http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp
            for details.</remarks>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.GetVersion(System.UInt32@,System.UInt32@)">
            <summary>
            Returns the version part of the assembly name.
            </summary>
            <param name="pdwVersionHi">Pointer to a DWORD that contains the upper 32 bits of the version number.</param>
            <param name="pdwVersionLow">Pointer to a DWORD that contain the lower 32 bits of the version number.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.IsEqual(Microsoft.Win32.IAssemblyName,Microsoft.Win32.FusionNativeMethods.ASM_CMP_FLAGS)">
            <summary>
            Compares the assembly name to another assembly names.
            </summary>
            <param name="pName">The assembly name to compare to.</param>
            <param name="dwCmpFlags">Indicates which part of the assembly name to use in the comparison. 
            Values are one or more of the bits defined in the <see cref="T:Microsoft.Win32.FusionNativeMethods.ASM_CMP_FLAGS"/> enumeration.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyName.Clone(Microsoft.Win32.IAssemblyName@)">
            <summary>
            Creates a copy of an assembly name.
            </summary>
            <param name="pName">When this method returns, this parameter will contain a copy of the <see cref="T:Microsoft.Win32.IAssemblyName"/>.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="T:Microsoft.Win32.IAssemblyEnum">
            <summary>
            An interface for enumerating the assemblies in the GAC.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyEnum.GetNextAssembly(System.IntPtr,Microsoft.Win32.IAssemblyName@,System.UInt32)">
            <summary>
            Enumerates the assemblies in the GAC. 
            </summary>
            <param name="pvReserved">Must be null.</param>
            <param name="ppName">Pointer to a memory location that is to receive the interface pointer to the assembly 
            name of the next assembly that is enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyEnum.Reset">
            <summary>
            Undocumented. Best guess: reset the enumeration to the first assembly.
            </summary>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyEnum.Clone(Microsoft.Win32.IAssemblyEnum@)">
            <summary>
            Undocumented. Create a copy of the assembly enum that is independently enumerable.
            </summary>
            <param name="ppEnum">When this method returns, contains a copy of the assembly.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="T:Microsoft.Win32.IInstallReferenceItem">
            <summary>
            Represents a reference that has been set on an assembly in the GAC.  Instances of <see cref="T:Microsoft.Win32.IInstallReferenceItem"/> are
            returned by the <see cref="T:Microsoft.Win32.IInstallReferenceEnum"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.IInstallReferenceItem.GetReference(Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE[]@,System.UInt32,System.IntPtr)">
            <summary>
            Returns a <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/> structure. 
            </summary>
            <param name="ppRefData">A pointer to a <see cref="T:Microsoft.Win32.FusionNativeMethods.FUSION_INSTALL_REFERENCE"/> structure. The memory is allocated
            by the GetReference method and is freed when the <see cref="T:Microsoft.Win32.IInstallReferenceItem"/> is released. Callers must not hold
            a reference to this buffer after the <see cref="T:Microsoft.Win32.IInstallReferenceItem"/> object is released.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="T:Microsoft.Win32.IInstallReferenceEnum">
            <summary>
            The <see cref="T:Microsoft.Win32.IInstallReferenceEnum"/> interface enumerates all references that are set on an assembly in the GAC.
            </summary>
            <remarks>
            NOTE: References that belong to the assembly are locked for changes while those references are being enumerated. 
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.IInstallReferenceEnum.GetNextInstallReferenceItem(Microsoft.Win32.IInstallReferenceItem@,System.UInt32,System.IntPtr)">
            <summary>
            Returns the next reference information for an assembly. 
            </summary>
            <param name="ppRefItem">Pointer to a memory location that receives the <see cref="T:Microsoft.Win32.IInstallReferenceItem"/> pointer.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns>Whether the operation succeeded or not.</returns>
        </member>
        <member name="T:Microsoft.Win32.IAssemblyCacheItem">
            <summary>
            Undocumented. Probably only for internal use.
            <see cref="M:Microsoft.Win32.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,Microsoft.Win32.IAssemblyCacheItem@,System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCacheItem.CreateStream(System.UInt32,System.String,System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IStream@,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pszStreamName"></param>
            <param name="dwFormat"></param>
            <param name="dwFormatFlags"></param>
            <param name="ppIStream"></param>
            <param name="puliMaxSize"></param>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCacheItem.Commit(System.UInt32,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pulDisposition"></param>
        </member>
        <member name="M:Microsoft.Win32.IAssemblyCacheItem.AbortItem">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods">
            <summary>
            Contains native methods in kernel32.dll.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.AllocationType">
            <summary>
            Contains values for the <c>flAllocationType</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.COMMIT">
            <summary>
            Allocates memory charges (from the overall size of memory and the paging files on disk) for the
            specified reserved memory pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.RESERVE">
            <summary>
            Reserves a range of the process's virtual address space without allocating any actual physical
            storage in memory or in the paging file on disk.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.FREE">
            <summary>
            Reserved pages where a range of the process's virtual address space is reserved without any physical
            storage being allocated.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.RESET">
            <summary>
            Indicates that data in the memory range specified by <c>lpAddress</c> and <c>dwSize</c> is no longer
            of interest.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.TOP_DOWN">
            <summary>
            Allocates memory at the highest possible address.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.WRITE_WATCH">
            <summary>
            Causes the system to track pages that are written to in the allocated region.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.PHYSICAL">
            <summary>
            Reserves an address range that can be used to map Address Windowing Extensions (AWE) pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.RESET_UNDO">
            <summary>
            Indicates that the data in the specified memory range specified by <c>lpAddress</c> and <c>dwSize</c>
            is of interest to the caller and attempts to reverse the effects of <see cref="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.RESET"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.LARGE_PAGES">
            <summary>
            Allocates memory using large page support.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.CreationDisposition">
            <summary>
            Contains values for the <c>dwCreationDisposition</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CreateFile(System.String,Microsoft.Win32.Kernel32NativeMethods.FileAccess,Microsoft.Win32.Kernel32NativeMethods.FileShare,System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.CreationDisposition,Microsoft.Win32.Kernel32NativeMethods.FileAttributes,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.CreationDisposition.CREATE_ALWAYS">
            <summary>
            Creates a new file, always.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.CreationDisposition.CREATE_NEW">
            <summary>
            Creates a new file, only if it does not already exist.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.CreationDisposition.OPEN_ALWAYS">
            <summary>
            Opens a file, always.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.CreationDisposition.OPEN_EXISTING">
            <summary>
            Opens a file or device, only if it exists.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.CreationDisposition.TRUNCATE_EXISTING">
            <summary>
            Opens a file and truncates it so that its size is zero bytes, only if it exists.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FileAccess">
            <summary>
            Contains values for the <c>dwDesiredAccess</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CreateFile(System.String,Microsoft.Win32.Kernel32NativeMethods.FileAccess,Microsoft.Win32.Kernel32NativeMethods.FileShare,System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.CreationDisposition,Microsoft.Win32.Kernel32NativeMethods.FileAttributes,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.DELETE">
            <summary>
            The right to delete the object.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.READ_CONTROL">
            <summary>
            The right to read the information in the object's security descriptor, not including the information in the system access
            control list (SACL).
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.WRITE_DAC">
            <summary>
            The right to modify the discretionary access control list (DACL) in the object's security descriptor.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.WRITE_OWNER">
            <summary>
            The right to change the owner in the object's security descriptor.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.SYNCHRONIZE">
            <summary>
            The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state.
            Some object types do not support this access right.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.STANDARD_RIGHTS_REQUIRED">
            <summary>
            Combines <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.DELETE"/>, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.READ_CONTROL"/>, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.WRITE_DAC"/>, and <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.WRITE_OWNER"/> access.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.STANDARD_RIGHTS_READ">
            <summary>
            Includes <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.READ_CONTROL"/>, which is the right to read the information in the file or directory object's security
            descriptor. This does not include the information in the SACL.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.STANDARD_RIGHTS_WRITE">
            <summary>
            Same as <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.STANDARD_RIGHTS_READ"/>
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.STANDARD_RIGHTS_EXECUTE">
            <summary>
            Currently defined to equal <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.READ_CONTROL"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.STANDARD_RIGHTS_ALL">
            <summary>
            Combines <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.DELETE"/>, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.READ_CONTROL"/>, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.WRITE_DAC"/>, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.WRITE_OWNER"/>, and
            <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.SYNCHRONIZE"/> access.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_READ_DATA">
            <summary>
            For a file object, the right to read the corresponding file data. For a directory object, the right to read the corresponding
            directory data.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_LIST_DIRECTORY">
            <summary>
            For a directory, the right to list the contents of the directory.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_WRITE_DATA">
            <summary>
            For a file object, the right to write data to the file. For a directory object, the right to create a file in the directory
            (<see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_ADD_FILE"/>).
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_ADD_FILE">
            <summary>
            For a directory, the right to create a file in the directory.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_APPEND_DATA">
            <summary>
            For a file object, the right to append data to the file. (For local files, write operations will not overwrite existing
            data if this flag is specified without <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_WRITE_DATA"/>.) For a directory object, the right to create a
            subdirectory (<see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_ADD_SUBDIRECTORY"/>).
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_ADD_SUBDIRECTORY">
            <summary>
            For a directory, the right to create a subdirectory.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_CREATE_PIPE_INSTANCE">
            <summary>
            For a named pipe, the right to create a pipe.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_READ_EA">
            <summary>
            The right to read extended file attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_WRITE_EA">
            <summary>
            The right to write extended file attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_EXECUTE">
            <summary>
            For a native code file, the right to execute the file. This access right given to scripts may cause the script to be executable,
            depending on the script interpreter.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_TRAVERSE">
            <summary>
            For a directory, the right to traverse the directory. By default, users are assigned the BYPASS_TRAVERSE_CHECKING privilege,
            which ignores the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_TRAVERSE"/> access right.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_DELETE_CHILD">
            <summary>
            For a directory, the right to delete a directory and all the files it contains, including read-only files.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_READ_ATTRIBUTES">
            <summary>
            The right to read file attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_WRITE_ATTRIBUTES">
            <summary>
            The right to write file attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAccess.FILE_ALL_ACCESS">
            <summary>
            All possible access rights for a file.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FileAttributes">
            <summary>
            Contains values for the <c>dwFlagsAndAttributes</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CreateFile(System.String,Microsoft.Win32.Kernel32NativeMethods.FileAccess,Microsoft.Win32.Kernel32NativeMethods.FileShare,System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.CreationDisposition,Microsoft.Win32.Kernel32NativeMethods.FileAttributes,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_ARCHIVE">
            <summary>
            The file should be archived.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED">
            <summary>
            The file or directory is encrypted.  For a file, this means that all data in the file is encrypted. For a directory,
            this means that encryption is the default for newly created files and subdirectories.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_HIDDEN">
            <summary>
            The file is hidden.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_NORMAL">
            <summary>
            The file does not have other attributes set.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_OFFLINE">
            <summary>
            The data of a file is not immediately available.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_READONLY">
            <summary>
            The file is read only.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_SYSTEM">
            <summary>
            The file is part of or used exclusively by an operating system.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_ATTRIBUTE_TEMPORARY">
            <summary>
            The file is being used for temporary storage.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_BACKUP_SEMANTICS">
            <summary>
            The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides
            file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_DELETE_ON_CLOSE">
            <summary>
            The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other
            open or duplicated handles.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_NO_BUFFERING">
            <summary>
            The file or device is being opened with no system caching for data reads and writes. This flag does not affect hard disk caching
            or memory mapped files.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_OPEN_NO_RECALL">
            <summary>
            The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local
            storage.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_OPEN_REPARSE_POINT">
            <summary>
            Normal reparse point processing will not occur; <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CreateFile(System.String,Microsoft.Win32.Kernel32NativeMethods.FileAccess,Microsoft.Win32.Kernel32NativeMethods.FileShare,System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.CreationDisposition,Microsoft.Win32.Kernel32NativeMethods.FileAttributes,System.IntPtr)"/> will attempt to open the reparse point. When a file is
            opened, a file handle is returned, whether or not the filter that controls the reparse point is operational.  This flag cannot be
            used with the CREATE_ALWAYS flag. If the file is not a reparse point, then this flag is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_OVERLAPPED">
            <summary>
            The file or device is being opened or created for asynchronous I/O. When subsequent I/O operations are completed on this handle,
            the event specified in the OVERLAPPED structure will be set to the signaled state.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_POSIX_SEMANTICS">
            <summary>
            Access will occur according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems
            that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications
            that are written for MS-DOS or 16-bit Windows.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_RANDOM_ACCESS">
            <summary>
            Access is intended to be random. The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_SESSION_AWARE">
            <summary>
            The file or device is being opened with session awareness. If this flag is not specified, then per-session devices (such as a redirected
            USB device) cannot be opened by processes running in session 0. This flag has no effect for callers not in session 0.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_SEQUENTIAL_SCAN">
            <summary>
            Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileAttributes.FILE_FLAG_WRITE_THROUGH">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FileShare">
            <summary>
            Contains values for the <c>dwShareMode</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CreateFile(System.String,Microsoft.Win32.Kernel32NativeMethods.FileAccess,Microsoft.Win32.Kernel32NativeMethods.FileShare,System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.CreationDisposition,Microsoft.Win32.Kernel32NativeMethods.FileAttributes,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileShare.NONE">
            <summary>
            Prevents other processes from opening a file or device if they request delete, read, or write access.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileShare.FILE_SHARE_READ">
            <summary>
            Enables subsequent open operations on a file or device to request read access.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileShare.FILE_SHARE_WRITE">
            <summary>
            Enables subsequent open operations on a file or device to request write access.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FileShare.FILE_SHARE_DELETE">
            <summary>
            Enables subsequent open operations on a file or device to request delete access.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags">
            <summary>
            Contains values for the <c>dwFlags</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.GetFinalPathNameByHandle(System.IntPtr,System.Text.StringBuilder,System.Int32,Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags.FILE_NAME_NORMALIZED">
            <summary>
            Return the normalized drive name.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags.FILE_NAME_OPENED">
            <summary>
            Return the opened file name (not normalized).
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags.VOLUME_NAME_DOS">
            <summary>
            Return the path with the drive letter.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags.VOLUME_NAME_GUID">
            <summary>
            Return the path with a volume GUID path instead of the drive name.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags.VOLUME_NAME_NONE">
            <summary>
            Return the path with no drive information.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags.VOLUME_NAME_NT">
            <summary>
            Return the path with the volume device path.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags">
            <summary>
            Contains values for the <c>dwFindNLSStringFlags</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringEx(System.String,Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.FIND_STARTSWITH">
            <summary>
            Test to find out if the string starts with another string value.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.FIND_ENDSWITH">
            <summary>
            Test to find out if the string ends with another string value.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.FIND_FROMSTART">
            <summary>
            Search the string, starting with the first character of the string.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.FIND_FROMEND">
            <summary>
            Search the string in the reverse direction, starting with the last character of the
            string.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.NORM_IGNORECASE">
            <summary>
            Ignore case in the search.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.NORM_IGNORENONSPACE">
            <summary>
            Ignore nonspacing characters.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.NORM_IGNORESYMBOLS">
            <summary>
            Ignore symbols and punctuation.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.LINGUISTIC_IGNORECASE">
            <summary>
            Ignore case in the search, as linguistically appropriate.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.LINGUISTIC_IGNOREDIACRITIC">
            <summary>
            Ignore diacritics, as linguistically appropriate.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.NORM_IGNOREKANATYPE">
            <summary>
            Do not differentiate between hiragana and katakana characters. Corresponding
            hiragana and katakana characters compare as equal.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.NORM_IGNOREWIDTH">
            <summary>
            Ignore the difference between half-width and full-width characters, for example,
            Ｃａｔ == Cat.  The full-width form is a formatting distinction used in Chinese
            and Japanese scripts.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags.NORM_LINGUISTIC_CASING">
            <summary>
            Use linguistic rules for casing, instead of file system rules (default).
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags">
            <summary>
            Contains values for the <c>dwFlags</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.FormatMessage(Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr@,System.Int32,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER">
            <summary>
            The function allocates a buffer large enough to hold the formatted message.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags.FORMAT_MESSAGE_ARGUMENT_ARRAY">
            <summary>
            The arguments parameter is an array of string values that represent the arguments instead of a va_list structure.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags.FORMAT_MESSAGE_FROM_HMODULE">
            <summary>
            The lpSource parameter contains the list of resources to search.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags.FORMAT_MESSAGE_FROM_STRING">
            <summary>
            The lpSource parameter is a string containing the message definition.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags.FORMAT_MESSAGE_FROM_SYSTEM">
            <summary>
            The function should search the system message-table resource for the requested message.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags.FORMAT_MESSAGE_IGNORE_INSERTS">
            <summary>
            Ignore insert sequences in message definition.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK">
            <summary>
            The function ignores regular line breaks in the message definition text. The function stores hard-coded line breaks
            in the message definition text into the output buffer. The function generates no new line breaks.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FreeType">
            <summary>
            Contains values for the <c>dwFreeType</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualFree(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.FreeType)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FreeType.DECOMMIT">
            <summary>
            Decommits the specified region of committed pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FreeType.RELEASE">
            <summary>
            Releases the specified region of pages.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FsctlFunctionCodes">
            <summary>
            Contains values for the <c>dwIoControlCode</c> parameter in <see cref="M:Microsoft.Win32.Kernel32NativeMethods.DeviceIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.Win32.Kernel32NativeMethods.FsctlFunctionCodes,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags">
            <summary>
            Contains values for the <c>lpModuleName</c> parameter in <see cref="M:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleEx(Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags,System.String,System.IntPtr@)"/>
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags.GET_MODULE_HANDLE_EX_FLAG_PIN">
            <summary>
            The module stays loaded until the process is terminated, no matter how many times <c>FreeLibrary</c> is called.
            </summary>
            <remarks>
            This option cannot be used with <see cref="F:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags.GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags.GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT">
            <summary>
            The reference count for the module is not incremented. This option is equivalent to the behavior of <c>GetModuleHandle</c>.
            Do not pass the retrieved module handle to the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.FreeLibrary(System.IntPtr)"/> function; doing so can cause the DLL to be unmapped
            </summary>
            <remarks>
            This option cannot be used with <see cref="F:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags.GET_MODULE_HANDLE_EX_FLAG_PIN"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags.GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS">
            <summary>
            The <c>lpModuleName</c> parameter is an address in the module.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.HeapFlags">
            <summary>
            Contains values for the <c>flOptions</c> parameter in <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_NO_SERIALIZATION">
            <summary>
            Serialized access is not used when the heap functions access this heap.
            </summary>
            <remarks>
            <para>
            This option applies to all subsequent heap function calls.  Alternatively, you can specify this option on individual heap
            function calls.
            </para>
            <para>
            The low-fragmentation heap (LFH) cannot be enabled for a heap created with this option.
            </para>
            <para>
            A heap created with this option cannot be locked.  Attempting to do so will result in undefined behavior.
            </para>
            <para>
            If <see cref="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_NO_SERIALIZATION"/> is not specified, the heap serializes access within the calling process.  Serialization
            ensures mutual exclusion when two or more threads attempt simultaneously to allocate or free blocks from the same heap.
            There is a small performance cost to serialization, but it must be used whenever multiple threads allocate and free memory
            from the same heap.  The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapLock(System.IntPtr)"/> and <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapUnlock(System.IntPtr)"/> functions can be used to block and permit access
            to a serialized heap.
            </para>
            <para>
            Setting <see cref="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_NO_SERIALIZATION"/> eliminates mutual exclusion on the heap.  Without serialization, two or more threads
            that use the same heap handle might attempt to allocate or free memory simultaneously, which may cause corruption in the heap.
            Therefore, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_NO_SERIALIZATION"/> can safely be used only in the following situations:
            <list type="bullet">
              <item>The process has only one thread.</item>
              <item>The process has multiple threads, but only one thread calls the heap functions for a specific heap.</item>
              <item>The process has multiple threads, and the application provides its own mechanism for mutual exclusion to a specific heap.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_GENERATE_EXCEPTIONS">
            <summary>
            The system raises an exception to indicate failure (for example, an out-of-memory condition) for calls to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/>
            and <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapReAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*,System.IntPtr)"/> instead of returning <c>null</c>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_REALLOC_IN_PLACE_ONLY">
            <summary>
            There can be no movement when reallocating a memory block.  If this value is not specified, the function may move the block to a new
            location.  If this value is specified and the block cannot be resized without moving, the function fails, leaving the original memory
            block unchanged.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_ZERO_MEMORY">
            <summary>
            If the reallocation request is for a larger size, the additional region of memory beyond the original size be initialized to zero.
            The contents of the memory block up to its original size are unaffected.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_CREATE_ENABLE_EXECUTE">
            <summary>
            All memory blocks that are allocated from this heap allow code execution, if the hardware enforces data execution prevention.
            </summary>
            <remarks>
            Use this flag heap in applications that run code from the heap. If <see cref="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_CREATE_ENABLE_EXECUTE"/> is not specified
            and an application attempts to run code from a protected page, an <see cref="T:System.AccessViolationException"/> will be thrown.
            </remarks>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags">
            <summary>
            Contains values for the <c>uFlags</c> parameter in <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalAlloc(Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags,System.Int32)"/>
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_FIXED">
            <summary>
            Allocates fixed memory. The return value is a pointer to the memory object.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_MOVABLE">
            <summary>
            Allocates movable memory.
            </summary>
            <remarks>
            <para>
            Memory blocks are never moved in physical memory, but they can be moved within the default heap.
            </para>
            <para>
            The return value is a handle to the memory object. To translate the handle to a pointer, use the <c>LocalLock</c> function.
            </para>
            <para>
            This value cannot be combined with <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_FIXED"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_ZEROINIT">
            <summary>
            Initializes memory contents to zero.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LHND">
            <summary>
            Combines <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_MOVABLE"/> and <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_ZEROINIT"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LPTR">
            <summary>
            Combines <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_FIXED"/> and <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_ZEROINIT"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.NONZEROLHND">
            <summary>
            Same as <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_MOVABLE"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.NONZEROLPTR">
            <summary>
            Same as <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_FIXED"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection">
            <summary>
            Contains values for the <c>flProtect</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.NOACCESS">
            <summary>
            Disables all access to the committed region of pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.READONLY">
            <summary>
            Enables read-only access to the committed region of pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.READWRITE">
            <summary>
            Enables read-only or read/write access to the committed region of pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.WRITECOPY">
            <summary>
            Enables read-only or copy-on-write access to a mapped view of a file mapping object.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.EXECUTE">
            <summary>
            Enables execute access to the committed region of pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.EXECUTE_READ">
            <summary>
            Enables execute or read-only access to the committed region of pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.EXECUTE_READWRITE">
            <summary>
            Enables execute, read-only, or read/write access to the committed region of pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.EXECUTE_WRITECOPY">
            <summary>
            Enables execute, read-only, or copy-on-write access to a mapped view of a file mapping object.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.GUARD">
            <summary>
            Pages in the region become guard pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.NOCACHE">
            <summary>
            Sets all pages to be non-cachable.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.WRITECOMBINE">
            <summary>
            Sets all pages to be write-combined. 
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.SymbolicLinkFlags">
            <summary>
            Contains values for the <c>dwFlags</c> parameter to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CreateSymbolicLink(System.String,System.String,Microsoft.Win32.Kernel32NativeMethods.SymbolicLinkFlags)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.SymbolicLinkFlags.NONE">
            <summary>
            The link target is a file.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.SymbolicLinkFlags.SYMBOLIC_LINK_FLAG_DIRECTORY">
            <summary>
            The link target is a directory.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION">
            <summary>
            Contains information that the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION@)"/> function retrieves.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.FileAttributes">
            <summary>
            The file attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.CreationTime">
            <summary>
            A <see cref="T:Microsoft.Win32.Kernel32NativeMethods.FILETIME"/> structure that specifies when a file or directory is created.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.LastAccessTime">
            <summary>
            A <see cref="T:Microsoft.Win32.Kernel32NativeMethods.FILETIME"/> structure. For a file, the structure specifies the last time that a file is read from
            or written to. For a directory, the structure specifies when the directory is created.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.LastWriteTime">
            <summary>
            A <see cref="T:Microsoft.Win32.Kernel32NativeMethods.FILETIME"/> structure.  For a file, the structure specifies the last time that a file is written to.
            For a directory, the structure specifies when the directory is created.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.VolumeSerialNumber">
            <summary>
            THe serial number of the volume that contains the file.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.FileSizeHigh">
            <summary>
            The high-order part of the file size.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.FileSizeLow">
            <summary>
            The low-order part of the file size.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.NumberOfLinks">
            <summary>
            The number of links to the file.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.FileIndexHigh">
            <summary>
            The high-order part of a unique identifier that is associated with a file.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION.FileIndexLow">
            <summary>
            The low-order part of a unique identifier that is associated with a file.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.FILETIME">
            <summary>
            Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).  This structure is a 64-bit value.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FILETIME.DateTimeLow">
            <summary>
            Specifies the low 32 bits of the file time.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.FILETIME.DateTimeHigh">
            <summary>
            Specifies the high 32 bits of the file time.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION">
            <summary>
            Contains information about a range of pages in the virtual address space of a process.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.BaseAddress">
            <summary>
            A pointer to the base address of the region of pages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.AllocationBase">
            <summary>
            A pointer to the base address of a range of pages allocated by the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> function. The page pointed to by the
            <see cref="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.BaseAddress"/> member is contained within this allocation range.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.AllocationProtect">
            <summary>
            The memory protection option when the region was initially allocated.  This member can be one of the memory protection constants or
            0 if the caller does not have access.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.RegionSize">
            <summary>
            The size of the region beginning at the base address in which all pages have identical attributes, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.State">
            <summary>
            The state of the pages in the region.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.Protect">
            <summary>
            The access protection of the pages in the region. This member is one of the values listed for the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.AllocationProtect"/>
            member.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION.Type">
            <summary>
            The type of pages in the region.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER">
            <summary>
            Contains reparse point data for a Microsoft reparse point.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.ReparseTag">
            <summary>
            Reparse point tag. Must be a Microsoft reparse point tag.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.ReparseDataLength">
            <summary>
            Size, in bytes, of the reparse data in the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.SubstituteNameOffset">
            <summary>
            Offset, in bytes, of the substitute name string in the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PathBuffer"/> array.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.SubstituteNameLength">
            <summary>
            Length, in bytes, of the substitute name string.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PrintNameOffset">
            <summary>
            Offset, in bytes, of the print name string in the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PathBuffer"/> array.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PrintNameLength">
            <summary>
            Length, in bytes, of the print name string.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PathBuffer">
            <summary>
            The path string contains the substitute name string and print name string.
            </summary>
            <remarks>
            The substitute name and print name strings can appear in any order in the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PathBuffer"/>.  To locate the
            substitute name and print name strings, use the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.SubstituteNameOffset"/>, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.SubstituteNameLength"/>,
            <see cref="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PrintNameOffset"/>, and <see cref="F:Microsoft.Win32.Kernel32NativeMethods.REPARSE_DATA_BUFFER.PrintNameLength"/> members.
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.CheckRemoteDebuggerPresent(System.Runtime.InteropServices.SafeHandle,System.Boolean@)">
            <summary>
            Determines whether the specified process is being debugged.
            </summary>
            <param name="hProcess">A handle to the process.</param>
            <param name="isDebuggerPresent">A pointer to a variable that the function sets to <c>true</c> if the specified process is being debugged,
            or <c>false</c> otherwise.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The "remote" in <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CheckRemoteDebuggerPresent(System.Runtime.InteropServices.SafeHandle,System.Boolean@)"/> does not imply that the debugger necessarily resides on a different
            computer; instead, it indicates that the debugger resides in a separate and parallel process. Use the IsDebuggerPresent function to detect
            whether the calling process is running under the debugger.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.CheckRemoteDebuggerPresent(System.IntPtr,System.Boolean@)">
            <summary>
            Determines whether the specified process is being debugged.
            </summary>
            <param name="hProcess">A handle to the process.</param>
            <param name="isDebuggerPresent">A pointer to a variable that the function sets to <c>true</c> if the specified process is being debugged,
            or <c>false</c> otherwise.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The "remote" in <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CheckRemoteDebuggerPresent(System.IntPtr,System.Boolean@)"/> does not imply that the debugger necessarily resides on a different
            computer; instead, it indicates that the debugger resides in a separate and parallel process. Use the IsDebuggerPresent function to detect
            whether the calling process is running under the debugger.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.CompareStringEx(System.String,Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Compares two Unicode (wide character) strings, for a locale specified by name.
            </summary>
            <param name="lpLocaleName">Pointer to a locale name.</param>
            <param name="dwFindNLSStringFlags">Flags that indicate how the function compares the two
            strings.</param>
            <param name="lpString1">Pointer to the first string to compare.</param>
            <param name="cchCount1">Length of the string indicated by <paramref name="lpString1"/>,
            or -1 to calculate it automatically (null-terminated strings only).</param>
            <param name="lpString2">Pointer to the second string to compare.</param>
            <param name="cchCount2">Length of the string indicated by <paramref name="lpString2"/>,
            or -1 to calculate it automatically (null-terminated strings only).</param>
            <param name="lpVersionInformation">Reserved, must be <c>IntPtr.Zero</c>.</param>
            <param name="lpReserved">Reserved, must be <c>IntPtr.Zero</c>.</param>
            <param name="lParam">Reserved, must be <c>IntPtr.Zero</c>.</param>
            <returns>1 if the lexical value of <paramref name="lpString1"/> is less than <paramref name="lpString2"/>;
            2 if the lexical value of <paramref name="lpString1"/> is equivalent to <paramref name="lpString2"/>;
            3 if the lexiacal value of <paramref name="lpString1"/> is greater than <paramref name="lpString2"/>; or
            0 if the comparison fails.</returns>
            <remarks>
            Subtract 2 from a non-zero return value to get the normal convention of return values from a <c>CompareTo</c>
            method.
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.CreateFile(System.String,Microsoft.Win32.Kernel32NativeMethods.FileAccess,Microsoft.Win32.Kernel32NativeMethods.FileShare,System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.CreationDisposition,Microsoft.Win32.Kernel32NativeMethods.FileAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device.</param>
            <param name="dwShareMode">The requested sharing mode of the file or device.</param>
            <param name="SecurityAttributes">A pointer to a SECURITY_ATTRIBUTES structure.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags.</param>
            <param name="hTemplateFile">A valid handle to a template file with the GENERIC_READ access right.</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.CreateHardLink(System.String,System.String,System.IntPtr)">
            <summary>
            Establishes a hard link between an existing file and a new file.
            </summary>
            <param name="lpFileName">The name of the new file.</param>
            <param name="lpExistingFileName">The name of the existing file.</param>
            <param name="lpSecurityAttributes">Reserved: must be <c>null</c>.</param>
            <returns><c>true</c> if the function succeeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.CreateSymbolicLink(System.String,System.String,Microsoft.Win32.Kernel32NativeMethods.SymbolicLinkFlags)">
            <summary>
            Creates a symbolic link.
            </summary>
            <param name="lpSymlinkFileName">The symbolic link to be created.</param>
            <param name="lpTargetFileName">The name of the target for the symbolic link to be created.</param>
            <param name="dwFlags">Indicates whether the link target, <paramref name="lpTargetFileName"/>, is a directory.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.DeviceIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.Win32.Kernel32NativeMethods.FsctlFunctionCodes,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
            </summary>
            <param name="hDevice">A handle to the device on which the operation is to be performed. The device is typically a volume, directory,
            file, or stream. To retrieve a device handle, use the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.CreateFile(System.String,Microsoft.Win32.Kernel32NativeMethods.FileAccess,Microsoft.Win32.Kernel32NativeMethods.FileShare,System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.CreationDisposition,Microsoft.Win32.Kernel32NativeMethods.FileAttributes,System.IntPtr)"/> function.</param>
            <param name="dwIoControlCode">The control code for the operation. This value identifies the specific operation to be performed and
            the type of device on which to perform it.</param>
            <param name="lpInBuffer">A pointer to the input buffer that contains the data required to perform the operation. The format of this
            data depends on the value of the <paramref name="dwIoControlCode"/> parameter.</param>
            <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
            <param name="lpOutBuffer">A pointer to the output buffer that is to receive the data returned by the operation. The format of this
            data depends on the value of the <paramref name="dwIoControlCode "/> parameter.</param>
            <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
            <param name="lpBytesReturned">A pointer to a variable that receives the size of the data stored in the output buffer, in bytes.</param>
            <param name="lpOverlapped">A pointer to an OVERLAPPED structure.</param>
            <returns>If the operation completes successfully, the return value is <c>true</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.FindNLSStringEx(System.String,Microsoft.Win32.Kernel32NativeMethods.FindNLSStringFlags,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Locates a Unicode string (wide characters) or its equivalent in another Unicode string
            for a locale specified by name.
            </summary>
            <param name="lpLocaleName">Pointer to a locale name.</param>
            <param name="dwFindNLSStringFlags">Flags specifying details of the find operation.</param>
            <param name="lpStringSource">Pointer to the source string, in which the function searches
            for the string specified by <paramref name="lpStringValue"/>.</param>
            <param name="cchSource">Size, in characters excluding the terminating null character, of
            the string indicated by <paramref name="lpStringSource"/>, or -1 to calculate it
            automatically (null-terminated strings only).</param>
            <param name="lpStringValue">Pointer to the search string, for which the function searches
            in the source string.</param>
            <param name="cchValue">Size, in characters excluding the terminating null character, of
            the string indicated by <paramref name="lpStringValue"/>, or -1 to calculate it
            automatically (null-terminated strings only).</param>
            <param name="pcchFound">Pointer to a buffer containing the length of the string that the
            function finds.</param>
            <param name="lpVersionInformation">Reserved, must be <c>IntPtr.Zero</c>.</param>
            <param name="lpReserved">Reserved, must be <c>IntPtr.Zero</c>.</param>
            <param name="sortHandle">Reserved, must be <c>IntPtr.Zero</c>.</param>
            <returns>A zero-based index into <paramref name="lpStringSource"/> if successful, or
            -1 if not found.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.FormatMessage(Microsoft.Win32.Kernel32NativeMethods.FormatMessageFlags,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr@,System.Int32,System.IntPtr)">
            <summary>
            Formats a message string.
            </summary>
            <param name="dwFlags">The formatting options, and how to interpret the <paramref name="lpSource"/> parameter.</param>
            <param name="lpSource">The location of the message definition.</param>
            <param name="dwMessageId">The message identifier for the requested message.</param>
            <param name="dwLanguageId">The language identifier for the requested message.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the null-terminated string that specifies the formatted message.</param>
            <param name="nSize">The size of the output buffer, in TCHARs.</param>
            <param name="pArguments">An array of values that are use as insert values in the formatted message.</param>
            <returns>If the function succeeds, the return value is the number of TCHARs stored in the output buffer, excluding the
            terminating null character.  If the function fails, the return value is zero.  To get extended error information, call
            GetLastError.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module
            is unloaded from the address space of the calling process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module. The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LoadLibrary(System.String)"/>, <c>LoadLibrarEx</c>, <c>GetModuleHandle</c>, or <c>GetModuleHandleEx</c>
            functions returns this handle.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.GetCurrentProcess">
            <summary>
            Retrieves a pseudo handle for the current process.
            </summary>
            <returns>The return value is a pseudo handle to the current process.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION@)">
            <summary>
            Retrieves file information for the specified file.
            </summary>
            <param name="hFile">A handle to the file that contains the information to be retrieved.</param>
            <param name="lpFileInformation">A pointer to a <see cref="T:Microsoft.Win32.Kernel32NativeMethods.BY_HANDLE_FILE_INFORMATION"/> structure that receives the file information.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.GetFinalPathNameByHandle(System.IntPtr,System.Text.StringBuilder,System.Int32,Microsoft.Win32.Kernel32NativeMethods.FinalPathNameFlags)">
            <summary>
            Retrieves the final path for the specified file.
            </summary>
            <param name="hFile">A handle to a file or directory.</param>
            <param name="lpszFilePath">A pointer to a buffer that receives the path of hFile.</param>
            <param name="cchFilePath">The size of <paramref name="lpszFilePath"/> , in TCHARs. This value does not include
            a NULL termination character.</param>
            <param name="dwFlags">The type of result to return.</param>
            <returns>A final path is the path that is returned when a path is fully resolved.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleEx(Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags,System.String,System.IntPtr@)">
            <summary>
            Retrieves a module handle for the specified module and increments the module's reference count unless
            <see cref="F:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags.GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT"/> is specified. The module must have been loaded
            by the calling process.
            </summary>
            <param name="dwFlags">One of the <see cref="T:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags"/> values.</param>
            <param name="lpModuleName">The name of the loaded module (either a .dll or .exe file), or an address in the module (if
            <paramref name="dwFlags"/> is <see cref="F:Microsoft.Win32.Kernel32NativeMethods.GetModuleHandleExFlags.GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS"/>).</param>
            <param name="phModule">A handle to the specified module. If the function fails, this parameter is <c>null</c>.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.GetProcessHeap">
            <summary>
            Retrieves a handle to the default heap of the calling process.  This handle can then be used in subsequent calls to the heap functions.
            </summary>
            <returns>A handle to the calling process' heap, or <c>null</c> if the function fails.</returns>
            <remarks>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.GetProcessHeap"/> function obtains a handle to the default heap for the calling process. A process can use this handle
            to allocate memory from the process heap without having to first create a private heap using the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/> function.
            </para>
            <para>
            To enable the low-fragmentation heap for the default heap of the process, call the <c>HeapSetInformation</c> function with the
            handle returned by <see cref="M:Microsoft.Win32.Kernel32NativeMethods.GetProcessHeap"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)">
            <summary>
            Allocates a block of memory from a heap.  The allocated memory is not movable.
            </summary>
            <param name="hHeap">A handle to the heap from which the memory will be allocated.</param>
            <param name="dwFlags">The heap allocation options.  Specifying any of these values will override the corresponding value specified
            when the heap was created with <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/></param>
            <param name="dwBytes">The number of bytes to be allocated.</param>
            <returns>A pointer to the allocated memory block, or <c>null</c> if the function fails.</returns>
            <remarks>
            <para>
            If the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> function succeeds, it allocates at least the amount of memory requested.
            </para>
            <para>
            If the heap specified by the <paramref name="hHeap"/> parameter is a "non-growable" heap, <paramref name="dwBytes"/> must be less than
            <c>0x7FFF8</c>. You create a non-growable heap by calling the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/> function with a nonzero value.
            </para>
            <para>
            To allocate memory from the process's default heap, use <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> with the handle returned by the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.GetProcessHeap"/>
            function.
            </para>
            <para>
            To free a block of memory allocated by <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/>, use the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapFree(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)"/> function.
            </para>
            <para>
            Memory allocated by <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> is not movable.  The address returned by <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> is valid until the memory block
            is freed or reallocated; the memory block does not need to be locked. Because the system cannot compact a private heap, it can become fragmented.
            Applications that allocate large amounts of memory in various allocation sizes can use the low-fragmentation heap to reduce heap fragmentation.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)">
            <summary>
            Creates a private heap object that can be used by the calling process. The function reserves space in the virtual address space of the
            process and allocates physical storage for a specified initial portion of this block.
            </summary>
            <param name="flOptions">The heap allocation options.</param>
            <param name="dwInitialSize">The initial size of the heap, in bytes.</param>
            <param name="dwMaximumSize">The maximum size of the heap, in bytes.</param>
            <returns>A handle to the newly created heap, or <c>null</c> if the function fails.</returns>
            <remarks>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/> function creates a private heap object from which the calling process can allocate memory blocks by using the
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> function. The initial size determines the number of committed pages that are allocated initially for the heap.
            The maximum size determines the total number of reserved pages.  These pages create a block in the process's virtual address space into
            which the heap can grow.  If requests by <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> exceed the current size of committed pages, additional pages are
            automatically committed from this reserved space, if the physical storage is available.
            </para>
            <para>
            By default, the newly created private heap is a standard heap. To enable the low-fragmentation heap, call the <c>HeapSetInformation</c>
            function with a handle to the private heap.
            </para>
            <para>
            The memory of a private heap object is accessible only to the process that created it. If a dynamic-link library (DLL) creates a private heap,
            the heap is created in the address space of the process that calls the DLL, and it is accessible only to that process.
            </para>
            <para>
            The system uses memory from the private heap to store heap support structures, so not all of the specified heap size is available to the
            process. For example, if the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> function requests 64 kilobytes from a heap with a maximum size of 64K, the request may
            fail because of system overhead.
            </para>
            <para>
            To obtain a handle to the default heap for a process, use the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.GetProcessHeap"/> function.  To obtain handles to the default heap
            and private heaps that are active for the calling process, use the <c>GetProcessHeaps</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapDestroy(System.IntPtr)">
            <summary>
            Destroys the specified heap object. It decommits and releases all the pages of a private heap object, and it invalidates the handle to
            the heap.
            </summary>
            <param name="hHeap">A handle to the heap to be destroyed.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
            <remarks>
            Processes can call <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapDestroy(System.IntPtr)"/> without first calling the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapFree(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)"/> function to free memory allocated from
            the heap.
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapFree(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)">
            <summary>
            Frees a memory block allocated from a heap by the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> or <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapReAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*,System.IntPtr)"/> function.
            </summary>
            <param name="hHeap">A handle to the heap whose memory block is to be freed.</param>
            <param name="dwFlags">The heap free options.  Specifying any of these values will override the corresponding value specified
            when the heap was created with <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/></param>
            <param name="lpMem">A pointer to the memory block to be freed.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            You should not refer in any way to memory that has been freed by <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapFree(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)"/>.  After that memory is freed, any information
            that may have been in it is gone forever.  If you require information, do not free memory containing the information.  Function calls
            that return information about memory (such as <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapSize(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)"/>) may not be used with freed memory, as they may return bogus data.
            Calling <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapFree(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)"/> twice with the same pointer can cause heap corruption, resulting in subsequent calls to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/>
            returning the same pointer twice.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapLock(System.IntPtr)">
            <summary>
            Attempts to acquire the critical section object, or lock, that is associated with a specified heap.
            </summary>
            <param name="hHeap">A handle to the heap to be locked.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            If the function succeeds, the calling thread owns the heap lock.  Only the calling thread will be able to allocate or release memory
            from the heap.  The execution of any other thread of the calling process will be blocked if that thread attempts to allocate or release
            memory from the heap.  Such threads will remain blocked until the thread that owns the heap lock calls the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapUnlock(System.IntPtr)"/> function.
            </para>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapLock(System.IntPtr)"/> function is primarily useful for preventing the allocation and release of heap memory by other threads while
            the calling thread uses the <c>HeapWalk</c> function.
            </para>
            <para>
            If the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapLock(System.IntPtr)"/> function is called on a heap created with the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_NO_SERIALIZATION"/> flag, the result
            is undefined.
            </para>
            <para>
            Each successful call to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapLock(System.IntPtr)"/> must be matched by a corresponding call to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapUnlock(System.IntPtr)"/>. Failure to call
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapUnlock(System.IntPtr)"/> will block the execution of any other threads of the calling process that attempt to access the heap.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapReAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*,System.IntPtr)">
            <summary>
            Reallocates a block of memory from a heap.  This function enables you to resize a memory block and change other memory block properties.
            The allocated memory is not movable.
            </summary>
            <param name="hHeap">A handle to the heap from which the memory will be reallocated.</param>
            <param name="dwFlags">The heap reallocation options.  Specifying any of these values will override the corresponding value specified
            when the heap was created with <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/></param>
            <param name="lpMem">A pointer to the block of memory that the function reallocates.</param>
            <param name="dwBytes">The new size of the memory block, in bytes.</param>
            <returns>A pointer to the allocated memory block, or <c>null</c> if the function fails.</returns>
            <remarks>
            <para>
            If the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapReAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*,System.IntPtr)"/> function succeeds, it allocates at least the amount of memory requested.
            </para>
            <para>
            If the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapReAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*,System.IntPtr)"/> function fails, the original memory is not freed, and the original handle and pointer are still valid.
            </para>
            <para>
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapReAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*,System.IntPtr)"/> is guaranteed to preserve the content of the memory being reallocated, even if the new memory is allocated at
            a different location.  The process of preserving the memory content involves a memory copy operation that is potentially very time-consuming.
            </para>
            <para>
            If the heap specified by the <paramref name="hHeap"/> parameter is a "non-growable" heap, <paramref name="dwBytes"/> must be less than
            <c>0x7FFF8</c>. You create a non-growable heap by calling the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/> function with a nonzero value.
            </para>
            <para>
            To free a block of memory allocated by <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/>, use the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapFree(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)"/> function.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapSize(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)">
            <summary>
            Retrieves the size of a memory block allocated from a heap by the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.IntPtr)"/> or <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapReAlloc(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*,System.IntPtr)"/> function.
            </summary>
            <param name="hHeap">A handle to the heap in which the memory block resides.</param>
            <param name="dwFlags">The heap size options.  Specifying any of these values will override the corresponding value specified
            when the heap was created with <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapCreate(Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Int32,System.Int32)"/></param>
            <param name="lpMem">A pointer to the memory block whos size the function will obtain.</param>
            <returns>The requested size of the allocated memory block, in bytes, or -1 if the function fails.</returns>
            <remarks>
            <para>
            If the <paramref name="lpMem"/> parameter refers to a heap allocation that is not in the heap specified by the <paramref name="hHeap"/>
            parameter, the behavior of the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapSize(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.HeapFlags,System.Void*)"/> function is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.HeapUnlock(System.IntPtr)">
            <summary>
            Releases ownership of the critical section object, or lock, that is associated with a specified heap.
            </summary>
            <param name="hHeap">A handle to the heap to be unlocked.</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapUnlock(System.IntPtr)"/> function is primarily useful for preventing the allocation and release of heap memory by other threads while
            the calling thread uses the <c>HeapWalk</c> function.
            </para>
            <para>
            If the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.HeapUnlock(System.IntPtr)"/> function is called on a heap created with the <see cref="F:Microsoft.Win32.Kernel32NativeMethods.HeapFlags.HEAP_NO_SERIALIZATION"/> flag, the result
            is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file).</param>
            <returns><c>true</c> if the function succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.LocalAlloc(Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags,System.Int32)">
            <summary>
            Allocates the specified number of bytes from the heap.
            </summary>
            <param name="uFlags">The memory allocation attributes.</param>
            <param name="uBytes">The number of bytes to allocate.</param>
            <returns>A handle to the newly-allocated memory, or <c>null</c> if allocation failed.</returns>
            <remarks>
            <para>
            The movable-memory flags <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LHND"/>, <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.LMEM_MOVABLE"/>, and <see cref="F:Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags.NONZEROLHND"/>
            add unnecessary overhead and require locking to be used safely.  They should be avoided unless documentation specifically states that they should be used.
            </para>
            <para>
            If the heap does not contain sufficient free space to satisfy the request, <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalAlloc(Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags,System.Int32)"/> returns <c>null</c>.  Because <c>null</c> is used to
            indicate an error, virtual address zero is never allocated.  It is, therefore, easy to detect the use of a <c>null</c> pointer.
            </para>
            <para>
            If the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalAlloc(Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags,System.Int32)"/> function succeeds, it allocates at least the amount requested.  If the amount allocated is greater than the amount requested,
            the process can use the entire amount.  To determine the actual number of bytes allocated, use the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalSize(System.IntPtr)"/> function.
            </para>
            <para>
            To free the memory, use the <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalFree(System.IntPtr)"/> function.  It is not safe to free memory allocated with <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalAlloc(Microsoft.Win32.Kernel32NativeMethods.LocalAllocFlags,System.Int32)"/>
            using <c>GlobalFree</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.LocalFree(System.IntPtr)">
            <summary>
            Frees the specified local memory object and invalidates its handle.
            </summary>
            <param name="hMem">A handle to the local memory object.</param>
            <returns>If the function succeeds, the return value is <c>null</c>.  If it fails, it is equal to the <paramref name="hMem"/>.</returns>
            <remarks>
            <para>
            If the process tries to examine or modify the memory after it has been freed, heap corruption may occur or an access violation exception
            (EXCEPTION_ACCESS_VIOLATION) may be generated.
            </para>
            <para>
            If the <paramref name="hMem"/> parameter is <c>null</c>, <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalFree(System.IntPtr)"/> ignores the parameter and returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.LocalSize(System.IntPtr)">
            <summary>
            Retrieves the current size of the specified local memory object, in bytes.
            </summary>
            <param name="hMem">A handle to the local memory object.</param>
            <returns>The size of the specified local memory object, in bytes.</returns>
            <remarks>
            <para>
            The size of a memory block may be larger than the size requested when the memory was allocated.
            </para>
            <para>
            To verify that the specified object's memory block has not been discarded, call the <c>LocalFlags</c> function before calling
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.LocalSize(System.IntPtr)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)">
            <summary>
            Reserves or commits a region of pages in the virtual address space of the calling process. Memory
            allocated by this function is automatically initialized to zero, unless
            <see cref="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.RESET"/> is specified.
            </summary>
            <param name="lpAddress">The starting address of the region to allocate.</param>
            <param name="dwSize">The size of the region, in bytes.  </param>
            <param name="flAllocationType">The type of memory allocation.</param>
            <param name="flProtect">The memory protection for the region of pages to be allocated.</param>
            <returns>If the function succeeds, the return value is the base address of the allocated region of pages.
            If the function fails, the return value is <c>null</c>.</returns>
            <remarks>
            <para>Each page has an associated page state. The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> function can perform the
            following operations:
            <list type="bullet">
            <item><description>Commit a region of reserved pages</description></item>
            <item><description>Reserve a region of free pages</description></item>
            <item><description>Simultaneously reserve and commit a region of free pages</description></item>
            </list>
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> cannot reserve a reserved page. It can commit a page that is already committed.
            This means you can commit a range of pages, regardless of whether they have already been committed, and
            the function will not fail.
            </para>
            <para>
            You can use <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> to reserve a block of pages and then make additional calls to
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> to commit individual pages from the reserved block. This enables a process to
            reserve a range of its virtual address space without consuming physical storage until it is needed.
            </para>
            <para>
            If the <paramref name="lpAddress"/> parameter is not <c>null</c>, the function uses the
            <paramref name="lpAddress"/> and <paramref name="dwSize"/> parameters to compute the region of pages to be
            allocated.  The current state of the entire range of pages must be compatible with the type of allocation
            specified by the <paramref name="flAllocationType"/> parameter.  Otherwise, the function fails and none of
            the pages are allocated.  This compatibility requirement does not preclude committing an already committed
            page, as mentioned previously.
            </para>
            <para>
            To execute dynamically generated code, use <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> to allocate memory and the
            <c>VirtualProtect</c> function to grant <see cref="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.EXECUTE"/> access.
            </para>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> function can be used to reserve an Address Windowing Extensions (AWE)
            region of memory within the virtual address space of a specified process.  This region of memory can then
            be used to map physical pages into and out of virtual memory as required by the application.  The
            <see cref="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.PHYSICAL"/> and <see cref="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.RESERVE"/> values must be set
            in the <paramref name="flAllocationType"/> parameter.  The <see cref="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.COMMIT"/> value
            must not be set.  The page protection must be set to <see cref="F:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection.READWRITE"/>.
            </para>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualFree(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.FreeType)"/> function can decommit a committed page, releasing the page's storage, or it
            can simultaneously decommit and release a committed page.  It can also release a reserved page, making it
            a free page.
            </para>
            <para>
            When creating a region that will be executable, the calling program bears responsibility for ensuring
            cache coherency via an appropriate call to <c>FlushInstructionCache</c> once the code has been set in
            place.  Otherwise, attempts to execute code out of the newly executable region may produce unpredictable
            results.
            </para>
            <para>
            When reserving memory, the specified address is rounded down to the nearest multiple of the allocation
            granularity.  If the memory is already reserved and is being committed, the address is rounded down to the
            next page boundary.  To determine the size of a page and the allocation granularity on the host computer,
            use the <c>GetSystemInfo</c> function.  If this parameter is <c>null</c>, the system determines where to
            allocate the region.
            </para>
            <para>
            If the <paramref name="lpAddress"/> parameter is <c>null</c>, the <paramref name="dwSize"/> value is
            rounded up to the next page boundary.  Otherwise, the allocated pages include all pages containing one or
            more bytes in the range from <paramref name="lpAddress"/> to <paramref name="lpAddress"/> +
            <paramref name="dwSize"/>. This means that a 2-byte range straddling a page boundary causes both pages to
            be included in the allocated region.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.VirtualQuery(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION@,System.UInt32)">
            <summary>
            Retrieves information about a range of pages in the virtual address space of the calling process.
            </summary>
            <param name="lpAddress">A pointer to the base address of the region of pages to be queried. This value is
            rounded down to the next page boundary.</param>
            <param name="lpBuffer">A pointer to a <see cref="T:Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION"/> structure in which information
            about the specified page range is returned.</param>
            <param name="dwLength">The size of the buffer pointed to by the <paramref name="lpBuffer"/> parameter, in bytes.</param>
            <returns>The actual number of bytes returned in the information buffer.</returns>
            <remarks>
            <para>
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualQuery(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION@,System.UInt32)"/> provides information about a region of consecutive pages beginning at a specified
            address that share the following attributes:
            <list type="bullet">
              <item>The state of all pages is the same (MEM_COMMIT, MEM_RESERVE, MEM_FREE, MEM_PRIVATE, MEM_MAPPED, or MEM_IMAGE).</item>
              <item>If the initial page is not free, all pages in the region are part of the same initial allocation of pages created
              by a single call to <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/>, <c>MapViewOfFile</c> MapViewOfFile, or one of the extended versions of
              these functions.</item>
              <item>The access granted to all pages is the same (one of the <see cref="T:Microsoft.Win32.Kernel32NativeMethods.MemoryProtection"/> values.</item>
            </list>
            </para>
            <para>
            The function determines the attributes of the first page in the region and then scans subsequent pages until it
            scans the entire range of pages or until it encounters a page with a nonmatching set of attributes. The function
            returns the attributes and the size of the region of pages with matching attributes, in bytes. For example, if
            there is a 40 megabyte (MB) region of free memory, and <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualQuery(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION@,System.UInt32)"/> is called on a page that is 10 MB
            into the region, the function will obtain a state of <see cref="F:Microsoft.Win32.Kernel32NativeMethods.AllocationType.FREE"/> and a size of 30 MB.
            </para>
            <para>
            If a shared copy-on-write page is modified, it becomes private to the process that modified the page. However, the
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualQuery(System.IntPtr,Microsoft.Win32.Kernel32NativeMethods.MEMORY_BASIC_INFORMATION@,System.UInt32)"/> function will continue to report such pages as MEM_MAPPED (for data views) or MEM_IMAGE
            (for executable image views) rather than MEM_PRIVATE.  To detect whether copy-on-write has occurred for a specific
            page, either access the page or lock it using the <c>VirtualLock</c> function to make sure the page is resident in
            memory, then use the <c>QueryWorkingSetEx</c> function to check the <c>Shared</c> bit in the extended working set
            information for the page.  If the <c>Shared</c> bit is clear, the page is private.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Kernel32NativeMethods.VirtualFree(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.FreeType)">
            <summary>
            Releases, decommits, or releases and decommits a region of pages within the virtual address space of the
            calling process.
            </summary>
            <param name="lpAddress">A pointer to the base address of the region of pages to be freed.</param>
            <param name="dwSize">The size of the region of memory to be freed, in bytes. </param>
            <param name="freeType">The type of free operation.</param>
            <returns>If the function succeeds, the return value is nonzero.  If the function fails, the return value
            is 0 (zero).</returns>
            <remarks>
            <para>
            Each page of memory in a process virtual address space has a Page State.  The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualFree(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.FreeType)"/>
            function can decommit a range of pages that are in different states, some committed and some uncommitted.
            This means that you can decommit a range of pages without first determining the current commitment state
            of each page.  Decommitting a page releases its physical storage, either in memory or in the paging file
            on disk.
            </para>
            <para>
            If a page is decommitted but not released, its state changes to reserved.  Subsequently, you can call
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> to commit it, or <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualFree(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.FreeType)"/> to release it.  Attempts to read
            from or write to a reserved page results in an access violation exception.
            </para>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualFree(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.FreeType)"/> function can release a range of pages that are in different states, some
            reserved and some committed.  This means that you can release a range of pages without first determining
            the current commitment state of each page.  The entire range of pages originally reserved by the
            <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualAlloc(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.AllocationType,Microsoft.Win32.Kernel32NativeMethods.MemoryProtection)"/> function must be released at the same time.
            </para>
            <para>
            If a page is released, its state changes to free, and it is available for subsequent allocation operations.
            After memory is released or decommited, you can never refer to the memory again.  Any information that may
            have been in that memory is gone forever.  Attempting to read from or write to a free page results in an
            access violation exception.  If you need to keep information, do not decommit or free memory that contains
            the information.
            </para>
            <para>
            The <see cref="M:Microsoft.Win32.Kernel32NativeMethods.VirtualFree(System.IntPtr,System.UIntPtr,Microsoft.Win32.Kernel32NativeMethods.FreeType)"/> function can be used on an AWE region of memory, and it invalidates any
            physical page mappings in the region when freeing the address space.  However, the physical page is not
            deleted, and the application can use them.  The application must explicitly call <c>FreeUserPhysicalPages</c>
            to free the physical pages.  When the process is terminated, all resources are cleaned up automatically.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Win32.NativeExceptionHandler">
            <summary>
            COntains methods for interacting with native errors and exceptions.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.NativeExceptionHandler.ErrorCode">
            <summary>
            The error codes returned by <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.NativeExceptionHandler.ErrorCode.ERROR_SUCCESS">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.NativeExceptionHandler.ErrorCode.NERR_Success">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.NativeExceptionHandler.ErrorCode.ERROR_INVALID_FUNCTION">
            <summary>
            Incorrect function.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.NativeExceptionHandler.ErrorCode.ERROR_FILE_NOT_FOUND">
            <summary>
            The system cannot find the file specified.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.NativeExceptionHandler.ErrorCode.ERROR_PATH_NOT_FOUND">
            <summary>
            The system cannot find the path specified.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.NativeExceptionHandler.ThrowWin32Exception(System.String)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.Win32Exception"/> with the specified message.
            </summary>
            <param name="message">The message of the exception to throw.</param>
        </member>
        <member name="M:Microsoft.Win32.NativeExceptionHandler.GetLastWin32ErrorMessage">
            <summary>
            Gets the string value of the last Win32 error that was raised.
            </summary>
            <returns>The last Win32 exception's message.</returns>
        </member>
        <member name="M:Microsoft.Win32.NativeExceptionHandler.GetWin32Error(System.String@)">
            <summary>
            Gets the error code and string value of the last Win32 error that was raised.
            </summary>
            <param name="message">When this method returns, this parameter will contain the last Win32 error's message.</param>
            <returns>The last Win32 exception's error code.</returns>
        </member>
        <member name="T:Microsoft.Win32.Netapi32NativeMethods">
            <summary>
            Contains native methods in Netapi32.dll.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Netapi32NativeMethods.AUTH_FLAGS">
            <summary>
            Contains values representing user operator privilages.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.AUTH_FLAGS.AF_OP_PRINT">
            <summary>
            The print operator privilege is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.AUTH_FLAGS.AF_OP_COMM">
            <summary>
            The communications operator privilege is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.AUTH_FLAGS.AF_OP_SERVER">
            <summary>
            The server operator privilege is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.AUTH_FLAGS.AF_OP_ACCOUNTS">
            <summary>
            The accounts operator privilege is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS">
            <summary>
            Contains values representing additional data used to process a request using <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_FORCE_REDISCOVERY">
            <summary>
            Forces cached domain controller data to be ignored. When not specified, <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> may return
            cached domain controller data. If this flag is specified, <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> will not use cached
            information (if any exists) but will instead perform a fresh domain controller discovery.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_DIRECTORY_SERVICE_REQUIRED">
            <summary>
            Requires that the returned domain controller support Windows 2000 and later.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_DIRECTORY_SERVICE_PREFERRED">
            <summary>
            <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> attempts to find a Windows 2000 or later domain controller that supports directory
            service functions. If a domain controller that supports directory services is not available, <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/>
            returns the name of a non-directory service domain controller. However, <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> only returns a
            non-directory service domain controller after the attempt to find a directory service domain controller times out.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_GC_SERVER_REQUIRED">
            <summary>
            Requires that the returned domain controller be a global catalog server for the forest of domains with this domain
            as the root. If this flag is set and the DomainName parameter is not <c>null</c>, DomainName must specify a forest
            name. This flag cannot be combined with the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_PDC_REQUIRED"/> or <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_KDC_REQUIRED"/> flags.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_PDC_REQUIRED">
            <summary>
            Requires that the returned domain controller be the primary domain controller for the domain. This flag cannot be
            combined with the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_KDC_REQUIRED"/> or <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_GC_SERVER_REQUIRED"/> flags.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_BACKGROUND_ONLY">
            <summary>
            If the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_FORCE_REDISCOVERY"/> flag is not specified, this function uses cached domain controller data.
            If the cached data is more than 15 minutes old, the cache is refreshed by pinging the domain controller. If this
            flag is specified, this refresh is avoided even if the cached data is expired. This flag should be used if the
            <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> function is called periodically.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_IP_REQUIRED">
            <summary>
            This parameter indicates that the domain controller must have an IP address. In that case, <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> will
            place the Internet protocol address of the domain controller in the DomainControllerAddress member of DomainControllerInfo.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_KDC_REQUIRED">
            <summary>
            Requires that the returned domain controller be currently running the Kerberos Key Distribution Center service. This flag
            cannot be combined with the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_PDC_REQUIRED"/> or <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_GC_SERVER_REQUIRED"/> flags.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_TIMESERV_REQUIRED">
            <summary>
            Requires that the returned domain controller be currently running the Windows Time Service.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_WRITABLE_REQUIRED">
            <summary>
            Requires that the returned domain controller be writable; that is, host a writable copy of the directory service, for
            Windows 2000 and later DCs, or of SAM (for DCs in operating systems prior to Windows 2000).
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_GOOD_TIMESERV_PREFERRED">
            <summary>
            <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> attempts to find a domain controller that is a reliable time server.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_AVOID_SELF">
            <summary>
            When called from a domain controller, specifies that the returned domain controller name should not be the current
            computer. If the current computer is not a domain controller, this flag is ignored. This flag can be used to obtain
            the name of another domain controller in the domain.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_ONLY_LDAP_NEEDED">
            <summary>
            Specifies that the server returned is an LDAP server.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_IS_FLAT_NAME">
            <summary>
            Specifies that the DomainName parameter is a flat name. This flag cannot be combined with the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_IS_DNS_NAME"/> flag.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_IS_DNS_NAME">
            <summary>
            Specifies that the DomainName parameter is a DNS name. This flag cannot be combined with the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_IS_FLAT_NAME"/> flag.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_RETURN_DNS_NAME">
            <summary>
            Specifies that the names returned in the DomainControllerName and DomainName members of DomainControllerInfo should be DNS names.
            If a DNS name is not available, an error is returned. This flag cannot be specified with the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_RETURN_FLAT_NAME"/>
            flag. This flag implies the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_IP_REQUIRED"/> flag.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_RETURN_FLAT_NAME">
            <summary>
            Specifies that the names returned in the DomainControllerName and DomainName members of DomainControllerInfo should be flat names.
            If a flat name is not available, an error is returned. This flag cannot be specified with the <see cref="F:Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS.DS_RETURN_DNS_NAME"/>
            flag.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS">
            <summary>
            The flags associated with a user in the usri3_flags member.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_SCRIPT">
            <summary>
            The logon script executed. This value must be set.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_ACCOUNTDISABLE">
            <summary>
            The user's account is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_HOMEDIR_REQUIRED">
            <summary>
            The home directory is required. This value is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_PASSWD_NOTREQD">
            <summary>
            No password is required.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_PASSWD_CANT_CHANGE">
            <summary>
            The user cannot change the password.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_LOCKOUT">
            <summary>
            The account is currently locked out. You can call the NetUserSetInfo function to clear this value
            and unlock a previously locked account. You cannot use this value to lock a previously unlocked account.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_DONT_EXPIRE_PASSWD">
            <summary>
            The password should never expire on the account.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED">
            <summary>
            The user's password is stored under reversible encryption in the Active Directory.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_NOT_DELEGATED">
            <summary>
            Marks the account as "sensitive"; other users cannot act as delegates of this user account.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_SMARTCARD_REQUIRED">
            <summary>
            Requires the user to log on to the user account with a smart card.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_USE_DES_KEY_ONLY">
            <summary>
            Restrict this principal to use only Data Encryption Standard (DES) encryption types for keys.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_DONT_REQUIRE_PREAUTH">
            <summary>
            This account does not require Kerberos preauthentication for logon.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_TRUSTED_FOR_DELEGATION">
            <summary>
            The account is enabled for delegation. This is a security-sensitive setting; accounts with this option enabled
            should be tightly controlled. This setting allows a service running under the account to assume a client's identity
            and authenticate as that user to other remote servers on the network.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_PASSWORD_EXPIRED">
            <summary>
            The user's password has expired.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION">
            <summary>
            The account is trusted to authenticate a user outside of the Kerberos security package and delegate that user through
            constrained delegation. This is a security-sensitive setting; accounts with this option enabled should be tightly
            controlled. This setting allows a service running under the account to assert a client's identity and authenticate as
            that user to specifically configured services on the network.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_MNS_LOGON_ACCOUNT">
            <summary>
            This bit is ignored by clients and servers.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_NO_AUTH_DATA_REQUIRED">
            <summary>
            This bit is used by the Kerberos protocol. It indicates that when the key distribution center (KDC) is issuing a service
            ticket for this account, the privilege attribute certificate (PAC) is not to be included.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_PARTIAL_SECRETS_ACCOUNT">
            <summary>
            Specifies that the object is a read-only domain controller (RODC).
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_USE_AES_KEYS">
            <summary>
            This bit is ignored by clients and servers.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_NORMAL_ACCOUNT">
            <summary>
            This is a default account type that represents a typical user.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_TEMP_DUPLICATE_ACCOUNT">
            <summary>
            This is an account for users whose primary account is in another domain. This account provides user access to this domain,
            but not to any domain that trusts this domain. The User Manager refers to this account type as a local user account.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_WORKSTATION_TRUST_ACCOUNT">
            <summary>
            This is a computer account for a computer that is a member of this domain.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_SERVER_TRUST_ACCOUNT">
            <summary>
            This is a computer account for a backup domain controller that is a member of this domain.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_FLAGS.UF_INTERDOMAIN_TRUST_ACCOUNT">
            <summary>
            This is a permit to trust account for a domain that trusts other domains.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Netapi32NativeMethods.USER_PRIVILAGES">
            <summary>
            The level of privilege assigned to the usri3_name member.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_PRIVILAGES.USER_PRIV_GUEST">
            <summary>
            Guest.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_PRIVILAGES.USER_PRIV_USER">
            <summary>
            User.
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Netapi32NativeMethods.USER_PRIVILAGES.USER_PRIV_ADMIN">
            <summary>
            Administrator.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)">
            <summary>
            Returns the name of a domain controller in a specified domain. This function accepts additional domain controller
            selection criteria to indicate preference for a domain controller with particular characteristics.
            </summary>
            <param name="computername">Pointer to a null-terminated string that specifies the name of the server to process this
            function. Typically, this parameter is <c>null</c>, which indicates that the local computer is used.</param>
            <param name="domainname">Pointer to a null-terminated string that specifies the name of the domain or application
            partition to query. This name can either be a DNS style name, for example, fabrikam.com, or a flat-style name, for
            example, Fabrikam. If a DNS style name is specified, the name may be specified with or without a trailing period.</param>
            <param name="domainguid">Pointer to a GUID structure that specifies the GUID of the domain queried.  If
            <paramref name="domainguid"/> is not <c>null</c> and the domain specified by <paramref name="domainname"/> or
            <paramref name="computername"/> cannot be found, <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> attempts to locate a domain controller in the
            domain having the GUID specified by <paramref name="domainguid"/>.</param>
            <param name="sitename">Pointer to a null-terminated string that specifies the name of the site where the returned domain
            controller should physically exist. If this parameter is <c>null</c>, <see cref="M:Microsoft.Win32.Netapi32NativeMethods.DsGetDcName(System.String,System.String,Microsoft.Win32.Netapi32NativeMethods.GUID,System.String,Microsoft.Win32.Netapi32NativeMethods.DSGETDCNAME_FLAGS,System.IntPtr@)"/> attempts to return a
            domain controller in the site closest to the site of the computer specified by <paramref name="computername"/>. This
            parameter should be <c>null</c> by default.</param>
            <param name="flags">Contains a set of flags that provide additional data used to process the request.</param>
            <param name="bufptr">Pointer to a <see cref="T:System.IntPtr"/> value that receives a pointer to a
            <see cref="T:Microsoft.Win32.Netapi32NativeMethods.DOMAIN_CONTROLLER_INFO"/> structure that contains data about the domain controller selected.</param>
            <returns>If the function succeeds, the return value is NERR_Success.</returns>
        </member>
        <member name="M:Microsoft.Win32.Netapi32NativeMethods.GetSidSubAuthority(System.Byte[],System.UInt32)">
            <summary>
            Returns a pointer to a specified subauthority in a security identifier (SID). The subauthority value is a relative
            identifier (RID).
            </summary>
            <param name="sid">A pointer to the SID structure from which a pointer to a subauthority is to be returned.</param>
            <param name="subAuthorityIndex">Specifies an index value identifying the subauthority array element whose address the
            function will return. The function performs no validation tests on this value. An application can call the
            GetSidSubAuthorityCount function to discover the range of acceptable values.</param>
            <returns>If the function succeeds, the return value is a pointer to the specified SID subauthority.</returns>
        </member>
        <member name="M:Microsoft.Win32.Netapi32NativeMethods.GetSidSubAuthorityCount(System.Byte[])">
            <summary>
            Returns a pointer to the member in a security identifier (SID) structure that contains the subauthority count.
            </summary>
            <param name="sid">A pointer to the SID structure from which a pointer to the subauthority count is returned.</param>
            <returns>If the function succeeds, the return value is a pointer to the subauthority count for the specified SID structure.</returns>
        </member>
        <member name="M:Microsoft.Win32.Netapi32NativeMethods.NetGroupGetInfo(System.String,System.String,System.Int32,System.IntPtr@)">
            <summary>
            Retrieves information about a particular global group in the security database.
            </summary>
            <param name="servername">A pointer to a constant string that specifies the DNS or NetBIOS name of the remote
            server on which the function is to execute. If this parameter is <c>null</c>, the local computer is used.</param>
            <param name="groupname">A pointer to a constant string that specifies the name of the global group for which to
            return information.</param>
            <param name="level">The information level of the data.  Currently, only 0 is supported.</param>
            <param name="bufptr">A pointer to the buffer that receives the data.</param>
            <returns>If the function succeeds, the return value is NERR_Success.</returns>
        </member>
        <member name="M:Microsoft.Win32.Netapi32NativeMethods.NetUserGetInfo(System.String,System.String,System.Int32,System.IntPtr@)">
            <summary>
            Retrieves information about a particular user account on a server.
            </summary>
            <param name="servername">A pointer to a constant string that specifies the DNS or NetBIOS name of the remote
            server on which the function is to execute. If this parameter is <c>null</c>, the local computer is used.</param>
            <param name="username">A pointer to a constant string that specifies the name of the user account for which to
            return information.</param>
            <param name="level">The information level of the data.  Currently, only 3 is supported.</param>
            <param name="bufptr">A pointer to the buffer that receives the data.</param>
            <returns>If the function succeeds, the return value is NERR_Success.</returns>
        </member>
        <member name="M:Microsoft.Win32.Netapi32NativeMethods.NetApiBufferFree(System.IntPtr)">
            <summary>
            Frees the memory associated with the specified pointer.
            </summary>
            <param name="Buffer">The pointer to the memory buffer to free.</param>
            <returns>If the function succeeds, the return value is NERR_Success.</returns>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.CoGetMalloc(System.UInt32)">
            <summary>
            Allocates a block of task memory in the same way that <see cref="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.Alloc(System.IntPtr)"/> does.
            </summary>
            <param name="dwMemContext">This parameter must be 1</param>
            <returns>An <see cref="T:Microsoft.Win32.Ole32NativeMethods.IMalloc"/> representing the OLE task memory allocator.</returns>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)">
            <summary>
            Retrieves a pointer to the default OLE task memory allocator so applications can call its methods to manage memory.
            </summary>
            <param name="cb">The size of the memory block to be allocated, in bytes.</param>
            <returns>The allocated memory block, if successful; otherwise, <c>null</c>.</returns>
            <remarks>
            <para>
            <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)"/> uses the default allocator to allocate a memory block in the same way that <see cref="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.Alloc(System.IntPtr)"/>
            does.  It is not necessary to call the <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoGetMalloc(System.UInt32)"/> function before calling <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)"/>.
            </para>
            <para>
            The initial contents of the returned memory block are undefined – there is no guarantee that the block has been initialized. The
            allocated block may be larger than <paramref name="cb"/> bytes because of the space required for alignment and for maintenance
            information.
            </para>
            <para>
            If <paramref name="cb"/> is 0, <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)"/> allocates a zero-length item and returns a valid pointer to that item.
            If there is insufficient memory available, <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)"/> returns <c>null</c>.  Applications should always check the
            return value from this function, even when requesting small amounts of memory, because there is no guarantee that the memory will
            be allocated.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemFree(System.IntPtr)">
            <summary>
            Frees a block of task memory previously allocated through a call to the <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)"/> or <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemRealloc(System.IntPtr,System.IntPtr)"/>
            function.
            </summary>
            <param name="pv">A pointer to the memory block to be freed.</param>
            <remarks>
            <para>
            The <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemFree(System.IntPtr)"/> function uses the default OLE allocator.
            </para>
            <para>
            The number of bytes freed equals the number of bytes that were originally allocated or reallocated.  After the call, the memory block
            pointed to by <paramref name="pv"/> is invalid and can no longer be used.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemRealloc(System.IntPtr,System.IntPtr)">
            <summary>
            Changes the size of a previously allocated block of task memory.
            </summary>
            <param name="pv">A pointer to the memory block to be reallocated.</param>
            <param name="cb">The size of the memory block to be reallocated, in bytes.</param>
            <returns>The allocated memory block, if successful; otherwise, <c>null</c>.</returns>
            <remarks>
            <para>
            This function changes the size of a previously allocated memory block in the same way that <see cref="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.Realloc(System.IntPtr,System.IntPtr)"/> does.  It is not
            necessary to call the <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoGetMalloc(System.UInt32)"/> function to get a pointer to the OLE allocator before calling <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemRealloc(System.IntPtr,System.IntPtr)"/>.
            </para>
            <para>
            The <paramref name="pv"/> parameter points to the beginning of the memory block.  If <paramref name="pv "/>is <c>null</c>, <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemRealloc(System.IntPtr,System.IntPtr)"/>
            allocates a new memory block in the same way as the <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)"/> function.  If <paramref name="pv"/> is not <c>null</c>, it should be a
            pointer returned by a prior call to <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemAlloc(System.IntPtr)"/> or <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemRealloc(System.IntPtr,System.IntPtr)"/>.
            </para>
            <para>
            The <paramref name="cb"/> parameter specifies the size of the new block.  The contents of the block are unchanged up to the shorter of the new and old
            sizes, although the new block can be in a different location.  Because the new block can be in a different memory location, the pointer returned by
            <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemRealloc(System.IntPtr,System.IntPtr)"/> is not guaranteed to be the pointer passed through the <paramref name="pv"/> argument.  If <paramref name="pv"/> is not
            <c>null</c> and <paramref name="cb"/> is 0, then the memory pointed to by <paramref name="pv"/> is freed.
            </para>
            <para>
            <see cref="M:Microsoft.Win32.Ole32NativeMethods.CoTaskMemRealloc(System.IntPtr,System.IntPtr)"/> returns a void pointer to the reallocated (and possibly moved) memory block.  The return value is <c>null</c> if the size
            is 0 and the buffer argument is not <c>null</c>, or if there is not enough memory available to expand the block to the specified size.  In the first case,
            the original block is freed; in the second case, the original block is unchanged.
            </para>
            <para>
            The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object.  To get a pointer to a type other
            than <c>void</c>, use a type cast on the return value.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.ReleaseStgMedium(System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
            <summary>
            Free the specified storage medium.
            </summary>
            <param name="pmedium">
            Reference of the storage medium that is to be freed.
            </param>
        </member>
        <member name="T:Microsoft.Win32.Ole32NativeMethods.IMalloc">
            <summary>
            Allocates, frees, and manages memory.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.Alloc(System.IntPtr)">
            <summary>
            Allocate a block of memory
            </summary>
            <param name="cb">Size, in bytes, of the memory block to be allocated.</param>
            <returns>A pointer to the allocated memory block.</returns>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.Realloc(System.IntPtr,System.IntPtr)">
            <summary>
            Changes the size of a previously allocated memory block.
            </summary>
            <param name="pv">Pointer to the memory block to be reallocated</param>
            <param name="cb">Size of the memory block, in bytes, to be reallocated.</param>
            <returns>reallocated memory block</returns>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.Free(System.IntPtr)">
            <summary>
            Free a previously allocated block of memory.
            </summary>
            <param name="pv">Pointer to the memory block to be freed.</param>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.GetSize(System.IntPtr)">
            <summary>
            This method returns the size, in bytes, of a memory block previously allocated with IMalloc::Alloc or IMalloc::Realloc.
            </summary>
            <param name="pv">Pointer to the memory block for which the size is requested</param>
            <returns>The size of the allocated memory block in bytes.</returns>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.DidAlloc(System.IntPtr)">
            <summary>
            This method determines whether this allocator was used to allocate the specified block of memory.
            </summary>
            <param name="pv">Pointer to the memory block</param>
            <returns>
            1 - allocated
            0 - not allocated by this IMalloc Instance.
            -1 if DidAlloc is unable to determine whether or not it allocated the memory block.
            </returns>
        </member>
        <member name="M:Microsoft.Win32.Ole32NativeMethods.IMalloc.HeapMinimize">
            <summary>
            Minimizes the heap by releasing unused memory to the operating system.
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Shell32NativeMethods">
            <summary>
            Contains native methods in shell32.dll.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Shell32NativeMethods.CommandLineToArgvW(System.String,System.Int32@)">
            <summary>
            Parses a command line string and returns an array of pointers to the command line arguments.
            </summary>
            <param name="lpCmdLine">Pointer to a null-terminated Unicode string that contains the full command line.</param>
            <param name="pNumArgs">Pointer to an int that recieves the number of array elements returned.</param>
            <returns>A pointer to an array of LPWSTR values.</returns>
        </member>
        <member name="M:Microsoft.Win32.Shell32NativeMethods.DragQueryFile(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieve the names of dropped files that result from a successful drag-and-drop operation.
            </summary>
            <param name="hDrop">Identifier of the structure that contains the file names of the dropped files.</param>
            <param name="iFile">Index of the file to query. If the value of this parameter is <c>0xFFFFFFFF</c>,
            <see cref="M:Microsoft.Win32.Shell32NativeMethods.DragQueryFile(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)"/> returns a count of the files dropped.</param>
            <param name="pszFile">The address of a buffer that receives the file name of a dropped file when the function returns.</param>
            <param name="cch">The size, in characters, of the <paramref name="pszFile"/> buffer.</param>
            <returns>A non-zero value indicates a successful call.</returns>
        </member>
        <member name="T:Microsoft.Win32.User32NativeMethods">
            <summary>
            Contains native methods in user32.dll.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.User32NativeMethods.InsertMenuItem(System.IntPtr,System.UInt32,System.Boolean,Microsoft.Win32.User32NativeMethods.MENUITEMINFO@)">
            <summary>
            Insert a new menu item at the specified position in a menu.
            </summary>
            <param name="hMenu">A handle to the menu in which the new menu item is inserted.</param>
            <param name="uItem">The identifier or position of the menu item before which to insert the
            new item. The meaning of this parameter depends on the value of <paramref name="fByPosition"/>.</param>
            <param name="fByPosition">Controls the meaning of <paramref name="uItem"/>. If this parameter is
            <c>false</c>, <paramref name="uItem"/> is a menu item identifier. Otherwise, it is a menu item
            position.</param>
            <param name="mii">A reference of a <see cref="T:Microsoft.Win32.User32NativeMethods.MENUITEMINFO"/> structure that contains information about
            the new menu item.</param>
            <returns>If the function succeeds, the return value is <c>true</c>.</returns>
        </member>
        <member name="T:System.IEquatable">
            <summary>
            Defines an interface for determining whether two objects equal one another.
            </summary>
            <remarks>Both methods in this interface already exist on all objects, since <see cref="T:System.Object"/> already defines them.
            The are included here so that implementing this interface explicitly creates an implementation stub to fill out (since
            the default behavior of <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/> are often insufficient for
            complex types.</remarks>
        </member>
        <member name="M:System.IEquatable.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to <paramref name="other"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.IEquatable.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:System.Collections.Specialized.Beta.BucketAggregator`3">
            <summary>
            A specialized collection for collecting and aggregating values across one or more buckets.
            </summary>
            <typeparam name="TBucket">The type of buckets in the aggregator.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TPartial">The type of values in the aggregator.</typeparam>
            <remarks>
            <para>
            The <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`3"/> allows values to be inserted into buckets which
            can be individually updated or expired.  Adding a value to the aggregator for an existing key will add the new
            value to the existing value.  When getting values out of the aggregator, values can be selected from a single
            bucket, or from all buckets in the aggregator.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`3.#ctor(Microsoft.BI.Common.Beta.IRecursiveAggregator{`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`3"/> class
            using the specified <see cref="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`1"/>.
            </summary>
            <param name="aggregator">The <see cref="T:Microsoft.BI.Common.Beta.IAggregator`1"/> to use when aggregating values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},Microsoft.BI.Common.Beta.IRecursiveAggregator{`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`3"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and <see cref="T:Microsoft.BI.Common.Beta.IAggregator`1"/>.
            </summary>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The <see cref="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`1"/> to use when aggregating values.</param>
        </member>
        <member name="T:System.Collections.Specialized.Beta.BucketAggregator`5">
            <summary>
            A specialized collection for collecting and aggregating values across one or more buckets.
            </summary>
            <typeparam name="TBucket">The type of buckets in the aggregator.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TPartial">The type of the partial aggregate result.</typeparam>
            <typeparam name="TIncrement">The type of incremental values that are added to the aggregator.</typeparam>
            <typeparam name="TFinal">The type of values produced by the aggregator.</typeparam>
            <remarks>
            <para>
            The <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/> allows values to be inserted into
            buckets which can be individually updated or expired.  Adding a value to the aggregator for an existing key will
            add the new value to the existing value.  When getting values out of the aggregator, values can be selected from
            a single bucket, or from all buckets in the aggregator.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.#ctor(Microsoft.BI.Common.Beta.IRecursiveAggregator{`2,`3,`4})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/> class
            using the specified <see cref="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`1"/>.
            </summary>
            <param name="aggregator">The <see cref="T:Microsoft.BI.Common.Beta.IAggregator`1"/> to use when aggregating values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.#ctor(System.Collections.Generic.IEqualityComparer{`0},Microsoft.BI.Common.Beta.IRecursiveAggregator{`2,`3,`4})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and <see cref="T:Microsoft.BI.Common.Beta.IAggregator`1"/>.
            </summary>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The <see cref="T:Microsoft.BI.Common.Beta.IRecursiveAggregator`1"/> to use when aggregating values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.AddPartial(`0,`1,`2)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/>.
            </summary>
            <param name="bucket">The value identifying the bucket into which to insert the value.</param>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <remarks>
            <para>
            Unlike a traditional dictionary, adding an item to the
            <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/> with a bucket and key that already
            exists will aggregate the existing value with the added value, rather than throwing an <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.Add(`0,`1,`3)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/>.
            </summary>
            <param name="bucket">The value identifying the bucket into which to insert the value.</param>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <remarks>
            <para>
            Unlike a traditional dictionary, adding an item to the
            <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/> with a bucket and key that already
            exists will aggregate the existing value with the added value, rather than throwing an <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.Get(`0,`1)">
            <summary>
            Gets the value of the specified key from the specified bucket.
            </summary>
            <param name="bucket">The bucket from which to get the value.</param>
            <param name="key">The key of the value to get.</param>
            <returns>The value of the specified key in the specified bucket.</returns>
            <remarks>
            <para>
            If <paramref name="bucket"/> does not exist, or if <paramref name="key"/> was not found in the bucket, this method returns
            the default value for the value type of the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.Get(`1)">
            <summary>
            Gets the value of the specified key from all buckets in the aggregator.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value of the specified key.</returns>
            <remarks>
            <para>
            This method returns an aggregation of the value of all buckets containing this key.  Values across buckets are aggregated
            using the aggregator specified in the constructor.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.GetAggregatedValues">
            <summary>
            Returns a dictionary containing the aggregated values of all keys in the aggregator.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionary"/> containing the aggregated values of all keys in the aggregator.</returns>
            <remarks>
            <para>
            This method returns an aggregation of all values of all keys in all buckets.  Values across buckets are aggregated
            using the aggregator specified in the constructor.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.BucketAggregator`5.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to enumerate the keys and aggregated values in the aggregator.
            </summary>
            <returns>an enumerator that can be used to enumerate the keys and aggregated values in the aggregator.</returns>
        </member>
        <member name="P:System.Collections.Specialized.Beta.BucketAggregator`5.Aggregator">
            <summary>
            Gets the <see cref="T:Microsoft.BI.Common.Beta.IAggregator`1"/> used to aggregate values across buckets.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Beta.BucketAggregator`5.Buckets">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the buckets in the aggregator.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.Beta.FuncBucketAggregator`3">
            <summary>
            A specialized collection for collecting and aggregating values across one or more buckets using a function.
            </summary>
            <typeparam name="TBucket">The type of buckets in the aggregator.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TValue">The type of values in the aggregator.</typeparam>
            <remarks>
            <para>
            The <see cref="T:System.Collections.Specialized.Beta.FuncBucketAggregator`3"/> allows values to be inserted into buckets which
            can be individually updated or expired.  Adding a value to the aggregator for an existing key will add the new
            value to the existing value.  When getting values out of the aggregator, values can be selected from a single
            bucket, or from all buckets in the aggregator.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.FuncBucketAggregator`3.#ctor(System.Func{`2,`2,`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.FuncBucketAggregator`3"/> class using the
            specified aggregation function.
            </summary>
            <param name="aggregator">The function to use to aggregate values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.FuncBucketAggregator`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Func{`2,`2,`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.FuncBucketAggregator`3"/> class using the
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and aggregation function.
            </summary>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The function to use to aggregate values.</param>
        </member>
        <member name="T:System.Collections.Specialized.Beta.DurableWindowAggregator`3">
            <summary>
            A durable aggregator that supports aggregations over a sliding window and writes operations to a stream.
            </summary>
            <typeparam name="TWindow">The type of values in the window.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TAggregate">The type of the partial aggregate result.</typeparam>
        </member>
        <member name="M:System.Collections.Specialized.Beta.DurableWindowAggregator`3.#ctor(`0,`0,System.Collections.Generic.IEqualityComparer{`0},Microsoft.BI.Common.Beta.IRecursiveAggregator{`2},System.Collections.Generic.IDictionary{System.Type,System.Action{System.IO.BinaryWriter,System.Object}},System.Collections.Generic.IDictionary{System.Type,System.Func{System.IO.BinaryReader,System.Object}})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.DurableWindowAggregator`3"/> class using the
            specified equality comparer and aggregator.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The aggregator to use when aggregating values.</param>
            <param name="serializers">An optional parameter for specifying serializers for types.</param>
            <param name="deserializers">An optional parameter for specifying deserializers for types.</param>
        </member>
        <member name="T:System.Collections.Specialized.Beta.DurableWindowAggregator`5">
            <summary>
            A durable aggregator that supports aggregations over a sliding window and writes operations to a stream.
            </summary>
            <typeparam name="TWindow">The type of values in the window.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TPartial">The type of the partial aggregate result.</typeparam>
            <typeparam name="TIncrement">The type of incremental values that are added to the aggregator.</typeparam>
            <typeparam name="TFinal">The type of values produced by the aggregator.</typeparam>
        </member>
        <member name="M:System.Collections.Specialized.Beta.DurableWindowAggregator`5.#ctor(`0,`0,System.Collections.Generic.IEqualityComparer{`0},Microsoft.BI.Common.Beta.IRecursiveAggregator{`2,`3,`4},System.Collections.Generic.IDictionary{System.Type,System.Action{System.IO.BinaryWriter,System.Object}},System.Collections.Generic.IDictionary{System.Type,System.Func{System.IO.BinaryReader,System.Object}})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.DurableWindowAggregator`5"/> class using the
            specified equality comparer and aggregator.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The aggregator to use when aggregating values.</param>
            <param name="serializers">An optional parameter for specifying serializers for types.</param>
            <param name="deserializers">An optional parameter for specifying deserializers for types.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.DurableWindowAggregator`5.Add(`0,`1,`3)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Specialized.Beta.DurableWindowAggregator`5"/>.
            </summary>
            <param name="window">The value identifying the bucket into which to insert the value.</param>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <remarks>
            <para>
            If <paramref name="window"/> is less than <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MinWindow"/>
            or greater than or equal to <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MaxWindow"/>, this value
            will be ignored and the collection will be unchanged.
            </para>
            <para>
            Unlike a traditional dictionary, adding an item to the <see cref="T:System.Collections.Specialized.Beta.DurableWindowAggregator`5"/>
            with a bucket and key that already exists will aggregate the existing value with the added value, rather than
            throwing an <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.DurableWindowAggregator`5.AddPartial(`0,`1,`2)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Specialized.Beta.DurableWindowAggregator`5"/>.
            </summary>
            <param name="window">The value identifying the bucket into which to insert the value.</param>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <remarks>
            <para>
            If <paramref name="window"/> is less than <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MinWindow"/>
            or greater than or equal to <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MaxWindow"/>, this value
            will be ignored and the collection will be unchanged.
            </para>
            <para>
            Unlike a traditional dictionary, adding an item to the <see cref="T:System.Collections.Specialized.Beta.DurableWindowAggregator`5"/>
            with a bucket and key that already exists will aggregate the existing value with the added value, rather than
            throwing an <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.DurableWindowAggregator`5.Restore(System.IO.BinaryReader)">
            <summary>
            Restores the <see cref="T:System.Collections.Specialized.Beta.DurableWindowAggregator`5"/> by
            replaying operations from the provided <see cref="T:System.IO.BinaryReader"/>
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader"/> containing operations to restore from.</param>
        </member>
        <member name="P:System.Collections.Specialized.Beta.DurableWindowAggregator`5.WriteStream">
            <summary>
            Gets or sets a stream to be used to write operations.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.Beta.DurableWindowAggregator`5.ImplicitLoadTypeConverters">
            <summary>
            Implicitly load all types that extend <see cref="T:System.ComponentModel.TypeConverter"/> from all assemblies in context.
            </summary>
            <returns>An enumerable collection of types extending <see cref="T:System.ComponentModel.TypeConverter"/>.</returns>
            <remarks>This method does not load the built in TypeConverters in the System.ComponenetModel namespace.</remarks>
        </member>
        <member name="T:System.Collections.Specialized.Beta.WindowAggregator`3">
            <summary>
            An aggregator that supports aggregations over a sliding window.
            </summary>
            <typeparam name="TWindow">The type of values in the window.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TPartial">The type of the partial aggregate result.</typeparam>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`3.#ctor(`0,`0,Microsoft.BI.Common.Beta.IRecursiveAggregator{`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`3"/> class using the
            specified aggregator.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="aggregator">The aggregator to use when aggregating values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`3.#ctor(`0,`0,System.Collections.Generic.IEqualityComparer{`0},Microsoft.BI.Common.Beta.IRecursiveAggregator{`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`3"/> class using the
            specified equality comparer and aggregator.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The aggregator to use when aggregating values.</param>
        </member>
        <member name="T:System.Collections.Specialized.Beta.WindowAggregator`5">
            <summary>
            An aggregator that supports aggregations over a sliding window.
            </summary>
            <typeparam name="TWindow">The type of values in the window.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TPartial">The type of the partial aggregate result.</typeparam>
            <typeparam name="TIncrement">The type of incremental values that are added to the aggregator.</typeparam>
            <typeparam name="TFinal">The type of values produced by the aggregator.</typeparam>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`5.#ctor(`0,`0,Microsoft.BI.Common.Beta.IRecursiveAggregator{`2,`3,`4})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`3"/> class using the
            specified aggregator.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="aggregator">The aggregator to use when aggregating values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`5.#ctor(`0,`0,System.Collections.Generic.IEqualityComparer{`0},Microsoft.BI.Common.Beta.IRecursiveAggregator{`2,`3,`4})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`3"/> class using the
            specified equality comparer and aggregator.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The aggregator to use when aggregating values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`5.Add(`0,`1,`3)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`5"/>.
            </summary>
            <param name="window">The value identifying the bucket into which to insert the value.</param>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <remarks>
            <para>
            If <paramref name="window"/> is less than <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MinWindow"/> or greater than or equal to <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MaxWindow"/>, this value
            will be ignored and the collection will be unchanged.
            </para>
            <para>
            Unlike a traditional dictionary, adding an item to the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`5"/>
            with a bucket and key that already exists will aggregate the existing value with the added value, rather than
            throwing an <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`5.AddPartial(`0,`1,`2)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`5"/>.
            </summary>
            <param name="window">The value identifying the bucket into which to insert the value.</param>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <remarks>
            <para>
            If <paramref name="window"/> is less than <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MinWindow"/> or greater than or equal to <see cref="P:System.Collections.Specialized.Beta.WindowAggregator`5.MaxWindow"/>, this value
            will be ignored and the collection will be unchanged.
            </para>
            <para>
            Unlike a traditional dictionary, adding an item to the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`5"/>
            with a bucket and key that already exists will aggregate the existing value with the added value, rather than
            throwing an <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`5.Get(`0,`1)">
            <summary>
            Gets the value of the specified key from the specified bucket.
            </summary>
            <param name="window">The bucket from which to get the value.</param>
            <param name="key">The key of the value to get.</param>
            <returns>The value of the specified key in the specified bucket.</returns>
            <remarks>
            <para>
            If <paramref name="window"/> does not exist, or if <paramref name="key"/> was not found in the bucket, this method returns
            the default value for the value type of the <see cref="T:System.Collections.Specialized.Beta.BucketAggregator`5"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Specialized.Beta.WindowAggregator`5.UpdateWindow(`0,`0)">
            <summary>
            Updates the current window of the <see cref="T:System.Collections.Specialized.Beta.WindowAggregator`3"/>.
            </summary>
            <param name="minValue">The new minimum bucket value for the window.</param>
            <param name="maxValue">The new maximum bucket value for the window.</param>
            <exception cref="T:System.ArgumentException"><paramref name="minValue"/> is greater than or equal to <paramref name="maxValue"/>.</exception>
        </member>
        <member name="P:System.Collections.Specialized.Beta.WindowAggregator`5.WindowComparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare window values.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Beta.WindowAggregator`5.MinWindow">
            <summary>
            The lower bound on the aggregation window.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Beta.WindowAggregator`5.MaxWindow">
            <summary>
            The upper bound on the aggregation window.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.Beta.FuncWindowAggregator`3">
            <summary>
            An aggregator that supports aggregations over a sliding window using a function.
            </summary>
            <typeparam name="TWindow">The type of values in the window.</typeparam>
            <typeparam name="TKey">The type of keys in the aggregator.</typeparam>
            <typeparam name="TPartial">The type of values in the aggregator.</typeparam>
        </member>
        <member name="M:System.Collections.Specialized.Beta.FuncWindowAggregator`3.#ctor(`0,`0,System.Func{`2,`2,`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.FuncWindowAggregator`3"/> class using the
            specified aggregation function.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="aggregator">The function to use to aggregate values.</param>
        </member>
        <member name="M:System.Collections.Specialized.Beta.FuncWindowAggregator`3.#ctor(`0,`0,System.Collections.Generic.IEqualityComparer{`0},System.Func{`2,`2,`2})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.Beta.FuncWindowAggregator`3"/> class using the
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and aggregation function.
            </summary>
            <param name="minWindow">The minimum bucket value for the window.</param>
            <param name="maxWindow">The maximum bucket value for the window.</param>
            <param name="bucketEqualityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when identifying the
            bucket into which to add new values.</param>
            <param name="aggregator">The function to use to aggregate values.</param>
        </member>
        <member name="T:System.Collections.Specialized.ExpressionCollection">
            <summary>
            A collection of expressions that are resolved into strongly-typed values upon access.
            </summary>
            <remarks>
            <para>
            An <see cref="T:System.Collections.Specialized.ExpressionCollection"/> is a collection of internally-consistent C# expressions, keyed by name,
            that can be accessed and modified dynamically at runtime.
            </para>
            <para>
            Expressions can be added either as expression strings via the <see cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/> property or as actual
            object references via the standard <see cref="T:System.Collections.Generic.IDictionary`2"/> methods and properties.  Expression
            strings can access other expressions by name, including other expression strings or object references that were added
            before the current expression.
            </para>
            </remarks>
        </member>
        <member name="P:System.Collections.Specialized.ExpressionCollection.Count">
            <summary>
            Gets the number of expressions contained in the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.ExpressionCollection.Expressions">
            <summary>
            Gets a dictionary containing the expressions contained in the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>
            as well as their values.
            </summary>
            <remarks>
            <para>
            Expressions added to the <see cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/> property will be dynamically resolved upon accessing data
            from the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.  Expressions can reference other expressions by name.  Nested
            expressions names can be indicated either in undecorated form (<c>x</c>) or with a variable decorator (<c>$(x)</c>).
            </para>
            <para>
            Expressions are evaluated in the order in which they are added to the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.  Thus,
            in order to use a nested expression, any dependent expressions must be added before the depending expression.  For
            example, in order to use an expression like <c>a + b</c>, both <c>a</c> and <c>b</c> must be present in the
            <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </para>
            <para>
            Adding expressions via the <see cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/> property differs from adding expressions directly to the
            <see cref="T:System.Collections.Specialized.ExpressionCollection"/> in the following way: expressions added to the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>
            directly are stored via an object reference to a standard, in-memory object.  As such, they are subject to all normal
            reference- and value-type rules, depending on the type.  Furthermore, they cannot contain references to any dynamic
            expressions.  Expressions added via the <see cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/> property, on the other hand, are evaluated dynamically
            each time data is accessed.  As such, they will dynamically update as the value of other expressions in the collection
            change.
            </para>
            </remarks>
            <seealso cref="M:System.Collections.Specialized.ExpressionCollection.Add(System.String,System.Object)"/>
            <seealso cref="P:System.Collections.Specialized.ExpressionCollection.Item(System.String)"/>
        </member>
        <member name="P:System.Collections.Specialized.ExpressionCollection.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.ExpressionCollection.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.ExpressionCollection.Item(System.String)">
            <summary>
            Gets or the value of the expression with the specified key.
            </summary>
            <param name="key">The key of the expression to get.</param>
            <returns>The value of the expression with the specified key.</returns>
            <remarks>
            <para>
            When accessing an expression's value using the getter, string expressions are evaluated using the current state of
            the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.  Subsequent accesses to the same expression may result in different values
            if the state of the variables in the <see cref="T:System.Collections.Specialized.ExpressionCollection"/> have changed.
            </para>
            <para>
            When using the setter, expressions are added using a direct object reference to <paramref name="value"/>.
            </para>
            </remarks>
            <seealso cref="M:System.Collections.Specialized.ExpressionCollection.Add(System.String,System.Object)"/>
            <seealso cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/>
        </member>
        <member name="M:System.Collections.Specialized.ExpressionCollection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Specialized.ExpressionCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.ExpressionCollection.Add(System.String,System.Object)">
            <summary>
            Adds an expression with the provided key and value to the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </summary>
            <param name="key">The name to use as the key of the expression to add.</param>
            <param name="value">The object to use as the value of the expression to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">An expression with the same key already exists in the
            <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.</exception>
            <remarks>
            <para>
            Expressions added via the <see cref="M:System.Collections.Specialized.ExpressionCollection.Add(System.String,System.Object)"/> method will use an object reference to resolve the expression value when
            accessing data from the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </para>
            <para>
            Adding expressions via the <see cref="M:System.Collections.Specialized.ExpressionCollection.Add(System.String,System.Object)"/> method differs from adding expressions via the <see cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/>
            property in the following way: expressions added to the <see cref="T:System.Collections.Specialized.ExpressionCollection"/> directly are stored via an
            object reference to a standard, in-memory object.  As such, they are subject to all normal reference- and value-type rules,
            depending on the type.  Furthermore, they cannot contain references to any dynamic expressions.  Expressions added via the
            <see cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/> property, on the other hand, are evaluated dynamically each time data is accessed.  As such, they
            will dynamically update as the value of other expressions in the collection change.
            </para>
            </remarks>
            <seealso cref="P:System.Collections.Specialized.ExpressionCollection.Expressions"/>
            <seealso cref="P:System.Collections.Specialized.ExpressionCollection.Item(System.String)"/>
        </member>
        <member name="M:System.Collections.Specialized.ExpressionCollection.Clear">
            <summary>
            Removes all expressions from the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.ExpressionCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Specialized.ExpressionCollection"/> contains an expression with the specified key.
            </summary>
            <param name="key">The expression to locate in the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.</param>
            <returns><c>true</c> if the <see cref="T:System.Collections.Specialized.ExpressionCollection"/> contains an expression with the key;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Specialized.ExpressionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the expressions in the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Specialized.ExpressionCollection.Remove(System.String)">
            <summary>
            Removes the expression with the specified key from the <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.
            </summary>
            <param name="key">The key of the expression to remove.</param>
            <returns><c>true</c> if the expression is successfully removed; otherwise, <c>false</c>. This method
            also returns <c>false</c> if key was not found in the original <see cref="T:System.Collections.Specialized.ExpressionCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Specialized.ExpressionCollection.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified expression.
            </summary>
            <param name="key">The expression whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is
            found; otherwise, <c>null</c>.  This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:System.Collections.Specialized.ExpressionCollection"/> contains an expression with the specified key;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="F:System.Collections.Specialized.ExpressionCollection._MacroRegex">
            <summary>
            Regular expression recognizing macros of the form '$(x)'.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.ExpressionCollection.Parser">
            <summary>
            The <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeParser"/> used to parse expressions.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.ExpressionCollection.Evaluator">
            <summary>
            The <see cref="T:Microsoft.BI.Common.CSharp.CSharpCodeEvaluator"/> used to evaluate expressions.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2">
            <summary>
            Represents a collection of keys and values that has a maximum size which is enforced via "Least Recently Used" (LRU) caching algorithm and
            that additionally expires elements that pass a specified staleness threshold.
            </summary>
            <typeparam name="TKey">The type of the keys in the cache.</typeparam>
            <typeparam name="TValue">The type of the values in the cache.</typeparam>
            <remarks>
            <para>
            The <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> is a specialized subclass of the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> generic class.  In addition to the normal functionality provided by
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>, the <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> maintains
            a counter for each element added to the collection that is updated whenever an element is accessed.  When performing size enforcing, any
            element that is older than the specified staleness window will be automatically removed.
            </para>
            <para>
            Staleness enforcement is applied after any operation that changes the collection in any way, including reading a value (but not checking
            for the existence of a key in the collection).  As a consequence, most of the methods that were O(1) in
            <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> are now O(n) in the worst case, where n is equal to 
            <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> (in the best case, they are still O(1)).
            </para>
            <para>
            The efficiency of this class depends highly on how aggressive the staleness check is.  If you are going to make a series of changes to
            the collection in quick sequence, it is often a good idea to call <see cref="M:System.IUpdatable.BeginUpdate"/> and <see cref="M:System.IUpdatable.EndUpdate"/>
            around the updates to reduce the number of times constraints are enforced.
            </para>
            <para>
            Unless otherwise mentioned, the <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> class behaves identically to a
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> with the same type parameters.
            </para>
            </remarks>
            <seealso cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>
        </member>
        <member name="P:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.KeyStaleness">
            <summary>
            Gets or sets a value indicating how long keys are persisted in the collection before automatically expiring.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.Zero"/>.</exception>
            <remarks>
            <para>
            Decreasing the staleness threshold will result in immediate removal of items over the new staleness threshold.  Increasing the threshold
            has no immediate impact on the state of the collection.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.  Increasing the threshold is an O(1) operation.  Decreasing the threshold is
            an O(n) operation, where n is the number of elements that need to be removed as a result of the decreased threshold.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> class with the specified capacity.
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <param name="staleness">The maximum amount of time to keep around a key before it becomes eligible for automatic removal.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> must be unique according to the default equality comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.
            This constructor uses the default generic equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type
            <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/> generic interface, the default equality comparer uses
            that implementation.  Alternatively, you can specify an implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface
            by using a constructor that accepts a comparer parameter.
            </para>
            <para>
            This constructor is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> class with the specified capacity
            and that uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <param name="staleness">The maximum amount of time to keep around a key before it becomes eligible for automatic removal.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or <c>null</c> to use the
            default for the type of key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> must be unique according to the specified comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.
            If <paramref name="comparer"/> is <c>null</c>, this constructor uses the default generic equality comparer,
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/>
            generic interface, the default equality comparer uses that implementation.
            </para>
            <para>
            This constructor is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> class with the specified capacity
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <param name="staleness">The maximum amount of time to keep around a key before it becomes eligible for automatic removal.</param>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> must be unique according to the default equalitycomparer;
            likewise, every key in the source <paramref name="dictionary"/> must also be unique according to the default equality comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.
            This constructor uses the default generic equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type
            <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/> generic interface, the default equality comparer uses
            that implementation.  Alternatively, you can specify an implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface
            by using a constructor that accepts a comparer parameter.
            </para>
            <para>
            This constructor is an O(n) operation, where n is the number of elements in <paramref name="dictionary"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> class with the specified capacity
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and that uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <param name="staleness">The maximum amount of time to keep around a key before it becomes eligible for automatic removal.</param>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or <c>null</c> to use the
            default for the type of key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero -or- <paramref name="staleness"/> is less than
            <see cref="F:System.TimeSpan.Zero"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> must be unique according to the specified comparer;
            likewise, every key in the source <paramref name="dictionary"/> must also be unique according to the specified comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.
            If <paramref name="comparer"/> is <c>null</c>, this constructor uses the default generic equality comparer,
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/>
            generic interface, the default equality comparer uses that implementation.
            </para>
            <para>
            This constructor is an O(n) operation, where n is the number of elements in <paramref name="dictionary"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.EnforceSize">
            <summary>
            Enforces size constraints on the collection.
            </summary>
            <remarks>
            If the collection is currently updating, this method does nothing.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.Access(`0,System.Collections.Generic.LruFixedCapacityCollection{`0,`1}.ValueNodePair)">
            <summary>
            Accesses the specified key, moving it to the end of the priority queue.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="node">The <see cref="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.ValueNodeATimeTriple"/> containing a pointer to the linked list item and the value.</param>
            <remarks>
            <para>
            Accessing an element updates its last access time is updated, making it less likely to be automatically removed
            when adding elements to a full cache.
            </para>
            <para>
            This method does not do any checking to ensure that <paramref name="key"/> or <paramref name="node"/> already exist in
            the collection - it is the responsability of the caller to do so.
            </para>
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.Specialized.CounterLruFixedCapacityCollection`2.ValueNodeATimeTriple">
            <summary>
            Private container class for containing both the value of a key as well as a pointer to the corresponding linked list node
            in the priority queue.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Specialized.HashMap`1">
            <summary>
            A collection of objects keyed by hash codes and optimized for performance.
            </summary>
            <typeparam name="T">The type of the elements in the map.</typeparam>
            <remarks>
            <para>
            The <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> class is a specialized collection similar to a <see cref="T:System.Collections.Generic.HashSet`1"/> that focuses
            on performance.  The API is designed in such a way that the map can be queried in a very efficient manner without excessive
            recomputation of an object's hash and without storing a separate object to represent each element's key.  As such, it does not
            contain many of the methods of a standard collection, nor does it implement <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </para>
            <para>
            Although this class is called <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>, many of the methods on the class interact with the underlying
            data via index rather than key.  Hashing is still a fundamental concept in the underlying storage, and interacting with the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> shares many characteristics with other hash-based structures like <see cref="T:System.Collections.Generic.Dictionary`2"/>
            and <see cref="T:System.Collections.Generic.HashSet`1"/>; however, for the most part, the actual computation of the hash code is done outside the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </para>
            <para>
            The <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> has no concept of equality - it is possible to insert the same item more than once with the
            same hash code.  If <typeparamref name="T"/> is a reference type, <c>null</c> values can be stored in the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>
            by using the <see cref="M:System.Collections.Generic.Specialized.HashMap`1.Add(System.Int32,`0)"/> or <see cref="M:System.Collections.Generic.Specialized.HashMap`1.Add(System.Int32,`0@)"/> overloads and supplying a hash code.
            </para>
            </remarks>
            <content>
            Contains the implementation for the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> debug view.
            </content>
            <content>
            Contains the <see cref="T:System.Collections.Generic.IEnumerator`1"/> implementation for a <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> and the
            implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </content>
            <content>
            Contains a traverser for traversing values with the same hash.
            </content>
            <content>
            Contains a traverser for traversing the entire map.
            </content>
        </member>
        <member name="P:System.Collections.Generic.Specialized.HashMap`1.Capacity">
            <summary>
            Gets the capacity of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
            <remarks>
            The capacity of a <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> is the number of items it can hold before needing to be resized.  A
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> can hold up to 2^31 elements, at which point attempting to add another element will
            result in an <see cref="T:System.OutOfMemoryException"/> being thrown.
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.Specialized.HashMap`1.Count">
            <summary>
            Gets the number of items in the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> class with the default initial capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> class with the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than or equal to zero.</exception>
            <remarks>
            The capacity will be rounded up to the nearest power of two that is greater than or equal to <paramref name="capacity"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Add(System.Int32,`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
            <param name="hash">The hash of the item to add.</param>
            <param name="value">The item to add.</param>
            <returns>The index of the item in the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.</returns>
            <remarks>
            Although it is not required, it is recommended that <paramref name="hash"/> actually corresponds to the value that would
            be returned by calling the <see cref="M:System.Object.GetHashCode"/> method on <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Add(System.Int32,`0@)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
            <param name="hash">The hash of the item to add.</param>
            <param name="value">A reference to the item to add.</param>
            <returns>The index of the item in the <see cref="T:System.Collections.Generic.HashSet`1"/>.</returns>
            <remarks>
            <para>
            Although it is not required, it is recommended that <paramref name="hash"/> actually corresponds to the value that would
            be returned by calling the <see cref="M:System.Object.GetHashCode"/> method on <paramref name="value"/>.
            </para>
            <para>
            This method is useful when <typeparamref name="T"/> is a value type - it allows values to be copied into the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> without needing to copy them by value into the <paramref name="value"/> parameter.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Clear">
            <summary>
            Clears the contents of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.GetAt(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>The item at the specified index.</returns>
            <remarks>
            <para>
            Use <see cref="M:System.Collections.Generic.Specialized.HashMap`1.Traverse(System.Int32)"/> to get the index of an item given its hash code.
            </para>
            <para>
            Other than bounds checking, no validation on <paramref name="index"/> is performed.  If <paramref name="index"/>
            refers to an item in the underlying data structure that has not been allocated or has already been removed from the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>, then the value returned by this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.GetAt(System.Int32,`0@)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <param name="value">The reference at which to store the item.</param>
            <remarks>
            <para>
            Use <see cref="M:System.Collections.Generic.Specialized.HashMap`1.Traverse(System.Int32)"/> to get the index of an item given its hash code.
            </para>
            <para>
            This method is useful if <typeparamref name="T"/> is a value type, as it allows items to be accessed by reference, avoiding
            a memory copy.
            </para>
            <para>
            Other than bounds checking, no validation on <paramref name="index"/> is performed.  If <paramref name="index"/>
            refers to an item in the underlying data structure that has not been allocated or has already been removed from the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>, then the behavior of this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <remarks>
            <para>
            Use <see cref="M:System.Collections.Generic.Specialized.HashMap`1.Traverse(System.Int32)"/> to get the index of an item given its hash code.
            </para>
            <para>
            Other than bounds checking, no validation on <paramref name="index"/> is performed.  If <paramref name="index"/>
            refers to an item in the underlying data structure that has not been allocated or has already been removed from the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>, then the behavior of this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.SetAt(System.Int32,`0)">
            <summary>
            Sets the value of the item at the specified index.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="value">The new value for the item.</param>
            <remarks>
            <para>
            Use <see cref="M:System.Collections.Generic.Specialized.HashMap`1.Traverse(System.Int32)"/> to get the index of an item given its hash code.
            </para>
            <para>
            This method is useful if <typeparamref name="T"/> is a value type, as it allows items to be accessed by reference, avoiding
            a memory copy and allowing values to be mutated (iwhen  applicable).
            </para>
            <para>
            Other than bounds checking, no validation on <paramref name="index"/> is performed.  If <paramref name="index"/>
            refers to an item in the underlying data structure that has not been allocated or has already been removed from the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>, then the behavior of this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.SetAt(System.Int32,`0@)">
            <summary>
            Sets the value of the item at the specified index.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="value">A reference to the new value for the item.</param>
            <remarks>
            <para>
            Use <see cref="M:System.Collections.Generic.Specialized.HashMap`1.Traverse(System.Int32)"/> to get the index of an item given its hash code.
            </para>
            <para>
            Other than bounds checking, no validation on <paramref name="index"/> is performed.  If <paramref name="index"/>
            refers to an item in the underlying data structure that has not been allocated or has already been removed from the
            <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>, then the behavior of this method is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.AddHash(System.Int32)">
            <summary>
            Adds an entry to the underlying storage with the specified hash code.
            </summary>
            <param name="hash">The hash code of the item to add.</param>
            <returns>The index at which the item was added.</returns>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Allocate">
            <summary>
            Allocates a new entry for an item, expanding the underlying storage if necessary.
            </summary>
            <returns>The index of the new entry.</returns>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Expand">
            <summary>
            Expands the size of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> to twice its previous size.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.RemoveInternal(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="T:System.Collections.Generic.Specialized.HashMap`1.HashMapDebugView">
            <summary>
            Provides a more user-friendly view onto a <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> in the debugger.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.GetEnumerator">
            <summary>
            Gets an enumerator that will enumerate over the contents of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
            <returns>An enumerator that will enumerate over the contents of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.Specialized.HashMap`1.Enumerator">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the contents  of a <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
            <remarks>
            For performance reasons, this enumerator is a struct, not a class.  As such, it obeys value type semantics
            rather than reference type semantics.  Care must be taken when enumerating, as using it incorrectly will result
            in infinitely enumerating the first item in the map.
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.Specialized.HashMap`1.Enumerator.Current">
            <summary>
            Gets the item in the map at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Enumerator.#ctor(System.Collections.Generic.Specialized.HashMap{`0})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1.Enumerator"/> structure.
            </summary>
            <param name="map">The <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> over which to enumerate.</param>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item in the map.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next item; <c>false</c> if the
            enumerator has passed the end of the map.</returns>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first item in the map.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Traverse(System.Int32)">
            <summary>
            Gets a traverser that will traverse the items in the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> with a specified hash value.
            </summary>
            <param name="hash">The hash of the items to traverse.</param>
            <returns>A traverser that will travese the items of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> with a specified hash value.</returns>
        </member>
        <member name="T:System.Collections.Generic.Specialized.HashMap`1.HashTraverser">
            <summary>
            Traverses items in a <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> that have the same hash code.
            </summary>
            <remarks>
            For performance reasons, this traverser is a struct, not a class.  As such, it obeys value type semantics
            rather than reference type semantics.  Care must be taken when traversing, as using it incorrectly will result
            in infinitely traversing the first item in the map.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.HashTraverser.#ctor(System.Collections.Generic.Specialized.HashMap{`0},System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1.HashTraverser"/> structure.
            </summary>
            <param name="map">The <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> over which to traverse.</param>
            <param name="hash">The hash code to traverse.</param>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.HashTraverser.Next(System.Int32@)">
            <summary>
            Moves to the next item.
            </summary>
            <param name="index">When this method returns, this parameter will contain the index of the next item.</param>
            <returns><c>true</c> if the traverser successfully moved to the next item; <c>false</c> if no more items in
            the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> have the hash code.</returns>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.TraverseAll">
            <summary>
            Gets a traverser that will traverse all the items in the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
            <returns>A traverser that will traverse all the items in the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.Specialized.HashMap`1.Traverser">
            <summary>
            Traverses all items in a <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
            <remarks>
            For performance reasons, this traverser is a struct, not a class.  As such, it obeys value type semantics
            rather than reference type semantics.  Care must be taken when traversing, as using it incorrectly will result
            in infinitely traversing the first item in the map.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Traverser.#ctor(System.Collections.Generic.Specialized.HashMap{`0})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.Specialized.HashMap`1.HashTraverser"/> structure.
            </summary>
            <param name="map">The <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/> over which to traverse.</param>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMap`1.Traverser.Next(System.Int32@)">
            <summary>
            Moves to the next item.
            </summary>
            <param name="index">When this method returns, this parameter will contain the index of the next item.</param>
            <returns><c>true</c> if the traverser successfully moved to the next item; <c>false</c> if there are no more
            items in the <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>..</returns>
        </member>
        <member name="T:System.Collections.Generic.Specialized.HashMapEntry">
            <summary>
            An entry in a <see cref="T:System.Collections.Generic.Specialized.HashMap`1"/>.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Specialized.HashMapEntry.hash">
            <summary>
            The hash of the item at this index.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Specialized.HashMapEntry.next">
            <summary>
            The index of the next entry.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMapEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/> structure.
            </summary>
            <param name="hash">The hash of the item at this index.</param>
            <param name="next">The index of the next entry.</param>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMapEntry.Equals(System.Collections.Generic.Specialized.HashMapEntry)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/> is equal to another <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/>,
            </summary>
            <param name="other">The other <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/>.</param>
            <returns><c>true</c> if this <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/> is equal to <paramref name="other"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMapEntry.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/>.
            </summary>
            <returns>A hash code for the <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.Specialized.HashMapEntry.ToString">
            <summary>
            Gets a string representation for the <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/>.
            </summary>
            <returns>A string representation for the <see cref="T:System.Collections.Generic.Specialized.HashMapEntry"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.EnumComparer`1">
            <summary>
            Provides a method for comparing <see cref="T:System.Enum"/> values of a specific type.
            </summary>
            <typeparam name="T">The type of the enums to compare.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.EnumComparer`1.Default">
            <summary>
            Returns a default comparer for the type specified by the generic argument.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumComparer`1.Compare(`0,`0)">
            <summary>
            Compares two enum values and returns a value indicating whether one is less than, equal to, or greater than the
            other.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="T:System.Collections.Generic.EnumEqualityComparer`1">
            <summary>
            Provides methods to support the comparison of enum values for equality.
            </summary>
            <typeparam name="T">The type of enums to compare.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.EnumEqualityComparer`1.Default">
            <summary>
            Returns a default equality comparer for the type specified by the generic argument.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether two enum values are equal.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> and <paramref name="y"/> are equal; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.EnumEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Gets a hash code for an enum value.
            </summary>
            <param name="obj">The enum value for which to get a hash code.</param>
            <returns>A hash code of the enum value.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="T:System.Collections.Generic.IFixedCapacityCollection`2">
            <summary>
            Provides properties and methods for performing operations on a <see cref="T:System.Collections.Generic.ICollection`1"/> of fixed size.
            </summary>
            <typeparam name="TKey">The type of the keys in the collection.</typeparam>
            <typeparam name="TValue">The type of the values in the collection.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IFixedCapacityCollection`2.Capacity">
            <summary>
            Gets or sets a value indicating the maximum capacity of the cache.
            </summary>
            <remarks>
            <para>
            The capacity of a <see cref="T:System.Collections.Generic.IFixedCapacityCollection`2"/> is the number of elements that the
            <see cref="T:System.Collections.Generic.IFixedCapacityCollection`2"/> can store.  The <see cref="P:System.Collections.Generic.ICollection`1.Count"/>
            property is the number of elements that are actually in the <see cref="T:System.Collections.Generic.IFixedCapacityCollection`2"/>.
            </para>
            <para>
            <see cref="P:System.Collections.Generic.IFixedCapacityCollection`2.Capacity"/> is always greater than or equal to <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.  If
            <see cref="P:System.Collections.Generic.ICollection`1.Count"/> exceeds the capacity while adding elements, the implementer must remove an item
            before adding the new elements.  It is up to the implementer to decide which item to remove.
            </para>
            <para>
            Decreasing the capacity will result in immediate removal of items over the new capacity according to the standard removal
            algorithm.  Increasing the capacity has no immediate impact on the state of the collection.
            </para>
            </remarks>
            <seealso cref="P:System.Collections.Generic.ICollection`1.Count"/>
        </member>
        <member name="T:System.Collections.Generic.KeyValuePair">
            <summary>
            Provides static methods for creating key-value pair objects.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)">
            <summary>
            Creates a key-value pair.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A key-value pair.</returns>
            <remarks>
            <see cref="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)"/> is a helper method that you can use to instantiate a key-value pair structure wtihout
            having to explicitly specify the types of its components.
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.LruFixedCapacityCollection`2">
            <summary>
            Represents a collection of keys and values that has a maximum size which is enforced via "Least Recently Used" (LRU) caching algorithm.
            </summary>
            <typeparam name="TKey">The type of the keys in the cache.</typeparam>
            <typeparam name="TValue">The type of the values in the cache.</typeparam>
            <remarks>
            <para>
            The <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> generic class provides a mapping from a set of keys to a set of values,
            much like a <see cref="T:System.Collections.Generic.Dictionary`2"/>.  It also maintains a fixed capacity that determines the maximum number of
            elements that can exist in the collection at once.  When adding an item would result in the cache going over capacity, the item that was
            least-recently accessed will be removed to make room for the new item.
            </para>
            <para>
            Adding, removing, and retrieving items from a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> are all close to O(1) operations,
            with similar performance characteristics to the same operations in a <see cref="T:System.Collections.Generic.Dictionary`2"/> (specifically, the quality
            of the hashing algorithm determines retrieval performance).
            </para>
            <para>
            This class is not currently thread-safe, as even reading the collection results in structural changes to the underlying data.  To allow
            the collection to be accessed by multiple threads for reading or writing, you must implement your own synchronization.
            </para>
            <para>
            Unless otherwise mentioned, the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> class behaves identically to a
            <see cref="T:System.Collections.Generic.Dictionary`2"/> with the same type parameters.
            </para>
            </remarks>
            <seealso cref="T:System.Collections.Generic.Dictionary`2"/>
            <content>
            Contains the implementation of <see cref="T:System.IUpdatable"/> for <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </content>
            <content>
            Contains the implementation of <see cref="T:System.Collections.Generic.IDictionary`2"/> for <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </content>
            <content>
            Contains the implementation of <see cref="T:System.Collections.Generic.ICollection`1"/> for <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </content>
            <content>
            Contains the implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </content>
            <content>
            Contains the implementation of <see cref="T:System.Collections.IEnumerable"/> for <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </content>
        </member>
        <member name="P:System.Collections.Generic.LruFixedCapacityCollection`2.Capacity">
            <summary>
            Gets or sets a value indicating the maximum capacity of the cache.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than 0.</exception>
            <remarks>
            <para>
            The capacity of a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> is the number of elements that the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> can store.  The <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> property is the number of elements
            that are actually in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </para>
            <para>
            <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Capacity"/> is always greater than or equal to <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/>.  If <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> exceeds the capacity
            while adding elements, the least-recently accessed item is automatically removed before adding the new elements.
            </para>
            <para>
            Decreasing the capacity will result in immediate removal of items over the new capacity according to the standard removal
            algorithm.  Increasing the capacity has no immediate impact on the state of the collection.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.  Increasing the capacity is an O(1) operation.  Decreasing the capacity is
            an O(n) operation, where n is the number of elements that need to be removed as a result of the decreased capacity.
            </para>
            </remarks>
            <seealso cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/>
        </member>
        <member name="F:System.Collections.Generic.LruFixedCapacityCollection`2.Map">
            <summary>
            Contains a mapping of each key to a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2.ValueNodePair"/> that contains the value and node in
            <see cref="F:System.Collections.Generic.LruFixedCapacityCollection`2.Queue"/> for that key.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.LruFixedCapacityCollection`2.Queue">
            <summary>
            Contains a priority queue of keys sorted by their last access time (most recently accessed is last, least recently accessed is first).
            </summary>
        </member>
        <member name="F:System.Collections.Generic.LruFixedCapacityCollection`2.ValueComparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing values (primarily for the KeyValuePair overloads to Remove and Contains).
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> class with the specified capacity.
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> must be unique according to the default equality comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.  This
            constructor uses the default generic equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type
            <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/> generic interface, the default equality comparer uses
            that implementation.  Alternatively, you can specify an implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface
            by using a constructor that accepts a comparer parameter.
            </para>
            <para>
            This constructor is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> class with the specified capacity and that uses
            the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or <c>null</c> to use the
            default for the type of key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> must be unique according to the specified comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.  If
            <paramref name="comparer"/> is <c>null</c>, this constructor uses the default generic equality comparer,
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/>
            generic interface, the default equality comparer uses that implementation.
            </para>
            <para>
            This constructor is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.#ctor(System.Int32,System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> class with the specified capacity that contains
            elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> must be unique according to the default equality comparer; likewise,
            every key in the source <paramref name="dictionary"/> must also be unique according to the default equality comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.  This
            constructor uses the default generic equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type
            <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/> generic interface, the default equality comparer uses
            that implementation.  Alternatively, you can specify an implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface
            by using a constructor that accepts a comparer parameter.
            </para>
            <para>
            This constructor is an O(n) operation, where n is the number of elements in <paramref name="dictionary"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.#ctor(System.Int32,System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> class with the specified capacity that contains
            elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and that uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            </summary>
            <param name="capacity">The maximum capacity of the collection.</param>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or <c>null</c> to use the
            default for the type of key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <remarks>
            <para>
            Every key in a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> must be unique according to the specified comparer; likewise, every
            key in the source <paramref name="dictionary"/> must also be unique according to the specified comparer.
            </para>
            <para>
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> requires an equality implementation to determine whether keys are equal.  If
            <paramref name="comparer"/> is <c>null</c>, this constructor uses the default generic equality comparer,
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.  If type <typeparamref name="TKey"/> implements the <see cref="T:System.IEquatable`1"/>
            generic interface, the default equality comparer uses that implementation.
            </para>
            <para>
            This constructor is an O(n) operation, where n is the number of elements in <paramref name="dictionary"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.EnforceSize">
            <summary>
            Enforces size constraints on the collection.
            </summary>
            <remarks>
            <para>
            If the collection is currently updating, this method does nothing.
            </para>
            <para>
            Subclasses may choose to override this method to perform custom size enforcement behavior.  Derived methods should respect
            whether or not the collection is currently in the updating state.  If not currently updating, when this method returns,
            <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> must be less than or equal to <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Capacity"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.RemoveOldest">
            <summary>
            Removes the least-recently accessed item from the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.Access(`0,System.Collections.Generic.LruFixedCapacityCollection{`0,`1}.ValueNodePair)">
            <summary>
            Accesses the specified key, moving it to the end of the priority queue.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="node">The <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2.ValueNodePair"/> containing a pointer to the linked list item and the value.</param>
            <remarks>
            <para>
            Accessing an element updates its last access time is updated, making it less likely to be automatically removed
            when adding elements to a full cache.
            </para>
            <para>
            This method does not do any checking to ensure that <paramref name="key"/> or <paramref name="node"/> already exist in
            the collection - it is the responsability of the caller to do so.
            </para>
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.LruFixedCapacityCollection`2.ValueNodePair">
            <summary>
            Private container class for containing both the value of a key as well as a pointer to the corresponding linked list node
            in the priority queue.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.LruFixedCapacityCollection`2.IsUpdating">
            <summary>
            Gets a value indicating whether the collection is currently updating.
            </summary>
            <remarks>
            <para>
            This property will return <c>true</c> for the duration of an update session.  An update session is started by calling
            <see cref="M:System.IUpdatable.BeginUpdate"/> and ended by calling <see cref="M:System.IUpdatable.EndUpdate"/>.
            </para>
            <para>
            For the duration of an update session, collection size is not enforced.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.BeginUpdate">
            <summary>
            Disables enforcing of collection size.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> is already
            updating.</exception>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.EndUpdate">
            <summary>
            Re-enabled enforcing of collection size.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> is not currently
            updating.</exception>
        </member>
        <member name="P:System.Collections.Generic.LruFixedCapacityCollection`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The order of the keys in the <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it is the same order as the associated
            values in the <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Values"/> property.
            </para>
            <para>
            The returned <see cref="T:System.Collections.Generic.ICollection`1"/> is not a static copy; instead, the <see cref="T:System.Collections.Generic.ICollection`1"/> refers
            back to the keys in the original <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.  Therefore, changes to the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> continue to be reflected in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </para>
            <para>
            Accessing this property does not affect the last access time of the keys in the collection.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.LruFixedCapacityCollection`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The order of the values in the <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified, but it is the same order as the associated
            keys in the <see cref="T:System.Collections.Generic.ICollection`1"/> returned by the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Keys"/> property.
            </para>
            <para>
            Unlike the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Keys"/> property, the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is a static copy.  Therefore, changes
            to the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> will not be reflected in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.LruFixedCapacityCollection`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value of the element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> does not exist in the
            collection.</exception>
            <remarks>
            <para>
            This property provides the ability to access a specific element in the collection by using the following C# syntax:
            <example><code>myCollection[key]</code></example>.
            </para>
            <para>
            You can also use the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Item(`0)"/> property to add new elements by setting the value of a key that does not exist in the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.  When you set the property value, if the key is in the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>, the value associated with that key is replaced by the assigned value. If
            the key is not in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>, the key and value are added to the cache. In
            contrast, the <see cref="M:System.Collections.Generic.LruFixedCapacityCollection`2.Add(`0,`1)"/> method does not modify existing elements.
            </para>
            <para>
            A key cannot be null, but a value can be, if the value type TValue is a reference type.
            </para>
            <para>
            When getting or setting the value of this property, if the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> contains an
            element with the specified key, the element's last access time is updated, making it less likely to be automatically removed
            when adding elements to a full cache.
            </para>
            <para>
            Getting or setting the value of this property approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the cache.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.  The value can be <c>null</c> for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/></exception>
            <remarks>
            <para>
            You can also use the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Item(`0)"/> property to add new elements by setting the value of a key that does not exist in
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>; for example, <example><code>myCollection[myKey] = myValue</code></example>.
            However, if the specified key already exists in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>, setting the
            <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Item(`0)"/> property overwrites the old value. In contrast, the <see cref="M:System.Collections.Generic.LruFixedCapacityCollection`2.Add(`0,`1)"/> method throws an exception if a value with
            the specified key already exists.
            </para>
            <para>
            If the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> value already equals the capacity, the least-recently accessed item in the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> is removed before the new element is added.
            </para>
            <para>
            If the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> contains an element with the specified key, the element's last access
            time is not updated by this operation.
            </para>
            <para>
            A key cannot be <c>null</c>, but a value can be, if <typeparamref name="TValue"/> is a reference type.
            </para>
            <para>
            Whether <see name="Count"/> is less than or the same as the capacity, this method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.</param>
            <returns><c>true</c> if the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> contains an element with the specified key;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            If the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> contains an element with the specified key, the element's last access
            time is not updated by this operation.
            </para>
            <para>
            This method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.  This method returns <c>false</c>
            if <paramref name="key"/> is not found in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            If the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> does not contain an element with the specified key, the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> remains unchanged.  No exception is thrown.
            </para>
            <para>
            This method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise,
            the default value for the type of the <paramref name="value"/> parameter.  This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> contains an element with the specified key;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method combines the functionality of the <see cref="M:System.Collections.Generic.LruFixedCapacityCollection`2.ContainsKey(`0)"/> method and the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Item(`0)"/> property.
            </para>
            <para>
            If the key is not found, then the <paramref name="value"/> parameter gets the appropriate default value for the type
            <typeparamref name="TValue"/>; for example, 0 (zero) for integer types, <c>false</c> for boolean types, and <c>null</c> for
            reference types.
            </para>
            <para>
            Use the <see cref="M:System.Collections.Generic.LruFixedCapacityCollection`2.TryGetValue(`0,`1@)"/> method if your code frequently attempts to access keys that are not in the cache.  Using this method
            is more efficient than catching the <see cref="T:System.Collections.Generic.KeyNotFoundException"/> thrown by the <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Item(`0)"/> property.
            </para>
            <para>
            If the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> contains an element with the specified key, the element's last access
            time is updated, making it less likely to be automatically removed when adding elements to a full cache.
            </para>
            <para>
            This method approaches an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.GetValueNodePair(`1,System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2.ValueNodePair"/> that contains the both the value for a key as well as the <see cref="T:System.Collections.Generic.LinkedListNode`1"/>
            in which the key appears in the priority queue.
            </summary>
            <param name="value">The value of the key.</param>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> in <see cref="F:System.Collections.Generic.LruFixedCapacityCollection`2.Queue"/> representing this key.</param>
            <returns>A <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2.ValueNodePair"/> that contains both the value for the key as well as the <see cref="T:System.Collections.Generic.LinkedListNode`1"/>
            in which the key appears in the priority queue.</returns>
            <remarks>
            <para>
            No validation is performed to check that <paramref name="node"/> actually exists in <see cref="F:System.Collections.Generic.LruFixedCapacityCollection`2.Queue"/>.  If it does not, the
            behavior of the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> is undefined.
            </para>
            <para>
            Subclasses may choose to override this method in order to provide an implementation-specific override (usually returning a class
            deriving from <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2.ValueNodePair"/> that stores additional information).
            </para>
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The capacity of a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> is the number of elements that the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/> can store.  The <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> property is the number of elements
            that are actually in the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </para>
            <para>
            <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Capacity"/> is always greater than or equal to <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/>.  If <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> exceeds the capacity
            while adding elements, the least-recently accessed item is automatically removed before adding the new elements.
            </para>
            <para>
            Getting the value of this property is an O(1) operation.
            </para>
            </remarks>
            <seealso cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Capacity"/>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="P:System.Collections.Generic.LruFixedCapacityCollection`2.Count"/> property is set to 0, and references to other objects from elements of the collection are also released.
            The capacity remains unchanged.
            </para>
            <para>
            This is an O(n) operation, where n is the count of cache.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.LruFixedCapacityCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2.Enumerator"/> structure for the
            <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.</returns>
            <remarks>
            <para>
            For purposes of enumeration, each item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> structure representing a value
            and its key.
            </para>
            <para>
            The enumerator returned by this method remains valid as long as the collection remains unchanged. If changes are made to the
            collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.
            </para>
            <para>
            The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a
            thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To
            allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.
            </para>
            <para>
            Enumerating through elements in the cache in this way will access each element as it is enumerated.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.LruFixedCapacityCollection`2.Enumerator">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for enumerating the items in a <see cref="T:System.Collections.Generic.LruFixedCapacityCollection`2"/>.
            </summary>
            <remarks>
            This enumerator iterates over items in an undefined order.  TODO - should it be access order?  Reverse access order?
            Either of these requires a lookup for each iteration, which is a bit more expensive than just linearly iterating.
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs where items are ordered and accessible by index as well as by key.
            </summary>
            <typeparam name="K">The type of keys in the dictionary.</typeparam>
            <typeparam name="V">The type of values in the dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.KeyComparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of keys for the
            <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.ValueComparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of values for the
            <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> class that is empty, has the default initial
            capacity, and uses the default equality comparers for the key and value types.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> class that is empty, has the specified initial
            capacity, and uses the default equality comparers for the key and value types.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> class that is empty, has the default initial
            capacity, uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the key type, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the value type.
            </summary>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the key type.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values,
            or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the value type.</param>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> class that is empty, has the specified initial
            capacity, uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the key type, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the value type.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> can contain.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the key type.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values,
            or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the value type.</param>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> class that contains elements copied from the
            specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default equality comparers for the key and value types.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Creates a new instance of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> class that contains elements copied from the
            specified <see cref="T:System.Collections.Generic.IDictionary`2"/> uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the key
            type, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the value type.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the key type.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values,
            or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the value type.</param>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.IndexOf(`1)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="item">The value of the item to locate in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>; otherwise, -1.</returns>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal to the length
            of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal to the length
            of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> contains an element with the specified value.
            </summary>
            <param name="item">The value to locate in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.RemoveValue(`1)">
            <summary>
            Removes the first element with the specified value from the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="item">The value of the element to remove.</param>
            <returns>true if the element is sucessfully removed; otherwise, false.  This method also returns false if the value was
            not found in the original <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> contains an element with the key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.Keys">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element was successfully removed; otherwise, false.  This method also returns false if the key
            was not found in the original <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise,
            the default value for the type of the value parameter.  This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.Values">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception>
            <exception cref="T:System.NotSupportedException">The proerty is set and the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add to the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> contains a specific value.
            </summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to locate in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns>true if the item is found in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> to an <see cref="T:System.Array"/>, starting at a particular
            <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the
            <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurence of a specific object from the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to remove from the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns>true if the item was successfully removed from the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>; otherwise, false.
            This method also returns false if the item is not found in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.OrderedDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the items of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <returns>An enumerator that iterates through the items of the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Determines the index of a specified key in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns>The index of <paramref name="key"/> if found in the <see cref="T:System.Collections.Generic.OrderedDictionary`2"/>; otherwise, -1.</returns>
        </member>
        <member name="T:System.Security.Cryptography.CRC">
            <summary>
            Computes the CRC hash value for the input data. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.CRC.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.CRC.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether the current transform can transform multiple blocks.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.CRC.UInt32Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.CRC.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.CRC.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:System.Security.Cryptography.CRC"/> class.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.CRC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Hashes the specified range of the given byte array.
            </summary>
            <param name="array">The input to compute the hash of.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:System.Security.Cryptography.CRC.HashByte(System.Byte)">
            <summary>
            Hashes a byte and adds the result to the hash.
            </summary>
            <param name="b">The byte to hash.</param>
        </member>
        <member name="M:System.Security.Cryptography.CRC.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:System.Security.Cryptography.CRC.Initialize">
            <summary>
            Initializes the <see cref="T:System.Security.Cryptography.CRC"/> hash provider.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.CRC.CRC_TABLE">
            <summary>
            Cached value of CRC32 values.
            </summary>
            <remarks>
            Computed from the following code:
            <code>
            uint[] CRC_TABLE = new uint[256];
            for (uint i = 0; i &lt; CRC_TABLE.Length; i++)
            {
                uint entry = i;
                for (uint j = 8; j &gt; 0; j--)
                {
                    if ((entry &amp; 1u) == 1u)
                        entry = (entry &gt;&gt; 1) ^ 0xEDB88320;
                    else
                        entry &gt;&gt;= 1;
                }
                CRC_TABLE[i] = entry;
            }
            </code>
            </remarks>
        </member>
        <member name="T:System.ArgumentNegativeException">
            <summary>
            The exception that is thrown when the value of an argument is negative when it must not be.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.ArgumentNegativeException"/> is thrown when a method is invoked and at least one of the arguments passed to the method
            is negative when it is not allowed to be negative.
            </para>
            <para>
            <see cref="T:System.ArgumentNegativeException"/> behaves identically to <see cref="T:System.ArgumentOutOfRangeException"/>.  It is provided so that
            application code can differentiate between exceptions caused by out-of-range arguments that are negative and exceptions that are
            caused by other out-of-range conditions.  For error caused by null arguments, see <see cref="T:System.ArgumentNullException"/>.  For other
            argument errors, see <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.ArgumentNegativeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentNegativeException"/> class.
            </summary>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to a system-supplied message that
            describes the error, such as "Nonnegative number required.".  This message takes into account the current system culture.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentNegativeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description><c>null</c></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentNegativeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentNegativeException"/> class with the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">The name of the parameter that causes this exception.</param>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to a system-supplied message that
            describes the error, such as "Nonnegative number required.".  This message takes into account the current system culture.
            </para>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentException.ParamName"/> property of the new instance using the <paramref name="paramName"/>
            parameter.  The content of <paramref name="paramName"/> is intended to be understood by humans.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentNegativeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description>The parameter name string.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentNegativeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentNegativeException"/> class with the name of the parameter that caused this
            exception and the specified error message.
            </summary>
            <param name="paramName">The name of the parameter that causes this exception.</param>
            <param name="message">The message that describes the error.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentException.ParamName"/> property of the new instance using the <paramref name="paramName"/>
            parameter.  The content of <paramref name="paramName"/> is intended to be understood by humans.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentNegativeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description>The parameter name string.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentNegativeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentNegativeException"/> class with the specified error message and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentNegativeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description><c>null</c></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentNegativeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentNegativeException"/> class with the name of the parameter that caused this
            exception, the specified error message, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="paramName">The name of the parameter that causes this exception.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentException.ParamName"/> property of the new instance using the <paramref name="paramName"/>
            parameter.  The content of <paramref name="paramName"/> is intended to be understood by humans.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentNegativeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description><c>null</c></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentNegativeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentNegativeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.ArgumentTypeException">
            <summary>
            The exception that is thrown when calling a method with an incorrect argument type.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.ArgumentTypeException"/> is thrown when a method is invoked that accepts <c>object</c> parameters where one or more paramter's
            type is not valid for the method. All instances of <see cref="T:System.ArgumentTypeException"/> should carry a meaningful error message describing
            the type mismatch.
            </para>
            </remarks>
        </member>
        <member name="P:System.ArgumentTypeException.ExpectedType">
            <summary>
            Gets the <see cref="T:System.Type"/> that was expected by the method call that caused this exception.
            </summary>
            <remarks>
            <para>
            Every <see cref="T:System.ArgumentTypeException"/> should carry the type that was expected by the method call that caused this exception.
            </para>
            <para>
            This property is read-only, and returns the same value as was passed into the constructor.
            </para>
            </remarks>
        </member>
        <member name="P:System.ArgumentTypeException.ActualType">
            <summary>
            Gets the actual <see cref="T:System.Type"/>that was supplied to the method.
            </summary>
            <remarks>
            <para>
            Every <see cref="T:System.ArgumentTypeException"/> should carry the type that was provided to the method call that caused this exception.
            </para>
            <para>
            This property is read-only, and returns the same value as was passed into the constructor.
            </para>
            </remarks>
        </member>
        <member name="M:System.ArgumentTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentTypeException"/> class.
            </summary>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to a system-supplied message that
            describes the error, such as "Argument type mismatch".  This message takes into account the current system culture.</para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentTypeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentTypeException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentTypeException"/> class with the number of expected and actual arguments.
            </summary>
            <param name="expectedType">The expected type of the argument.</param>
            <param name="actualType">The actual type of the argument that was received.</param>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentTypeException.ExpectedType"/> and <see cref="P:System.ArgumentTypeException.ActualType"/> properties of the new instance using
            <paramref name="expectedType"/> and <paramref name="actualType"/>, respectively.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentTypeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string, including the counts supplied by <paramref name="expectedType"/> and
            <paramref name="actualType"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentTypeException.ExpectedType"/></term>
            <description>The expected <see cref="T:System.Type"/> supplied in <paramref name="expectedType"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentTypeException.ActualType"/></term>
            <description>The actual <see cref="T:System.Type"/> supplied in <paramref name="actualType"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentTypeException"/> class with the specified error message and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentTypeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentTypeException.#ctor(System.String,System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentTypeException"/> class with the specified error message, the expected and actual
            parameter counts, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="expectedType">The expected type of the argument.</param>
            <param name="actualType">The actual type of the argument that was received.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentTypeException.ExpectedType"/> and <see cref="P:System.ArgumentTypeException.ActualType"/> properties of the new instance using
            <paramref name="expectedType"/> and <paramref name="actualType"/>, respectively.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ArgumentTypeException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentTypeException.ExpectedType"/></term>
            <description>The expected <see cref="T:System.Type"/> supplied in <paramref name="expectedType"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentTypeException.ActualType"/></term>
            <description>The actual <see cref="T:System.Type"/> supplied in <paramref name="actualType"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ArgumentTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentTypeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.ArgumentTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the parameter name and additional exception information.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.ExtraArgumentException">
            <summary>
            The exception that is thrown when calling a method and specifying too many arguments.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.ExtraArgumentException"/> is thrown when a method is invoked and too many arguments are passed to the called method.
            All instances of <see cref="T:System.ExtraArgumentException"/> should carry a meaningful error message describing the extra arguments.
            </para>
            </remarks>
        </member>
        <member name="P:System.ExtraArgumentException.ExpectedCount">
            <summary>
            Gets the number of arguments that were expected by the method call that caused this exception.
            </summary>
            <remarks>
            <para>
            Every <see cref="T:System.ExtraArgumentException"/> should carry the number of arguments that were expected by the method call that
            caused this exception.
            </para>
            <para>
            This property is read-only, and returns the same value as was passed into the constructor.
            </para>
            </remarks>
        </member>
        <member name="P:System.ExtraArgumentException.ActualCount">
            <summary>
            Gets the actual number of arguments that were supplied to the method.
            </summary>
            <remarks>
            <para>
            Every <see cref="T:System.ExtraArgumentException"/> should carry the number of arguments that were provided to the method call that
            caused this exception.
            </para>
            <para>
            This property is read-only, and returns the same value as was passed into the constructor.
            </para>
            </remarks>
        </member>
        <member name="M:System.ExtraArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ExtraArgumentException"/> class.
            </summary>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to a system-supplied message that
            describes the error, such as "Too many arguments supplied".  This message takes into account the current system culture.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ExtraArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ExtraArgumentException.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ExtraArgumentException"/> class with the number of expected and actual arguments.
            </summary>
            <param name="expectedCount">The expected number of arguments.</param>
            <param name="actualCount">The actual number of arguments that were received.</param>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.ExtraArgumentException.ExpectedCount"/> and <see cref="P:System.ExtraArgumentException.ActualCount"/> properties of the new instance using
            <paramref name="expectedCount"/> and <paramref name="actualCount"/>, respectively.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ExtraArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string, including the counts supplied by <paramref name="expectedCount"/> and
            <paramref name="actualCount"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ExtraArgumentException.ExpectedCount"/></term>
            <description>The expected count supplied in <paramref name="expectedCount"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ExtraArgumentException.ActualCount"/></term>
            <description>The actual count supplied in <paramref name="actualCount"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ExtraArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ExtraArgumentException"/> class with the specified error message and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ExtraArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ExtraArgumentException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ExtraArgumentException"/> class with the specified error message, the expected and actual
            parameter counts, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="expectedCount">The expected number of arguments.</param>
            <param name="actualCount">The actual number of arguments that were received.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            This constructor initializes the <see cref="P:System.ExtraArgumentException.ExpectedCount"/> and <see cref="P:System.ExtraArgumentException.ActualCount"/> properties of the new instance using
            <paramref name="expectedCount"/> and <paramref name="actualCount"/>, respectively.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.ExtraArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ExtraArgumentException.ExpectedCount"/></term>
            <description>The expected count supplied in <paramref name="expectedCount"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ExtraArgumentException.ActualCount"/></term>
            <description>The actual count supplied in <paramref name="actualCount"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ExtraArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ExtraArgumentException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.ExtraArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the parameter name and additional exception information.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.InvalidInputException">
            <summary>
            The exception that is thrown when the input to an operation is invalid in some way.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.InvalidInputException"/> is thrown when the input to an operation is invalid in some way.
            All instances of <see cref="T:System.InvalidInputException"/> should carry a meaningful error message describing the extra arguments.
            </para>
            </remarks>
        </member>
        <member name="M:System.InvalidInputException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.InvalidInputException"/> class.
            </summary>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to a system-supplied message that
            describes the error, such as "Invalid input".  This message takes into account the current system culture.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.InvalidInputException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.InvalidInputException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.InvalidInputException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.InvalidInputException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.InvalidInputException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.InvalidInputException"/> class with the specified error message and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.InvalidInputException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.InvalidInputException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.InvalidInputException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.MissingArgumentException">
            <summary>
            The exception that is thrown when calling a method without specifying one or more required arguments.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.MissingArgumentException"/> is thrown when a method is invoked and at least one of the required arguments is not
            passed to the called method.  All instances of <see cref="T:System.MissingArgumentException"/> should carry a meaningful error message
            describing the missing argument.
            </para>
            </remarks>
        </member>
        <member name="M:System.MissingArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.MissingArgumentException"/> class.
            </summary>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to a system-supplied message that
            describes the error, such as "Missing a required argument".  This message takes into account the current system culture.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.MissingArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The localized error message string.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.MissingArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.MissingArgumentException"/> class with the name of the missing parameter.
            </summary>
            <param name="paramName">The name of the missing parameter.</param>
            <remarks>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentException.ParamName"/> property of the new instance using <paramref name="paramName"/>.
            The content of <paramref name="paramName"/> is intended to be understood by humans.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.MissingArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description><c>null</c></description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The empty string ("").</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description>The parameter name string supplied in <paramref name="paramName"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.MissingArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.MissingArgumentException"/> class with the specified error message and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.MissingArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.MissingArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.MissingArgumentException"/> class with the specified error message and the name
            of the parameter that was missing.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="paramName">The name of the missing parameter.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentException.ParamName"/> property of the new instance using <paramref name="paramName"/>.
            The content of <paramref name="paramName"/> is intended to be understood by humans.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.MissingArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description>The parameter name string supplied in <paramref name="paramName"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.MissingArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.MissingArgumentException"/> class with the specified error message, the missing
            parameter name, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="paramName">The name of the missing parameter.</param>
            <param name="innerException">The exception that is the cause of the current exception.  If the <paramref name="innerException"/>
            parameter is not <c>null</c>, the current exception is raised in a <c>catch</c> block that handles the inner exception.</param>
            <remarks>
            <para>
            The content of the <paramref name="message"/> parameter is intended to be understood by humans.  The caller of this constructor
            is required to ensure that this string has been localized for the current system culture.
            </para>
            <para>
            This constructor initializes the <see cref="P:System.ArgumentException.ParamName"/> property of the new instance using <paramref name="paramName"/>.
            The content of <paramref name="paramName"/> is intended to be understood by humans.
            </para>
            <para>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException"/> property.  The <see cref="P:System.Exception.InnerException"/> property returns the same value that
            is passed into the constructor, or <c>null</c> if the <see cref="P:System.Exception.InnerException"/> property does not supply the inner
            exception value to the constructor.
            </para>
            <para>
            The following table shows the initial property values for an instance of the <see cref="T:System.MissingArgumentException"/> class.
            </para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The inner exception reference.</description>
            </item>
            <item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The message supplied in <paramref name="message"/>.</description>
            </item>
            <item>
            <term><see cref="P:System.ArgumentException.ParamName"/></term>
            <description>The parameter name string supplied in <paramref name="paramName"/>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.MissingArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.MissingArgumentException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Globalization.UnicodeCategories">
            <summary>
            Defines the Unicode category of a character.
            </summary>
            <remarks>
            This enumeration is similar to <see cref="T:System.Globalization.UnicodeCategory"/>.  However, unlike <see cref="T:System.Globalization.UnicodeCategory"/>, these categories
            are flags and can be combined together.  This enumeration contains several meta values, such as <see cref="F:System.Globalization.UnicodeCategories.Punctuation"/>,
            <see cref="F:System.Globalization.UnicodeCategories.Letter"/>, and <see cref="F:System.Globalization.UnicodeCategories.Number"/>, which encapsulate several individual categories.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Letter">
            <summary>
            Letter character.  Signified by the Unicode designations "Lu" (letter, uppercase), "Ll" (letter, lowercase), "Lt" (letter, titlecase), "Lm" (letter, modifier),
            and "Lo" (letter, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.UppercaseLetter"/>, <see cref="F:System.Globalization.UnicodeCategory.LowercaseLetter"/>, <see cref="F:System.Globalization.UnicodeCategory.TitlecaseLetter"/>,
            <see cref="F:System.Globalization.UnicodeCategory.ModifierLetter"/>, and <see cref="F:System.Globalization.UnicodeCategory.OtherLetter"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.UppercaseLetter">
            <summary>
            Uppercase letter.  Signified by the Unicode designation "Lu" (letter, uppercase).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.UppercaseLetter"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.LowercaseLetter">
            <summary>
            Lowercase letter.  Signified by the Unicode designation "Ll" (letter, lowercase).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.LowercaseLetter"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.TitlecaseLetter">
            <summary>
            Titlecase letter.  Signified by the Unicode designation "Lu" (letter, titlecase).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.TitlecaseLetter"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.ModifierLetter">
            <summary>
            Modifier letter character, which is free-standing spacing character that indicates modifications of a preceding letter. Signified by the Unicode designation "Lm"
            (letter, modifier). 
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.ModifierLetter"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.OtherLetter">
            <summary>
            Letter that is not an uppercase letter, a lowercase letter, a titlecase letter, or a modifier letter. Signified by the Unicode designation "Lo" (letter, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.OtherLetter"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Mark">
            <summary>
            Mark character.  Signified by the Unicode designations "Mc" (mark, spacing combining), "Me" (mark, enclosing), "Mn" (mark, nonspacing), and "Mo" (mark, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.SpacingCombiningMark"/>, <see cref="F:System.Globalization.UnicodeCategory.EnclosingMark"/>, and <see cref="F:System.Globalization.UnicodeCategory.NonSpacingMark"/>.
            <see cref="T:System.Globalization.UnicodeCategory"/> has no corresponding value for <c>OtherMark</c>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.SpacingCombiningMark">
            <summary>
            Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc"
            (mark, spacing combining).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.SpacingCombiningMark"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.EnclosingMark">
            <summary>
            Enclosing mark character, which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode
            designation "Me" (mark, enclosing).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.EnclosingMark"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.NonSpacingMark">
            <summary>
            Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn" (mark, nonspacing).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.NonSpacingMark"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.OtherMark">
            <summary>
            Mark that is not a spacing combining mark, an enclosing mark, or a nonspacing mark. Signified by the Unicode designation "Mo" (mark, other).
            </summary>
            <remarks>
            Has no corresponding value in <see cref="T:System.Globalization.UnicodeCategory"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Number">
            <summary>
            Number character.  Signified by the Unicode designations "Nd" (number, decimal), "Nl" (number, letter), and "No" (number, other).
            </summary>
            <remarks>
            Correponds to <see cref="F:System.Globalization.UnicodeCategory.DecimalDigitNumber"/>, <see cref="F:System.Globalization.UnicodeCategory.LetterNumber"/>, and <see cref="F:System.Globalization.UnicodeCategory.OtherNumber"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.DecimalDigitNumber">
            <summary>
            Decimal digit character, that is, a character in the range 0 through 9. Signified by the Unicode designation "Nd" (number, decimal digit).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.DecimalDigitNumber"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.LetterNumber">
            <summary>
            Number represented by a letter, instead of a decimal digit, for example, the Roman numeral for five, which is "V". The indicator is signified by the Unicode
            designation "Nl" (number, letter).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.LetterNumber"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.OtherNumber">
            <summary>
            Number that is neither a decimal digit nor a letter number, for example, the fraction 1/2. The indicator is signified by the Unicode designation "No"
            (number, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.OtherNumber"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Punctuation">
            <summary>
            Punctuation character.  Signified by the Unicode designations "Pc" (punctuation, connector), "Pd" (punctuation, dash), "Ps" (punctuation, open), "Pe"
            (punctuation, close), "Pi" (punctuation, initial), "Pf" (punctuation, final), and "Po" (punctuation, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.ConnectorPunctuation"/>, <see cref="F:System.Globalization.UnicodeCategory.DashPunctuation"/>,
            <see cref="F:System.Globalization.UnicodeCategory.OpenPunctuation"/>, <see cref="F:System.Globalization.UnicodeCategory.ClosePunctuation"/>, <see cref="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation"/>,
            <see cref="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation"/>, and <see cref="F:System.Globalization.UnicodeCategory.OtherPunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.ConnectorPunctuation">
            <summary>
            Connector punctuation character that connects two characters. Signified by the Unicode designation "Pc" (punctuation, connector).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.ConnectorPunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.DashPunctuation">
            <summary>
            Dash or hyphen character. Signified by the Unicode designation "Pd" (punctuation, dash).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.DashPunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.OpenPunctuation">
            <summary>
            Opening character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Ps"
            (punctuation, open).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.OpenPunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.ClosePunctuation">
            <summary>
            Closing character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Pe"
            (punctuation, close).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.ClosePunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.InitialQuotePunctuation">
            <summary>
            Opening or initial quotation mark character. Signified by the Unicode designation "Pi" (punctuation, initial quote).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.FinalQuotePunctuation">
            <summary>
            Closing or final quotation mark character. Signified by the Unicode designation "Pf" (punctuation, final quote).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.OtherPunctuation">
            <summary>
            Punctuation character that is not a connector, a dash, open punctuation, close punctuation, an initial quote, or a final quote. Signified by the Unicode
            designation "Po" (punctuation, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.OtherPunctuation"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Symbol">
            <summary>
            Symbol character.  Signified by the Unicode designation "Sc" (symbol, currency), "Sk" (symbol, modifier), "Sm" (symbol, math), and "So"(symbol, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.CurrencySymbol"/>, <see cref="F:System.Globalization.UnicodeCategory.ModifierSymbol"/>, <see cref="F:System.Globalization.UnicodeCategory.MathSymbol"/>,
            and <see cref="F:System.Globalization.UnicodeCategory.OtherSymbol"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.CurrencySymbol">
            <summary>
            Currency symbol character. Signified by the Unicode designation "Sc" (symbol, currency).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.CurrencySymbol"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.ModifierSymbol">
            <summary>
            Modifier symbol character, which indicates modifications of surrounding characters. For example, the fraction slash indicates that the number to the left is the
            numerator and the number to the right is the denominator. The indicator is signified by the Unicode designation "Sk" (symbol, modifier).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.ModifierSymbol"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.MathSymbol">
            <summary>
            Mathematical symbol character, such as "+" or "= ". Signified by the Unicode designation "Sm" (symbol, math).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.MathSymbol"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.OtherSymbol">
            <summary>
            Symbol character that is not a mathematical symbol, a currency symbol or a modifier symbol. Signified by the Unicode designation "So" (symbol, other).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.OtherSymbol"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Separator">
            <summary>
            Separator character.  Signified by the Unicode designation "Zs" (separator, space), "Zl" (separator, line), and "Zp" (separator, paragraph).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.SpaceSeparator"/>, <see cref="F:System.Globalization.UnicodeCategory.LineSeparator"/>, and
            <see cref="F:System.Globalization.UnicodeCategory.ParagraphSeparator"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.SpaceSeparator">
            <summary>
            Space character, which has no glyph but is not a control or format character. Signified by the Unicode designation "Zs" (separator, space).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.SpaceSeparator"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.LineSeparator">
            <summary>
            Character that is used to separate lines of text. Signified by the Unicode designation "Zl" (separator, line).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.LineSeparator"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.ParagraphSeparator">
            <summary>
            Character used to separate paragraphs. Signified by the Unicode designation "Zp" (separator, paragraph).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.ParagraphSeparator"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Other">
            <summary>
            Other character.  Signified by the Unicode designation "Cc" (other, control), "Cf" (other, format), "Co" (other, private use), "Cs" (other, surrogate), and
            "Cn" (other, not assigned).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.Control"/>, <see cref="F:System.Globalization.UnicodeCategory.Format"/>, <see cref="F:System.Globalization.UnicodeCategory.PrivateUse"/>,
            <see cref="F:System.Globalization.UnicodeCategory.Surrogate"/>, and <see cref="F:System.Globalization.UnicodeCategory.OtherNotAssigned"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Control">
            <summary>
            Control code character, with a Unicode value of U+007F or in the range U+0000 through U+001F or U+0080 through U+009F. Signified by the Unicode designation "Cc"
            (other, control).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.Control"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Format">
            <summary>
            Format character that affects the layout of text or the operation of text processes, but is not normally rendered. Signified by the Unicode designation "Cf" (other, format).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.Format"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.PrivateUse">
            <summary>
            Private-use character, with a Unicode value in the range U+E000 through U+F8FF. Signified by the Unicode designation "Co" (other, private use).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.PrivateUse"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.Surrogate">
            <summary>
            High surrogate or a low surrogate character. Surrogate code values are in the range U+D800 through U+DFFF. Signified by the Unicode designation "Cs"
            (other, surrogate).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.Surrogate"/>.
            </remarks>
        </member>
        <member name="F:System.Globalization.UnicodeCategories.OtherNotAssigned">
            <summary>
            Character that is not assigned to any Unicode category. Signified by the Unicode designation "Cn" (other, not assigned).
            </summary>
            <remarks>
            Corresponds to <see cref="F:System.Globalization.UnicodeCategory.OtherNotAssigned"/>.
            </remarks>
        </member>
        <member name="T:System.Globalization.CharExtensions">
            <summary>
            Provides extension methods on <see cref="T:System.Char"/> values.
            </summary>
        </member>
        <member name="M:System.Globalization.CharExtensions.IsInUnicodeCategory(System.Char,System.Globalization.UnicodeCategories)">
            <summary>
            Returns a valud indicating whether the character is in any of the specified unicode categories.
            </summary>
            <param name="c">The character to check.</param>
            <param name="categories">A <see cref="T:System.Globalization.UnicodeCategories"/> value indicating the categories to include.</param>
            <returns><c>true</c> if the character is in at least one of the <see cref="T:System.Globalization.UnicodeCategory"/> values in the <paramref name="categories"/>
            parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Globalization.CharExtensions.ToUnicodeCategories(System.Globalization.UnicodeCategory)">
            <summary>
            Converts a <see cref="T:System.Globalization.UnicodeCategory"/> value into the corresponding <see cref="T:System.Globalization.UnicodeCategories"/> value.
            </summary>
            <param name="category">The <see cref="T:System.Globalization.UnicodeCategory"/> value to convert.</param>
            <returns>The <see cref="T:System.Globalization.UnicodeCategories"/> value corresponding to <paramref name="category"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="category"/> is not a valid <see cref="T:System.Globalization.UnicodeCategory"/>.</exception>
        </member>
        <member name="T:System.IO.BinaryReaderExtensions">
            <summary>
            Provides extension methods to the <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadDateTime(System.IO.BinaryReader)">
            <summary>
            Reads a <see cref="T:System.DateTime"/> from a byte array and advances the stream position by 8 bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use to read the <see cref="T:System.DateTime"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadTimeSpan(System.IO.BinaryReader)">
            <summary>
            Reads a <see cref="T:System.TimeSpan"/> from a byte array and advances the stream position by 8 bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use to read the <see cref="T:System.TimeSpan"/>.</param>
            <returns>A <see cref="T:System.TimeSpan"/> value.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadUInt128(System.IO.BinaryReader)">
            <summary>
            Reads a 16-byte unsigned integer from the current stream and advances the stream position by 16 bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use to read the <see cref="T:Microsoft.BI.Common.UInt128"/>.</param>
            <returns>A 16-byte unsigned integer value read from this stream.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadByteArray(System.IO.BinaryReader)">
            <summary>
            Reads a length-prefixed byte array from the buffer and advances the stream position by
            4 plus the number of bytes read.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use to read the byte array.</param>
            <returns>The byte array that was read.</returns>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.ReadGuid(System.IO.BinaryReader)">
            <summary>
            Reads a <see cref="T:System.Guid"/> from a byte array and advances the stream position by 16 bytes.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use to read the <see cref="T:System.Guid"/>.</param>
            <returns>A <see cref="T:System.Guid"/> value.</returns>
        </member>
        <member name="T:System.IO.BinaryWriterExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IO.BinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> to the array and advances the stream position by 8 bytes.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use to write the <see cref="T:System.DateTime"/>.</param>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> to the array and advances the stream position by 8 bytes.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use to write the <see cref="T:System.TimeSpan"/>.</param>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.WriteUInt128(System.IO.BinaryWriter,Microsoft.BI.Common.UInt128)">
            <summary>
            Writes a 16-byte unsigned integer to the current stream and advances the stream position by 16 bytes.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use to write the <see cref="T:Microsoft.BI.Common.UInt128"/>.</param>
            <param name="value">The 16-byte unsigned integer to write.</param>
            <remarks>
            Unfortunately, the method resolution rules in C# will choose <see cref="M:System.IO.BinaryWriter.Write(System.Single)"/>
            instead of this extension method if the name is <c>Write</c>.  Thus, in order to fully disambiguate
            and allow this method to be used as an extension method, the name is <c>WriteUInt128</c>.
            </remarks>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.WriteByteArray(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes a length-prefixed byte array to the buffer and advances the stream position by
            4 plus the number of bytes written.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use to write the byte array.</param>
            <param name="bytes">The byte array value to write.</param>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.WriteByteArray(System.IO.BinaryWriter,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a length-prefixed byte array to the buffer and advances the stream position by
            4 plus the number of bytes written.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use to write the byte array.</param>
            <param name="bytes">The byte array value to write.</param>
            <param name="index">The starting point in <paramref name="bytes"/> at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> to the array and advances the stream position by 16 bytes.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use to write the <see cref="T:System.Guid"/>.</param>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="T:System.IO.DirectoryJunction">
            <summary>
            Provides functions for creating, deleting, and dereferencing directory junctions.
            </summary>
        </member>
        <member name="M:System.IO.DirectoryJunction.Create(System.String,System.String)">
            <summary>
            Creates a directory junction at the specified path pointing to the specified target.
            </summary>
            <param name="path">The directory junction to create.</param>
            <param name="target">The name of the directory junction target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is null.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception creating the directory junction specified by
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:System.IO.DirectoryJunction.Dereference(System.String)">
            <summary>
            Dereference a directory junction, returning an absolute file path.
            </summary>
            <param name="path">The directory junction to dereference.</param>
            <returns>The directory junction's target.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
        </member>
        <member name="M:System.IO.DirectoryJunction.Delete(System.String)">
            <summary>
            Delete a directory junction.
            </summary>
            <param name="path">The directory junction to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method deletes the directory junction itself, not the junction's target.  To delete a junction's target, use
            <see cref="M:System.IO.DirectoryJunction.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                Directory.Delete(DirectoryJunction.Dereference(path));
                </code>
            </example>
            </remarks>
        </member>
        <member name="M:System.IO.DirectoryJunction.Exists(System.String)">
            <summary>
            Determines whether a directory junction exists.
            </summary>
            <param name="path">The directory junction to check.</param>
            <returns><c>true</c> if the specified path exists and is a directory junction; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method checks for the existence of the junction itself, not the junction's target.  To check the junction's target,
            use <see cref="M:System.IO.DirectoryJunction.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                if (Directory.Exists(DirectoryJunction.Dereference(path)))
                {
                    // some operation
                }
                </code>
            </example>
            <para>
            Note that there is no difference in the NTFS file system between a symbolic link and a directory junction as far
            as metadata is concerned; that is, both <see cref="M:System.IO.SymbolicLink.Exists(System.String)"/> and <see cref="M:System.IO.DirectoryJunction.Exists(System.String)"/>
            will return <c>true</c> for either a symbolic link or a directory junction.
            </para>
            </remarks>
        </member>
        <member name="T:System.IO.HardLink">
            <summary>
            Provides functions for creating and querying hard links.
            </summary>
        </member>
        <member name="M:System.IO.HardLink.Create(System.String,System.String)">
            <summary>
            Creates a hard link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The name the link to create.</param>
            <param name="target">The name of the existing file to which to create the link.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="target"/> specifies a file that does not exist.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception creating the link specified by
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:System.IO.HardLink.AreSameFile(System.String,System.String)">
            <summary>
            Gets a value indicating whether two links refer to the same underlying file.
            </summary>
            <param name="path1">The first link.</param>
            <param name="path2">The second link.</param>
            <returns><c>true</c> if <paramref name="path1"/> and <paramref name="path2"/> refer to the same underlying file; otherwise,
            <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path1"/> is <c>null</c> -or- <paramref name="path2"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path1"/> refers to a file that does not exist -or-
            <paramref name="path2"/> refers to a file that does not exist.</exception>
        </member>
        <member name="M:System.IO.HardLink.OpenHardLink(System.String)">
            <summary>
            Opens a file handle for the specified file for examining hard link target.
            </summary>
            <param name="path">The path to the file to open.</param>
            <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> for the requested file.</returns>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> points to a file that cannot be found.</exception>
        </member>
        <member name="M:System.IO.HardLink.GetFileId(System.String,Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Gets volume and file index information from an open file handle.
            </summary>
            <param name="filename">The name of the file.</param>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance pointing to the path specified by <paramref name="filename"/>.</param>
            <param name="volumeSerialNumber">When this function returns, this will contain the file's volume serial number.</param>
            <param name="fileIndexLow">When this function returns, this will contain the file's low-order file index.</param>
            <param name="fileIndexHigh">When this function returns, this will contain the file's high-order file index.</param>
        </member>
        <member name="T:System.IO.ReparsePoint">
            <summary>
            Provides functions for interacting with NTFS reparse points.
            </summary>
        </member>
        <member name="M:System.IO.ReparsePoint.Create(System.String,System.String)">
            <summary>
            Creates a symbolic link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception creating the link specified by
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:System.IO.ReparsePoint.Dereference(System.String)">
            <summary>
            Dereferences a reparse point in order to find its destination.
            </summary>
            <param name="path">The path to dereference.  May not necessarily be a reparse point.</param>
            <returns>The fully-dereferenced path.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception opening the link specified by <paramref name="path"/>.</exception>
        </member>
        <member name="M:System.IO.ReparsePoint.Exists(System.String)">
            <summary>
            Gets a value indicating whether the specified path refers to a reparse point or not.
            </summary>
            <param name="path">The path to check.</param>
            <returns><c>true</c> if the given path's final element is a reparse point; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="M:System.IO.ReparsePoint.AdjustPrivilegesForSymlink">
            <summary>
            Attempts to adjust current privileges so that symlinks can be interacted with.
            </summary>
        </member>
        <member name="T:System.IO.StreamExtensions">
            <summary>
            Provides extension methods for streams.
            </summary>
        </member>
        <member name="M:System.IO.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads all the bytes from the current stream and writes them to a destination stream,
            using a specified buffer size.
            </summary>
            <param name="source">The source stream.</param>
            <param name="destination">The stream that will contain the contents of the current stream.</param>
            <param name="bufferSize">The size of the buffer. This value must be greater than zero. The
            default size is 4096.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> is negative or zero.</exception>
            <exception cref="T:System.NotSupportedException">The current stream does not support reading, or
            <paramref name="destination"/> does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Either the current stream or <paramref name="destination"/> were
            closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)"/> method was called.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <remarks>This is copied straight out of the method with the same name in .NET 4.0.  This can be removed
            once we move to .NET 4.0.</remarks>
        </member>
        <member name="T:System.IO.SymbolicLink">
            <summary>
            Provides functions for creating, deleting, and dereferencing symbolic links.
            </summary>
            <summary>
            Provides static methods for the creation, deletion, and dereferencing of symbolic links.
            </summary>
        </member>
        <member name="M:System.IO.SymbolicLink.Create(System.String,System.String)">
            <summary>
            Creates a symbolic link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception creating the link specified by
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.Dereference(System.String)">
            <summary>
            Dereference a symbolic link, returning its target.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns>The symbolic link's target..</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.Delete(System.String)">
            <summary>
            Delete a symbolic link.
            </summary>
            <param name="path">The symbolic link to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method deletes the symbolic link itself, not the link's target.  To delete a link's target, use
            <see cref="M:System.IO.SymbolicLink.Dereference(System.String)"/>, like so:
            </para>
            <para>
            <example>
                <code>
                File.Delete(SymbolicLink.Dereference(path));
                </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.SymbolicLink.Exists(System.String)">
            <summary>
            Determines whether a symbolic link exists.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>true</c> if the specified path exists and is a symbolic link; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <remarks>
            <para>
            This method checks for the existence of the link itself, not the link's target.  To check the link's target,
            use <see cref="M:System.IO.SymbolicLink.Dereference(System.String)"/>, like so:
            </para>
            <example>
                <code>
                if (File.Exists(SymbolicLink.Dereference(path)))
                {
                    // some operation
                }
                </code>
            </example>
            <para>
            Note that there is no difference in the NTFS file system between a symbolic link and a directory junction as far
            as metadata is concerned; that is, both <see cref="M:System.IO.SymbolicLink.Exists(System.String)"/> and <see cref="M:System.IO.DirectoryJunction.Exists(System.String)"/>
            will return <c>true</c> for either a symbolic link or a directory junction.
            </para>
            </remarks>
        </member>
        <member name="T:System.IO.SymbolicLink.File">
            <summary>
            Provides static methods for the creation, deletion, and dereferencing of symbolic links to files.
            </summary>
        </member>
        <member name="M:System.IO.SymbolicLink.File.Create(System.String,System.String)">
            <summary>
            Creates a symbolic link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception opening the link specified by <paramref name="path"/>.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.File.Dereference(System.String)">
            <summary>
            Dereference a symbolic link, returning an absolute file path.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns>The fully-resolved, absolute file path that the symbolic link refers to.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.File.Delete(System.String)">
            <summary>
            Delete a symbolic link.
            </summary>
            <param name="path">The symbolic link to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.File.Exists(System.String)">
            <summary>
            Determines whether a symbolic link exists.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>true</c> if the specified path exists and is a symbolic link; otherwise, <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.IO.SymbolicLink.Directory">
            <summary>
            Provides static methods for the creation, deletion, and dereferencing of symbolic links to directories (also known
            as "directory junctions".
            </summary>
        </member>
        <member name="M:System.IO.SymbolicLink.Directory.Create(System.String,System.String)">
            <summary>
            Creates a symbolic link at the specified path pointing to the specified target.
            </summary>
            <param name="path">The symbolic link to create.</param>
            <param name="target">The name of the symbolic link target.  The target need not actually exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> -or- <paramref name="target"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> refers to a path that cannot be found.</exception>
            <exception cref="T:System.IO.IOException">There was an IO exception opening the link specified by <paramref name="path"/>.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.Directory.Dereference(System.String)">
            <summary>
            Dereference a symbolic link, returning an absolute file path.
            </summary>
            <param name="path">The symbolic link to dereference.</param>
            <returns>The fully-resolved, absolute file path that the symbolic link refers to.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.Directory.Delete(System.String)">
            <summary>
            Delete a symbolic link.
            </summary>
            <param name="path">The symbolic link to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.IO.SymbolicLink.Directory.Exists(System.String)">
            <summary>
            Determines whether a symbolic link exists.
            </summary>
            <param name="path">The symbolic link to check.</param>
            <returns><c>true</c> if the specified path exists and is a symbolic link; otherwise, <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.IO.NullStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> implementation on a null buffer.  All reads return no data, and all writes
            are discarded.
            </summary>
        </member>
        <member name="P:System.IO.NullStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:System.IO.NullStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:System.IO.NullStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:System.IO.NullStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:System.IO.NullStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:System.IO.NullStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:System.IO.NullStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position within the stream by the
            number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
            <paramref name="count"/>- 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read
            from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has
            been reached.</returns>
            <remarks>A <see cref="T:System.IO.NullStream"/> always returns no data when read.</remarks>
        </member>
        <member name="M:System.IO.NullStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used
            to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <remarks>Seeking is a no-op in a <see cref="T:System.IO.NullStream"/>.</remarks>
        </member>
        <member name="M:System.IO.NullStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>SetLength is a no-op in a <see cref="T:System.IO.NullStream"/>.</remarks>
        </member>
        <member name="M:System.IO.NullStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream.  All data is discarded.
            </summary>
            <param name="buffer">An array of bytes containing the data to write.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the
            current stream.</param>
            <param name="count">The number of bytes to be written to the stream.</param>
            <remarks>All data written to a <see cref="T:System.IO.NullStream"/> is discarded.</remarks>
        </member>
        <member name="T:System.IUpdatable">
            <summary>
            Provides methods for temporarily disabling expensive operations during a period of frequent changes.
            </summary>
            <remarks>
            <para>
            The <see cref="T:System.IUpdatable"/> interface represents the pattern often seen in UI applications where operations need to be performed
            on a UI element without redrawing in between each change.  This pattern can be extended to any sort of operation where expensive
            computations can be postponed while making frequent state changes to the underlying object until all changes have been completed.
            </para>
            </remarks>
        </member>
        <member name="P:System.IUpdatable.IsUpdating">
            <summary>
            Gets a value indicating whether the object is currently in an updating state.
            </summary>
            <remarks>
            <para>
            This property should be set to <c>true</c> by <see cref="M:System.IUpdatable.BeginUpdate"/> and set to <c>false</c> by <see cref="M:System.IUpdatable.EndUpdate"/>.
            </para>
            <para>
            If nested updates are supported, this property should be <c>true</c> until all updates have been ended, at which point it should
            be set back to <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:System.IUpdatable.BeginUpdate">
            <summary>
            Begins an update operation, disabling any per-change operations.
            </summary>
            <remarks>
            <para>
            This method should be called prior to any series of operations that would result in multiple redundant computations.  These
            computations will be postponed until <see cref="M:System.IUpdatable.EndUpdate"/> is called.
            </para>
            <para>
            The implementer may choose to allow or disallow nested calls to <see cref="M:System.IUpdatable.BeginUpdate"/> and <see cref="M:System.IUpdatable.EndUpdate"/>.  However, these
            methods must alway be called in pairs.
            </para>
            <para>
            If nested updating is not supported, then calling this method when the object is already updating should throw a 
            <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.IUpdatable.EndUpdate">
            <summary>
            Ends an update operation, re-enabling per-change operations and optionally updating state to reflect any changes that occurred
            during the update operation.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.IUpdatable.EndUpdate"/> is called without first calling <see cref="M:System.IUpdatable.BeginUpdate"/>.</exception>
            <remarks>
            <para>
            This method should be called after update operations have finished.  Optionally, any pending computations may be performed at this
            time.
            </para>
            <para>
            The implementer may choose to allow or disallow nested calls to <see cref="M:System.IUpdatable.BeginUpdate"/> and <see cref="M:System.IUpdatable.EndUpdate"/>.  However, these
            methods must alway be called in pairs.
            </para>
            </remarks>
        </member>
        <member name="T:System.Reflection.FieldOrPropertyInfo">
            <summary>
            Provides access to <see cref="T:System.Reflection.FieldInfo"/>  and <see cref="T:System.Reflection.PropertyInfo"/> objects via a uniform interface.
            </summary>
            <remarks>TODO - I don't like this class' name.</remarks>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Reflection.FieldOrPropertyInfo"/> class using the specified <see cref="T:System.Type"/> and member name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> in which to search for the member.</param>
            <param name="memberName">The name of the member to search for.</param>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Creates a new instance of the <see cref="T:System.Reflection.FieldOrPropertyInfo"/> class using the specified <see cref="T:System.Type"/>, member name,
            and <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> in which to search for the member.</param>
            <param name="memberName">The name of the member to search for.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use when resolving members.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>, -or- <paramref name="memberName"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new instance of the <see cref="T:System.Reflection.FieldOrPropertyInfo"/> class using the specified <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/> to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="field"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of the <see cref="T:System.Reflection.FieldOrPropertyInfo"/> class using the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Creates a new instance of the <see cref="T:System.Reflection.FieldOrPropertyInfo"/> class using the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="member"/> is not a <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.DeclaringType">
            <summary>
            Gets the class that declared this member.
            </summary>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this
            type are returned.</param>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise,
            <c>false</c>. This parameter is ignored for properties and events; see Remarks.</param>
            <returns>An array of custom attributes applied to this member, or an array with zero elements if no attributes
            assignable to <paramref name="attributeType"/> have been applied.</returns>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise,
            <c>false</c>. This parameter is ignored for properties and events; see Remarks.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements
            if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            Indicates whether one or more attributes of the specified type or of its derived types is applied to this member.
            </summary>
            <param name="attributeType">The type of custom attribute to search for. The search includes derived types.</param>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise,
            <c>false</c>. This parameter is ignored for properties and events; see Remarks.</param>
            <returns><c>true</c> if one or more instances of <paramref name="attributeType"/> or any of its derived types is
            applied to this member; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.MemberType">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberTypes"/> value indicating the type of the member — method, constructor, event, and so on.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.Name">
            <summary>
            Gets the name of the current member.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.ReflectedType">
            <summary>
            Gets the class object that was used to obtain this instance of <see cref="T:System.Reflection.FieldOrPropertyInfo"/>.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.FieldOrProperty">
            <summary>
            Returns either <see cref="F:System.Reflection.FieldOrPropertyInfo.Field"/> or <see cref="F:System.Reflection.FieldOrPropertyInfo.Property"/>, depending on which is defined.
            </summary>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.GetValue(System.Object)">
            <summary>
            Returns the value of a member supported by a given object.
            </summary>
            <param name="obj">The object whose member value will be returned.</param>
            <returns>An object containing the value reflected by this instance.</returns>
            <remarks>
            <para>
            If the member is static, <paramref name="obj"/> is ignored. For non-static fields, <paramref name="obj"/> should be an instance
            of a class that inherits or declares the member. Note that the return type of <see cref="M:System.Reflection.FieldOrPropertyInfo.GetValue(System.Object)"/> is <see cref="T:System.Object"/>.
            For example, if the field holds a <see cref="T:System.Boolean"/> primitive value, an instance of <see cref="T:System.Object"/> with the
            appropriate <see cref="T:System.Boolean"/> value is returned. Before returning the value, <see cref="M:System.Reflection.FieldOrPropertyInfo.GetValue(System.Object)"/> checks to see if the
            user has access permission.
            </para>
            <para>
            This method can be used to access a property that does not have indexed values.  It will not work if the property in question
            required indexes.
            </para>
            </remarks>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.IsInitOnly">
            <summary>
            Gets a value indicating whether the member can only be set in the body of the constructor.
            </summary>
            <remarks>
            <para>
            If the returned value is <c>true</c>, the member can only be initialized, and is read-only thereafter.
            </para>
            <para>
            The <see cref="P:System.Reflection.FieldOrPropertyInfo.IsInitOnly"/> property is set when the <see cref="F:System.Reflection.FieldAttributes.InitOnly"/> attribute is set.  It is always
            <c>false</c> for properties.
            </para>
            </remarks>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.IsLiteral">
            <summary>
            Gets a value indicating whether the value is written at compile time and cannot be changed.
            </summary>
            <remarks>
            <para>
            If the returned value is <c>true</c>, the member cannot be changed and is constant.
            </para>
            <para>
            The <see cref="P:System.Reflection.FieldOrPropertyInfo.IsLiteral"/> property is set when the <see cref="F:System.Reflection.FieldAttributes.Literal"/> attribute is set.  It is always
            <c>false</c> for properties.
            </para>
            </remarks>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.IsSpecialName">
            <summary>
            Gets a value indicating whether the corresponding <see cref="F:System.Reflection.FieldAttributes.SpecialName"/> attribute is set in the
            <see cref="P:System.Reflection.FieldInfo.Attributes"/> enumerator.
            </summary>
            <remarks>
            <para>
            Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples
            of names that might require special treatment by some compilers.
            </para>
            </remarks>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.IsStatic">
            <summary>
            Gets a value indicating whether the member is static.
            </summary>
            <remarks>
            <para>
            When a field is static, one copy of the field is shared by all instances of the type.
            </para>
            <para>
            The <see cref="P:System.Reflection.FieldOrPropertyInfo.IsStatic"/> property is set when the <see cref="F:System.Reflection.FieldAttributes.Static"/> attribute is set (for fields), or when
            one of the property setter or getter methods is static (for properties).
            </para>
            </remarks>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the member supported by the given object.
            </summary>
            <param name="obj">The object whose member value will be set.</param>
            <param name="value">The value to assign to the member.</param>
            <remarks>
            <para>
            This method will assign <paramref name="value"/> to the member reflected by this instance on object <paramref name="obj"/>.
            If the member is static, <paramref name="obj"/> will be ignored. For non-static members, <paramref name="obj"/> should be an
            instance of a class that inherits or declares the member. The new value is passed as an <see cref="T:System.Object"/>. For example, if
            the member's type is <see cref="T:System.Boolean"/>, an instance of <see cref="T:System.Object"/> with the appropriate <see cref="T:System.Boolean"/>value
            is passed. Before setting the value, <see cref="M:System.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object)"/> checks to see if the user has access permission.
            </para>
            </remarks>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            Sets the value of the member supported by the given object.
            </summary>
            <param name="obj">The object whose member value will be set.</param>
            <param name="value">The value to assign to the member.</param>
            <param name="invokeAttr">A field of <see cref="T:System.Reflection.Binder"/> that specifies the type of binding that is desired.</param>
            <param name="binder">A set of properties that enuables the binding, coercion of argument types, and invocation of members
            through reflection.  If <paramref name="binder"/> is <c>null</c>, then <see cref="P:System.Type.DefaultBinder"/> is used.</param>
            <param name="culture">The software preferences of a particular culture.</param>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the member can be read.
            </summary>
            <remarks>
            <para>
            If the member is a property and does not have a <c>get</c> accessor, it cannot be read.  If the member is a field, it
            can always be read.
            </para>
            </remarks>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the member can be written to.
            </summary>
            <remarks>
            <para>
            If the member is a property and does not have a <c>set</c> accessor, it cannot be written to.  If the member is a field, it
            can always be written to.
            </para>
            </remarks>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.GetIndexParameters">
            <summary>
            Returns an array of all the index parameters for the member.
            </summary>
            <returns>An array of type <see cref="T:System.Reflection.ParameterInfo"/> containing the parameters for the indexes.  If the member is not a property
            or is not indexed, the array has 0 (zero) elements.</returns>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Returns the member value of a specified object that has the specified binding, index, and culture-specific information.
            </summary>
            <param name="obj">The object whose member value will be returned.</param>
            <param name="invokeAttr">A bitwise combination of the following enumeration members that specify the invocation attribute:
            <see cref="F:System.Reflection.BindingFlags.InvokeMethod"/>, <see cref="F:System.Reflection.BindingFlags.CreateInstance"/>, <see cref="F:System.Reflection.BindingFlags.Static"/>,
            <see cref="F:System.Reflection.BindingFlags.GetField"/>, <see cref="F:System.Reflection.BindingFlags.SetField"/>, <see cref="F:System.Reflection.BindingFlags.GetProperty"/>, and
            <see cref="F:System.Reflection.BindingFlags.SetProperty"/>.</param>
            <param name="binder">An object that enables the binding, coercion of argument types, invocaiton of members, and retrieval
            of <see cref="T:System.Reflection.MemberInfo"/> objects through reflection.  If <paramref name="binder"/> is <c>null</c>, the default binder
            is used.</param>
            <param name="index">Optional index values for indexed members.  This value should be <c>null</c> for fields and non-indexed
            properties.</param>
            <param name="culture">The culture for which the resource is to be localized.  If the resource is not localized for this
            culture, the <see cref="P:System.Globalization.CultureInfo.Parent"/> property will be called successively in search of a match.</param>
            <returns>The member value for the specified object.</returns>
            <remarks>
            <para>
            To determine whether a member is indexed, use the <see cref="M:System.Reflection.FieldOrPropertyInfo.GetIndexParameters"/> method. If the resulting array has 0 (zero)
            elements, the member is not indexed.
            </para>
            </remarks>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.GetValue(System.Object,System.Object[])">
            <summary>
            Returns the member value of a specified object with optional values for indexed properties.
            </summary>
            <param name="obj">The object whose member value will be returned.</param>
            <param name="index">Optional index values for indexed properties.  This value should be <c>null</c> for fields or non-indexed
            properties.</param>
            <returns>The member value of the specified object.</returns>
            <remarks>
            <para>
            To determine whether a member is indexed, use the <see cref="M:System.Reflection.FieldOrPropertyInfo.GetIndexParameters"/> method. If the resulting array has 0 (zero)
            elements, the member is not indexed.
            </para>
            </remarks>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Sets the member value for a specified object that has the specified binding, index, and culture-specific information.
            </summary>
            <param name="obj">The object whose member value will be set.</param>
            <param name="value">The new member value.</param>
            <param name="invokeAttr">A bitwise combination of the following enumeration members that specify the invocation attribute:
            <see cref="F:System.Reflection.BindingFlags.InvokeMethod"/>, <see cref="F:System.Reflection.BindingFlags.CreateInstance"/>, <see cref="F:System.Reflection.BindingFlags.Static"/>,
            <see cref="F:System.Reflection.BindingFlags.GetField"/>, <see cref="F:System.Reflection.BindingFlags.SetField"/>, <see cref="F:System.Reflection.BindingFlags.GetProperty"/>, and
            <see cref="F:System.Reflection.BindingFlags.SetProperty"/>.</param>
            <param name="binder">An object that enables the binding, coercion of argument types, invocaiton of members, and retrieval
            of <see cref="T:System.Reflection.MemberInfo"/> objects through reflection.  If <paramref name="binder"/> is <c>null</c>, the default binder
            is used.</param>
            <param name="index">Optional index values for indexed members.  This value should be <c>null</c> for fields and non-indexed
            properties.</param>
            <param name="culture">The culture for which the resource is to be localized.  If the resource is not localized for this
            culture, the <see cref="P:System.Globalization.CultureInfo.Parent"/> property will be called successively in search of a match.</param>
            <remarks>
            <para>
            If this <see cref="T:System.Reflection.FieldOrPropertyInfo"/> object is a value type and <paramref name="value"/> is <c>null</c>, then the member
            will be set to the default value for that type.
            </para>
            <para>
            To determine whether a member is indexed, use the <see cref="M:System.Reflection.FieldOrPropertyInfo.GetIndexParameters"/> method. If the resulting array has 0 (zero)
            elements, the member is not indexed.
            </para>
            </remarks>
        </member>
        <member name="M:System.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            Sets the member value for a specified object that has the specified index.
            </summary>
            <param name="obj">The object whose member value will be set.</param>
            <param name="value">The new member value.</param>
            <param name="index">Optional index values for indexed members.  This value should be <c>null</c> for fields and non-indexed
            properties.</param>
            <remarks>
            <para>
            If this <see cref="T:System.Reflection.FieldOrPropertyInfo"/> object is a value type and <paramref name="value"/> is <c>null</c>, then the member
            will be set to the default value for that type.
            </para>
            <para>
            To determine whether a member is indexed, use the <see cref="M:System.Reflection.FieldOrPropertyInfo.GetIndexParameters"/> method. If the resulting array has 0 (zero)
            elements, the member is not indexed.
            </para>
            </remarks>
        </member>
        <member name="P:System.Reflection.FieldOrPropertyInfo.MemberReturnType">
            <summary>
            Gets the type of the member.
            </summary>
        </member>
        <member name="F:System.Reflection.FieldOrPropertyInfo.Field">
            <summary>
            The underlying <see cref="T:System.Reflection.FieldInfo"/>, if this represents a field.
            </summary>
            <remarks>
            <para>
            Exactly one of <see cref="F:System.Reflection.FieldOrPropertyInfo.Field"/> and <see cref="F:System.Reflection.FieldOrPropertyInfo.Property"/> will be non-<c>null</c> for a given instance
            of <see cref="T:System.Reflection.FieldOrPropertyInfo"/>.
            </para>
            </remarks>
            <seealso cref="F:System.Reflection.FieldOrPropertyInfo.Property"/>
        </member>
        <member name="F:System.Reflection.FieldOrPropertyInfo.Property">
            <summary>
            The underlying <see cref="T:System.Reflection.PropertyInfo"/>, if this represents a property.
            </summary>
            <remarks>
            <para>
            Exactly one of <see cref="F:System.Reflection.FieldOrPropertyInfo.Field"/> and <see cref="F:System.Reflection.FieldOrPropertyInfo.Property"/> will be non-<c>null</c> for a given instance
            of <see cref="T:System.Reflection.FieldOrPropertyInfo"/>.
            </para>
            </remarks>
            <seealso cref="F:System.Reflection.FieldOrPropertyInfo.Field"/>
        </member>
        <member name="F:System.Reflection.FieldOrPropertyInfo.DEFAULT_FLAGS">
            <summary>
            The default <see cref="T:System.Reflection.BindingFlags"/> to use when resolving members unless otherwise specified.
            </summary>
        </member>
        <member name="T:System.Reflection.MemberFlags">
            <summary>
            Contains values that indicate the type of members to return in a reflection operation.
            </summary>
        </member>
        <member name="F:System.Reflection.MemberFlags.None">
            <summary>
            No members.
            </summary>
        </member>
        <member name="F:System.Reflection.MemberFlags.Fields">
            <summary>
            Fields.
            </summary>
        </member>
        <member name="F:System.Reflection.MemberFlags.Properties">
            <summary>
            Properties.
            </summary>
        </member>
        <member name="F:System.Reflection.MemberFlags.Methods">
            <summary>
            Methods.
            </summary>
        </member>
        <member name="F:System.Reflection.MemberFlags.NestedTypes">
            <summary>
            Nested types.
            </summary>
        </member>
        <member name="F:System.Reflection.MemberFlags.All">
            <summary>
            All member types.
            </summary>
        </member>
        <member name="T:System.GAC.AssemblyCache">
            <summary>
            Class for interacting with the Windows Global Assembly Cache (GAC).
            </summary>
        </member>
        <member name="P:System.GAC.AssemblyCache.Assemblies">
            <summary>
            An enumerable collection of all assemblies in the GAC.
            </summary>
            <remarks>This value is cached for performance reasons.  If the contents of the GAC change, call <see cref="M:System.GAC.AssemblyCache.Refresh"/>
            in order to notice these changes.</remarks>
        </member>
        <member name="M:System.GAC.AssemblyCache.FindMatchingAssemblies(System.String)">
            <summary>
            Return an enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified name.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>An enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified name.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.FindMatchingAssemblies(System.Version)">
            <summary>
            Return an enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified <see cref="T:System.Version"/>.
            </summary>
            <param name="version">The version to search for.</param>
            <returns>An enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified <see cref="T:System.Version"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.FindMatchingAssemblies(System.Globalization.CultureInfo)">
            <summary>
            Return an enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="culture">The culture info to search for.</param>
            <returns>An enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified <see cref="T:System.Globalization.CultureInfo"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.FindMatchingAssemblies(System.Byte[])">
            <summary>
            Return an enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects with the specified public key token.
            </summary>
            <param name="publicKeyToken">The public key token to search for.</param>
            <returns>An enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified public key token.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.FindMatchingAssemblies(System.Reflection.AssemblyName)">
            <summary>
            Return an enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching another <see cref="T:System.Reflection.AssemblyName"/>.
            </summary>
            <param name="template">The <see cref="T:System.Reflection.AssemblyName"/> template to use when searching.</param>
            <returns>An enumerable collection of <see cref="T:System.Reflection.AssemblyName"/> objects matching the specified <see cref="T:System.Reflection.AssemblyName"/>.</returns>
            <remarks>
            The following fields are compared between <paramref name="template"/> and each candidate <see cref="T:System.Reflection.AssemblyName"/>
            <list type="bullet">
              <item><description><see cref="P:System.Reflection.AssemblyName.Name"/></description></item>
              <item><description><see cref="P:System.Reflection.AssemblyName.Version"/></description></item>
              <item><description><see cref="P:System.Reflection.AssemblyName.CultureInfo"/></description></item>
            </list>
            Additionally, the public key tokens are compared.  For all comparisons, if the template field is not set, it is ignored.
            </remarks>
        </member>
        <member name="M:System.GAC.AssemblyCache.Refresh">
            <summary>
            Refreshes the assembly cache, rescanning all DLLs.
            </summary>
        </member>
        <member name="M:System.GAC.AssemblyCache.IsMatch(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Compares a template <see cref="T:System.Reflection.AssemblyName"/> against a candidate <see cref="T:System.Reflection.AssemblyName"/> and returns if they are the same.
            </summary>
            <param name="template">The template <see cref="T:System.Reflection.AssemblyName"/>.</param>
            <param name="candidate">The candidate <see cref="T:System.Reflection.AssemblyName"/>.</param>
            <returns>true if <paramref name="candidate"/> matches <paramref name="template"/>; otherwise, false.</returns>
            <remarks>This method performs the comparison described in <see cref="M:System.GAC.AssemblyCache.FindMatchingAssemblies(System.Reflection.AssemblyName)"/>; specifically, only
            some fields are checked, and any null values in <paramref name="template"/> cause that check to be ignored.</remarks>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetAssemblyName(Microsoft.Win32.IAssemblyName)">
            <summary>
            Creates an <see cref="T:System.Reflection.AssemblyName"/> from an <see cref="T:Microsoft.Win32.IAssemblyName"/>.
            </summary>
            <param name="nameRef">The <see cref="T:Microsoft.Win32.IAssemblyName"/> from which to create the <see cref="T:System.Reflection.AssemblyName"/></param>
            <returns>An equivalent <see cref="T:System.Reflection.AssemblyName"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetName(Microsoft.Win32.IAssemblyName)">
            <summary>
            Get the name of an <see cref="T:Microsoft.Win32.IAssemblyName"/>.
            </summary>
            <param name="name">The <see cref="T:Microsoft.Win32.IAssemblyName"/> to get the name of.</param>
            <returns>The name of <paramref name="name"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetVersion(Microsoft.Win32.IAssemblyName)">
            <summary>
            Get the <see cref="T:System.Version"/> of an <see cref="T:Microsoft.Win32.IAssemblyName"/>.
            </summary>
            <param name="name">The <see cref="T:Microsoft.Win32.IAssemblyName"/> to get the version of.</param>
            <returns>The <see cref="T:System.Version"/> of <paramref name="name"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetPublicKeyToken(Microsoft.Win32.IAssemblyName)">
            <summary>
            Get the public key token of an <see cref="T:Microsoft.Win32.IAssemblyName"/>.
            </summary>
            <param name="name">The <see cref="T:Microsoft.Win32.IAssemblyName"/> to get the public key token of.</param>
            <returns>The public key token of <paramref name="name"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetPublicKey(Microsoft.Win32.IAssemblyName)">
            <summary>
            Get the public key of an <see cref="T:Microsoft.Win32.IAssemblyName"/>.
            </summary>
            <param name="name">The <see cref="T:Microsoft.Win32.IAssemblyName"/> to get the public key of.</param>
            <returns>The public key of <paramref name="name"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetCulture(Microsoft.Win32.IAssemblyName)">
            <summary>
            Get the <see cref="T:System.Globalization.CultureInfo"/> of an <see cref="T:Microsoft.Win32.IAssemblyName"/>.
            </summary>
            <param name="name">The <see cref="T:Microsoft.Win32.IAssemblyName"/> to get the public key of.</param>
            <returns>The <see cref="T:System.Globalization.CultureInfo"/> of <paramref name="name"/>.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateGACEnum">
            <summary>
            Create an <see cref="T:Microsoft.Win32.IAssemblyEnum"/> from the GAC.
            </summary>
            <returns>An <see cref="T:Microsoft.Win32.IAssemblyEnum"/> on the GAC.</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetNextAssembly(Microsoft.Win32.IAssemblyEnum,Microsoft.Win32.IAssemblyName@)">
            <summary>
            Get the next assembly name in the current enumerator or fail.
            </summary>
            <param name="enumerator">The <see cref="T:Microsoft.Win32.IAssemblyEnum"/> enumerator to use.</param>
            <param name="name">When this method completes, this will contain the next <see cref="T:Microsoft.Win32.IAssemblyName"/> in <paramref name="enumerator"/>.</param>
            <returns>0 if the enumeration is not at its end.</returns>
        </member>
        <member name="T:QUT.GplexBuffers.StringBuffer">
            <summary>
            This class reads characters from a single string as
            required, for example, by Visual Studio language services
            </summary>
        </member>
        <member name="M:QUT.GplexBuffers.BuildBuffer.Mark">
            <summary>
            Marks a conservative lower bound for the buffer,
            allowing space to be reclaimed.  If an application 
            needs to call GetString at arbitrary past locations 
            in the input stream, Mark() is not called.
            </summary>
        </member>
        <member name="M:QUT.GplexBuffers.BuildBuffer.Read">
            <summary>
            Read returns the ordinal number of the next char, or 
            EOF (-1) for an end of stream.  Note that the next
            code point may require *two* calls of Read().
            </summary>
            <returns></returns>
        </member>
        <member name="T:QUT.GplexBuffers.Guesser">
            <summary>
            This class provides a simple finite state automaton that
            scans the file looking for (1) valid UTF-8 byte patterns,
            (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
            The method then guesses whether it is UTF-8 or maybe some 
            local machine default encoding.  This works well for the
            various Latin encodings.
            </summary>
        </member>
        <member name="T:QUT.Gppg.ShiftReduceParser`2">
            <summary>
            Abstract class for GPPG shift-reduce parsers.
            Parsers generated by GPPG derive from this base
            class, overriding the abstract Initialize() and
            DoAction() methods.
            </summary>
            <typeparam name="TValue">Semantic value type</typeparam>
            <typeparam name="TSpan">Location type</typeparam>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.Scanner">
            <summary>
            The abstract scanner for this parser.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.#ctor(QUT.Gppg.AbstractScanner{`0,`1})">
            <summary>
            Constructor for base class
            </summary>
            <param name="scanner">Scanner instance for this parser</param>
        </member>
        <member name="F:QUT.Gppg.ShiftReduceParser`2.CurrentSemanticValue">
            <summary>
            The current value of the "$$" symbolic variable in the parser
            </summary>
        </member>
        <member name="F:QUT.Gppg.ShiftReduceParser`2.CurrentLocationSpan">
            <summary>
            The current value of the "@$" symbolic variable in the parser
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.ValueStack">
            <summary>
            The stack of semantic value (YYSTYPE) values.
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.LocationStack">
            <summary>
            The stack of location value (YYLTYPE) varlues.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitRules(QUT.Gppg.Rule[])">
            <summary>
            Initialization method to allow derived classes
            to insert the rule list into this base class.
            </summary>
            <param name="rules">The array of Rule objects</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitStates(QUT.Gppg.State[])">
            <summary>
            Initialization method to allow derived classes to
            insert the states table into this base class.
            </summary>
            <param name="states">The pre-initialized states table</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitStateTable(System.Int32)">
            <summary>
            OBSOLETE FOR VERSION 1.4.0
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitSpecialTokens(System.Int32,System.Int32)">
            <summary>
            Initialization method to allow derived classes
            to insert the special value for the error and EOF tokens.
            </summary>
            <param name="err">The error state ordinal</param>
            <param name="end">The EOF stat ordinal</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitNonTerminals(System.String[])">
            <summary>
            Initialization method to allow derived classes to
            insert the non-terminal symbol names into this base class.
            </summary>
            <param name="names">Non-terminal symbol names</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYAccept">
            <summary>
            Force parser to terminate, returning "true"
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYAbort">
            <summary>
            Force parser to terminate, returning "false"
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYError">
            <summary>
            Force parser to terminate, returning
            "false" if error recovery fails.
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.YYRecovering">
            <summary>
            Check if parser in error recovery state.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.Initialize">
            <summary>
            Abstract base method. ShiftReduceParser calls this
            to initialize the base class data structures.  Concrete
            parser classes must override this method.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.Parse">
            <summary>
            Main entry point of the Shift-Reduce Parser.
            </summary>
            <returns>True if parse succeeds, else false for
            unrecoverable errors</returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.DoAction(System.Int32)">
            <summary>
            Execute the selected action from array.
            Must be overriden in derived classes.
            </summary>
            <param name="actionNumber">Index of the action to perform</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.yyclearin">
            <summary>
            Traditional YACC method.  Discards the next input token.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.yyerrok">
            <summary>
            Tradional YACC method. Clear the "recovering" flag.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.AddState(System.Int32,QUT.Gppg.State)">
            <summary>
            OBSOLETE FOR VERSION 1.4.0
            Method used by derived types to insert new
            state instances in the "states" array.
            </summary>
            <param name="stateNumber">index of the state</param>
            <param name="state">data for the state</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.TerminalToString(System.Int32)">
            <summary>
            Abstract state class naming terminal symbols.
            This is overridden by derived classes with the
            name (or alias) to be used in error messages.
            </summary>
            <param name="terminal">The terminal ordinal</param>
            <returns></returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.CharToString(System.Char)">
            <summary>
            Return text representation of argument character
            </summary>
            <param name="input">The character to convert</param>
            <returns>String representation of the character</returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.HasTransition(System.Int32,System.Int32)">
            <summary>
            Returns whether the current state accepts the given token.
            </summary>
            <param name="token">The token to check for.</param>
            <param name="depth">The depth in the state stack at which to look for the transition.</param>
            <returns><c>true</c> if there exists a state to transition to in the current parser table; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.HasTransition(System.Int32,System.String,System.Int32)">
            <summary>
            Returns whether the current state accepts the given token.
            </summary>
            <param name="token">The token to check for.</param>
            <param name="name">The name of the state to check for.</param>
            <param name="depth">The depth in the state stack at which to look for the transition.</param>
            <returns><c>true</c> if there exists a state transition to <paramref name="token"/> with name <paramref name="name"/> at the
            depth specified by <paramref name="depth"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:QUT.Gppg.IMerge`1">
            <summary>
            Classes implementing this interface must supply a
            method that merges two location objects to return
            a new object of the same type.
            GPPG-generated parsers have the default location
            action equivalent to "@$ = @1.Merge(@N);" where N
            is the right-hand-side length of the production.
            </summary>
            <typeparam name="TSpan">The Location type</typeparam>
        </member>
        <member name="M:QUT.Gppg.IMerge`1.Merge(`0)">
            <summary>
            Interface method that creates a location object from
            the current and last object.  Typically used to create
            a location object extending from the start of the @1
            object to the end of the @N object.
            </summary>
            <param name="last">The lexically last object to merge</param>
            <returns>The merged location object</returns>
        </member>
        <member name="T:QUT.Gppg.LexLocation">
            <summary>
            This is the default class that carries location
            information from the scanner to the parser.
            If you don't declare "%YYLTYPE Foo" the parser
            will expect to deal with this type.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.StartLine">
            <summary>
            The line at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.StartColumn">
            <summary>
            The column at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.EndLine">
            <summary>
            The line on which the text span ends.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.EndColumn">
            <summary>
            The column of the first character
            beyond the end of the text span.
            </summary>
        </member>
        <member name="M:QUT.Gppg.LexLocation.#ctor">
            <summary>
            Default no-arg constructor.
            </summary>
        </member>
        <member name="M:QUT.Gppg.LexLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for text-span with given start and end.
            </summary>
            <param name="sl">start line</param>
            <param name="sc">start column</param>
            <param name="el">end line </param>
            <param name="ec">end column</param>
        </member>
        <member name="M:QUT.Gppg.LexLocation.Merge(QUT.Gppg.LexLocation)">
            <summary>
            Create a text location which spans from the 
            start of "this" to the end of the argument "last"
            </summary>
            <param name="last">The last location in the result span</param>
            <returns>The merged span</returns>
        </member>
        <member name="T:QUT.Gppg.AbstractScanner`2">
            <summary>
            Abstract scanner class that GPPG expects its scanners to 
            extend.
            </summary>
            <typeparam name="TValue">Semantic value type YYSTYPE</typeparam>
            <typeparam name="TSpan">Source location type YYLTYPE</typeparam>
        </member>
        <member name="F:QUT.Gppg.AbstractScanner`2.yylval">
            <summary>
            Lexical value optionally set by the scanner. The value
            is of the %YYSTYPE type declared in the parser spec.
            </summary>
        </member>
        <member name="P:QUT.Gppg.AbstractScanner`2.yylloc">
            <summary>
            Current scanner location property. The value is of the
            type declared by %YYLTYPE in the parser specification.
            </summary>
        </member>
        <member name="M:QUT.Gppg.AbstractScanner`2.yylex">
            <summary>
            Main call point for LEX-like scanners.  Returns an int
            corresponding to the token recognized by the scanner.
            </summary>
            <returns>An int corresponding to the token</returns>
        </member>
        <member name="M:QUT.Gppg.AbstractScanner`2.yyerror(System.String,System.Object[])">
            <summary>
            Traditional error reporting provided by LEX-like scanners
            to their YACC-like clients.
            </summary>
            <param name="format">Message format string</param>
            <param name="args">Optional array of args</param>
        </member>
        <member name="T:QUT.Gppg.State">
            <summary>
            Encapsulated state for the parser.
            Opaque to users, visible to the tool-generated code.
            </summary>
        </member>
        <member name="F:QUT.Gppg.State.number">
            <summary>
            The number of states in the automaton.
            </summary>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32[],System.Int32[])">
            <summary>
            State transition data for this state. Pairs of elements of the 
            goto array associate symbol ordinals with next state indices.
            The actions array is passed to another constructor. 
            </summary>
            <param name="actions">The action list</param>c
            <param name="goToList">Next state data</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32[])">
            <summary>
            Action data for this state. Pairs of elements of the 
            action array associate action ordinals with each of
            those symbols that have actions in the current state.
            </summary>
            <param name="actions">The action array</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32)">
            <summary>
            Set the default action for this state.
            </summary>
            <param name="defaultAction">Ordinal of the default action</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32,System.Int32[])">
            <summary>
            Set the default action and the state transition table.
            </summary>
            <param name="defaultAction">The default action</param>
            <param name="goToList">Transitions from this state</param>
        </member>
        <member name="T:QUT.Gppg.Rule">
            <summary>
            Rule representation at runtime.
            </summary>
        </member>
        <member name="M:QUT.Gppg.Rule.#ctor(System.Int32,System.Int32[])">
            <summary>
            Rule constructor.  This holds the ordinal of
            the left hand side symbol, and the list of
            right hand side symbols, in lexical order.
            </summary>
            <param name="left">The LHS non-terminal</param>
            <param name="right">The RHS symbols, in lexical order</param>
        </member>
        <member name="T:QUT.Gppg.PushdownPrefixState`1">
            <summary>
            Stack utility for the shift-reduce parser.
            GPPG parsers have three instances:
            (1) The parser state stack, T = QUT.Gppg.State,
            (2) The semantic value stack, T = TValue,
            (3) The location stack, T = TSpan.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:QUT.Gppg.PushdownPrefixState`1.Item(System.Int32)">
            <summary>
            Indexer for values of the stack below the top.
            </summary>
            <param name="index">index of the element, starting from the bottom</param>
            <returns>the selected element</returns>
        </member>
        <member name="P:QUT.Gppg.PushdownPrefixState`1.Depth">
            <summary>
            The current depth of the stack.
            </summary>
        </member>
        <member name="M:QUT.Gppg.PushdownPrefixState`1.Clear">
            <summary>
            Clear the current stack.
            </summary>
        </member>
    </members>
</doc>
